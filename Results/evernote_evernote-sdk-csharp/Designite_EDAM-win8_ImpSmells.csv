Implementation smell,Namespace,Class,File,Method,Description
Long Method,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The method has 111 lines of code.
Long Method,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The method has 109 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The method has 220 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The method has 185 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The method has 108 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The method has 111 lines of code.
Long Method,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The method has 178 lines of code.
Long Method,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The method has 191 lines of code.
Long Method,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The method has 151 lines of code.
Long Method,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The method has 145 lines of code.
Long Method,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The method has 162 lines of code.
Long Method,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The method has 166 lines of code.
Long Method,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The method has 138 lines of code.
Long Method,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The method has 131 lines of code.
Long Method,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The method has 157 lines of code.
Long Method,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The method has 167 lines of code.
Long Method,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The method has 105 lines of code.
Long Method,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The method has 103 lines of code.
Long Method,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The method has 102 lines of code.
Long Method,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The method has 103 lines of code.
Long Method,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The method has 109 lines of code.
Long Method,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The method has 111 lines of code.
Long Method,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The method has 126 lines of code.
Long Method,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The method has 127 lines of code.
Long Method,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The method has 252 lines of code.
Long Method,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The method has 267 lines of code.
Long Method,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The method has 108 lines of code.
Long Method,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The method has 111 lines of code.
Complex Method,Evernote.EDAM.Error,EDAMNotFoundException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Error,EDAMUserException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,ClientUsageMetrics,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\ClientUsageMetrics.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,Cyclomatic complexity of the method is 33
Complex Method,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,Cyclomatic complexity of the method is 39
Complex Method,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,Cyclomatic complexity of the method is 55
Complex Method,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,Cyclomatic complexity of the method is 49
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,Cyclomatic complexity of the method is 83
Complex Method,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,Cyclomatic complexity of the method is 37
Complex Method,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,Cyclomatic complexity of the method is 57
Complex Method,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,Cyclomatic complexity of the method is 97
Complex Method,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,Cyclomatic complexity of the method is 24
Complex Method,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Type,LazyMap,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,Cyclomatic complexity of the method is 49
Complex Method,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,Cyclomatic complexity of the method is 71
Complex Method,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,Cyclomatic complexity of the method is 22
Complex Method,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,Cyclomatic complexity of the method is 83
Complex Method,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,Cyclomatic complexity of the method is 22
Complex Method,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,Cyclomatic complexity of the method is 65
Complex Method,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,Cyclomatic complexity of the method is 19
Complex Method,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,Cyclomatic complexity of the method is 85
Complex Method,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,Cyclomatic complexity of the method is 49
Complex Method,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,Cyclomatic complexity of the method is 53
Complex Method,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,Cyclomatic complexity of the method is 53
Complex Method,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,Cyclomatic complexity of the method is 57
Complex Method,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,Evernote.EDAM.Type,SharedNotebookRecipientSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,Cyclomatic complexity of the method is 21
Complex Method,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,Cyclomatic complexity of the method is 65
Complex Method,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,Cyclomatic complexity of the method is 16
Complex Method,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,Cyclomatic complexity of the method is 133
Complex Method,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,Cyclomatic complexity of the method is 36
Complex Method,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,Cyclomatic complexity of the method is 41
Complex Method,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.UserStore,BootstrapInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapInfo.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.UserStore,BootstrapProfile,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,Cyclomatic complexity of the method is 57
Complex Method,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,Cyclomatic complexity of the method is 29
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Identifier = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Key = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Identifier = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Key = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Write,The following statement contains a magic number: if (Key != null && __isset.key) {  	field.Name = "key";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Key);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			RateLimitDuration = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			RateLimitDuration = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		RateLimitDuration = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		RateLimitDuration = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: if (Message != null && __isset.message) {  	field.Name = "message";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Message);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: if (__isset.rateLimitDuration) {  	field.Name = "rateLimitDuration";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (RateLimitDuration);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMSystemException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Error,EDAMUserException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Parameter = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMUserException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		ErrorCode = (EDAMErrorCode)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Parameter = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Error,EDAMUserException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Write,The following statement contains a magic number: if (Parameter != null && __isset.parameter) {  	field.Name = "parameter";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Parameter);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Error,EDAMUserException,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Map) {  			{  				NotebookCounts = new Dictionary<string' int> ();  				TMap _map76 = iprot.ReadMapBegin ();  				for (int _i77 = 0; _i77 < _map76.Count; ++_i77) {  					string _key78;  					int _val79;  					_key78 = iprot.ReadString ();  					_val79 = iprot.ReadI32 ();  					NotebookCounts [_key78] = _val79;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Map) {  			{  				TagCounts = new Dictionary<string' int> ();  				TMap _map80 = iprot.ReadMapBegin ();  				for (int _i81 = 0; _i81 < _map80.Count; ++_i81) {  					string _key82;  					int _val83;  					_key82 = iprot.ReadString ();  					_val83 = iprot.ReadI32 ();  					TagCounts [_key82] = _val83;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			TrashCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Map) {  			{  				NotebookCounts = new Dictionary<string' int> ();  				TMap _map76 = iprot.ReadMapBegin ();  				for (int _i77 = 0; _i77 < _map76.Count; ++_i77) {  					string _key78;  					int _val79;  					_key78 = iprot.ReadString ();  					_val79 = iprot.ReadI32 ();  					NotebookCounts [_key78] = _val79;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Map) {  			{  				TagCounts = new Dictionary<string' int> ();  				TMap _map80 = iprot.ReadMapBegin ();  				for (int _i81 = 0; _i81 < _map80.Count; ++_i81) {  					string _key82;  					int _val83;  					_key82 = iprot.ReadString ();  					_val83 = iprot.ReadI32 ();  					TagCounts [_key82] = _val83;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			TrashCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Map) {  		{  			NotebookCounts = new Dictionary<string' int> ();  			TMap _map76 = iprot.ReadMapBegin ();  			for (int _i77 = 0; _i77 < _map76.Count; ++_i77) {  				string _key78;  				int _val79;  				_key78 = iprot.ReadString ();  				_val79 = iprot.ReadI32 ();  				NotebookCounts [_key78] = _val79;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Map) {  		{  			TagCounts = new Dictionary<string' int> ();  			TMap _map80 = iprot.ReadMapBegin ();  			for (int _i81 = 0; _i81 < _map80.Count; ++_i81) {  				string _key82;  				int _val83;  				_key82 = iprot.ReadString ();  				_val83 = iprot.ReadI32 ();  				TagCounts [_key82] = _val83;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		TrashCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Map) {  		{  			NotebookCounts = new Dictionary<string' int> ();  			TMap _map76 = iprot.ReadMapBegin ();  			for (int _i77 = 0; _i77 < _map76.Count; ++_i77) {  				string _key78;  				int _val79;  				_key78 = iprot.ReadString ();  				_val79 = iprot.ReadI32 ();  				NotebookCounts [_key78] = _val79;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Map) {  		{  			TagCounts = new Dictionary<string' int> ();  			TMap _map80 = iprot.ReadMapBegin ();  			for (int _i81 = 0; _i81 < _map80.Count; ++_i81) {  				string _key82;  				int _val83;  				_key82 = iprot.ReadString ();  				_val83 = iprot.ReadI32 ();  				TagCounts [_key82] = _val83;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		TrashCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: if (TagCounts != null && __isset.tagCounts) {  	field.Name = "tagCounts";  	field.Type = TType.Map;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.I32' TagCounts.Count));  		foreach (string _iter85 in TagCounts.Keys) {  			oprot.WriteString (_iter85);  			oprot.WriteI32 (TagCounts [_iter85]);  			oprot.WriteMapEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: if (__isset.trashCount) {  	field.Name = "trashCount";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (TrashCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Note = new Evernote.EDAM.Type.Note ();  			Note.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				ToAddresses = new List<string> ();  				TList _list86 = iprot.ReadListBegin ();  				for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  					string _elem88 = null;  					_elem88 = iprot.ReadString ();  					ToAddresses.Add (_elem88);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				CcAddresses = new List<string> ();  				TList _list89 = iprot.ReadListBegin ();  				for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  					string _elem91 = null;  					_elem91 = iprot.ReadString ();  					CcAddresses.Add (_elem91);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Subject = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Note = new Evernote.EDAM.Type.Note ();  			Note.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				ToAddresses = new List<string> ();  				TList _list86 = iprot.ReadListBegin ();  				for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  					string _elem88 = null;  					_elem88 = iprot.ReadString ();  					ToAddresses.Add (_elem88);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				CcAddresses = new List<string> ();  				TList _list89 = iprot.ReadListBegin ();  				for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  					string _elem91 = null;  					_elem91 = iprot.ReadString ();  					CcAddresses.Add (_elem91);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Subject = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Note = new Evernote.EDAM.Type.Note ();  			Note.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				ToAddresses = new List<string> ();  				TList _list86 = iprot.ReadListBegin ();  				for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  					string _elem88 = null;  					_elem88 = iprot.ReadString ();  					ToAddresses.Add (_elem88);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				CcAddresses = new List<string> ();  				TList _list89 = iprot.ReadListBegin ();  				for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  					string _elem91 = null;  					_elem91 = iprot.ReadString ();  					CcAddresses.Add (_elem91);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Subject = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Note = new Evernote.EDAM.Type.Note ();  			Note.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				ToAddresses = new List<string> ();  				TList _list86 = iprot.ReadListBegin ();  				for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  					string _elem88 = null;  					_elem88 = iprot.ReadString ();  					ToAddresses.Add (_elem88);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				CcAddresses = new List<string> ();  				TList _list89 = iprot.ReadListBegin ();  				for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  					string _elem91 = null;  					_elem91 = iprot.ReadString ();  					CcAddresses.Add (_elem91);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Subject = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Note = new Evernote.EDAM.Type.Note ();  			Note.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				ToAddresses = new List<string> ();  				TList _list86 = iprot.ReadListBegin ();  				for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  					string _elem88 = null;  					_elem88 = iprot.ReadString ();  					ToAddresses.Add (_elem88);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				CcAddresses = new List<string> ();  				TList _list89 = iprot.ReadListBegin ();  				for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  					string _elem91 = null;  					_elem91 = iprot.ReadString ();  					CcAddresses.Add (_elem91);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			Subject = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Message = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Note = new Evernote.EDAM.Type.Note ();  		Note.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			ToAddresses = new List<string> ();  			TList _list86 = iprot.ReadListBegin ();  			for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  				string _elem88 = null;  				_elem88 = iprot.ReadString ();  				ToAddresses.Add (_elem88);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			CcAddresses = new List<string> ();  			TList _list89 = iprot.ReadListBegin ();  			for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  				string _elem91 = null;  				_elem91 = iprot.ReadString ();  				CcAddresses.Add (_elem91);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Subject = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Note = new Evernote.EDAM.Type.Note ();  		Note.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			ToAddresses = new List<string> ();  			TList _list86 = iprot.ReadListBegin ();  			for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  				string _elem88 = null;  				_elem88 = iprot.ReadString ();  				ToAddresses.Add (_elem88);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			CcAddresses = new List<string> ();  			TList _list89 = iprot.ReadListBegin ();  			for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  				string _elem91 = null;  				_elem91 = iprot.ReadString ();  				CcAddresses.Add (_elem91);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Subject = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Note = new Evernote.EDAM.Type.Note ();  		Note.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			ToAddresses = new List<string> ();  			TList _list86 = iprot.ReadListBegin ();  			for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  				string _elem88 = null;  				_elem88 = iprot.ReadString ();  				ToAddresses.Add (_elem88);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			CcAddresses = new List<string> ();  			TList _list89 = iprot.ReadListBegin ();  			for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  				string _elem91 = null;  				_elem91 = iprot.ReadString ();  				CcAddresses.Add (_elem91);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Subject = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Note = new Evernote.EDAM.Type.Note ();  		Note.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			ToAddresses = new List<string> ();  			TList _list86 = iprot.ReadListBegin ();  			for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  				string _elem88 = null;  				_elem88 = iprot.ReadString ();  				ToAddresses.Add (_elem88);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			CcAddresses = new List<string> ();  			TList _list89 = iprot.ReadListBegin ();  			for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  				string _elem91 = null;  				_elem91 = iprot.ReadString ();  				CcAddresses.Add (_elem91);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Subject = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Note = new Evernote.EDAM.Type.Note ();  		Note.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			ToAddresses = new List<string> ();  			TList _list86 = iprot.ReadListBegin ();  			for (int _i87 = 0; _i87 < _list86.Count; ++_i87) {  				string _elem88 = null;  				_elem88 = iprot.ReadString ();  				ToAddresses.Add (_elem88);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			CcAddresses = new List<string> ();  			TList _list89 = iprot.ReadListBegin ();  			for (int _i90 = 0; _i90 < _list89.Count; ++_i90) {  				string _elem91 = null;  				_elem91 = iprot.ReadString ();  				CcAddresses.Add (_elem91);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		Subject = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Message = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: if (Note != null && __isset.note) {  	field.Name = "note";  	field.Type = TType.Struct;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	Note.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: if (ToAddresses != null && __isset.toAddresses) {  	field.Name = "toAddresses";  	field.Type = TType.List;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ToAddresses.Count));  		foreach (string _iter92 in ToAddresses) {  			oprot.WriteString (_iter92);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: if (CcAddresses != null && __isset.ccAddresses) {  	field.Name = "ccAddresses";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' CcAddresses.Count));  		foreach (string _iter93 in CcAddresses) {  			oprot.WriteString (_iter93);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: if (Subject != null && __isset.subject) {  	field.Name = "subject";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Subject);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: if (Message != null && __isset.message) {  	field.Name = "message";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Message);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Order = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Words = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list44 = iprot.ReadListBegin ();  				for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  					string _elem46 = null;  					_elem46 = iprot.ReadString ();  					TagGuids.Add (_elem46);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			TimeZone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			Inactive = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			Emphasized = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Order = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Words = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list44 = iprot.ReadListBegin ();  			for (int _i45 = 0; _i45 < _list44.Count; ++_i45) {  				string _elem46 = null;  				_elem46 = iprot.ReadString ();  				TagGuids.Add (_elem46);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		TimeZone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		Inactive = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		Emphasized = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (__isset.ascending) {  	field.Name = "ascending";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Ascending);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (Words != null && __isset.words) {  	field.Name = "words";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Words);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (NotebookGuid != null && __isset.notebookGuid) {  	field.Name = "notebookGuid";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotebookGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (TagGuids != null && __isset.tagGuids) {  	field.Name = "tagGuids";  	field.Type = TType.List;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' TagGuids.Count));  		foreach (string _iter47 in TagGuids) {  			oprot.WriteString (_iter47);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (TimeZone != null && __isset.timeZone) {  	field.Name = "timeZone";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (TimeZone);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (__isset.inactive) {  	field.Name = "inactive";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Inactive);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: if (Emphasized != null && __isset.emphasized) {  	field.Name = "emphasized";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Emphasized);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list48 = iprot.ReadListBegin ();  				for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  					Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  					_elem50 = new Evernote.EDAM.Type.Note ();  					_elem50.Read (iprot);  					Notes.Add (_elem50);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list51 = iprot.ReadListBegin ();  				for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  					string _elem53 = null;  					_elem53 = iprot.ReadString ();  					StoppedWords.Add (_elem53);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list54 = iprot.ReadListBegin ();  				for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  					string _elem56 = null;  					_elem56 = iprot.ReadString ();  					SearchedWords.Add (_elem56);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list48 = iprot.ReadListBegin ();  				for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  					Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  					_elem50 = new Evernote.EDAM.Type.Note ();  					_elem50.Read (iprot);  					Notes.Add (_elem50);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list51 = iprot.ReadListBegin ();  				for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  					string _elem53 = null;  					_elem53 = iprot.ReadString ();  					StoppedWords.Add (_elem53);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list54 = iprot.ReadListBegin ();  				for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  					string _elem56 = null;  					_elem56 = iprot.ReadString ();  					SearchedWords.Add (_elem56);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list48 = iprot.ReadListBegin ();  				for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  					Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  					_elem50 = new Evernote.EDAM.Type.Note ();  					_elem50.Read (iprot);  					Notes.Add (_elem50);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list51 = iprot.ReadListBegin ();  				for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  					string _elem53 = null;  					_elem53 = iprot.ReadString ();  					StoppedWords.Add (_elem53);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list54 = iprot.ReadListBegin ();  				for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  					string _elem56 = null;  					_elem56 = iprot.ReadString ();  					SearchedWords.Add (_elem56);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list48 = iprot.ReadListBegin ();  				for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  					Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  					_elem50 = new Evernote.EDAM.Type.Note ();  					_elem50.Read (iprot);  					Notes.Add (_elem50);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list51 = iprot.ReadListBegin ();  				for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  					string _elem53 = null;  					_elem53 = iprot.ReadString ();  					StoppedWords.Add (_elem53);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list54 = iprot.ReadListBegin ();  				for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  					string _elem56 = null;  					_elem56 = iprot.ReadString ();  					SearchedWords.Add (_elem56);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list48 = iprot.ReadListBegin ();  				for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  					Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  					_elem50 = new Evernote.EDAM.Type.Note ();  					_elem50.Read (iprot);  					Notes.Add (_elem50);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list51 = iprot.ReadListBegin ();  				for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  					string _elem53 = null;  					_elem53 = iprot.ReadString ();  					StoppedWords.Add (_elem53);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list54 = iprot.ReadListBegin ();  				for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  					string _elem56 = null;  					_elem56 = iprot.ReadString ();  					SearchedWords.Add (_elem56);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list48 = iprot.ReadListBegin ();  			for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  				Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  				_elem50 = new Evernote.EDAM.Type.Note ();  				_elem50.Read (iprot);  				Notes.Add (_elem50);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list51 = iprot.ReadListBegin ();  			for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  				string _elem53 = null;  				_elem53 = iprot.ReadString ();  				StoppedWords.Add (_elem53);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list54 = iprot.ReadListBegin ();  			for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  				string _elem56 = null;  				_elem56 = iprot.ReadString ();  				SearchedWords.Add (_elem56);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list48 = iprot.ReadListBegin ();  			for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  				Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  				_elem50 = new Evernote.EDAM.Type.Note ();  				_elem50.Read (iprot);  				Notes.Add (_elem50);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list51 = iprot.ReadListBegin ();  			for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  				string _elem53 = null;  				_elem53 = iprot.ReadString ();  				StoppedWords.Add (_elem53);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list54 = iprot.ReadListBegin ();  			for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  				string _elem56 = null;  				_elem56 = iprot.ReadString ();  				SearchedWords.Add (_elem56);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list48 = iprot.ReadListBegin ();  			for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  				Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  				_elem50 = new Evernote.EDAM.Type.Note ();  				_elem50.Read (iprot);  				Notes.Add (_elem50);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list51 = iprot.ReadListBegin ();  			for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  				string _elem53 = null;  				_elem53 = iprot.ReadString ();  				StoppedWords.Add (_elem53);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list54 = iprot.ReadListBegin ();  			for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  				string _elem56 = null;  				_elem56 = iprot.ReadString ();  				SearchedWords.Add (_elem56);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list48 = iprot.ReadListBegin ();  			for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  				Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  				_elem50 = new Evernote.EDAM.Type.Note ();  				_elem50.Read (iprot);  				Notes.Add (_elem50);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list51 = iprot.ReadListBegin ();  			for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  				string _elem53 = null;  				_elem53 = iprot.ReadString ();  				StoppedWords.Add (_elem53);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list54 = iprot.ReadListBegin ();  			for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  				string _elem56 = null;  				_elem56 = iprot.ReadString ();  				SearchedWords.Add (_elem56);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list48 = iprot.ReadListBegin ();  			for (int _i49 = 0; _i49 < _list48.Count; ++_i49) {  				Evernote.EDAM.Type.Note _elem50 = new Evernote.EDAM.Type.Note ();  				_elem50 = new Evernote.EDAM.Type.Note ();  				_elem50.Read (iprot);  				Notes.Add (_elem50);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list51 = iprot.ReadListBegin ();  			for (int _i52 = 0; _i52 < _list51.Count; ++_i52) {  				string _elem53 = null;  				_elem53 = iprot.ReadString ();  				StoppedWords.Add (_elem53);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list54 = iprot.ReadListBegin ();  			for (int _i55 = 0; _i55 < _list54.Count; ++_i55) {  				string _elem56 = null;  				_elem56 = iprot.ReadString ();  				SearchedWords.Add (_elem56);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: if (__isset.totalNotes) {  	field.Name = "totalNotes";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (TotalNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: if (Notes != null && __isset.notes) {  	field.Name = "notes";  	field.Type = TType.List;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Notes.Count));  		foreach (Evernote.EDAM.Type.Note _iter57 in Notes) {  			_iter57.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: if (StoppedWords != null && __isset.stoppedWords) {  	field.Name = "stoppedWords";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' StoppedWords.Count));  		foreach (string _iter58 in StoppedWords) {  			oprot.WriteString (_iter58);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: if (SearchedWords != null && __isset.searchedWords) {  	field.Name = "searchedWords";  	field.Type = TType.List;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' SearchedWords.Count));  		foreach (string _iter59 in SearchedWords) {  			oprot.WriteString (_iter59);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: if (__isset.updateCount) {  	field.Name = "updateCount";  	field.Type = TType.I32;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list60 = iprot.ReadListBegin ();  				for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  					string _elem62 = null;  					_elem62 = iprot.ReadString ();  					TagGuids.Add (_elem62);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new Evernote.EDAM.Type.NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			LargestResourceMime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.I32) {  			LargestResourceSize = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list60 = iprot.ReadListBegin ();  			for (int _i61 = 0; _i61 < _list60.Count; ++_i61) {  				string _elem62 = null;  				_elem62 = iprot.ReadString ();  				TagGuids.Add (_elem62);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new Evernote.EDAM.Type.NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		LargestResourceMime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.I32) {  		LargestResourceSize = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.contentLength) {  	field.Name = "contentLength";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ContentLength);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.created) {  	field.Name = "created";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Created);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.updated) {  	field.Name = "updated";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Updated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.deleted) {  	field.Name = "deleted";  	field.Type = TType.I64;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Deleted);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (NotebookGuid != null && __isset.notebookGuid) {  	field.Name = "notebookGuid";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotebookGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (TagGuids != null && __isset.tagGuids) {  	field.Name = "tagGuids";  	field.Type = TType.List;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' TagGuids.Count));  		foreach (string _iter63 in TagGuids) {  			oprot.WriteString (_iter63);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (Attributes != null && __isset.attributes) {  	field.Name = "attributes";  	field.Type = TType.Struct;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	Attributes.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (LargestResourceMime != null && __isset.largestResourceMime) {  	field.Name = "largestResourceMime";  	field.Type = TType.String;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (LargestResourceMime);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: if (__isset.largestResourceSize) {  	field.Name = "largestResourceSize";  	field.Type = TType.I32;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (LargestResourceSize);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<NoteMetadata> ();  				TList _list64 = iprot.ReadListBegin ();  				for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  					NoteMetadata _elem66 = new NoteMetadata ();  					_elem66 = new NoteMetadata ();  					_elem66.Read (iprot);  					Notes.Add (_elem66);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list67 = iprot.ReadListBegin ();  				for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  					string _elem69 = null;  					_elem69 = iprot.ReadString ();  					StoppedWords.Add (_elem69);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list70 = iprot.ReadListBegin ();  				for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  					string _elem72 = null;  					_elem72 = iprot.ReadString ();  					SearchedWords.Add (_elem72);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<NoteMetadata> ();  				TList _list64 = iprot.ReadListBegin ();  				for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  					NoteMetadata _elem66 = new NoteMetadata ();  					_elem66 = new NoteMetadata ();  					_elem66.Read (iprot);  					Notes.Add (_elem66);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list67 = iprot.ReadListBegin ();  				for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  					string _elem69 = null;  					_elem69 = iprot.ReadString ();  					StoppedWords.Add (_elem69);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list70 = iprot.ReadListBegin ();  				for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  					string _elem72 = null;  					_elem72 = iprot.ReadString ();  					SearchedWords.Add (_elem72);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<NoteMetadata> ();  				TList _list64 = iprot.ReadListBegin ();  				for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  					NoteMetadata _elem66 = new NoteMetadata ();  					_elem66 = new NoteMetadata ();  					_elem66.Read (iprot);  					Notes.Add (_elem66);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list67 = iprot.ReadListBegin ();  				for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  					string _elem69 = null;  					_elem69 = iprot.ReadString ();  					StoppedWords.Add (_elem69);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list70 = iprot.ReadListBegin ();  				for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  					string _elem72 = null;  					_elem72 = iprot.ReadString ();  					SearchedWords.Add (_elem72);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<NoteMetadata> ();  				TList _list64 = iprot.ReadListBegin ();  				for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  					NoteMetadata _elem66 = new NoteMetadata ();  					_elem66 = new NoteMetadata ();  					_elem66.Read (iprot);  					Notes.Add (_elem66);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list67 = iprot.ReadListBegin ();  				for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  					string _elem69 = null;  					_elem69 = iprot.ReadString ();  					StoppedWords.Add (_elem69);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list70 = iprot.ReadListBegin ();  				for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  					string _elem72 = null;  					_elem72 = iprot.ReadString ();  					SearchedWords.Add (_elem72);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			StartIndex = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			TotalNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Notes = new List<NoteMetadata> ();  				TList _list64 = iprot.ReadListBegin ();  				for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  					NoteMetadata _elem66 = new NoteMetadata ();  					_elem66 = new NoteMetadata ();  					_elem66.Read (iprot);  					Notes.Add (_elem66);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				StoppedWords = new List<string> ();  				TList _list67 = iprot.ReadListBegin ();  				for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  					string _elem69 = null;  					_elem69 = iprot.ReadString ();  					StoppedWords.Add (_elem69);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				SearchedWords = new List<string> ();  				TList _list70 = iprot.ReadListBegin ();  				for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  					string _elem72 = null;  					_elem72 = iprot.ReadString ();  					SearchedWords.Add (_elem72);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<NoteMetadata> ();  			TList _list64 = iprot.ReadListBegin ();  			for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  				NoteMetadata _elem66 = new NoteMetadata ();  				_elem66 = new NoteMetadata ();  				_elem66.Read (iprot);  				Notes.Add (_elem66);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list67 = iprot.ReadListBegin ();  			for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  				string _elem69 = null;  				_elem69 = iprot.ReadString ();  				StoppedWords.Add (_elem69);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list70 = iprot.ReadListBegin ();  			for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  				string _elem72 = null;  				_elem72 = iprot.ReadString ();  				SearchedWords.Add (_elem72);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<NoteMetadata> ();  			TList _list64 = iprot.ReadListBegin ();  			for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  				NoteMetadata _elem66 = new NoteMetadata ();  				_elem66 = new NoteMetadata ();  				_elem66.Read (iprot);  				Notes.Add (_elem66);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list67 = iprot.ReadListBegin ();  			for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  				string _elem69 = null;  				_elem69 = iprot.ReadString ();  				StoppedWords.Add (_elem69);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list70 = iprot.ReadListBegin ();  			for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  				string _elem72 = null;  				_elem72 = iprot.ReadString ();  				SearchedWords.Add (_elem72);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<NoteMetadata> ();  			TList _list64 = iprot.ReadListBegin ();  			for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  				NoteMetadata _elem66 = new NoteMetadata ();  				_elem66 = new NoteMetadata ();  				_elem66.Read (iprot);  				Notes.Add (_elem66);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list67 = iprot.ReadListBegin ();  			for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  				string _elem69 = null;  				_elem69 = iprot.ReadString ();  				StoppedWords.Add (_elem69);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list70 = iprot.ReadListBegin ();  			for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  				string _elem72 = null;  				_elem72 = iprot.ReadString ();  				SearchedWords.Add (_elem72);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<NoteMetadata> ();  			TList _list64 = iprot.ReadListBegin ();  			for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  				NoteMetadata _elem66 = new NoteMetadata ();  				_elem66 = new NoteMetadata ();  				_elem66.Read (iprot);  				Notes.Add (_elem66);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list67 = iprot.ReadListBegin ();  			for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  				string _elem69 = null;  				_elem69 = iprot.ReadString ();  				StoppedWords.Add (_elem69);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list70 = iprot.ReadListBegin ();  			for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  				string _elem72 = null;  				_elem72 = iprot.ReadString ();  				SearchedWords.Add (_elem72);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		StartIndex = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		TotalNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Notes = new List<NoteMetadata> ();  			TList _list64 = iprot.ReadListBegin ();  			for (int _i65 = 0; _i65 < _list64.Count; ++_i65) {  				NoteMetadata _elem66 = new NoteMetadata ();  				_elem66 = new NoteMetadata ();  				_elem66.Read (iprot);  				Notes.Add (_elem66);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			StoppedWords = new List<string> ();  			TList _list67 = iprot.ReadListBegin ();  			for (int _i68 = 0; _i68 < _list67.Count; ++_i68) {  				string _elem69 = null;  				_elem69 = iprot.ReadString ();  				StoppedWords.Add (_elem69);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			SearchedWords = new List<string> ();  			TList _list70 = iprot.ReadListBegin ();  			for (int _i71 = 0; _i71 < _list70.Count; ++_i71) {  				string _elem72 = null;  				_elem72 = iprot.ReadString ();  				SearchedWords.Add (_elem72);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: if (__isset.totalNotes) {  	field.Name = "totalNotes";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (TotalNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: if (Notes != null && __isset.notes) {  	field.Name = "notes";  	field.Type = TType.List;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Notes.Count));  		foreach (NoteMetadata _iter73 in Notes) {  			_iter73.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: if (StoppedWords != null && __isset.stoppedWords) {  	field.Name = "stoppedWords";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' StoppedWords.Count));  		foreach (string _iter74 in StoppedWords) {  			oprot.WriteString (_iter74);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: if (SearchedWords != null && __isset.searchedWords) {  	field.Name = "searchedWords";  	field.Type = TType.List;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' SearchedWords.Count));  		foreach (string _iter75 in SearchedWords) {  			oprot.WriteString (_iter75);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: if (__isset.updateCount) {  	field.Name = "updateCount";  	field.Type = TType.I32;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.Bool) {  			IncludeTitle = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContentLength = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeCreated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeUpdated = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeDeleted = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeUpdateSequenceNum = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			IncludeNotebookGuid = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeTagGuids = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			IncludeAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceMime = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.Bool) {  			IncludeLargestResourceSize = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.Bool) {  		IncludeTitle = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContentLength = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeCreated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeUpdated = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeDeleted = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeUpdateSequenceNum = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		IncludeNotebookGuid = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeTagGuids = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		IncludeAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceMime = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.Bool) {  		IncludeLargestResourceSize = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeTitle) {  	field.Name = "includeTitle";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeTitle);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeContentLength) {  	field.Name = "includeContentLength";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeContentLength);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeCreated) {  	field.Name = "includeCreated";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeCreated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeUpdated) {  	field.Name = "includeUpdated";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeUpdated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeDeleted) {  	field.Name = "includeDeleted";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeDeleted);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeUpdateSequenceNum) {  	field.Name = "includeUpdateSequenceNum";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeUpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeNotebookGuid) {  	field.Name = "includeNotebookGuid";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNotebookGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeTagGuids) {  	field.Name = "includeTagGuids";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeTagGuids);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeAttributes) {  	field.Name = "includeAttributes";  	field.Type = TType.Bool;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeAttributes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeLargestResourceMime) {  	field.Name = "includeLargestResourceMime";  	field.Type = TType.Bool;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeLargestResourceMime);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeLargestResourceSize) {  	field.Name = "includeLargestResourceSize";  	field.Type = TType.Bool;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeLargestResourceSize);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Saved = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Saved = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Saved = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Saved = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Saved = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Saved = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: if (__isset.updated) {  	field.Name = "updated";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Updated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: if (__isset.saved) {  	field.Name = "saved";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Saved);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			PlainText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Filter = new NoteFilter ();  			Filter.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ReferenceUri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			PlainText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Filter = new NoteFilter ();  			Filter.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ReferenceUri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			PlainText = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Filter = new NoteFilter ();  			Filter.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ReferenceUri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		PlainText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Filter = new NoteFilter ();  		Filter.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ReferenceUri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		PlainText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Filter = new NoteFilter ();  		Filter.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ReferenceUri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		PlainText = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Filter = new NoteFilter ();  		Filter.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ReferenceUri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: if (PlainText != null && __isset.plainText) {  	field.Name = "plainText";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PlainText);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: if (Filter != null && __isset.filter) {  	field.Name = "filter";  	field.Type = TType.Struct;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	Filter.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: if (ReferenceUri != null && __isset.referenceUri) {  	field.Name = "referenceUri";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ReferenceUri);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list94 = iprot.ReadListBegin ();  				for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  					Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  					_elem96 = new Evernote.EDAM.Type.Note ();  					_elem96.Read (iprot);  					Notes.Add (_elem96);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list97 = iprot.ReadListBegin ();  				for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  					Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99.Read (iprot);  					Notebooks.Add (_elem99);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list100 = iprot.ReadListBegin ();  				for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  					Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102.Read (iprot);  					Tags.Add (_elem102);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  				TList _list103 = iprot.ReadListBegin ();  				for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  					Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105.Read (iprot);  					ContainingNotebooks.Add (_elem105);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list94 = iprot.ReadListBegin ();  				for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  					Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  					_elem96 = new Evernote.EDAM.Type.Note ();  					_elem96.Read (iprot);  					Notes.Add (_elem96);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list97 = iprot.ReadListBegin ();  				for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  					Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99.Read (iprot);  					Notebooks.Add (_elem99);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list100 = iprot.ReadListBegin ();  				for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  					Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102.Read (iprot);  					Tags.Add (_elem102);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  				TList _list103 = iprot.ReadListBegin ();  				for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  					Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105.Read (iprot);  					ContainingNotebooks.Add (_elem105);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list94 = iprot.ReadListBegin ();  				for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  					Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  					_elem96 = new Evernote.EDAM.Type.Note ();  					_elem96.Read (iprot);  					Notes.Add (_elem96);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list97 = iprot.ReadListBegin ();  				for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  					Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99 = new Evernote.EDAM.Type.Notebook ();  					_elem99.Read (iprot);  					Notebooks.Add (_elem99);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list100 = iprot.ReadListBegin ();  				for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  					Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102 = new Evernote.EDAM.Type.Tag ();  					_elem102.Read (iprot);  					Tags.Add (_elem102);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  				TList _list103 = iprot.ReadListBegin ();  				for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  					Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  					_elem105.Read (iprot);  					ContainingNotebooks.Add (_elem105);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list94 = iprot.ReadListBegin ();  			for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  				Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  				_elem96 = new Evernote.EDAM.Type.Note ();  				_elem96.Read (iprot);  				Notes.Add (_elem96);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list97 = iprot.ReadListBegin ();  			for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  				Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99.Read (iprot);  				Notebooks.Add (_elem99);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list100 = iprot.ReadListBegin ();  			for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  				Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102.Read (iprot);  				Tags.Add (_elem102);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  			TList _list103 = iprot.ReadListBegin ();  			for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  				Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105.Read (iprot);  				ContainingNotebooks.Add (_elem105);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list94 = iprot.ReadListBegin ();  			for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  				Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  				_elem96 = new Evernote.EDAM.Type.Note ();  				_elem96.Read (iprot);  				Notes.Add (_elem96);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list97 = iprot.ReadListBegin ();  			for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  				Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99.Read (iprot);  				Notebooks.Add (_elem99);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list100 = iprot.ReadListBegin ();  			for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  				Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102.Read (iprot);  				Tags.Add (_elem102);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  			TList _list103 = iprot.ReadListBegin ();  			for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  				Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105.Read (iprot);  				ContainingNotebooks.Add (_elem105);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list94 = iprot.ReadListBegin ();  			for (int _i95 = 0; _i95 < _list94.Count; ++_i95) {  				Evernote.EDAM.Type.Note _elem96 = new Evernote.EDAM.Type.Note ();  				_elem96 = new Evernote.EDAM.Type.Note ();  				_elem96.Read (iprot);  				Notes.Add (_elem96);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list97 = iprot.ReadListBegin ();  			for (int _i98 = 0; _i98 < _list97.Count; ++_i98) {  				Evernote.EDAM.Type.Notebook _elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99 = new Evernote.EDAM.Type.Notebook ();  				_elem99.Read (iprot);  				Notebooks.Add (_elem99);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list100 = iprot.ReadListBegin ();  			for (int _i101 = 0; _i101 < _list100.Count; ++_i101) {  				Evernote.EDAM.Type.Tag _elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102 = new Evernote.EDAM.Type.Tag ();  				_elem102.Read (iprot);  				Tags.Add (_elem102);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor> ();  			TList _list103 = iprot.ReadListBegin ();  			for (int _i104 = 0; _i104 < _list103.Count; ++_i104) {  				Evernote.EDAM.Type.NotebookDescriptor _elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105 = new Evernote.EDAM.Type.NotebookDescriptor ();  				_elem105.Read (iprot);  				ContainingNotebooks.Add (_elem105);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: if (Notebooks != null && __isset.notebooks) {  	field.Name = "notebooks";  	field.Type = TType.List;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Notebooks.Count));  		foreach (Evernote.EDAM.Type.Notebook _iter107 in Notebooks) {  			_iter107.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: if (Tags != null && __isset.tags) {  	field.Name = "tags";  	field.Type = TType.List;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Tags.Count));  		foreach (Evernote.EDAM.Type.Tag _iter108 in Tags) {  			_iter108.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: if (ContainingNotebooks != null && __isset.containingNotebooks) {  	field.Name = "containingNotebooks";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' ContainingNotebooks.Count));  		foreach (Evernote.EDAM.Type.NotebookDescriptor _iter109 in ContainingNotebooks) {  			_iter109.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			MaxNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			MaxNotebooks = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			MaxTags = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			WritableNotebooksOnly = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContainingNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			MaxNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			MaxNotebooks = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			MaxTags = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			WritableNotebooksOnly = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContainingNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			MaxNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			MaxNotebooks = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			MaxTags = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			WritableNotebooksOnly = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContainingNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			MaxNotes = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			MaxNotebooks = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			MaxTags = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			WritableNotebooksOnly = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeContainingNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		MaxNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		MaxNotebooks = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		MaxTags = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		WritableNotebooksOnly = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContainingNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		MaxNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		MaxNotebooks = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		MaxTags = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		WritableNotebooksOnly = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContainingNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		MaxNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		MaxNotebooks = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		MaxTags = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		WritableNotebooksOnly = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContainingNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		MaxNotes = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		MaxNotebooks = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		MaxTags = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		WritableNotebooksOnly = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeContainingNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: if (__isset.maxNotebooks) {  	field.Name = "maxNotebooks";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (MaxNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: if (__isset.maxTags) {  	field.Name = "maxTags";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (MaxTags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: if (__isset.writableNotebooksOnly) {  	field.Name = "writableNotebooksOnly";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (WritableNotebooksOnly);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: if (__isset.includeContainingNotebooks) {  	field.Name = "includeContainingNotebooks";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeContainingNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			ChunkHighUSN = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.List) {  			{  				Notes = new List<Evernote.EDAM.Type.Note> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  					_elem2 = new Evernote.EDAM.Type.Note ();  					_elem2.Read (iprot);  					Notes.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5 = new Evernote.EDAM.Type.Notebook ();  					_elem5.Read (iprot);  					Notebooks.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.List) {  			{  				Tags = new List<Evernote.EDAM.Type.Tag> ();  				TList _list6 = iprot.ReadListBegin ();  				for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  					Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8 = new Evernote.EDAM.Type.Tag ();  					_elem8.Read (iprot);  					Tags.Add (_elem8);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  				TList _list9 = iprot.ReadListBegin ();  				for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  					Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11 = new Evernote.EDAM.Type.SavedSearch ();  					_elem11.Read (iprot);  					Searches.Add (_elem11);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.List) {  			{  				Resources = new List<Evernote.EDAM.Type.Resource> ();  				TList _list12 = iprot.ReadListBegin ();  				for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  					Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14 = new Evernote.EDAM.Type.Resource ();  					_elem14.Read (iprot);  					Resources.Add (_elem14);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.List) {  			{  				ExpungedNotes = new List<string> ();  				TList _list15 = iprot.ReadListBegin ();  				for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  					string _elem17 = null;  					_elem17 = iprot.ReadString ();  					ExpungedNotes.Add (_elem17);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.List) {  			{  				ExpungedNotebooks = new List<string> ();  				TList _list18 = iprot.ReadListBegin ();  				for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  					string _elem20 = null;  					_elem20 = iprot.ReadString ();  					ExpungedNotebooks.Add (_elem20);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.List) {  			{  				ExpungedTags = new List<string> ();  				TList _list21 = iprot.ReadListBegin ();  				for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  					string _elem23 = null;  					_elem23 = iprot.ReadString ();  					ExpungedTags.Add (_elem23);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				ExpungedSearches = new List<string> ();  				TList _list24 = iprot.ReadListBegin ();  				for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  					string _elem26 = null;  					_elem26 = iprot.ReadString ();  					ExpungedSearches.Add (_elem26);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  				TList _list27 = iprot.ReadListBegin ();  				for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  					Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  					_elem29.Read (iprot);  					LinkedNotebooks.Add (_elem29);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				ExpungedLinkedNotebooks = new List<string> ();  				TList _list30 = iprot.ReadListBegin ();  				for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  					string _elem32 = null;  					_elem32 = iprot.ReadString ();  					ExpungedLinkedNotebooks.Add (_elem32);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		ChunkHighUSN = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.List) {  		{  			Notes = new List<Evernote.EDAM.Type.Note> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				Evernote.EDAM.Type.Note _elem2 = new Evernote.EDAM.Type.Note ();  				_elem2 = new Evernote.EDAM.Type.Note ();  				_elem2.Read (iprot);  				Notes.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			Notebooks = new List<Evernote.EDAM.Type.Notebook> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				Evernote.EDAM.Type.Notebook _elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5 = new Evernote.EDAM.Type.Notebook ();  				_elem5.Read (iprot);  				Notebooks.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.List) {  		{  			Tags = new List<Evernote.EDAM.Type.Tag> ();  			TList _list6 = iprot.ReadListBegin ();  			for (int _i7 = 0; _i7 < _list6.Count; ++_i7) {  				Evernote.EDAM.Type.Tag _elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8 = new Evernote.EDAM.Type.Tag ();  				_elem8.Read (iprot);  				Tags.Add (_elem8);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			Searches = new List<Evernote.EDAM.Type.SavedSearch> ();  			TList _list9 = iprot.ReadListBegin ();  			for (int _i10 = 0; _i10 < _list9.Count; ++_i10) {  				Evernote.EDAM.Type.SavedSearch _elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11 = new Evernote.EDAM.Type.SavedSearch ();  				_elem11.Read (iprot);  				Searches.Add (_elem11);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.List) {  		{  			Resources = new List<Evernote.EDAM.Type.Resource> ();  			TList _list12 = iprot.ReadListBegin ();  			for (int _i13 = 0; _i13 < _list12.Count; ++_i13) {  				Evernote.EDAM.Type.Resource _elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14 = new Evernote.EDAM.Type.Resource ();  				_elem14.Read (iprot);  				Resources.Add (_elem14);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.List) {  		{  			ExpungedNotes = new List<string> ();  			TList _list15 = iprot.ReadListBegin ();  			for (int _i16 = 0; _i16 < _list15.Count; ++_i16) {  				string _elem17 = null;  				_elem17 = iprot.ReadString ();  				ExpungedNotes.Add (_elem17);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.List) {  		{  			ExpungedNotebooks = new List<string> ();  			TList _list18 = iprot.ReadListBegin ();  			for (int _i19 = 0; _i19 < _list18.Count; ++_i19) {  				string _elem20 = null;  				_elem20 = iprot.ReadString ();  				ExpungedNotebooks.Add (_elem20);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.List) {  		{  			ExpungedTags = new List<string> ();  			TList _list21 = iprot.ReadListBegin ();  			for (int _i22 = 0; _i22 < _list21.Count; ++_i22) {  				string _elem23 = null;  				_elem23 = iprot.ReadString ();  				ExpungedTags.Add (_elem23);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			ExpungedSearches = new List<string> ();  			TList _list24 = iprot.ReadListBegin ();  			for (int _i25 = 0; _i25 < _list24.Count; ++_i25) {  				string _elem26 = null;  				_elem26 = iprot.ReadString ();  				ExpungedSearches.Add (_elem26);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook> ();  			TList _list27 = iprot.ReadListBegin ();  			for (int _i28 = 0; _i28 < _list27.Count; ++_i28) {  				Evernote.EDAM.Type.LinkedNotebook _elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29 = new Evernote.EDAM.Type.LinkedNotebook ();  				_elem29.Read (iprot);  				LinkedNotebooks.Add (_elem29);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			ExpungedLinkedNotebooks = new List<string> ();  			TList _list30 = iprot.ReadListBegin ();  			for (int _i31 = 0; _i31 < _list30.Count; ++_i31) {  				string _elem32 = null;  				_elem32 = iprot.ReadString ();  				ExpungedLinkedNotebooks.Add (_elem32);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (__isset.chunkHighUSN) {  	field.Name = "chunkHighUSN";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ChunkHighUSN);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (__isset.updateCount) {  	field.Name = "updateCount";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (Notes != null && __isset.notes) {  	field.Name = "notes";  	field.Type = TType.List;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Notes.Count));  		foreach (Evernote.EDAM.Type.Note _iter33 in Notes) {  			_iter33.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (Notebooks != null && __isset.notebooks) {  	field.Name = "notebooks";  	field.Type = TType.List;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Notebooks.Count));  		foreach (Evernote.EDAM.Type.Notebook _iter34 in Notebooks) {  			_iter34.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (Tags != null && __isset.tags) {  	field.Name = "tags";  	field.Type = TType.List;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Tags.Count));  		foreach (Evernote.EDAM.Type.Tag _iter35 in Tags) {  			_iter35.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (Searches != null && __isset.searches) {  	field.Name = "searches";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Searches.Count));  		foreach (Evernote.EDAM.Type.SavedSearch _iter36 in Searches) {  			_iter36.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (Resources != null && __isset.resources) {  	field.Name = "resources";  	field.Type = TType.List;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Resources.Count));  		foreach (Evernote.EDAM.Type.Resource _iter37 in Resources) {  			_iter37.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (ExpungedNotes != null && __isset.expungedNotes) {  	field.Name = "expungedNotes";  	field.Type = TType.List;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ExpungedNotes.Count));  		foreach (string _iter38 in ExpungedNotes) {  			oprot.WriteString (_iter38);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (ExpungedNotebooks != null && __isset.expungedNotebooks) {  	field.Name = "expungedNotebooks";  	field.Type = TType.List;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ExpungedNotebooks.Count));  		foreach (string _iter39 in ExpungedNotebooks) {  			oprot.WriteString (_iter39);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (ExpungedTags != null && __isset.expungedTags) {  	field.Name = "expungedTags";  	field.Type = TType.List;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ExpungedTags.Count));  		foreach (string _iter40 in ExpungedTags) {  			oprot.WriteString (_iter40);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (ExpungedSearches != null && __isset.expungedSearches) {  	field.Name = "expungedSearches";  	field.Type = TType.List;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ExpungedSearches.Count));  		foreach (string _iter41 in ExpungedSearches) {  			oprot.WriteString (_iter41);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (LinkedNotebooks != null && __isset.linkedNotebooks) {  	field.Name = "linkedNotebooks";  	field.Type = TType.List;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' LinkedNotebooks.Count));  		foreach (Evernote.EDAM.Type.LinkedNotebook _iter42 in LinkedNotebooks) {  			_iter42.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: if (ExpungedLinkedNotebooks != null && __isset.expungedLinkedNotebooks) {  	field.Name = "expungedLinkedNotebooks";  	field.Type = TType.List;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ExpungedLinkedNotebooks.Count));  		foreach (string _iter43 in ExpungedLinkedNotebooks) {  			oprot.WriteString (_iter43);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludeNoteResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeNoteAttributes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			IncludeNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			IncludeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			IncludeSearches = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			IncludeResources = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			IncludeLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			IncludeExpunged = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			RequireNoteContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludeNoteResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeNoteAttributes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		IncludeNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		IncludeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		IncludeSearches = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		IncludeResources = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		IncludeLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		IncludeExpunged = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		IncludeNoteApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		IncludeResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		RequireNoteContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeNoteResources) {  	field.Name = "includeNoteResources";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNoteResources);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeNoteAttributes) {  	field.Name = "includeNoteAttributes";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNoteAttributes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeNotebooks) {  	field.Name = "includeNotebooks";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeTags) {  	field.Name = "includeTags";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeTags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeSearches) {  	field.Name = "includeSearches";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeSearches);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeResources) {  	field.Name = "includeResources";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeResources);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeLinkedNotebooks) {  	field.Name = "includeLinkedNotebooks";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeLinkedNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeExpunged) {  	field.Name = "includeExpunged";  	field.Type = TType.Bool;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeExpunged);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeNoteApplicationDataFullMap) {  	field.Name = "includeNoteApplicationDataFullMap";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNoteApplicationDataFullMap);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (RequireNoteContentClass != null && __isset.requireNoteContentClass) {  	field.Name = "requireNoteContentClass";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RequireNoteContentClass);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeResourceApplicationDataFullMap) {  	field.Name = "includeResourceApplicationDataFullMap";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeResourceApplicationDataFullMap);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: if (__isset.includeNoteResourceApplicationDataFullMap) {  	field.Name = "includeNoteResourceApplicationDataFullMap";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeNoteResourceApplicationDataFullMap);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			FullSyncBefore = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Uploaded = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			FullSyncBefore = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Uploaded = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			FullSyncBefore = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			UpdateCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			Uploaded = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		FullSyncBefore = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Uploaded = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		FullSyncBefore = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Uploaded = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		FullSyncBefore = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		UpdateCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		Uploaded = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: if (__isset.fullSyncBefore) {  	field.Name = "fullSyncBefore";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (FullSyncBefore);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: if (__isset.updateCount) {  	field.Name = "updateCount";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: if (__isset.uploaded) {  	field.Name = "uploaded";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Uploaded);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.NoteStore,SyncState,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			UploadLimit = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			UploadLimitEnd = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			UploadLimitNextMonth = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			PremiumOrderNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			PremiumCommerceService = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			PremiumServiceStart = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			PremiumServiceSKU = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			LastSuccessfulCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			LastFailedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			LastFailedChargeReason = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I64) {  			NextPaymentDue = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I64) {  			PremiumLockUntil = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			PremiumSubscriptionNumber = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			LastRequestedCharge = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.String) {  			Currency = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UnitPrice = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.I32) {  			BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.I32) {  			UnitDiscount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.I64) {  			NextChargeDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		UploadLimit = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		UploadLimitEnd = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		UploadLimitNextMonth = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		PremiumOrderNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		PremiumCommerceService = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		PremiumServiceStart = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		PremiumServiceSKU = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		LastSuccessfulCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		LastFailedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		LastFailedChargeReason = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I64) {  		NextPaymentDue = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I64) {  		PremiumLockUntil = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		PremiumSubscriptionNumber = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		LastRequestedCharge = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.String) {  		Currency = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UnitPrice = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.I32) {  		BusinessRole = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.I32) {  		UnitDiscount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.I64) {  		NextChargeDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.uploadLimitEnd) {  	field.Name = "uploadLimitEnd";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (UploadLimitEnd);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.uploadLimitNextMonth) {  	field.Name = "uploadLimitNextMonth";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (UploadLimitNextMonth);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.premiumServiceStatus) {  	field.Name = "premiumServiceStatus";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)PremiumServiceStatus);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (PremiumOrderNumber != null && __isset.premiumOrderNumber) {  	field.Name = "premiumOrderNumber";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PremiumOrderNumber);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (PremiumCommerceService != null && __isset.premiumCommerceService) {  	field.Name = "premiumCommerceService";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PremiumCommerceService);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.premiumServiceStart) {  	field.Name = "premiumServiceStart";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PremiumServiceStart);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (PremiumServiceSKU != null && __isset.premiumServiceSKU) {  	field.Name = "premiumServiceSKU";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PremiumServiceSKU);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.lastSuccessfulCharge) {  	field.Name = "lastSuccessfulCharge";  	field.Type = TType.I64;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastSuccessfulCharge);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.lastFailedCharge) {  	field.Name = "lastFailedCharge";  	field.Type = TType.I64;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastFailedCharge);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (LastFailedChargeReason != null && __isset.lastFailedChargeReason) {  	field.Name = "lastFailedChargeReason";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (LastFailedChargeReason);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.nextPaymentDue) {  	field.Name = "nextPaymentDue";  	field.Type = TType.I64;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (NextPaymentDue);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.premiumLockUntil) {  	field.Name = "premiumLockUntil";  	field.Type = TType.I64;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PremiumLockUntil);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.updated) {  	field.Name = "updated";  	field.Type = TType.I64;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Updated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (PremiumSubscriptionNumber != null && __isset.premiumSubscriptionNumber) {  	field.Name = "premiumSubscriptionNumber";  	field.Type = TType.String;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PremiumSubscriptionNumber);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.lastRequestedCharge) {  	field.Name = "lastRequestedCharge";  	field.Type = TType.I64;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (LastRequestedCharge);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (Currency != null && __isset.currency) {  	field.Name = "currency";  	field.Type = TType.String;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Currency);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.unitPrice) {  	field.Name = "unitPrice";  	field.Type = TType.I32;  	field.ID = 19;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UnitPrice);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 19;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.businessId) {  	field.Name = "businessId";  	field.Type = TType.I32;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (BusinessId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (BusinessName != null && __isset.businessName) {  	field.Name = "businessName";  	field.Type = TType.String;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BusinessName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.businessRole) {  	field.Name = "businessRole";  	field.Type = TType.I32;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)BusinessRole);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.unitDiscount) {  	field.Name = "unitDiscount";  	field.Type = TType.I32;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UnitDiscount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: if (__isset.nextChargeDate) {  	field.Name = "nextChargeDate";  	field.Type = TType.I64;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (NextChargeDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Accounting,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			NotebookDescription = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Recommended = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			NotebookDescription = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Recommended = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		NotebookDescription = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Recommended = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		NotebookDescription = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Recommended = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: if (__isset.privilege) {  	field.Name = "privilege";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Privilege);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: if (__isset.recommended) {  	field.Name = "recommended";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Recommended);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Role = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Role = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			BusinessName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Role = (BusinessUserRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Role = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Role = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		BusinessName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Role = (BusinessUserRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: if (BusinessName != null && __isset.businessName) {  	field.Name = "businessName";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BusinessName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: if (__isset.role) {  	field.Name = "role";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Role);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: if (Email != null && __isset.email) {  	field.Name = "email";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Email);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			BodyHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Body = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			BodyHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Size = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Body = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		BodyHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Body = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		BodyHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Size = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Body = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: if (__isset.size) {  	field.Name = "size";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (Size);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: if (Body != null && __isset.body) {  	field.Name = "body";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBinary (Body);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Data,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,LazyMap,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Set) {  			{  				KeysOnly = new THashSet<string> ();  				TSet _set8 = iprot.ReadSetBegin ();  				for (int _i9 = 0; _i9 < _set8.Count; ++_i9) {  					string _elem10 = null;  					_elem10 = iprot.ReadString ();  					KeysOnly.Add (_elem10);  				}  				iprot.ReadSetEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Map) {  			{  				FullMap = new Dictionary<string' string> ();  				TMap _map11 = iprot.ReadMapBegin ();  				for (int _i12 = 0; _i12 < _map11.Count; ++_i12) {  					string _key13;  					string _val14;  					_key13 = iprot.ReadString ();  					_val14 = iprot.ReadString ();  					FullMap [_key13] = _val14;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LazyMap,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Set) {  		{  			KeysOnly = new THashSet<string> ();  			TSet _set8 = iprot.ReadSetBegin ();  			for (int _i9 = 0; _i9 < _set8.Count; ++_i9) {  				string _elem10 = null;  				_elem10 = iprot.ReadString ();  				KeysOnly.Add (_elem10);  			}  			iprot.ReadSetEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Map) {  		{  			FullMap = new Dictionary<string' string> ();  			TMap _map11 = iprot.ReadMapBegin ();  			for (int _i12 = 0; _i12 < _map11.Count; ++_i12) {  				string _key13;  				string _val14;  				_key13 = iprot.ReadString ();  				_val14 = iprot.ReadString ();  				FullMap [_key13] = _val14;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LazyMap,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Write,The following statement contains a magic number: if (FullMap != null && __isset.fullMap) {  	field.Name = "fullMap";  	field.Type = TType.Map;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.String' FullMap.Count));  		foreach (string _iter16 in FullMap.Keys) {  			oprot.WriteString (_iter16);  			oprot.WriteString (FullMap [_iter16]);  			oprot.WriteMapEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LazyMap,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 2:  		if (field.Type == TType.String) {  			ShareName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			BusinessId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 2:  	if (field.Type == TType.String) {  		ShareName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		BusinessId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (ShareName != null && __isset.shareName) {  	field.Name = "shareName";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShareName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (Username != null && __isset.username) {  	field.Name = "username";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Username);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (ShardId != null && __isset.shardId) {  	field.Name = "shardId";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShardId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (ShareKey != null && __isset.shareKey) {  	field.Name = "shareKey";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShareKey);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (Uri != null && __isset.uri) {  	field.Name = "uri";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Uri);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (Guid != null && __isset.guid) {  	field.Name = "guid";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Guid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (NoteStoreUrl != null && __isset.noteStoreUrl) {  	field.Name = "noteStoreUrl";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NoteStoreUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {  	field.Name = "webApiUrlPrefix";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (WebApiUrlPrefix);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (Stack != null && __isset.stack) {  	field.Name = "stack";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Stack);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: if (__isset.businessId) {  	field.Name = "businessId";  	field.Type = TType.I32;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (BusinessId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,LinkedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Title = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Content = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			ContentHash = iprot.ReadBinary ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			ContentLength = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.List) {  			{  				TagGuids = new List<string> ();  				TList _list22 = iprot.ReadListBegin ();  				for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  					string _elem24 = null;  					_elem24 = iprot.ReadString ();  					TagGuids.Add (_elem24);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				Resources = new List<Resource> ();  				TList _list25 = iprot.ReadListBegin ();  				for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  					Resource _elem27 = new Resource ();  					_elem27 = new Resource ();  					_elem27.Read (iprot);  					Resources.Add (_elem27);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Struct) {  			Attributes = new NoteAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.List) {  			{  				TagNames = new List<string> ();  				TList _list28 = iprot.ReadListBegin ();  				for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  					string _elem30 = null;  					_elem30 = iprot.ReadString ();  					TagNames.Add (_elem30);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Title = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Content = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		ContentHash = iprot.ReadBinary ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		ContentLength = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.List) {  		{  			TagGuids = new List<string> ();  			TList _list22 = iprot.ReadListBegin ();  			for (int _i23 = 0; _i23 < _list22.Count; ++_i23) {  				string _elem24 = null;  				_elem24 = iprot.ReadString ();  				TagGuids.Add (_elem24);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			Resources = new List<Resource> ();  			TList _list25 = iprot.ReadListBegin ();  			for (int _i26 = 0; _i26 < _list25.Count; ++_i26) {  				Resource _elem27 = new Resource ();  				_elem27 = new Resource ();  				_elem27.Read (iprot);  				Resources.Add (_elem27);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Struct) {  		Attributes = new NoteAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.List) {  		{  			TagNames = new List<string> ();  			TList _list28 = iprot.ReadListBegin ();  			for (int _i29 = 0; _i29 < _list28.Count; ++_i29) {  				string _elem30 = null;  				_elem30 = iprot.ReadString ();  				TagNames.Add (_elem30);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (Title != null && __isset.title) {  	field.Name = "title";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Title);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (Content != null && __isset.content) {  	field.Name = "content";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Content);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (ContentHash != null && __isset.contentHash) {  	field.Name = "contentHash";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBinary (ContentHash);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.contentLength) {  	field.Name = "contentLength";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ContentLength);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.created) {  	field.Name = "created";  	field.Type = TType.I64;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Created);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.updated) {  	field.Name = "updated";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Updated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.deleted) {  	field.Name = "deleted";  	field.Type = TType.I64;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Deleted);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.active) {  	field.Name = "active";  	field.Type = TType.Bool;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Active);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (NotebookGuid != null && __isset.notebookGuid) {  	field.Name = "notebookGuid";  	field.Type = TType.String;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotebookGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (TagGuids != null && __isset.tagGuids) {  	field.Name = "tagGuids";  	field.Type = TType.List;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' TagGuids.Count));  		foreach (string _iter31 in TagGuids) {  			oprot.WriteString (_iter31);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (Resources != null && __isset.resources) {  	field.Name = "resources";  	field.Type = TType.List;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' Resources.Count));  		foreach (Resource _iter32 in Resources) {  			_iter32.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (Attributes != null && __isset.attributes) {  	field.Name = "attributes";  	field.Type = TType.Struct;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	Attributes.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: if (TagNames != null && __isset.tagNames) {  	field.Name = "tagNames";  	field.Type = TType.List;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' TagNames.Count));  		foreach (string _iter33 in TagNames) {  			oprot.WriteString (_iter33);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Note,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			SubjectDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.String) {  			Author = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			Source = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.String) {  			SourceApplication = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I64) {  			ShareDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			ReminderOrder = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			ReminderDoneTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I64) {  			ReminderTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PlaceName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.String) {  			ContentClass = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			LastEditedBy = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.Map) {  			{  				Classifications = new Dictionary<string' string> ();  				TMap _map17 = iprot.ReadMapBegin ();  				for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  					string _key19;  					string _val20;  					_key19 = iprot.ReadString ();  					_val20 = iprot.ReadString ();  					Classifications [_key19] = _val20;  				}  				iprot.ReadMapEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 27:  		if (field.Type == TType.I32) {  			CreatorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.I32) {  			LastEditorId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		SubjectDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.String) {  		Author = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		Source = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.String) {  		SourceApplication = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I64) {  		ShareDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		ReminderOrder = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		ReminderDoneTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I64) {  		ReminderTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PlaceName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.String) {  		ContentClass = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		LastEditedBy = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.Map) {  		{  			Classifications = new Dictionary<string' string> ();  			TMap _map17 = iprot.ReadMapBegin ();  			for (int _i18 = 0; _i18 < _map17.Count; ++_i18) {  				string _key19;  				string _val20;  				_key19 = iprot.ReadString ();  				_val20 = iprot.ReadString ();  				Classifications [_key19] = _val20;  			}  			iprot.ReadMapEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 27:  	if (field.Type == TType.I32) {  		CreatorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.I32) {  		LastEditorId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.latitude) {  	field.Name = "latitude";  	field.Type = TType.Double;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Latitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.longitude) {  	field.Name = "longitude";  	field.Type = TType.Double;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Longitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.altitude) {  	field.Name = "altitude";  	field.Type = TType.Double;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Altitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (Author != null && __isset.author) {  	field.Name = "author";  	field.Type = TType.String;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Author);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (Source != null && __isset.source) {  	field.Name = "source";  	field.Type = TType.String;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Source);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (SourceURL != null && __isset.sourceURL) {  	field.Name = "sourceURL";  	field.Type = TType.String;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SourceURL);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (SourceApplication != null && __isset.sourceApplication) {  	field.Name = "sourceApplication";  	field.Type = TType.String;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SourceApplication);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.shareDate) {  	field.Name = "shareDate";  	field.Type = TType.I64;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ShareDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.reminderOrder) {  	field.Name = "reminderOrder";  	field.Type = TType.I64;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ReminderOrder);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.reminderDoneTime) {  	field.Name = "reminderDoneTime";  	field.Type = TType.I64;  	field.ID = 19;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ReminderDoneTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 19;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.reminderTime) {  	field.Name = "reminderTime";  	field.Type = TType.I64;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ReminderTime);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (PlaceName != null && __isset.placeName) {  	field.Name = "placeName";  	field.Type = TType.String;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PlaceName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (ContentClass != null && __isset.contentClass) {  	field.Name = "contentClass";  	field.Type = TType.String;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ContentClass);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (ApplicationData != null && __isset.applicationData) {  	field.Name = "applicationData";  	field.Type = TType.Struct;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	ApplicationData.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (LastEditedBy != null && __isset.lastEditedBy) {  	field.Name = "lastEditedBy";  	field.Type = TType.String;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (LastEditedBy);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (Classifications != null && __isset.classifications) {  	field.Name = "classifications";  	field.Type = TType.Map;  	field.ID = 26;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteMapBegin (new TMap (TType.String' TType.String' Classifications.Count));  		foreach (string _iter21 in Classifications.Keys) {  			oprot.WriteString (_iter21);  			oprot.WriteString (Classifications [_iter21]);  			oprot.WriteMapEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 26;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.creatorId) {  	field.Name = "creatorId";  	field.Type = TType.I32;  	field.ID = 27;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (CreatorId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 27;  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: if (__isset.lastEditorId) {  	field.Name = "lastEditorId";  	field.Type = TType.I32;  	field.ID = 28;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (LastEditorId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NoteAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 28;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			DefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Struct) {  			Publishing = new Publishing ();  			Publishing.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Published = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.String) {  			Stack = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.List) {  			{  				SharedNotebookIds = new List<long> ();  				TList _list34 = iprot.ReadListBegin ();  				for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  					long _elem36 = 0;  					_elem36 = iprot.ReadI64 ();  					SharedNotebookIds.Add (_elem36);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.List) {  			{  				SharedNotebooks = new List<SharedNotebook> ();  				TList _list37 = iprot.ReadListBegin ();  				for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  					SharedNotebook _elem39 = new SharedNotebook ();  					_elem39 = new SharedNotebook ();  					_elem39.Read (iprot);  					SharedNotebooks.Add (_elem39);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			BusinessNotebook = new BusinessNotebook ();  			BusinessNotebook.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Contact = new User ();  			Contact.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			Restrictions = new NotebookRestrictions ();  			Restrictions.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		DefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Struct) {  		Publishing = new Publishing ();  		Publishing.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Published = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.String) {  		Stack = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.List) {  		{  			SharedNotebookIds = new List<long> ();  			TList _list34 = iprot.ReadListBegin ();  			for (int _i35 = 0; _i35 < _list34.Count; ++_i35) {  				long _elem36 = 0;  				_elem36 = iprot.ReadI64 ();  				SharedNotebookIds.Add (_elem36);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.List) {  		{  			SharedNotebooks = new List<SharedNotebook> ();  			TList _list37 = iprot.ReadListBegin ();  			for (int _i38 = 0; _i38 < _list37.Count; ++_i38) {  				SharedNotebook _elem39 = new SharedNotebook ();  				_elem39 = new SharedNotebook ();  				_elem39.Read (iprot);  				SharedNotebooks.Add (_elem39);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		BusinessNotebook = new BusinessNotebook ();  		BusinessNotebook.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Contact = new User ();  		Contact.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		Restrictions = new NotebookRestrictions ();  		Restrictions.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (__isset.defaultNotebook) {  	field.Name = "defaultNotebook";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (DefaultNotebook);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (__isset.serviceCreated) {  	field.Name = "serviceCreated";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ServiceCreated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (__isset.serviceUpdated) {  	field.Name = "serviceUpdated";  	field.Type = TType.I64;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ServiceUpdated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (Publishing != null && __isset.publishing) {  	field.Name = "publishing";  	field.Type = TType.Struct;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	Publishing.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (__isset.published) {  	field.Name = "published";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Published);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (Stack != null && __isset.stack) {  	field.Name = "stack";  	field.Type = TType.String;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Stack);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (SharedNotebookIds != null && __isset.sharedNotebookIds) {  	field.Name = "sharedNotebookIds";  	field.Type = TType.List;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.I64' SharedNotebookIds.Count));  		foreach (long _iter40 in SharedNotebookIds) {  			oprot.WriteI64 (_iter40);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (SharedNotebooks != null && __isset.sharedNotebooks) {  	field.Name = "sharedNotebooks";  	field.Type = TType.List;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.Struct' SharedNotebooks.Count));  		foreach (SharedNotebook _iter41 in SharedNotebooks) {  			_iter41.Write (oprot);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (BusinessNotebook != null && __isset.businessNotebook) {  	field.Name = "businessNotebook";  	field.Type = TType.Struct;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	BusinessNotebook.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (Contact != null && __isset.contact) {  	field.Name = "contact";  	field.Type = TType.Struct;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	Contact.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: if (Restrictions != null && __isset.restrictions) {  	field.Name = "restrictions";  	field.Type = TType.Struct;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	Restrictions.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Notebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NotebookDisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ContactName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			HasSharedNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			JoinedUserCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NotebookDisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ContactName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			HasSharedNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			JoinedUserCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NotebookDisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ContactName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			HasSharedNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			JoinedUserCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NotebookDisplayName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ContactName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			HasSharedNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			JoinedUserCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NotebookDisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ContactName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		HasSharedNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		JoinedUserCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NotebookDisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ContactName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		HasSharedNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		JoinedUserCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NotebookDisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ContactName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		HasSharedNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		JoinedUserCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NotebookDisplayName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ContactName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		HasSharedNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		JoinedUserCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: if (NotebookDisplayName != null && __isset.notebookDisplayName) {  	field.Name = "notebookDisplayName";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotebookDisplayName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: if (ContactName != null && __isset.contactName) {  	field.Name = "contactName";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ContactName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: if (__isset.hasSharedNotebook) {  	field.Name = "hasSharedNotebook";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (HasSharedNotebook);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: if (__isset.joinedUserCount) {  	field.Name = "joinedUserCount";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (JoinedUserCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			NoReadNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			NoCreateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			NoUpdateNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			NoExpungeNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NoShareNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			NoEmailNotes = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			NoSendMessageToRecipients = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			NoUpdateNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			NoExpungeNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			NoSetDefaultNotebook = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			NoSetNotebookStack = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			NoPublishToPublic = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			NoPublishToBusinessLibrary = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.Bool) {  			NoCreateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Bool) {  			NoUpdateTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Bool) {  			NoExpungeTags = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Bool) {  			NoSetParentTag = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Bool) {  			NoCreateSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I32) {  			UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.I32) {  			ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		NoReadNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		NoCreateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		NoUpdateNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		NoExpungeNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NoShareNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		NoEmailNotes = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		NoSendMessageToRecipients = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		NoUpdateNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		NoExpungeNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		NoSetDefaultNotebook = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		NoSetNotebookStack = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		NoPublishToPublic = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		NoPublishToBusinessLibrary = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.Bool) {  		NoCreateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Bool) {  		NoUpdateTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Bool) {  		NoExpungeTags = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Bool) {  		NoSetParentTag = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Bool) {  		NoCreateSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I32) {  		UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.I32) {  		ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noCreateNotes) {  	field.Name = "noCreateNotes";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoCreateNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noUpdateNotes) {  	field.Name = "noUpdateNotes";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoUpdateNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noExpungeNotes) {  	field.Name = "noExpungeNotes";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoExpungeNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noShareNotes) {  	field.Name = "noShareNotes";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoShareNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noEmailNotes) {  	field.Name = "noEmailNotes";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoEmailNotes);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noSendMessageToRecipients) {  	field.Name = "noSendMessageToRecipients";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoSendMessageToRecipients);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noUpdateNotebook) {  	field.Name = "noUpdateNotebook";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoUpdateNotebook);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noExpungeNotebook) {  	field.Name = "noExpungeNotebook";  	field.Type = TType.Bool;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoExpungeNotebook);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noSetDefaultNotebook) {  	field.Name = "noSetDefaultNotebook";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoSetDefaultNotebook);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noSetNotebookStack) {  	field.Name = "noSetNotebookStack";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoSetNotebookStack);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noPublishToPublic) {  	field.Name = "noPublishToPublic";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoPublishToPublic);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noPublishToBusinessLibrary) {  	field.Name = "noPublishToBusinessLibrary";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoPublishToBusinessLibrary);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noCreateTags) {  	field.Name = "noCreateTags";  	field.Type = TType.Bool;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoCreateTags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noUpdateTags) {  	field.Name = "noUpdateTags";  	field.Type = TType.Bool;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoUpdateTags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noExpungeTags) {  	field.Name = "noExpungeTags";  	field.Type = TType.Bool;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoExpungeTags);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noSetParentTag) {  	field.Name = "noSetParentTag";  	field.Type = TType.Bool;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoSetParentTag);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.noCreateSharedNotebooks) {  	field.Name = "noCreateSharedNotebooks";  	field.Type = TType.Bool;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NoCreateSharedNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.updateWhichSharedNotebookRestrictions) {  	field.Name = "updateWhichSharedNotebookRestrictions";  	field.Type = TType.I32;  	field.ID = 19;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)UpdateWhichSharedNotebookRestrictions);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 19;  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: if (__isset.expungeWhichSharedNotebookRestrictions) {  	field.Name = "expungeWhichSharedNotebookRestrictions";  	field.Type = TType.I32;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ExpungeWhichSharedNotebookRestrictions);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			Premium = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			PremiumRecurring = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I64) {  			PremiumExpirationDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			PremiumExtendable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			PremiumPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			PremiumCancellationPending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			CanPurchaseUploadAllowance = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SponsoredGroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I32) {  			SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			PremiumUpgradable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		Premium = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		PremiumRecurring = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I64) {  		PremiumExpirationDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		PremiumExtendable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		PremiumPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		PremiumCancellationPending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		CanPurchaseUploadAllowance = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SponsoredGroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I32) {  		SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		PremiumUpgradable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premium) {  	field.Name = "premium";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Premium);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumRecurring) {  	field.Name = "premiumRecurring";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PremiumRecurring);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumExpirationDate) {  	field.Name = "premiumExpirationDate";  	field.Type = TType.I64;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PremiumExpirationDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumExtendable) {  	field.Name = "premiumExtendable";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PremiumExtendable);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumPending) {  	field.Name = "premiumPending";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PremiumPending);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumCancellationPending) {  	field.Name = "premiumCancellationPending";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PremiumCancellationPending);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.canPurchaseUploadAllowance) {  	field.Name = "canPurchaseUploadAllowance";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (CanPurchaseUploadAllowance);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (SponsoredGroupName != null && __isset.sponsoredGroupName) {  	field.Name = "sponsoredGroupName";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SponsoredGroupName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.sponsoredGroupRole) {  	field.Name = "sponsoredGroupRole";  	field.Type = TType.I32;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)SponsoredGroupRole);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: if (__isset.premiumUpgradable) {  	field.Name = "premiumUpgradable";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (PremiumUpgradable);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,PremiumInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Order = (NoteSortOrder)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PublicDescription = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Order = (NoteSortOrder)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PublicDescription = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Uri = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			Order = (NoteSortOrder)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			Ascending = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			PublicDescription = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Order = (NoteSortOrder)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PublicDescription = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Order = (NoteSortOrder)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PublicDescription = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Uri = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		Order = (NoteSortOrder)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		Ascending = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		PublicDescription = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: if (__isset.order) {  	field.Name = "order";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Order);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: if (__isset.ascending) {  	field.Name = "ascending";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Ascending);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: if (PublicDescription != null && __isset.publicDescription) {  	field.Name = "publicDescription";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PublicDescription);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Publishing,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			NoteGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Struct) {  			Data = new Data ();  			Data.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Mime = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I16) {  			Width = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.I16) {  			Height = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I16) {  			Duration = iprot.ReadI16 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Struct) {  			Recognition = new Data ();  			Recognition.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Struct) {  			Attributes = new ResourceAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			AlternateData = new Data ();  			AlternateData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		NoteGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Struct) {  		Data = new Data ();  		Data.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Mime = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I16) {  		Width = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.I16) {  		Height = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I16) {  		Duration = iprot.ReadI16 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Struct) {  		Recognition = new Data ();  		Recognition.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Struct) {  		Attributes = new ResourceAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		AlternateData = new Data ();  		AlternateData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (NoteGuid != null && __isset.noteGuid) {  	field.Name = "noteGuid";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NoteGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (Data != null && __isset.data) {  	field.Name = "data";  	field.Type = TType.Struct;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	Data.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (Mime != null && __isset.mime) {  	field.Name = "mime";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Mime);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (__isset.width) {  	field.Name = "width";  	field.Type = TType.I16;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI16 (Width);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (__isset.height) {  	field.Name = "height";  	field.Type = TType.I16;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteI16 (Height);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (__isset.duration) {  	field.Name = "duration";  	field.Type = TType.I16;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI16 (Duration);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (__isset.active) {  	field.Name = "active";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Active);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (Recognition != null && __isset.recognition) {  	field.Name = "recognition";  	field.Type = TType.Struct;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	Recognition.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (Attributes != null && __isset.attributes) {  	field.Name = "attributes";  	field.Type = TType.Struct;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	Attributes.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: if (AlternateData != null && __isset.alternateData) {  	field.Name = "alternateData";  	field.Type = TType.Struct;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	AlternateData.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Resource,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			SourceURL = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I64) {  			Timestamp = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			Latitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Double) {  			Longitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Double) {  			Altitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			CameraMake = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			CameraModel = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			ClientWillIndex = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			RecoType = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.String) {  			FileName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			Attachment = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Struct) {  			ApplicationData = new LazyMap ();  			ApplicationData.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		SourceURL = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I64) {  		Timestamp = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		Latitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Double) {  		Longitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Double) {  		Altitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		CameraMake = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		CameraModel = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		ClientWillIndex = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		RecoType = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.String) {  		FileName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		Attachment = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Struct) {  		ApplicationData = new LazyMap ();  		ApplicationData.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.timestamp) {  	field.Name = "timestamp";  	field.Type = TType.I64;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Timestamp);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.latitude) {  	field.Name = "latitude";  	field.Type = TType.Double;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Latitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.longitude) {  	field.Name = "longitude";  	field.Type = TType.Double;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Longitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.altitude) {  	field.Name = "altitude";  	field.Type = TType.Double;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (Altitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (CameraMake != null && __isset.cameraMake) {  	field.Name = "cameraMake";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CameraMake);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (CameraModel != null && __isset.cameraModel) {  	field.Name = "cameraModel";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (CameraModel);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.clientWillIndex) {  	field.Name = "clientWillIndex";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (ClientWillIndex);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (RecoType != null && __isset.recoType) {  	field.Name = "recoType";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RecoType);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (FileName != null && __isset.fileName) {  	field.Name = "fileName";  	field.Type = TType.String;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (FileName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (__isset.attachment) {  	field.Name = "attachment";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Attachment);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: if (ApplicationData != null && __isset.applicationData) {  	field.Name = "applicationData";  	field.Type = TType.Struct;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	ApplicationData.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,ResourceAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Query = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Format = (QueryFormat)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Struct) {  			Scope = new SavedSearchScope ();  			Scope.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Query = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Format = (QueryFormat)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Struct) {  			Scope = new SavedSearchScope ();  			Scope.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Query = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Format = (QueryFormat)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Struct) {  			Scope = new SavedSearchScope ();  			Scope.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Query = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Format = (QueryFormat)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Struct) {  			Scope = new SavedSearchScope ();  			Scope.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Query = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			Format = (QueryFormat)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Struct) {  			Scope = new SavedSearchScope ();  			Scope.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Query = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Format = (QueryFormat)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Struct) {  		Scope = new SavedSearchScope ();  		Scope.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Query = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Format = (QueryFormat)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Struct) {  		Scope = new SavedSearchScope ();  		Scope.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Query = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Format = (QueryFormat)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Struct) {  		Scope = new SavedSearchScope ();  		Scope.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Query = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Format = (QueryFormat)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Struct) {  		Scope = new SavedSearchScope ();  		Scope.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Query = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		Format = (QueryFormat)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Struct) {  		Scope = new SavedSearchScope ();  		Scope.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: if (Query != null && __isset.query) {  	field.Name = "query";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Query);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: if (__isset.format) {  	field.Name = "format";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Format);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: if (Scope != null && __isset.scope) {  	field.Name = "scope";  	field.Type = TType.Struct;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	Scope.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearch,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeAccount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludePersonalLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeBusinessLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			IncludeAccount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			IncludePersonalLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Bool) {  			IncludeBusinessLinkedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeAccount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludePersonalLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeBusinessLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		IncludeAccount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		IncludePersonalLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Bool) {  		IncludeBusinessLinkedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: if (__isset.includePersonalLinkedNotebooks) {  	field.Name = "includePersonalLinkedNotebooks";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludePersonalLinkedNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: if (__isset.includeBusinessLinkedNotebooks) {  	field.Name = "includeBusinessLinkedNotebooks";  	field.Type = TType.Bool;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (IncludeBusinessLinkedNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SavedSearchScope,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			Id = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			NotebookGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			NotebookModifiable = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			RequireLogin = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I64) {  			ServiceCreated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			ServiceUpdated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.String) {  			ShareKey = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I32) {  			Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			AllowPreview = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Struct) {  			RecipientSettings = new SharedNotebookRecipientSettings ();  			RecipientSettings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		Id = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		NotebookGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		NotebookModifiable = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		RequireLogin = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I64) {  		ServiceCreated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		ServiceUpdated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.String) {  		ShareKey = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I32) {  		Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		AllowPreview = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Struct) {  		RecipientSettings = new SharedNotebookRecipientSettings ();  		RecipientSettings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.userId) {  	field.Name = "userId";  	field.Type = TType.I32;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UserId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (NotebookGuid != null && __isset.notebookGuid) {  	field.Name = "notebookGuid";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NotebookGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (Email != null && __isset.email) {  	field.Name = "email";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Email);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.notebookModifiable) {  	field.Name = "notebookModifiable";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (NotebookModifiable);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.requireLogin) {  	field.Name = "requireLogin";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (RequireLogin);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.serviceCreated) {  	field.Name = "serviceCreated";  	field.Type = TType.I64;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ServiceCreated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (ShareKey != null && __isset.shareKey) {  	field.Name = "shareKey";  	field.Type = TType.String;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShareKey);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (Username != null && __isset.username) {  	field.Name = "username";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Username);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.serviceUpdated) {  	field.Name = "serviceUpdated";  	field.Type = TType.I64;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (ServiceUpdated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.privilege) {  	field.Name = "privilege";  	field.Type = TType.I32;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Privilege);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (__isset.allowPreview) {  	field.Name = "allowPreview";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (AllowPreview);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: if (RecipientSettings != null && __isset.recipientSettings) {  	field.Name = "recipientSettings";  	field.Type = TType.Struct;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	RecipientSettings.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebook,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.Bool) {  			ReminderNotifyEmail = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Bool) {  			ReminderNotifyInApp = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.Bool) {  		ReminderNotifyEmail = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Bool) {  		ReminderNotifyInApp = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Write,The following statement contains a magic number: if (__isset.reminderNotifyInApp) {  	field.Name = "reminderNotifyInApp";  	field.Type = TType.Bool;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (ReminderNotifyInApp);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ParentGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ParentGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Guid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			ParentGuid = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.I32) {  			UpdateSequenceNum = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ParentGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ParentGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Guid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		ParentGuid = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.I32) {  		UpdateSequenceNum = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: if (ParentGuid != null && __isset.parentGuid) {  	field.Name = "parentGuid";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ParentGuid);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: if (__isset.updateSequenceNum) {  	field.Name = "updateSequenceNum";  	field.Type = TType.I32;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (UpdateSequenceNum);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,Tag,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			Id = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			Email = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			Timezone = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.I32) {  			Privilege = (PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.I64) {  			Created = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.I64) {  			Updated = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			Deleted = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			Active = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.Struct) {  			Attributes = new UserAttributes ();  			Attributes.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.Struct) {  			Accounting = new Accounting ();  			Accounting.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.Struct) {  			PremiumInfo = new PremiumInfo ();  			PremiumInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.Struct) {  			BusinessUserInfo = new BusinessUserInfo ();  			BusinessUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		Id = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		Email = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		Timezone = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.I32) {  		Privilege = (PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.I64) {  		Created = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.I64) {  		Updated = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		Deleted = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		Active = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.Struct) {  		Attributes = new UserAttributes ();  		Attributes.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.Struct) {  		Accounting = new Accounting ();  		Accounting.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.Struct) {  		PremiumInfo = new PremiumInfo ();  		PremiumInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.Struct) {  		BusinessUserInfo = new BusinessUserInfo ();  		BusinessUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Username != null && __isset.username) {  	field.Name = "username";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Username);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Email != null && __isset.email) {  	field.Name = "email";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Email);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Name != null && __isset.name) {  	field.Name = "name";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Name);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Timezone != null && __isset.timezone) {  	field.Name = "timezone";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Timezone);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (__isset.privilege) {  	field.Name = "privilege";  	field.Type = TType.I32;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Privilege);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (__isset.created) {  	field.Name = "created";  	field.Type = TType.I64;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Created);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (__isset.updated) {  	field.Name = "updated";  	field.Type = TType.I64;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Updated);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (__isset.deleted) {  	field.Name = "deleted";  	field.Type = TType.I64;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Deleted);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (__isset.active) {  	field.Name = "active";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Active);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (ShardId != null && __isset.shardId) {  	field.Name = "shardId";  	field.Type = TType.String;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShardId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Attributes != null && __isset.attributes) {  	field.Name = "attributes";  	field.Type = TType.Struct;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	Attributes.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (Accounting != null && __isset.accounting) {  	field.Name = "accounting";  	field.Type = TType.Struct;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	Accounting.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (PremiumInfo != null && __isset.premiumInfo) {  	field.Name = "premiumInfo";  	field.Type = TType.Struct;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	PremiumInfo.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: if (BusinessUserInfo != null && __isset.businessUserInfo) {  	field.Name = "businessUserInfo";  	field.Type = TType.Struct;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	BusinessUserInfo.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,User,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			DefaultLocationName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Double) {  			DefaultLatitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.Double) {  			DefaultLongitude = iprot.ReadDouble ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Bool) {  			Preactivation = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.List) {  			{  				ViewedPromotions = new List<string> ();  				TList _list0 = iprot.ReadListBegin ();  				for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  					string _elem2 = null;  					_elem2 = iprot.ReadString ();  					ViewedPromotions.Add (_elem2);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			IncomingEmailAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.List) {  			{  				RecentMailedAddresses = new List<string> ();  				TList _list3 = iprot.ReadListBegin ();  				for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  					string _elem5 = null;  					_elem5 = iprot.ReadString ();  					RecentMailedAddresses.Add (_elem5);  				}  				iprot.ReadListEnd ();  			}  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			Comments = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.I64) {  			DateAgreedToTermsOfService = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.I32) {  			MaxReferrals = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.I32) {  			ReferralCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 14:  		if (field.Type == TType.String) {  			RefererCode = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 15:  		if (field.Type == TType.I64) {  			SentEmailDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 16:  		if (field.Type == TType.I32) {  			SentEmailCount = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 17:  		if (field.Type == TType.I32) {  			DailyEmailLimit = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 18:  		if (field.Type == TType.I64) {  			EmailOptOutDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 19:  		if (field.Type == TType.I64) {  			PartnerEmailOptInDate = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 20:  		if (field.Type == TType.String) {  			PreferredLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 21:  		if (field.Type == TType.String) {  			PreferredCountry = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 22:  		if (field.Type == TType.Bool) {  			ClipFullPage = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 23:  		if (field.Type == TType.String) {  			TwitterUserName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 24:  		if (field.Type == TType.String) {  			TwitterId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 25:  		if (field.Type == TType.String) {  			GroupName = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 26:  		if (field.Type == TType.String) {  			RecognitionLanguage = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 28:  		if (field.Type == TType.String) {  			ReferralProof = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 29:  		if (field.Type == TType.Bool) {  			EducationalDiscount = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 30:  		if (field.Type == TType.String) {  			BusinessAddress = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 31:  		if (field.Type == TType.Bool) {  			HideSponsorBilling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 32:  		if (field.Type == TType.Bool) {  			TaxExempt = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 33:  		if (field.Type == TType.Bool) {  			UseEmailAutoFiling = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 34:  		if (field.Type == TType.I32) {  			ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		DefaultLocationName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Double) {  		DefaultLatitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.Double) {  		DefaultLongitude = iprot.ReadDouble ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Bool) {  		Preactivation = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.List) {  		{  			ViewedPromotions = new List<string> ();  			TList _list0 = iprot.ReadListBegin ();  			for (int _i1 = 0; _i1 < _list0.Count; ++_i1) {  				string _elem2 = null;  				_elem2 = iprot.ReadString ();  				ViewedPromotions.Add (_elem2);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		IncomingEmailAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.List) {  		{  			RecentMailedAddresses = new List<string> ();  			TList _list3 = iprot.ReadListBegin ();  			for (int _i4 = 0; _i4 < _list3.Count; ++_i4) {  				string _elem5 = null;  				_elem5 = iprot.ReadString ();  				RecentMailedAddresses.Add (_elem5);  			}  			iprot.ReadListEnd ();  		}  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		Comments = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.I64) {  		DateAgreedToTermsOfService = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.I32) {  		MaxReferrals = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.I32) {  		ReferralCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 14:  	if (field.Type == TType.String) {  		RefererCode = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 15:  	if (field.Type == TType.I64) {  		SentEmailDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 16:  	if (field.Type == TType.I32) {  		SentEmailCount = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 17:  	if (field.Type == TType.I32) {  		DailyEmailLimit = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 18:  	if (field.Type == TType.I64) {  		EmailOptOutDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 19:  	if (field.Type == TType.I64) {  		PartnerEmailOptInDate = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 20:  	if (field.Type == TType.String) {  		PreferredLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 21:  	if (field.Type == TType.String) {  		PreferredCountry = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 22:  	if (field.Type == TType.Bool) {  		ClipFullPage = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 23:  	if (field.Type == TType.String) {  		TwitterUserName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 24:  	if (field.Type == TType.String) {  		TwitterId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 25:  	if (field.Type == TType.String) {  		GroupName = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 26:  	if (field.Type == TType.String) {  		RecognitionLanguage = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 28:  	if (field.Type == TType.String) {  		ReferralProof = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 29:  	if (field.Type == TType.Bool) {  		EducationalDiscount = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 30:  	if (field.Type == TType.String) {  		BusinessAddress = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 31:  	if (field.Type == TType.Bool) {  		HideSponsorBilling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 32:  	if (field.Type == TType.Bool) {  		TaxExempt = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 33:  	if (field.Type == TType.Bool) {  		UseEmailAutoFiling = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 34:  	if (field.Type == TType.I32) {  		ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.defaultLatitude) {  	field.Name = "defaultLatitude";  	field.Type = TType.Double;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (DefaultLatitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.defaultLongitude) {  	field.Name = "defaultLongitude";  	field.Type = TType.Double;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteDouble (DefaultLongitude);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.preactivation) {  	field.Name = "preactivation";  	field.Type = TType.Bool;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (Preactivation);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (ViewedPromotions != null && __isset.viewedPromotions) {  	field.Name = "viewedPromotions";  	field.Type = TType.List;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' ViewedPromotions.Count));  		foreach (string _iter6 in ViewedPromotions) {  			oprot.WriteString (_iter6);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (IncomingEmailAddress != null && __isset.incomingEmailAddress) {  	field.Name = "incomingEmailAddress";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (IncomingEmailAddress);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (RecentMailedAddresses != null && __isset.recentMailedAddresses) {  	field.Name = "recentMailedAddresses";  	field.Type = TType.List;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	{  		oprot.WriteListBegin (new TList (TType.String' RecentMailedAddresses.Count));  		foreach (string _iter7 in RecentMailedAddresses) {  			oprot.WriteString (_iter7);  			oprot.WriteListEnd ();  		}  	}  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (Comments != null && __isset.comments) {  	field.Name = "comments";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Comments);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.dateAgreedToTermsOfService) {  	field.Name = "dateAgreedToTermsOfService";  	field.Type = TType.I64;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (DateAgreedToTermsOfService);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.maxReferrals) {  	field.Name = "maxReferrals";  	field.Type = TType.I32;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (MaxReferrals);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.referralCount) {  	field.Name = "referralCount";  	field.Type = TType.I32;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (ReferralCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (RefererCode != null && __isset.refererCode) {  	field.Name = "refererCode";  	field.Type = TType.String;  	field.ID = 14;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RefererCode);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 14;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.sentEmailDate) {  	field.Name = "sentEmailDate";  	field.Type = TType.I64;  	field.ID = 15;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (SentEmailDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 15;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.sentEmailCount) {  	field.Name = "sentEmailCount";  	field.Type = TType.I32;  	field.ID = 16;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (SentEmailCount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 16;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.dailyEmailLimit) {  	field.Name = "dailyEmailLimit";  	field.Type = TType.I32;  	field.ID = 17;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 (DailyEmailLimit);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 17;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.emailOptOutDate) {  	field.Name = "emailOptOutDate";  	field.Type = TType.I64;  	field.ID = 18;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (EmailOptOutDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 18;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.partnerEmailOptInDate) {  	field.Name = "partnerEmailOptInDate";  	field.Type = TType.I64;  	field.ID = 19;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (PartnerEmailOptInDate);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 19;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (PreferredLanguage != null && __isset.preferredLanguage) {  	field.Name = "preferredLanguage";  	field.Type = TType.String;  	field.ID = 20;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PreferredLanguage);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 20;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (PreferredCountry != null && __isset.preferredCountry) {  	field.Name = "preferredCountry";  	field.Type = TType.String;  	field.ID = 21;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (PreferredCountry);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 21;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.clipFullPage) {  	field.Name = "clipFullPage";  	field.Type = TType.Bool;  	field.ID = 22;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (ClipFullPage);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 22;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (TwitterUserName != null && __isset.twitterUserName) {  	field.Name = "twitterUserName";  	field.Type = TType.String;  	field.ID = 23;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (TwitterUserName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 23;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (TwitterId != null && __isset.twitterId) {  	field.Name = "twitterId";  	field.Type = TType.String;  	field.ID = 24;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (TwitterId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 24;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (GroupName != null && __isset.groupName) {  	field.Name = "groupName";  	field.Type = TType.String;  	field.ID = 25;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (GroupName);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 25;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (RecognitionLanguage != null && __isset.recognitionLanguage) {  	field.Name = "recognitionLanguage";  	field.Type = TType.String;  	field.ID = 26;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (RecognitionLanguage);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 26;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (ReferralProof != null && __isset.referralProof) {  	field.Name = "referralProof";  	field.Type = TType.String;  	field.ID = 28;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ReferralProof);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 28;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.educationalDiscount) {  	field.Name = "educationalDiscount";  	field.Type = TType.Bool;  	field.ID = 29;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EducationalDiscount);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 29;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (BusinessAddress != null && __isset.businessAddress) {  	field.Name = "businessAddress";  	field.Type = TType.String;  	field.ID = 30;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (BusinessAddress);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 30;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.hideSponsorBilling) {  	field.Name = "hideSponsorBilling";  	field.Type = TType.Bool;  	field.ID = 31;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (HideSponsorBilling);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 31;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.taxExempt) {  	field.Name = "taxExempt";  	field.Type = TType.Bool;  	field.ID = 32;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (TaxExempt);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 32;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.useEmailAutoFiling) {  	field.Name = "useEmailAutoFiling";  	field.Type = TType.Bool;  	field.ID = 33;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (UseEmailAutoFiling);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 33;  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: if (__isset.reminderEmailConfig) {  	field.Name = "reminderEmailConfig";  	field.Type = TType.I32;  	field.ID = 34;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)ReminderEmailConfig);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.Type,UserAttributes,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 34;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I64) {  			CurrentTime = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			AuthenticationToken = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I64) {  			Expiration = iprot.ReadI64 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.Struct) {  			User = new Evernote.EDAM.Type.User ();  			User.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Struct) {  			PublicUserInfo = new PublicUserInfo ();  			PublicUserInfo.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			SecondFactorRequired = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.String) {  			SecondFactorDeliveryHint = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I64) {  		CurrentTime = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		AuthenticationToken = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I64) {  		Expiration = iprot.ReadI64 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.Struct) {  		User = new Evernote.EDAM.Type.User ();  		User.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Struct) {  		PublicUserInfo = new PublicUserInfo ();  		PublicUserInfo.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		SecondFactorRequired = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.String) {  		SecondFactorDeliveryHint = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (AuthenticationToken != null && __isset.authenticationToken) {  	field.Name = "authenticationToken";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (AuthenticationToken);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (__isset.expiration) {  	field.Name = "expiration";  	field.Type = TType.I64;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI64 (Expiration);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (User != null && __isset.user) {  	field.Name = "user";  	field.Type = TType.Struct;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	User.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (PublicUserInfo != null && __isset.publicUserInfo) {  	field.Name = "publicUserInfo";  	field.Type = TType.Struct;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	PublicUserInfo.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (NoteStoreUrl != null && __isset.noteStoreUrl) {  	field.Name = "noteStoreUrl";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NoteStoreUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {  	field.Name = "webApiUrlPrefix";  	field.Type = TType.String;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (WebApiUrlPrefix);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (__isset.secondFactorRequired) {  	field.Name = "secondFactorRequired";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (SecondFactorRequired);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: if (SecondFactorDeliveryHint != null && __isset.secondFactorDeliveryHint) {  	field.Name = "secondFactorDeliveryHint";  	field.Type = TType.String;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SecondFactorDeliveryHint);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			Name = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.Struct) {  			Settings = new BootstrapSettings ();  			Settings.Read (iprot);  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		Name = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.Struct) {  		Settings = new BootstrapSettings ();  		Settings.Read (iprot);  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Write,The following statement contains a magic number: if (Settings != null && __isset.settings) {  	field.Name = "settings";  	field.Type = TType.Struct;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	Settings.Write (oprot);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.String) {  			ServiceHost = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			MarketingUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.String) {  			SupportUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			AccountEmailDomain = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.Bool) {  			EnableFacebookSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.Bool) {  			EnableGiftSubscriptions = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 7:  		if (field.Type == TType.Bool) {  			EnableSupportTickets = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 8:  		if (field.Type == TType.Bool) {  			EnableSharedNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 9:  		if (field.Type == TType.Bool) {  			EnableSingleNoteSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 10:  		if (field.Type == TType.Bool) {  			EnableSponsoredAccounts = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 11:  		if (field.Type == TType.Bool) {  			EnableTwitterSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 12:  		if (field.Type == TType.Bool) {  			EnableLinkedInSharing = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 13:  		if (field.Type == TType.Bool) {  			EnablePublicNotebooks = iprot.ReadBool ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.String) {  		ServiceHost = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		MarketingUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.String) {  		SupportUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		AccountEmailDomain = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.Bool) {  		EnableFacebookSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.Bool) {  		EnableGiftSubscriptions = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 7:  	if (field.Type == TType.Bool) {  		EnableSupportTickets = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 8:  	if (field.Type == TType.Bool) {  		EnableSharedNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 9:  	if (field.Type == TType.Bool) {  		EnableSingleNoteSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 10:  	if (field.Type == TType.Bool) {  		EnableSponsoredAccounts = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 11:  	if (field.Type == TType.Bool) {  		EnableTwitterSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 12:  	if (field.Type == TType.Bool) {  		EnableLinkedInSharing = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 13:  	if (field.Type == TType.Bool) {  		EnablePublicNotebooks = iprot.ReadBool ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (MarketingUrl != null && __isset.marketingUrl) {  	field.Name = "marketingUrl";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (MarketingUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (SupportUrl != null && __isset.supportUrl) {  	field.Name = "supportUrl";  	field.Type = TType.String;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (SupportUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (AccountEmailDomain != null && __isset.accountEmailDomain) {  	field.Name = "accountEmailDomain";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (AccountEmailDomain);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableFacebookSharing) {  	field.Name = "enableFacebookSharing";  	field.Type = TType.Bool;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableFacebookSharing);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableGiftSubscriptions) {  	field.Name = "enableGiftSubscriptions";  	field.Type = TType.Bool;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableGiftSubscriptions);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 6;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableSupportTickets) {  	field.Name = "enableSupportTickets";  	field.Type = TType.Bool;  	field.ID = 7;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableSupportTickets);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 7;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableSharedNotebooks) {  	field.Name = "enableSharedNotebooks";  	field.Type = TType.Bool;  	field.ID = 8;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableSharedNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 8;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableSingleNoteSharing) {  	field.Name = "enableSingleNoteSharing";  	field.Type = TType.Bool;  	field.ID = 9;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableSingleNoteSharing);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 9;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableSponsoredAccounts) {  	field.Name = "enableSponsoredAccounts";  	field.Type = TType.Bool;  	field.ID = 10;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableSponsoredAccounts);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 10;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableTwitterSharing) {  	field.Name = "enableTwitterSharing";  	field.Type = TType.Bool;  	field.ID = 11;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableTwitterSharing);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 11;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enableLinkedInSharing) {  	field.Name = "enableLinkedInSharing";  	field.Type = TType.Bool;  	field.ID = 12;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnableLinkedInSharing);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 12;  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: if (__isset.enablePublicNotebooks) {  	field.Name = "enablePublicNotebooks";  	field.Type = TType.Bool;  	field.ID = 13;  	oprot.WriteFieldBegin (field);  	oprot.WriteBool (EnablePublicNotebooks);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 13;  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: while (true) {  	field = iprot.ReadFieldBegin ();  	if (field.Type == TType.Stop) {  		break;  	}  	switch (field.ID) {  	case 1:  		if (field.Type == TType.I32) {  			UserId = iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 2:  		if (field.Type == TType.String) {  			ShardId = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 3:  		if (field.Type == TType.I32) {  			Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 4:  		if (field.Type == TType.String) {  			Username = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 5:  		if (field.Type == TType.String) {  			NoteStoreUrl = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	case 6:  		if (field.Type == TType.String) {  			WebApiUrlPrefix = iprot.ReadString ();  		} else {  			TProtocolUtil.Skip (iprot' field.Type);  		}  		break;  	default:  		TProtocolUtil.Skip (iprot' field.Type);  		break;  	}  	iprot.ReadFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID) {  case 1:  	if (field.Type == TType.I32) {  		UserId = iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 2:  	if (field.Type == TType.String) {  		ShardId = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 3:  	if (field.Type == TType.I32) {  		Privilege = (Evernote.EDAM.Type.PrivilegeLevel)iprot.ReadI32 ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 4:  	if (field.Type == TType.String) {  		Username = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 5:  	if (field.Type == TType.String) {  		NoteStoreUrl = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  case 6:  	if (field.Type == TType.String) {  		WebApiUrlPrefix = iprot.ReadString ();  	} else {  		TProtocolUtil.Skip (iprot' field.Type);  	}  	break;  default:  	TProtocolUtil.Skip (iprot' field.Type);  	break;  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: if (ShardId != null && __isset.shardId) {  	field.Name = "shardId";  	field.Type = TType.String;  	field.ID = 2;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (ShardId);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 2;  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: if (__isset.privilege) {  	field.Name = "privilege";  	field.Type = TType.I32;  	field.ID = 3;  	oprot.WriteFieldBegin (field);  	oprot.WriteI32 ((int)Privilege);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 3;  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: if (Username != null && __isset.username) {  	field.Name = "username";  	field.Type = TType.String;  	field.ID = 4;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (Username);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 4;  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: if (NoteStoreUrl != null && __isset.noteStoreUrl) {  	field.Name = "noteStoreUrl";  	field.Type = TType.String;  	field.ID = 5;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (NoteStoreUrl);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 5;  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: if (WebApiUrlPrefix != null && __isset.webApiUrlPrefix) {  	field.Name = "webApiUrlPrefix";  	field.Type = TType.String;  	field.ID = 6;  	oprot.WriteFieldBegin (field);  	oprot.WriteString (WebApiUrlPrefix);  	oprot.WriteFieldEnd ();  }  
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,F:\newReposMay17\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 6;  
