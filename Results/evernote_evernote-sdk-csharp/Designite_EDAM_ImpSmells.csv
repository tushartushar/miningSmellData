Implementation smell,Namespace,Class,File,Method,Description
Long Method,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The method has 128 lines of code.
Long Method,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The method has 126 lines of code.
Long Method,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The method has 126 lines of code.
Long Method,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The method has 126 lines of code.
Long Method,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The method has 118 lines of code.
Long Method,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The method has 126 lines of code.
Long Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The method has 104 lines of code.
Long Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The method has 103 lines of code.
Long Method,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The method has 156 lines of code.
Long Method,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The method has 129 lines of code.
Long Method,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The method has 100 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The method has 249 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The method has 200 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The method has 149 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The method has 150 lines of code.
Long Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,ToString,The method has 102 lines of code.
Long Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The method has 188 lines of code.
Long Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The method has 199 lines of code.
Long Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,ToString,The method has 144 lines of code.
Long Method,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The method has 104 lines of code.
Long Method,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The method has 103 lines of code.
Long Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The method has 198 lines of code.
Long Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The method has 187 lines of code.
Long Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,ToString,The method has 114 lines of code.
Long Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The method has 194 lines of code.
Long Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The method has 199 lines of code.
Long Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,ToString,The method has 138 lines of code.
Long Method,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The method has 158 lines of code.
Long Method,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The method has 149 lines of code.
Long Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The method has 231 lines of code.
Long Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The method has 247 lines of code.
Long Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,ToString,The method has 180 lines of code.
Long Method,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The method has 115 lines of code.
Long Method,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The method has 111 lines of code.
Long Method,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The method has 112 lines of code.
Long Method,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The method has 111 lines of code.
Long Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The method has 140 lines of code.
Long Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The method has 143 lines of code.
Long Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,ToString,The method has 102 lines of code.
Long Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The method has 157 lines of code.
Long Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The method has 159 lines of code.
Long Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,ToString,The method has 114 lines of code.
Long Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The method has 292 lines of code.
Long Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The method has 309 lines of code.
Long Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,ToString,The method has 216 lines of code.
Long Method,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The method has 112 lines of code.
Long Method,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The method has 141 lines of code.
Long Method,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The method has 127 lines of code.
Complex Method,Evernote.EDAM.Error,EDAMSystemException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.Error,EDAMUserException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,NoteCollectionCounts,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,Cyclomatic complexity of the method is 30
Complex Method,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,ToString,Cyclomatic complexity of the method is 27
Complex Method,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,Cyclomatic complexity of the method is 29
Complex Method,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,Cyclomatic complexity of the method is 14
Complex Method,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,ToString,Cyclomatic complexity of the method is 23
Complex Method,Evernote.EDAM.NoteStore,getSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getFilteredSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,listAccessibleBusinessNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listAccessibleBusinessNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,getNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getDefaultNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,createNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,expungeNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,expungeNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,expungeNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listTags_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listTags_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,listTagsByNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,listTagsByNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listTagsByNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,createTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,untagAll_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,expungeTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,expungeTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,expungeTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listSearches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listSearches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,getSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,expungeSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,expungeSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,expungeSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNoteOffset_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNoteOffset_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,findNoteOffset_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,findNoteOffset_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,findNotesMetadata_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,findNotesMetadata_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNotesMetadata_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNoteCounts_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNoteCounts_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,findNoteCounts_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findNoteCounts_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteWithResultSpec_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteWithResultSpec_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteWithResultSpec_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteWithResultSpec_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,getNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteContent_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteContent_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteContent_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteTagNames_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,getNoteTagNames_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,getNoteTagNames_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,createNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,deleteNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,deleteNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,deleteNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,expungeNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,expungeNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,expungeNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,copyNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,copyNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,copyNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,copyNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listNoteVersions_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,listNoteVersions_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listNoteVersions_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,getNoteVersion_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNoteVersion_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNoteVersion_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,getResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,getResourceByHash_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceByHash_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceByHash_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceRecognition_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceRecognition_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceRecognition_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceAlternateData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceAlternateData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceAlternateData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceAttributes_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getResourceAttributes_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getResourceAttributes_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getPublicNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,shareNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,shareNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,shareNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,shareNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listSharedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,listSharedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listSharedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,createLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,createLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,updateLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,listLinkedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.NoteStore,listLinkedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.NoteStore,listLinkedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,expungeLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,expungeLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.NoteStore,expungeLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getSharedNotebookByAuth_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getSharedNotebookByAuth_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getSharedNotebookByAuth_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,emailNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,shareNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,shareNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,shareNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,stopSharingNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,authenticateToSharedNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findRelated_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findRelated_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,findRelated_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,findRelated_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,manageNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,manageNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,manageNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,getNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,getNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,Cyclomatic complexity of the method is 16
Complex Method,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,Cyclomatic complexity of the method is 22
Complex Method,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,ToString,Cyclomatic complexity of the method is 19
Complex Method,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,Cyclomatic complexity of the method is 44
Complex Method,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,Cyclomatic complexity of the method is 24
Complex Method,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,Cyclomatic complexity of the method is 36
Complex Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,Cyclomatic complexity of the method is 18
Complex Method,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,ToString,Cyclomatic complexity of the method is 33
Complex Method,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,Cyclomatic complexity of the method is 18
Complex Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,Cyclomatic complexity of the method is 49
Complex Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,Cyclomatic complexity of the method is 24
Complex Method,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,ToString,Cyclomatic complexity of the method is 47
Complex Method,Evernote.EDAM.Type,BusinessNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.Type,Data,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,LazyMap,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,ToString,Cyclomatic complexity of the method is 23
Complex Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,Cyclomatic complexity of the method is 43
Complex Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,Cyclomatic complexity of the method is 23
Complex Method,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,ToString,Cyclomatic complexity of the method is 37
Complex Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,Cyclomatic complexity of the method is 48
Complex Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,Cyclomatic complexity of the method is 24
Complex Method,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,ToString,Cyclomatic complexity of the method is 45
Complex Method,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,Cyclomatic complexity of the method is 18
Complex Method,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,ToString,Cyclomatic complexity of the method is 31
Complex Method,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,Cyclomatic complexity of the method is 61
Complex Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,Cyclomatic complexity of the method is 30
Complex Method,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,ToString,Cyclomatic complexity of the method is 59
Complex Method,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,ToString,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,Cyclomatic complexity of the method is 27
Complex Method,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,ToString,Cyclomatic complexity of the method is 25
Complex Method,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,ToString,Cyclomatic complexity of the method is 13
Complex Method,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,ToString,Cyclomatic complexity of the method is 33
Complex Method,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,Cyclomatic complexity of the method is 39
Complex Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,Cyclomatic complexity of the method is 19
Complex Method,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,ToString,Cyclomatic complexity of the method is 37
Complex Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,Cyclomatic complexity of the method is 75
Complex Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,Cyclomatic complexity of the method is 38
Complex Method,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,ToString,Cyclomatic complexity of the method is 71
Complex Method,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,Cyclomatic complexity of the method is 26
Complex Method,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.UserStore,BootstrapProfile,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,Cyclomatic complexity of the method is 35
Complex Method,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,Cyclomatic complexity of the method is 14
Complex Method,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 17
Complex Method,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,ToString,Cyclomatic complexity of the method is 15
Complex Method,Evernote.EDAM.UserStore,authenticateLongSession_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,authenticateToBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,getUser_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,getPublicUserInfo_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Evernote.EDAM.UserStore,getPublicUserInfo_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,getPublicUserInfo_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,getUserUrls_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,removeFromBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 9
Complex Method,Evernote.EDAM.UserStore,listBusinessUsers_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.UserStore,listBusinessUsers_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Evernote.EDAM.UserStore,listBusinessInvitations_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Evernote.EDAM.UserStore,listBusinessInvitations_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,Cyclomatic complexity of the method is 8
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncChunk,The method has 5 parameters. Parameters: authenticationToken' linkedNotebook' afterUSN' maxEntries' fullSyncOnly
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNotesMetadata,The method has 5 parameters. Parameters: authenticationToken' filter' offset' maxNotes' resultSpec
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote,The method has 6 parameters. Parameters: authenticationToken' guid' withContent' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion,The method has 6 parameters. Parameters: authenticationToken' noteGuid' updateSequenceNum' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResource,The method has 6 parameters. Parameters: authenticationToken' guid' withData' withRecognition' withAttributes' withAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceByHash,The method has 6 parameters. Parameters: authenticationToken' noteGuid' contentHash' withData' withRecognition' withAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncChunk,The method has 5 parameters. Parameters: authenticationToken' linkedNotebook' afterUSN' maxEntries' fullSyncOnly
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_getLinkedNotebookSyncChunk,The method has 5 parameters. Parameters: authenticationToken' linkedNotebook' afterUSN' maxEntries' fullSyncOnly
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNotesMetadata,The method has 5 parameters. Parameters: authenticationToken' filter' offset' maxNotes' resultSpec
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_findNotesMetadata,The method has 5 parameters. Parameters: authenticationToken' filter' offset' maxNotes' resultSpec
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote,The method has 6 parameters. Parameters: authenticationToken' guid' withContent' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_getNote,The method has 6 parameters. Parameters: authenticationToken' guid' withContent' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion,The method has 6 parameters. Parameters: authenticationToken' noteGuid' updateSequenceNum' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_getNoteVersion,The method has 6 parameters. Parameters: authenticationToken' noteGuid' updateSequenceNum' withResourcesData' withResourcesRecognition' withResourcesAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResource,The method has 6 parameters. Parameters: authenticationToken' guid' withData' withRecognition' withAttributes' withAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_getResource,The method has 6 parameters. Parameters: authenticationToken' guid' withData' withRecognition' withAttributes' withAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceByHash,The method has 6 parameters. Parameters: authenticationToken' noteGuid' contentHash' withData' withRecognition' withAlternateData
Long Parameter List,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,send_getResourceByHash,The method has 6 parameters. Parameters: authenticationToken' noteGuid' contentHash' withData' withRecognition' withAlternateData
Long Parameter List,Evernote.EDAM.UserStore,ISync,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession,The method has 7 parameters. Parameters: username' password' consumerKey' consumerSecret' deviceIdentifier' deviceDescription' supportsTwoFactor
Long Parameter List,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession,The method has 7 parameters. Parameters: username' password' consumerKey' consumerSecret' deviceIdentifier' deviceDescription' supportsTwoFactor
Long Parameter List,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,send_authenticateLongSession,The method has 7 parameters. Parameters: username' password' consumerKey' consumerSecret' deviceIdentifier' deviceDescription' supportsTwoFactor
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_INDEXABLE_RESOURCE_MIME_TYPES is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_NAME_LEN_MIN is 33.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_NAME_LEN_MAX is 33.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_VALUE_LEN_MIN is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_VALUE_LEN_MAX is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_ENTRY_LEN_MAX is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_NAME_REGEX is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_APPLICATIONDATA_VALUE_REGEX is 32.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_PUBLISHING_URI_PROHIBITED is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_PUBLISHING_DESCRIPTION_LEN_MIN is 35.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_PUBLISHING_DESCRIPTION_LEN_MAX is 35.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_PUBLISHING_DESCRIPTION_REGEX is 33.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_SAVED_SEARCH_NAME_LEN_MIN is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_SAVED_SEARCH_NAME_LEN_MAX is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_RECENT_MAILED_ADDRESSES_MAX is 37.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_MAIL_LIMIT_DAILY_FREE is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_MAIL_LIMIT_DAILY_PREMIUM is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_UPLOAD_LIMIT_PREMIUM is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_UPLOAD_LIMIT_BUSINESS is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_RESOURCE_SIZE_MAX_PREMIUM is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_USER_LINKED_NOTEBOOK_MAX_PREMIUM is 37.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_NOTEBOOK_SHARED_NOTEBOOK_MAX is 33.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_NOTE_CONTENT_CLASS_LEN_MIN is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_NOTE_CONTENT_CLASS_LEN_MAX is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_HELLO_APP_CONTENT_CLASS_PREFIX is 35.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_FOOD_APP_CONTENT_CLASS_PREFIX is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_CONTENT_CLASS_HELLO_ENCOUNTER is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_CONTENT_CLASS_HELLO_PROFILE is 32.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_CONTENT_CLASS_SKITCH_PREFIX is 32.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_CONTENT_CLASS_PENULTIMATE_PREFIX is 37.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_CONTENT_CLASS_PENULTIMATE_NOTEBOOK is 39.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_RELATED_PLAINTEXT_LEN_MIN is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_RELATED_PLAINTEXT_LEN_MAX is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MIN is 42.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_LEN_MAX is 42.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_BUSINESS_NOTEBOOK_DESCRIPTION_REGEX is 40.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_BUSINESS_PHONE_NUMBER_LEN_MAX is 34.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_MAX_VALUES_PER_PREFERENCE is 30.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_PREFERENCE_SHORTCUTS_MAX_VALUES is 36.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_DEVICE_DESCRIPTION_LEN_MAX is 31.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MAX is 38.
Long Identifier,Evernote.EDAM.Limits,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Limits\Constants.cs,,The length of the parameter EDAM_SEARCH_SUGGESTIONS_PREFIX_LEN_MIN is 38.
Long Identifier,Evernote.EDAM.NoteStore,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\ClientUsageMetrics.cs,,The length of the parameter includeNoteApplicationDataFullMap is 33.
Long Identifier,Evernote.EDAM.NoteStore,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\ClientUsageMetrics.cs,,The length of the parameter includeResourceApplicationDataFullMap is 37.
Long Identifier,Evernote.EDAM.NoteStore,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\ClientUsageMetrics.cs,,The length of the parameter includeNoteResourceApplicationDataFullMap is 41.
Long Identifier,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,,The length of the parameter _includeNoteApplicationDataFullMap is 34.
Long Identifier,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,,The length of the parameter _includeResourceApplicationDataFullMap is 38.
Long Identifier,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,,The length of the parameter _includeNoteResourceApplicationDataFullMap is 42.
Long Identifier,Evernote.EDAM.Type,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,,The length of the parameter updateWhichSharedNotebookRestrictions is 37.
Long Identifier,Evernote.EDAM.Type,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,,The length of the parameter expungeWhichSharedNotebookRestrictions is 38.
Long Identifier,Evernote.EDAM.Type,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,,The length of the parameter canMoveToContainerRestrictions is 30.
Long Identifier,Evernote.EDAM.Type,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,,The length of the parameter includePersonalLinkedNotebooks is 30.
Long Identifier,Evernote.EDAM.Type,Isset,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,,The length of the parameter includeBusinessLinkedNotebooks is 30.
Long Identifier,Evernote.EDAM.Type,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Constants.cs,,The length of the parameter CLASSIFICATION_RECIPE_USER_NON_RECIPE is 37.
Long Identifier,Evernote.EDAM.Type,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Constants.cs,,The length of the parameter CLASSIFICATION_RECIPE_USER_RECIPE is 33.
Long Identifier,Evernote.EDAM.Type,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Constants.cs,,The length of the parameter CLASSIFICATION_RECIPE_SERVICE_RECIPE is 36.
Long Identifier,Evernote.EDAM.Type,Constants,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Constants.cs,,The length of the parameter EDAM_NOTE_SOURCE_MAIL_SMTP_GATEWAY is 34.
Long Identifier,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,,The length of the parameter _updateWhichSharedNotebookRestrictions is 38.
Long Identifier,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,,The length of the parameter _expungeWhichSharedNotebookRestrictions is 39.
Long Identifier,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,,The length of the parameter _canMoveToContainerRestrictions is 31.
Long Identifier,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,,The length of the parameter _includePersonalLinkedNotebooks is 31.
Long Identifier,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,,The length of the parameter _includeBusinessLinkedNotebooks is 31.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getSyncState,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSyncState failed: unknown result"); " is 122.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getFilteredSyncChunk,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getFilteredSyncChunk failed: unknown result"); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getLinkedNotebookSyncState,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getLinkedNotebookSyncState failed: unknown result"); " is 136.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncChunk,The length of the statement  "        var asyncResult = Begin_getLinkedNotebookSyncChunk(null' null' authenticationToken' linkedNotebook' afterUSN' maxEntries' fullSyncOnly); " is 136.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getLinkedNotebookSyncChunk,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getLinkedNotebookSyncChunk failed: unknown result"); " is 136.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listNotebooks,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listNotebooks failed: unknown result"); " is 123.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listAccessibleBusinessNotebooks,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listAccessibleBusinessNotebooks failed: unknown result"); " is 141.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNotebook failed: unknown result"); " is 121.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getDefaultNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getDefaultNotebook failed: unknown result"); " is 128.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_createNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createNotebook failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateNotebook failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_expungeNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "expungeNotebook failed: unknown result"); " is 125.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listTagsByNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listTagsByNotebook failed: unknown result"); " is 128.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_expungeTag,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "expungeTag failed: unknown result"); " is 120.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listSearches,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listSearches failed: unknown result"); " is 122.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_createSearch,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createSearch failed: unknown result"); " is 122.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateSearch,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateSearch failed: unknown result"); " is 122.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_expungeSearch,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "expungeSearch failed: unknown result"); " is 123.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_findNoteOffset,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findNoteOffset failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_findNotesMetadata,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findNotesMetadata failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_findNoteCounts,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findNoteCounts failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteWithResultSpec,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteWithResultSpec failed: unknown result"); " is 131.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote,The length of the statement  "        send_getNote(authenticationToken' guid' withContent' withResourcesData' withResourcesRecognition' withResourcesAlternateData); " is 126.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote,The length of the statement  "        var asyncResult = Begin_getNote(null' null' authenticationToken' guid' withContent' withResourcesData' withResourcesRecognition' withResourcesAlternateData); " is 157.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteApplicationData,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteApplicationData failed: unknown result"); " is 132.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteApplicationDataEntry failed: unknown result"); " is 137.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_setNoteApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "setNoteApplicationDataEntry failed: unknown result"); " is 137.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_unsetNoteApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "unsetNoteApplicationDataEntry failed: unknown result"); " is 139.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteContent,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteContent failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteSearchText,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteSearchText failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceSearchText,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceSearchText failed: unknown result"); " is 131.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteTagNames,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteTagNames failed: unknown result"); " is 125.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_createNote,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createNote failed: unknown result"); " is 120.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateNote,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateNote failed: unknown result"); " is 120.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_deleteNote,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "deleteNote failed: unknown result"); " is 120.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_expungeNote,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "expungeNote failed: unknown result"); " is 121.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listNoteVersions,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listNoteVersions failed: unknown result"); " is 126.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion,The length of the statement  "        send_getNoteVersion(authenticationToken' noteGuid' updateSequenceNum' withResourcesData' withResourcesRecognition' withResourcesAlternateData); " is 143.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion,The length of the statement  "        var asyncResult = Begin_getNoteVersion(null' null' authenticationToken' noteGuid' updateSequenceNum' withResourcesData' withResourcesRecognition' withResourcesAlternateData); " is 174.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNoteVersion,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNoteVersion failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResource,The length of the statement  "        var asyncResult = Begin_getResource(null' null' authenticationToken' guid' withData' withRecognition' withAttributes' withAlternateData); " is 137.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResource,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResource failed: unknown result"); " is 121.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceApplicationData,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceApplicationData failed: unknown result"); " is 136.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceApplicationDataEntry failed: unknown result"); " is 141.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_setResourceApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "setResourceApplicationDataEntry failed: unknown result"); " is 141.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_unsetResourceApplicationDataEntry,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "unsetResourceApplicationDataEntry failed: unknown result"); " is 143.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateResource,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateResource failed: unknown result"); " is 124.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceData,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceData failed: unknown result"); " is 125.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceByHash,The length of the statement  "        var asyncResult = Begin_getResourceByHash(null' null' authenticationToken' noteGuid' contentHash' withData' withRecognition' withAlternateData); " is 144.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceByHash,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceByHash failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceRecognition,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceRecognition failed: unknown result"); " is 132.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceAlternateData,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceAlternateData failed: unknown result"); " is 134.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getResourceAttributes,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getResourceAttributes failed: unknown result"); " is 131.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getPublicNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPublicNotebook failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_shareNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "shareNotebook failed: unknown result"); " is 123.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_createOrUpdateNotebookShares,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createOrUpdateNotebookShares failed: unknown result"); " is 138.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateSharedNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateSharedNotebook failed: unknown result"); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_setNotebookRecipientSettings,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "setNotebookRecipientSettings failed: unknown result"); " is 138.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listSharedNotebooks,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listSharedNotebooks failed: unknown result"); " is 129.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_createLinkedNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "createLinkedNotebook failed: unknown result"); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateLinkedNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateLinkedNotebook failed: unknown result"); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_listLinkedNotebooks,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listLinkedNotebooks failed: unknown result"); " is 129.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_expungeLinkedNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "expungeLinkedNotebook failed: unknown result"); " is 131.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_authenticateToSharedNotebook,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "authenticateToSharedNotebook failed: unknown result"); " is 138.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getSharedNotebookByAuth,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getSharedNotebookByAuth failed: unknown result"); " is 133.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_authenticateToSharedNote,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "authenticateToSharedNote failed: unknown result"); " is 134.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_findRelated,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "findRelated failed: unknown result"); " is 121.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_updateNoteIfUsnMatches,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "updateNoteIfUsnMatches failed: unknown result"); " is 132.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_manageNotebookShares,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "manageNotebookShares failed: unknown result"); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,recv_getNotebookShares,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getNotebookShares failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Process,The length of the statement  "            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 147.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getSyncState_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getFilteredSyncChunk_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncState_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncChunk_Process,The length of the statement  "            result.Success = iface_.getLinkedNotebookSyncChunk(args.AuthenticationToken' args.LinkedNotebook' args.AfterUSN' args.MaxEntries' args.FullSyncOnly); " is 149.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getLinkedNotebookSyncChunk_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listNotebooks_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listAccessibleBusinessNotebooks_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getDefaultNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,expungeNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listTags_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listTagsByNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getTag_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createTag_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateTag_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,untagAll_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,expungeTag_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listSearches_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getSearch_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createSearch_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateSearch_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,expungeSearch_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNoteOffset_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNotesMetadata_Process,The length of the statement  "            result.Success = iface_.findNotesMetadata(args.AuthenticationToken' args.Filter' args.Offset' args.MaxNotes' args.ResultSpec); " is 126.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNotesMetadata_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findNoteCounts_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteWithResultSpec_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote_Process,The length of the statement  "            result.Success = iface_.getNote(args.AuthenticationToken' args.Guid' args.WithContent' args.WithResourcesData' args.WithResourcesRecognition' args.WithResourcesAlternateData); " is 175.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteApplicationData_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,setNoteApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,unsetNoteApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteContent_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteSearchText_Process,The length of the statement  "            result.Success = iface_.getNoteSearchText(args.AuthenticationToken' args.Guid' args.NoteOnly' args.TokenizeForIndexing); " is 120.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteSearchText_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceSearchText_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteTagNames_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,deleteNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,expungeNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,copyNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listNoteVersions_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion_Process,The length of the statement  "            result.Success = iface_.getNoteVersion(args.AuthenticationToken' args.NoteGuid' args.UpdateSequenceNum' args.WithResourcesData' args.WithResourcesRecognition' args.WithResourcesAlternateData); " is 192.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNoteVersion_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResource_Process,The length of the statement  "            result.Success = iface_.getResource(args.AuthenticationToken' args.Guid' args.WithData' args.WithRecognition' args.WithAttributes' args.WithAlternateData); " is 155.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResource_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceApplicationData_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,setResourceApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,unsetResourceApplicationDataEntry_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateResource_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceData_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceByHash_Process,The length of the statement  "            result.Success = iface_.getResourceByHash(args.AuthenticationToken' args.NoteGuid' args.ContentHash' args.WithData' args.WithRecognition' args.WithAlternateData); " is 162.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceByHash_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceRecognition_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceAlternateData_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getResourceAttributes_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getPublicNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,shareNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createOrUpdateNotebookShares_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateSharedNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,setNotebookRecipientSettings_Process,The length of the statement  "            result.Success = iface_.setNotebookRecipientSettings(args.AuthenticationToken' args.NotebookGuid' args.RecipientSettings); " is 122.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,setNotebookRecipientSettings_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listSharedNotebooks_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,createLinkedNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateLinkedNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,listLinkedNotebooks_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,expungeLinkedNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,authenticateToSharedNotebook_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getSharedNotebookByAuth_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,emailNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,shareNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,stopSharingNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,authenticateToSharedNote_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,findRelated_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,updateNoteIfUsnMatches_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,manageNotebookShares_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.NoteStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,getNotebookShares_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_checkVersion,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "checkVersion failed: unknown result"); " is 122.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_getBootstrapInfo,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getBootstrapInfo failed: unknown result"); " is 126.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession,The length of the statement  "        send_authenticateLongSession(username' password' consumerKey' consumerSecret' deviceIdentifier' deviceDescription' supportsTwoFactor); " is 134.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession,The length of the statement  "        var asyncResult = Begin_authenticateLongSession(null' null' username' password' consumerKey' consumerSecret' deviceIdentifier' deviceDescription' supportsTwoFactor); " is 165.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_authenticateLongSession,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "authenticateLongSession failed: unknown result"); " is 133.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,completeTwoFactorAuthentication,The length of the statement  "        var asyncResult = Begin_completeTwoFactorAuthentication(null' null' authenticationToken' oneTimeCode' deviceIdentifier' deviceDescription); " is 139.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_completeTwoFactorAuthentication,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "completeTwoFactorAuthentication failed: unknown result"); " is 141.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_authenticateToBusiness,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "authenticateToBusiness failed: unknown result"); " is 132.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_getPublicUserInfo,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getPublicUserInfo failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_getUserUrls,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getUserUrls failed: unknown result"); " is 121.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,updateBusinessUserIdentifier,The length of the statement  "        var asyncResult = Begin_updateBusinessUserIdentifier(null' null' authenticationToken' oldEmailAddress' newEmailAddress); " is 120.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_listBusinessUsers,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listBusinessUsers failed: unknown result"); " is 127.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_listBusinessInvitations,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "listBusinessInvitations failed: unknown result"); " is 133.
Long Statement,Evernote.EDAM.UserStore,Client,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,recv_getAccountLimits,The length of the statement  "        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult' "getAccountLimits failed: unknown result"); " is 126.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Process,The length of the statement  "            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod' "Invalid method name: '" + msg.Name + "'"); " is 147.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,checkVersion_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,getBootstrapInfo_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession_Process,The length of the statement  "            result.Success = iface_.authenticateLongSession(args.Username' args.Password' args.ConsumerKey' args.ConsumerSecret' args.DeviceIdentifier' args.DeviceDescription' args.SupportsTwoFactor); " is 188.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateLongSession_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,completeTwoFactorAuthentication_Process,The length of the statement  "            result.Success = iface_.completeTwoFactorAuthentication(args.AuthenticationToken' args.OneTimeCode' args.DeviceIdentifier' args.DeviceDescription); " is 147.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,completeTwoFactorAuthentication_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,revokeLongSession_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,authenticateToBusiness_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,getUser_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,getPublicUserInfo_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,getUserUrls_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,inviteToBusiness_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,removeFromBusiness_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,updateBusinessUserIdentifier_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,listBusinessUsers_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,listBusinessInvitations_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Long Statement,Evernote.EDAM.UserStore,Processor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,getAccountLimits_Process,The length of the statement  "          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError'" Internal error."); " is 130.
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Identifier = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Key = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Error,EDAMNotFoundException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMNotFoundException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Error,EDAMSystemException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ErrorCode = (EDAMErrorCode)iprot.ReadI32();                  isset_errorCode = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  RateLimitDuration = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Error,EDAMSystemException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ErrorCode = (EDAMErrorCode)iprot.ReadI32();                  isset_errorCode = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  RateLimitDuration = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Error,EDAMSystemException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Error,EDAMSystemException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMSystemException.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Error,EDAMUserException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  ErrorCode = (EDAMErrorCode)iprot.ReadI32();                  isset_errorCode = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Parameter = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Error,EDAMUserException,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Error\EDAMUserException.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Map) {                  {                    NotebookCounts = new Dictionary<string' int>();                    TMap _map80 = iprot.ReadMapBegin();                    for( int _i81 = 0; _i81 < _map80.Count; ++_i81)                    {                      string _key82;                      int _val83;                      _key82 = iprot.ReadString();                      _val83 = iprot.ReadI32();                      NotebookCounts[_key82] = _val83;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Map) {                  {                    TagCounts = new Dictionary<string' int>();                    TMap _map84 = iprot.ReadMapBegin();                    for( int _i85 = 0; _i85 < _map84.Count; ++_i85)                    {                      string _key86;                      int _val87;                      _key86 = iprot.ReadString();                      _val87 = iprot.ReadI32();                      TagCounts[_key86] = _val87;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  TrashCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Map) {                  {                    NotebookCounts = new Dictionary<string' int>();                    TMap _map80 = iprot.ReadMapBegin();                    for( int _i81 = 0; _i81 < _map80.Count; ++_i81)                    {                      string _key82;                      int _val83;                      _key82 = iprot.ReadString();                      _val83 = iprot.ReadI32();                      NotebookCounts[_key82] = _val83;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Map) {                  {                    TagCounts = new Dictionary<string' int>();                    TMap _map84 = iprot.ReadMapBegin();                    for( int _i85 = 0; _i85 < _map84.Count; ++_i85)                    {                      string _key86;                      int _val87;                      _key86 = iprot.ReadString();                      _val87 = iprot.ReadI32();                      TagCounts[_key86] = _val87;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  TrashCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteCollectionCounts,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteCollectionCounts.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Note = new Evernote.EDAM.Type.Note();                  Note.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ToAddresses = new List<string>();                    TList _list90 = iprot.ReadListBegin();                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                    {                      string _elem92;                      _elem92 = iprot.ReadString();                      ToAddresses.Add(_elem92);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    CcAddresses = new List<string>();                    TList _list93 = iprot.ReadListBegin();                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)                    {                      string _elem95;                      _elem95 = iprot.ReadString();                      CcAddresses.Add(_elem95);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Subject = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Note = new Evernote.EDAM.Type.Note();                  Note.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ToAddresses = new List<string>();                    TList _list90 = iprot.ReadListBegin();                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                    {                      string _elem92;                      _elem92 = iprot.ReadString();                      ToAddresses.Add(_elem92);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    CcAddresses = new List<string>();                    TList _list93 = iprot.ReadListBegin();                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)                    {                      string _elem95;                      _elem95 = iprot.ReadString();                      CcAddresses.Add(_elem95);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Subject = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Note = new Evernote.EDAM.Type.Note();                  Note.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ToAddresses = new List<string>();                    TList _list90 = iprot.ReadListBegin();                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                    {                      string _elem92;                      _elem92 = iprot.ReadString();                      ToAddresses.Add(_elem92);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    CcAddresses = new List<string>();                    TList _list93 = iprot.ReadListBegin();                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)                    {                      string _elem95;                      _elem95 = iprot.ReadString();                      CcAddresses.Add(_elem95);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Subject = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Note = new Evernote.EDAM.Type.Note();                  Note.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ToAddresses = new List<string>();                    TList _list90 = iprot.ReadListBegin();                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                    {                      string _elem92;                      _elem92 = iprot.ReadString();                      ToAddresses.Add(_elem92);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    CcAddresses = new List<string>();                    TList _list93 = iprot.ReadListBegin();                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)                    {                      string _elem95;                      _elem95 = iprot.ReadString();                      CcAddresses.Add(_elem95);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Subject = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Note = new Evernote.EDAM.Type.Note();                  Note.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    ToAddresses = new List<string>();                    TList _list90 = iprot.ReadListBegin();                    for( int _i91 = 0; _i91 < _list90.Count; ++_i91)                    {                      string _elem92;                      _elem92 = iprot.ReadString();                      ToAddresses.Add(_elem92);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    CcAddresses = new List<string>();                    TList _list93 = iprot.ReadListBegin();                    for( int _i94 = 0; _i94 < _list93.Count; ++_i94)                    {                      string _elem95;                      _elem95 = iprot.ReadString();                      CcAddresses.Add(_elem95);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Subject = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Message = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NoteEmailParameters,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteEmailParameters.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Order = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Words = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list48 = iprot.ReadListBegin();                    for( int _i49 = 0; _i49 < _list48.Count; ++_i49)                    {                      string _elem50;                      _elem50 = iprot.ReadString();                      TagGuids.Add(_elem50);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  TimeZone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  Inactive = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  Emphasized = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeAllReadableNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  IncludeAllReadableWorkspaces = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RawWords = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.NoteStore,NoteFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteFilter.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list52 = iprot.ReadListBegin();                    for( int _i53 = 0; _i53 < _list52.Count; ++_i53)                    {                      Evernote.EDAM.Type.Note _elem54;                      _elem54 = new Evernote.EDAM.Type.Note();                      _elem54.Read(iprot);                      Notes.Add(_elem54);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list55 = iprot.ReadListBegin();                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)                    {                      string _elem57;                      _elem57 = iprot.ReadString();                      StoppedWords.Add(_elem57);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list58 = iprot.ReadListBegin();                    for( int _i59 = 0; _i59 < _list58.Count; ++_i59)                    {                      string _elem60;                      _elem60 = iprot.ReadString();                      SearchedWords.Add(_elem60);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,NoteList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteList.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                  isset_guid = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list64 = iprot.ReadListBegin();                    for( int _i65 = 0; _i65 < _list64.Count; ++_i65)                    {                      string _elem66;                      _elem66 = iprot.ReadString();                      TagGuids.Add(_elem66);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new Evernote.EDAM.Type.NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  LargestResourceMime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  LargestResourceSize = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.NoteStore,NoteMetadata,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteMetadata.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  StartIndex = iprot.ReadI32();                  isset_startIndex = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  TotalNotes = iprot.ReadI32();                  isset_totalNotes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Notes = new List<NoteMetadata>();                    TList _list68 = iprot.ReadListBegin();                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)                    {                      NoteMetadata _elem70;                      _elem70 = new NoteMetadata();                      _elem70.Read(iprot);                      Notes.Add(_elem70);                    }                    iprot.ReadListEnd();                  }                  isset_notes = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    StoppedWords = new List<string>();                    TList _list71 = iprot.ReadListBegin();                    for( int _i72 = 0; _i72 < _list71.Count; ++_i72)                    {                      string _elem73;                      _elem73 = iprot.ReadString();                      StoppedWords.Add(_elem73);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    SearchedWords = new List<string>();                    TList _list74 = iprot.ReadListBegin();                    for( int _i75 = 0; _i75 < _list74.Count; ++_i75)                    {                      string _elem76;                      _elem76 = iprot.ReadString();                      SearchedWords.Add(_elem76);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  SearchContextBytes = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataList,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataList.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.Bool) {                  IncludeTitle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContentLength = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeCreated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeUpdated = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeDeleted = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeUpdateSequenceNum = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  IncludeNotebookGuid = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeTagGuids = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  IncludeAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.Bool) {                  IncludeLargestResourceMime = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  IncludeLargestResourceSize = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.NoteStore,NotesMetadataResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NotesMetadataResultSpec.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.NoteStore,getSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncState();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    Filter = new SyncChunkFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    Filter = new SyncChunkFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    Filter = new SyncChunkFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getFilteredSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncChunk();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncState();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncState_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncState();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    FullSyncOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    FullSyncOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    FullSyncOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    AfterUSN = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxEntries = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    FullSyncOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncChunk();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getLinkedNotebookSyncChunk_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new SyncChunk();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.Notebook>();                      TList _list190 = iprot.ReadListBegin();                      for( int _i191 = 0; _i191 < _list190.Count; ++_i191)                      {                        Evernote.EDAM.Type.Notebook _elem192;                        _elem192 = new Evernote.EDAM.Type.Notebook();                        _elem192.Read(iprot);                        Success.Add(_elem192);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listAccessibleBusinessNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.Notebook>();                      TList _list194 = iprot.ReadListBegin();                      for( int _i195 = 0; _i195 < _list194.Count; ++_i195)                      {                        Evernote.EDAM.Type.Notebook _elem196;                        _elem196 = new Evernote.EDAM.Type.Notebook();                        _elem196.Read(iprot);                        Success.Add(_elem196);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getDefaultNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Notebook = new Evernote.EDAM.Type.Notebook();                    Notebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Notebook = new Evernote.EDAM.Type.Notebook();                    Notebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,expungeNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listTags_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.Tag>();                      TList _list198 = iprot.ReadListBegin();                      for( int _i199 = 0; _i199 < _list198.Count; ++_i199)                      {                        Evernote.EDAM.Type.Tag _elem200;                        _elem200 = new Evernote.EDAM.Type.Tag();                        _elem200.Read(iprot);                        Success.Add(_elem200);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listTagsByNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listTagsByNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,listTagsByNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.Tag>();                      TList _list202 = iprot.ReadListBegin();                      for( int _i203 = 0; _i203 < _list202.Count; ++_i203)                      {                        Evernote.EDAM.Type.Tag _elem204;                        _elem204 = new Evernote.EDAM.Type.Tag();                        _elem204.Read(iprot);                        Success.Add(_elem204);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listTagsByNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.Tag>();                      TList _list202 = iprot.ReadListBegin();                      for( int _i203 = 0; _i203 < _list202.Count; ++_i203)                      {                        Evernote.EDAM.Type.Tag _elem204;                        _elem204 = new Evernote.EDAM.Type.Tag();                        _elem204.Read(iprot);                        Success.Add(_elem204);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Tag();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Tag();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Tag = new Evernote.EDAM.Type.Tag();                    Tag.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Tag();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Tag();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Tag = new Evernote.EDAM.Type.Tag();                    Tag.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,untagAll_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,untagAll_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,untagAll_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,untagAll_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeTag_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,expungeTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeTag_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listSearches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.SavedSearch>();                      TList _list206 = iprot.ReadListBegin();                      for( int _i207 = 0; _i207 < _list206.Count; ++_i207)                      {                        Evernote.EDAM.Type.SavedSearch _elem208;                        _elem208 = new Evernote.EDAM.Type.SavedSearch();                        _elem208.Read(iprot);                        Success.Add(_elem208);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SavedSearch();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SavedSearch();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Search = new Evernote.EDAM.Type.SavedSearch();                    Search.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SavedSearch();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Search = new Evernote.EDAM.Type.SavedSearch();                    Search.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeSearch_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,expungeSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeSearch_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteOffset_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    Offset = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxNotes = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Struct) {                    ResultSpec = new NotesMetadataResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    Offset = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxNotes = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Struct) {                    ResultSpec = new NotesMetadataResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    Offset = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxNotes = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Struct) {                    ResultSpec = new NotesMetadataResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    Offset = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.I32) {                    MaxNotes = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Struct) {                    ResultSpec = new NotesMetadataResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new NotesMetadataList();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNotesMetadata_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new NotesMetadataList();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithTrash = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Filter = new NoteFilter();                    Filter.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithTrash = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new NoteCollectionCounts();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findNoteCounts_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new NoteCollectionCounts();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    ResultSpec = new NoteResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    ResultSpec = new NoteResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteWithResultSpec_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithContent = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithContent = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithContent = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithContent = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithContent = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,getNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,getNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LazyMap();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LazyMap();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetNoteApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteContent_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteContent_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteContent_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteContent_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    NoteOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    TokenizeForIndexing = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    NoteOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    TokenizeForIndexing = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    NoteOnly = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    TokenizeForIndexing = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceSearchText_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceSearchText_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteTagNames_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteTagNames_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteTagNames_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<string>();                      TList _list210 = iprot.ReadListBegin();                      for( int _i211 = 0; _i211 < _list210.Count; ++_i211)                      {                        string _elem212;                        _elem212 = iprot.ReadString();                        Success.Add(_elem212);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteTagNames_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<string>();                      TList _list210 = iprot.ReadListBegin();                      for( int _i211 = 0; _i211 < _list210.Count; ++_i211)                      {                        string _elem212;                        _elem212 = iprot.ReadString();                        Success.Add(_elem212);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Note = new Evernote.EDAM.Type.Note();                    Note.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Note = new Evernote.EDAM.Type.Note();                    Note.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,deleteNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,deleteNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,deleteNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,deleteNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,expungeNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,copyNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ToNotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,copyNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ToNotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,copyNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,copyNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,copyNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,copyNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listNoteVersions_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listNoteVersions_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,listNoteVersions_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<NoteVersionId>();                      TList _list214 = iprot.ReadListBegin();                      for( int _i215 = 0; _i215 < _list214.Count; ++_i215)                      {                        NoteVersionId _elem216;                        _elem216 = new NoteVersionId();                        _elem216.Read(iprot);                        Success.Add(_elem216);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listNoteVersions_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<NoteVersionId>();                      TList _list214 = iprot.ReadListBegin();                      for( int _i215 = 0; _i215 < _list214.Count; ++_i215)                      {                        NoteVersionId _elem216;                        _elem216 = new NoteVersionId();                        _elem216.Read(iprot);                        Success.Add(_elem216);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    UpdateSequenceNum = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    UpdateSequenceNum = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    UpdateSequenceNum = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    UpdateSequenceNum = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I32) {                    UpdateSequenceNum = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithResourcesData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithResourcesRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithResourcesAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNoteVersion_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Note();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithAttributes = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithAttributes = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithAttributes = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithAttributes = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithAttributes = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,getResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,getResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Resource();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Resource();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LazyMap();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LazyMap();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    Value = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Key = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,unsetResourceApplicationDataEntry_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Resource = new Evernote.EDAM.Type.Resource();                    Resource.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateResource_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateResource_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ContentHash = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ContentHash = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ContentHash = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ContentHash = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ContentHash = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Bool) {                    WithData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.Bool) {                    WithRecognition = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.Bool) {                    WithAlternateData = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Resource();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceByHash_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Resource();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceRecognition_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceRecognition_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceRecognition_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceRecognition_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAlternateData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAlternateData_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceAlternateData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAlternateData_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadBinary();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAttributes_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAttributes_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getResourceAttributes_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.ResourceAttributes();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getResourceAttributes_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.ResourceAttributes();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getPublicNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.I32) {                    UserId = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    PublicUri = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getPublicNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getPublicNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SharedNotebook = new Evernote.EDAM.Type.SharedNotebook();                    SharedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Message = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SharedNotebook = new Evernote.EDAM.Type.SharedNotebook();                    SharedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    Message = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SharedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SharedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    ShareTemplate = new NotebookShareTemplate();                    ShareTemplate.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new CreateOrUpdateNotebookSharesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    InvalidContactsException = new Evernote.EDAM.Error.EDAMInvalidContactsException();                    InvalidContactsException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new CreateOrUpdateNotebookSharesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    InvalidContactsException = new Evernote.EDAM.Error.EDAMInvalidContactsException();                    InvalidContactsException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createOrUpdateNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new CreateOrUpdateNotebookSharesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.Struct) {                    InvalidContactsException = new Evernote.EDAM.Error.EDAMInvalidContactsException();                    InvalidContactsException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSharedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SharedNotebook = new Evernote.EDAM.Type.SharedNotebook();                    SharedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSharedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    RecipientSettings = new Evernote.EDAM.Type.NotebookRecipientSettings();                    RecipientSettings.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    RecipientSettings = new Evernote.EDAM.Type.NotebookRecipientSettings();                    RecipientSettings.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,setNotebookRecipientSettings_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.Notebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listSharedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.SharedNotebook>();                      TList _list218 = iprot.ReadListBegin();                      for( int _i219 = 0; _i219 < _list218.Count; ++_i219)                      {                        Evernote.EDAM.Type.SharedNotebook _elem220;                        _elem220 = new Evernote.EDAM.Type.SharedNotebook();                        _elem220.Read(iprot);                        Success.Add(_elem220);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listSharedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.SharedNotebook>();                      TList _list218 = iprot.ReadListBegin();                      for( int _i219 = 0; _i219 < _list218.Count; ++_i219)                      {                        Evernote.EDAM.Type.SharedNotebook _elem220;                        _elem220 = new Evernote.EDAM.Type.SharedNotebook();                        _elem220.Read(iprot);                        Success.Add(_elem220);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,createLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LinkedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,createLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.LinkedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    LinkedNotebook = new Evernote.EDAM.Type.LinkedNotebook();                    LinkedNotebook.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listLinkedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.LinkedNotebook>();                      TList _list222 = iprot.ReadListBegin();                      for( int _i223 = 0; _i223 < _list222.Count; ++_i223)                      {                        Evernote.EDAM.Type.LinkedNotebook _elem224;                        _elem224 = new Evernote.EDAM.Type.LinkedNotebook();                        _elem224.Read(iprot);                        Success.Add(_elem224);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,listLinkedNotebooks_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.LinkedNotebook>();                      TList _list222 = iprot.ReadListBegin();                      for( int _i223 = 0; _i223 < _list222.Count; ++_i223)                      {                        Evernote.EDAM.Type.LinkedNotebook _elem224;                        _elem224 = new Evernote.EDAM.Type.LinkedNotebook();                        _elem224.Read(iprot);                        Success.Add(_elem224);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeLinkedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,expungeLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,expungeLinkedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.I32) {                    Success = iprot.ReadI32();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    ShareKeyOrGlobalId = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.UserStore.AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNotebook_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.UserStore.AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getSharedNotebookByAuth_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SharedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getSharedNotebookByAuth_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.SharedNotebook();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,emailNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Parameters = new NoteEmailParameters();                    Parameters.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,emailNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,emailNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,emailNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,shareNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,shareNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.String) {                    Success = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,stopSharingNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,stopSharingNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,stopSharingNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,stopSharingNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Guid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NoteKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.UserStore.AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,authenticateToSharedNote_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.UserStore.AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findRelated_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Query = new RelatedQuery();                    Query.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    ResultSpec = new RelatedResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findRelated_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Query = new RelatedQuery();                    Query.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    ResultSpec = new RelatedResultSpec();                    ResultSpec.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findRelated_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,findRelated_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,findRelated_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new RelatedResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,findRelated_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new RelatedResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Note = new Evernote.EDAM.Type.Note();                    Note.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new UpdateNoteIfUsnMatchesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,updateNoteIfUsnMatches_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new UpdateNoteIfUsnMatchesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,manageNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    Parameters = new ManageNotebookSharesParameters();                    Parameters.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,manageNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,manageNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new ManageNotebookSharesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,manageNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new ManageNotebookSharesResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    NotebookGuid = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebookShares_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,getNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new ShareRelationships();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,getNotebookShares_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new ShareRelationships();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                  isset_updateSequenceNum = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                  isset_updated = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Saved = iprot.ReadI64();                  isset_saved = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                  isset_title = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                  isset_updateSequenceNum = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                  isset_updated = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Saved = iprot.ReadI64();                  isset_saved = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                  isset_title = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                  isset_updateSequenceNum = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                  isset_updated = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Saved = iprot.ReadI64();                  isset_saved = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                  isset_title = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                  isset_updateSequenceNum = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                  isset_updated = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Saved = iprot.ReadI64();                  isset_saved = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                  isset_title = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,NoteVersionId,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\NoteVersionId.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  PlainText = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Filter = new NoteFilter();                  Filter.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ReferenceUri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  PlainText = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Filter = new NoteFilter();                  Filter.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ReferenceUri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  PlainText = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Filter = new NoteFilter();                  Filter.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ReferenceUri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  PlainText = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Filter = new NoteFilter();                  Filter.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ReferenceUri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  PlainText = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Filter = new NoteFilter();                  Filter.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ReferenceUri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  Context = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,RelatedQuery,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedQuery.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list98 = iprot.ReadListBegin();                    for( int _i99 = 0; _i99 < _list98.Count; ++_i99)                    {                      Evernote.EDAM.Type.Note _elem100;                      _elem100 = new Evernote.EDAM.Type.Note();                      _elem100.Read(iprot);                      Notes.Add(_elem100);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list101 = iprot.ReadListBegin();                    for( int _i102 = 0; _i102 < _list101.Count; ++_i102)                    {                      Evernote.EDAM.Type.Notebook _elem103;                      _elem103 = new Evernote.EDAM.Type.Notebook();                      _elem103.Read(iprot);                      Notebooks.Add(_elem103);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list104 = iprot.ReadListBegin();                    for( int _i105 = 0; _i105 < _list104.Count; ++_i105)                    {                      Evernote.EDAM.Type.Tag _elem106;                      _elem106 = new Evernote.EDAM.Type.Tag();                      _elem106.Read(iprot);                      Tags.Add(_elem106);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    ContainingNotebooks = new List<Evernote.EDAM.Type.NotebookDescriptor>();                    TList _list107 = iprot.ReadListBegin();                    for( int _i108 = 0; _i108 < _list107.Count; ++_i108)                    {                      Evernote.EDAM.Type.NotebookDescriptor _elem109;                      _elem109 = new Evernote.EDAM.Type.NotebookDescriptor();                      _elem109.Read(iprot);                      ContainingNotebooks.Add(_elem109);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  DebugInfo = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Experts = new List<Evernote.EDAM.Type.UserProfile>();                    TList _list110 = iprot.ReadListBegin();                    for( int _i111 = 0; _i111 < _list110.Count; ++_i111)                    {                      Evernote.EDAM.Type.UserProfile _elem112;                      _elem112 = new Evernote.EDAM.Type.UserProfile();                      _elem112.Read(iprot);                      Experts.Add(_elem112);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RelatedContent = new List<Evernote.EDAM.Type.RelatedContent>();                    TList _list113 = iprot.ReadListBegin();                    for( int _i114 = 0; _i114 < _list113.Count; ++_i114)                    {                      Evernote.EDAM.Type.RelatedContent _elem115;                      _elem115 = new Evernote.EDAM.Type.RelatedContent();                      _elem115.Read(iprot);                      RelatedContent.Add(_elem115);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  CacheKey = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I32) {                  CacheExpires = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,RelatedResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResult.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  MaxNotes = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  MaxNotebooks = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  MaxTags = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  WritableNotebooksOnly = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeContainingNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeDebugInfo = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  MaxExperts = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  MaxRelatedContent = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Set) {                  {                    RelatedContentTypes = new THashSet<Evernote.EDAM.Type.RelatedContentType>();                    TSet _set122 = iprot.ReadSetBegin();                    for( int _i123 = 0; _i123 < _set122.Count; ++_i123)                    {                      Evernote.EDAM.Type.RelatedContentType _elem124;                      _elem124 = (Evernote.EDAM.Type.RelatedContentType)iprot.ReadI32();                      RelatedContentTypes.Add(_elem124);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,RelatedResultSpec,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\RelatedResultSpec.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  ChunkHighUSN = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.List) {                  {                    Notes = new List<Evernote.EDAM.Type.Note>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      Evernote.EDAM.Type.Note _elem2;                      _elem2 = new Evernote.EDAM.Type.Note();                      _elem2.Read(iprot);                      Notes.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    Notebooks = new List<Evernote.EDAM.Type.Notebook>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      Evernote.EDAM.Type.Notebook _elem5;                      _elem5 = new Evernote.EDAM.Type.Notebook();                      _elem5.Read(iprot);                      Notebooks.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.List) {                  {                    Tags = new List<Evernote.EDAM.Type.Tag>();                    TList _list6 = iprot.ReadListBegin();                    for( int _i7 = 0; _i7 < _list6.Count; ++_i7)                    {                      Evernote.EDAM.Type.Tag _elem8;                      _elem8 = new Evernote.EDAM.Type.Tag();                      _elem8.Read(iprot);                      Tags.Add(_elem8);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    Searches = new List<Evernote.EDAM.Type.SavedSearch>();                    TList _list9 = iprot.ReadListBegin();                    for( int _i10 = 0; _i10 < _list9.Count; ++_i10)                    {                      Evernote.EDAM.Type.SavedSearch _elem11;                      _elem11 = new Evernote.EDAM.Type.SavedSearch();                      _elem11.Read(iprot);                      Searches.Add(_elem11);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.List) {                  {                    Resources = new List<Evernote.EDAM.Type.Resource>();                    TList _list12 = iprot.ReadListBegin();                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)                    {                      Evernote.EDAM.Type.Resource _elem14;                      _elem14 = new Evernote.EDAM.Type.Resource();                      _elem14.Read(iprot);                      Resources.Add(_elem14);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.List) {                  {                    ExpungedNotes = new List<string>();                    TList _list15 = iprot.ReadListBegin();                    for( int _i16 = 0; _i16 < _list15.Count; ++_i16)                    {                      string _elem17;                      _elem17 = iprot.ReadString();                      ExpungedNotes.Add(_elem17);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.List) {                  {                    ExpungedNotebooks = new List<string>();                    TList _list18 = iprot.ReadListBegin();                    for( int _i19 = 0; _i19 < _list18.Count; ++_i19)                    {                      string _elem20;                      _elem20 = iprot.ReadString();                      ExpungedNotebooks.Add(_elem20);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.List) {                  {                    ExpungedTags = new List<string>();                    TList _list21 = iprot.ReadListBegin();                    for( int _i22 = 0; _i22 < _list21.Count; ++_i22)                    {                      string _elem23;                      _elem23 = iprot.ReadString();                      ExpungedTags.Add(_elem23);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    ExpungedSearches = new List<string>();                    TList _list24 = iprot.ReadListBegin();                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)                    {                      string _elem26;                      _elem26 = iprot.ReadString();                      ExpungedSearches.Add(_elem26);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    LinkedNotebooks = new List<Evernote.EDAM.Type.LinkedNotebook>();                    TList _list27 = iprot.ReadListBegin();                    for( int _i28 = 0; _i28 < _list27.Count; ++_i28)                    {                      Evernote.EDAM.Type.LinkedNotebook _elem29;                      _elem29 = new Evernote.EDAM.Type.LinkedNotebook();                      _elem29.Read(iprot);                      LinkedNotebooks.Add(_elem29);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    ExpungedLinkedNotebooks = new List<string>();                    TList _list30 = iprot.ReadListBegin();                    for( int _i31 = 0; _i31 < _list30.Count; ++_i31)                    {                      string _elem32;                      _elem32 = iprot.ReadString();                      ExpungedLinkedNotebooks.Add(_elem32);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.NoteStore,SyncChunk,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunk.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludeNoteResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeNoteAttributes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  IncludeNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  IncludeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  IncludeSearches = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  IncludeResources = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  IncludeLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  IncludeExpunged = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  IncludeNoteApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  IncludeResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  IncludeNoteResourceApplicationDataFullMap = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  IncludeSharedNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  OmitSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  RequireNoteContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Set) {                  {                    NotebookGuids = new THashSet<string>();                    TSet _set44 = iprot.ReadSetBegin();                    for( int _i45 = 0; _i45 < _set44.Count; ++_i45)                    {                      string _elem46;                      _elem46 = iprot.ReadString();                      NotebookGuids.Add(_elem46);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.NoteStore,SyncChunkFilter,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncChunkFilter.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  FullSyncBefore = iprot.ReadI64();                  isset_fullSyncBefore = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  Uploaded = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  UserLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  UserMaxMessageEventId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  FullSyncBefore = iprot.ReadI64();                  isset_fullSyncBefore = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  Uploaded = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  UserLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  UserMaxMessageEventId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  FullSyncBefore = iprot.ReadI64();                  isset_fullSyncBefore = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  Uploaded = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  UserLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  UserMaxMessageEventId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  FullSyncBefore = iprot.ReadI64();                  isset_fullSyncBefore = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  Uploaded = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  UserLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  UserMaxMessageEventId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  FullSyncBefore = iprot.ReadI64();                  isset_fullSyncBefore = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  UpdateCount = iprot.ReadI32();                  isset_updateCount = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I64) {                  Uploaded = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  UserLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  UserMaxMessageEventId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.NoteStore,SyncState,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\NoteStore\SyncState.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.I64) {                  UploadLimitEnd = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  UploadLimitNextMonth = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  PremiumServiceStatus = (PremiumOrderStatus)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  PremiumOrderNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  PremiumCommerceService = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  PremiumServiceStart = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  PremiumServiceSKU = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  LastSuccessfulCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  LastFailedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  LastFailedChargeReason = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I64) {                  NextPaymentDue = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I64) {                  PremiumLockUntil = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  PremiumSubscriptionNumber = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  LastRequestedCharge = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.String) {                  Currency = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UnitPrice = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.I32) {                  BusinessRole = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.I32) {                  UnitDiscount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.I64) {                  NextChargeDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.I32) {                  AvailablePoints = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,Evernote.EDAM.Type,Accounting,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Accounting.cs,Write,The following statement contains a magic number: field.ID = 25;
Magic Number,Evernote.EDAM.Type,BusinessNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NotebookDescription = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  Recommended = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  NotebookDescription = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  Recommended = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,BusinessNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Role = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Role = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Role = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  BusinessName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I32) {                  Role = (BusinessUserRole)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,BusinessUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\BusinessUserInfo.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,Data,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  BodyHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Body = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Data,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  BodyHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Size = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Body = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Data,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Data,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Data.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,LazyMap,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Set) {                  {                    KeysOnly = new THashSet<string>();                    TSet _set8 = iprot.ReadSetBegin();                    for( int _i9 = 0; _i9 < _set8.Count; ++_i9)                    {                      string _elem10;                      _elem10 = iprot.ReadString();                      KeysOnly.Add(_elem10);                    }                    iprot.ReadSetEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Map) {                  {                    FullMap = new Dictionary<string' string>();                    TMap _map11 = iprot.ReadMapBegin();                    for( int _i12 = 0; _i12 < _map11.Count; ++_i12)                    {                      string _key13;                      string _val14;                      _key13 = iprot.ReadString();                      _val14 = iprot.ReadString();                      FullMap[_key13] = _val14;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LazyMap,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LazyMap.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 2:                if (field.Type == TType.String) {                  ShareName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  SharedNotebookGlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  BusinessId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,LinkedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\LinkedNotebook.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Title = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Content = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  ContentHash = iprot.ReadBinary();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  ContentLength = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.List) {                  {                    TagGuids = new List<string>();                    TList _list22 = iprot.ReadListBegin();                    for( int _i23 = 0; _i23 < _list22.Count; ++_i23)                    {                      string _elem24;                      _elem24 = iprot.ReadString();                      TagGuids.Add(_elem24);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    Resources = new List<Resource>();                    TList _list25 = iprot.ReadListBegin();                    for( int _i26 = 0; _i26 < _list25.Count; ++_i26)                    {                      Resource _elem27;                      _elem27 = new Resource();                      _elem27.Read(iprot);                      Resources.Add(_elem27);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Struct) {                  Attributes = new NoteAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.List) {                  {                    TagNames = new List<string>();                    TList _list28 = iprot.ReadListBegin();                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)                    {                      string _elem30;                      _elem30 = iprot.ReadString();                      TagNames.Add(_elem30);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.List) {                  {                    SharedNotes = new List<SharedNote>();                    TList _list31 = iprot.ReadListBegin();                    for( int _i32 = 0; _i32 < _list31.Count; ++_i32)                    {                      SharedNote _elem33;                      _elem33 = new SharedNote();                      _elem33.Read(iprot);                      SharedNotes.Add(_elem33);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NoteRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  Limits = new NoteLimits();                  Limits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,Note,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Note.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  SubjectDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.String) {                  Author = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  Source = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.String) {                  SourceApplication = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I64) {                  ShareDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  ReminderOrder = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  ReminderDoneTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  ReminderTime = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PlaceName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.String) {                  ContentClass = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  LastEditedBy = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Map) {                  {                    Classifications = new Dictionary<string' string>();                    TMap _map17 = iprot.ReadMapBegin();                    for( int _i18 = 0; _i18 < _map17.Count; ++_i18)                    {                      string _key19;                      string _val20;                      _key19 = iprot.ReadString();                      _val20 = iprot.ReadString();                      Classifications[_key19] = _val20;                    }                    iprot.ReadMapEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.I32) {                  CreatorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.I32) {                  LastEditorId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  SharedWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  ConflictSourceNoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.I32) {                  NoteTitleQuality = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 27;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 28;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 29;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 30;
Magic Number,Evernote.EDAM.Type,NoteAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NoteAttributes.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  DefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Publishing = new Publishing();                  Publishing.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Published = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.String) {                  Stack = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.List) {                  {                    SharedNotebookIds = new List<long>();                    TList _list38 = iprot.ReadListBegin();                    for( int _i39 = 0; _i39 < _list38.Count; ++_i39)                    {                      long _elem40;                      _elem40 = iprot.ReadI64();                      SharedNotebookIds.Add(_elem40);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.List) {                  {                    SharedNotebooks = new List<SharedNotebook>();                    TList _list41 = iprot.ReadListBegin();                    for( int _i42 = 0; _i42 < _list41.Count; ++_i42)                    {                      SharedNotebook _elem43;                      _elem43 = new SharedNotebook();                      _elem43.Read(iprot);                      SharedNotebooks.Add(_elem43);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  BusinessNotebook = new BusinessNotebook();                  BusinessNotebook.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Contact = new User();                  Contact.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Struct) {                  Restrictions = new NotebookRestrictions();                  Restrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  RecipientSettings = new NotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,Notebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Notebook.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NotebookDisplayName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ContactName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  HasSharedNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  JoinedUserCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NotebookDisplayName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ContactName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  HasSharedNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  JoinedUserCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NotebookDisplayName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ContactName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  HasSharedNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  JoinedUserCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NotebookDisplayName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ContactName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  HasSharedNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  JoinedUserCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,NotebookDescriptor,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookDescriptor.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  NoReadNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  NoCreateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  NoUpdateNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  NoExpungeNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NoShareNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  NoEmailNotes = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  NoSendMessageToRecipients = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  NoUpdateNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  NoExpungeNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  NoSetDefaultNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  NoSetNotebookStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  NoPublishToPublic = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  NoPublishToBusinessLibrary = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.Bool) {                  NoCreateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Bool) {                  NoUpdateTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  NoExpungeTags = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.Bool) {                  NoSetParentTag = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Bool) {                  NoCreateSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I32) {                  UpdateWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I32) {                  ExpungeWhichSharedNotebookRestrictions = (SharedNotebookInstanceRestrictions)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.Bool) {                  NoShareNotesWithBusiness = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  NoRenameNotebook = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.Bool) {                  NoSetInMyList = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.Bool) {                  NoChangeContact = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.Struct) {                  CanMoveToContainerRestrictions = new CanMoveToContainerRestrictions();                  CanMoveToContainerRestrictions.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 27:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.Bool) {                  NoSetReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  NoSetRecipientSettingsStack = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.Bool) {                  NoCanMoveNote = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 27;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 28;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 29;
Magic Number,Evernote.EDAM.Type,NotebookRestrictions,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\NotebookRestrictions.cs,Write,The following statement contains a magic number: field.ID = 30;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Read,The following statement contains a magic number: switch (field.ID)          {            case 1:              if (field.Type == TType.I64) {                CurrentTime = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 2:              if (field.Type == TType.Bool) {                Premium = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 3:              if (field.Type == TType.Bool) {                PremiumRecurring = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 4:              if (field.Type == TType.I64) {                PremiumExpirationDate = iprot.ReadI64();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 5:              if (field.Type == TType.Bool) {                PremiumExtendable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 6:              if (field.Type == TType.Bool) {                PremiumPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 7:              if (field.Type == TType.Bool) {                PremiumCancellationPending = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 8:              if (field.Type == TType.Bool) {                CanPurchaseUploadAllowance = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 9:              if (field.Type == TType.String) {                SponsoredGroupName = iprot.ReadString();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 10:              if (field.Type == TType.I32) {                SponsoredGroupRole = (SponsoredGroupRole)iprot.ReadI32();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            case 11:              if (field.Type == TType.Bool) {                PremiumUpgradable = iprot.ReadBool();              } else {                 TProtocolUtil.Skip(iprot' field.Type);              }              break;            default:               TProtocolUtil.Skip(iprot' field.Type);              break;          }
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,PremiumInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\PremiumInfo.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Order = (NoteSortOrder)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  PublicDescription = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Order = (NoteSortOrder)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  PublicDescription = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Uri = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  Order = (NoteSortOrder)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  Ascending = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  PublicDescription = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,Publishing,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Publishing.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  NoteGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Struct) {                  Data = new Data();                  Data.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Mime = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I16) {                  Width = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.I16) {                  Height = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I16) {                  Duration = iprot.ReadI16();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Struct) {                  Recognition = new Data();                  Recognition.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Struct) {                  Attributes = new ResourceAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  AlternateData = new Data();                  AlternateData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,Resource,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Resource.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  SourceURL = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I64) {                  Timestamp = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  Latitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Double) {                  Longitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Double) {                  Altitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  CameraMake = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  CameraModel = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  ClientWillIndex = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  RecoType = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.String) {                  FileName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  Attachment = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Struct) {                  ApplicationData = new LazyMap();                  ApplicationData.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,ResourceAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\ResourceAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Query = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Format = (QueryFormat)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  Scope = new SavedSearchScope();                  Scope.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Query = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Format = (QueryFormat)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  Scope = new SavedSearchScope();                  Scope.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Query = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Format = (QueryFormat)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  Scope = new SavedSearchScope();                  Scope.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Query = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Format = (QueryFormat)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  Scope = new SavedSearchScope();                  Scope.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Query = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  Format = (QueryFormat)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Struct) {                  Scope = new SavedSearchScope();                  Scope.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,SavedSearch,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearch.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeAccount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludePersonalLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeBusinessLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  IncludeAccount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  IncludePersonalLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Bool) {                  IncludeBusinessLinkedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,SavedSearchScope,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SavedSearchScope.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  Id = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  NotebookGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  RecipientIdentityId = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  NotebookModifiable = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I64) {                  ServiceCreated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  ServiceUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.String) {                  GlobalId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I32) {                  Privilege = (SharedNotebookPrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Struct) {                  RecipientSettings = new SharedNotebookRecipientSettings();                  RecipientSettings.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.I32) {                  SharerUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.String) {                  RecipientUsername = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  RecipientUserId = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I64) {                  ServiceAssigned = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,SharedNotebook,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebook.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ParentGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ParentGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Guid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  ParentGuid = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.I32) {                  UpdateSequenceNum = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,Tag,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\Tag.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  Id = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  Email = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  Timezone = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  Privilege = (PrivilegeLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.I32) {                  ServiceLevel = (ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.I64) {                  Created = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.I64) {                  Updated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  Deleted = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  Active = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  ShardId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.Struct) {                  Attributes = new UserAttributes();                  Attributes.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Struct) {                  Accounting = new Accounting();                  Accounting.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.Struct) {                  BusinessUserInfo = new BusinessUserInfo();                  BusinessUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.String) {                  PhotoUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.I64) {                  PhotoLastUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Struct) {                  AccountLimits = new AccountLimits();                  AccountLimits.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.Type,User,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\User.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  DefaultLocationName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Double) {                  DefaultLatitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.Double) {                  DefaultLongitude = iprot.ReadDouble();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Bool) {                  Preactivation = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.List) {                  {                    ViewedPromotions = new List<string>();                    TList _list0 = iprot.ReadListBegin();                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)                    {                      string _elem2;                      _elem2 = iprot.ReadString();                      ViewedPromotions.Add(_elem2);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  IncomingEmailAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.List) {                  {                    RecentMailedAddresses = new List<string>();                    TList _list3 = iprot.ReadListBegin();                    for( int _i4 = 0; _i4 < _list3.Count; ++_i4)                    {                      string _elem5;                      _elem5 = iprot.ReadString();                      RecentMailedAddresses.Add(_elem5);                    }                    iprot.ReadListEnd();                  }                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  Comments = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.I64) {                  DateAgreedToTermsOfService = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.I32) {                  MaxReferrals = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.I32) {                  ReferralCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 14:                if (field.Type == TType.String) {                  RefererCode = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 15:                if (field.Type == TType.I64) {                  SentEmailDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.I32) {                  SentEmailCount = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 17:                if (field.Type == TType.I32) {                  DailyEmailLimit = iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 18:                if (field.Type == TType.I64) {                  EmailOptOutDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 19:                if (field.Type == TType.I64) {                  PartnerEmailOptInDate = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 20:                if (field.Type == TType.String) {                  PreferredLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 21:                if (field.Type == TType.String) {                  PreferredCountry = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 22:                if (field.Type == TType.Bool) {                  ClipFullPage = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 23:                if (field.Type == TType.String) {                  TwitterUserName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 24:                if (field.Type == TType.String) {                  TwitterId = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 25:                if (field.Type == TType.String) {                  GroupName = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 26:                if (field.Type == TType.String) {                  RecognitionLanguage = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 28:                if (field.Type == TType.String) {                  ReferralProof = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 29:                if (field.Type == TType.Bool) {                  EducationalDiscount = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 30:                if (field.Type == TType.String) {                  BusinessAddress = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 31:                if (field.Type == TType.Bool) {                  HideSponsorBilling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 33:                if (field.Type == TType.Bool) {                  UseEmailAutoFiling = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 34:                if (field.Type == TType.I32) {                  ReminderEmailConfig = (ReminderEmailConfig)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 35:                if (field.Type == TType.I64) {                  EmailAddressLastConfirmed = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 36:                if (field.Type == TType.I64) {                  PasswordUpdated = iprot.ReadI64();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 37:                if (field.Type == TType.Bool) {                  SalesforcePushEnabled = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 38:                if (field.Type == TType.Bool) {                  ShouldLogClientEvent = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 39:                if (field.Type == TType.Bool) {                  OptOutMachineLearning = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 14;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 15;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 17;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 18;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 19;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 20;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 21;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 22;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 23;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 24;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 25;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 26;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 28;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 29;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 30;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 31;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 33;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 34;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 35;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 36;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 37;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 38;
Magic Number,Evernote.EDAM.Type,UserAttributes,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\UserAttributes.cs,Write,The following statement contains a magic number: field.ID = 39;
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.Bool) {                  ReminderNotifyEmail = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Bool) {                  ReminderNotifyInApp = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.Type,SharedNotebookRecipientSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\Type\SharedNotebookRecipientSettings.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I64) {                  CurrentTime = iprot.ReadI64();                  isset_currentTime = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  AuthenticationToken = iprot.ReadString();                  isset_authenticationToken = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.I64) {                  Expiration = iprot.ReadI64();                  isset_expiration = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.Struct) {                  User = new Evernote.EDAM.Type.User();                  User.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Struct) {                  PublicUserInfo = new PublicUserInfo();                  PublicUserInfo.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  SecondFactorRequired = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.String) {                  SecondFactorDeliveryHint = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Struct) {                  Urls = new UserUrls();                  Urls.Read(iprot);                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.UserStore,AuthenticationResult,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\AuthenticationResult.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  Name = iprot.ReadString();                  isset_name = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.Struct) {                  Settings = new BootstrapSettings();                  Settings.Read(iprot);                  isset_settings = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapProfile,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapProfile.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.String) {                  ServiceHost = iprot.ReadString();                  isset_serviceHost = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 2:                if (field.Type == TType.String) {                  MarketingUrl = iprot.ReadString();                  isset_marketingUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 3:                if (field.Type == TType.String) {                  SupportUrl = iprot.ReadString();                  isset_supportUrl = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  AccountEmailDomain = iprot.ReadString();                  isset_accountEmailDomain = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.Bool) {                  EnableFacebookSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.Bool) {                  EnableGiftSubscriptions = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.Bool) {                  EnableSupportTickets = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 8:                if (field.Type == TType.Bool) {                  EnableSharedNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 9:                if (field.Type == TType.Bool) {                  EnableSingleNoteSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 10:                if (field.Type == TType.Bool) {                  EnableSponsoredAccounts = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 11:                if (field.Type == TType.Bool) {                  EnableTwitterSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 12:                if (field.Type == TType.Bool) {                  EnableLinkedInSharing = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 13:                if (field.Type == TType.Bool) {                  EnablePublicNotebooks = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 16:                if (field.Type == TType.Bool) {                  EnableGoogle = iprot.ReadBool();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 8;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 9;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 10;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 11;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 12;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 13;
Magic Number,Evernote.EDAM.UserStore,BootstrapSettings,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\BootstrapSettings.cs,Write,The following statement contains a magic number: field.ID = 16;
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                  isset_userId = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  ServiceLevel = (Evernote.EDAM.Type.ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                  isset_userId = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  ServiceLevel = (Evernote.EDAM.Type.ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                  isset_userId = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  ServiceLevel = (Evernote.EDAM.Type.ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Read,The following statement contains a magic number: switch (field.ID)            {              case 1:                if (field.Type == TType.I32) {                  UserId = iprot.ReadI32();                  isset_userId = true;                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 7:                if (field.Type == TType.I32) {                  ServiceLevel = (Evernote.EDAM.Type.ServiceLevel)iprot.ReadI32();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 4:                if (field.Type == TType.String) {                  Username = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 5:                if (field.Type == TType.String) {                  NoteStoreUrl = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              case 6:                if (field.Type == TType.String) {                  WebApiUrlPrefix = iprot.ReadString();                } else {                   TProtocolUtil.Skip(iprot' field.Type);                }                break;              default:                 TProtocolUtil.Skip(iprot' field.Type);                break;            }
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.UserStore,PublicUserInfo,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\PublicUserInfo.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,checkVersion_args,The following statement contains a magic number: this._edamVersionMinor = 28;
Magic Number,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    ClientName = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.I16) {                    EdamVersionMajor = iprot.ReadI16();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I16) {                    EdamVersionMinor = iprot.ReadI16();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    ClientName = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.I16) {                    EdamVersionMajor = iprot.ReadI16();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.I16) {                    EdamVersionMinor = iprot.ReadI16();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,checkVersion_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    Username = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    Password = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    ConsumerKey = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    ConsumerSecret = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 5:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 6:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 7:                  if (field.Type == TType.Bool) {                    SupportsTwoFactor = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 5;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 6;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 7;
Magic Number,Evernote.EDAM.UserStore,authenticateLongSession_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    OneTimeCode = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    OneTimeCode = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    OneTimeCode = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    DeviceIdentifier = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 4:                  if (field.Type == TType.String) {                    DeviceDescription = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 4;
Magic Number,Evernote.EDAM.UserStore,completeTwoFactorAuthentication_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,revokeLongSession_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,authenticateToBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new AuthenticationResult();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,getUser_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new Evernote.EDAM.Type.User();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,getPublicUserInfo_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new PublicUserInfo();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,getPublicUserInfo_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new PublicUserInfo();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,getUserUrls_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.Struct) {                    Success = new UserUrls();                    Success.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,inviteToBusiness_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    EmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,inviteToBusiness_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,inviteToBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,removeFromBusiness_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    EmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,removeFromBusiness_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,removeFromBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,removeFromBusiness_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    OldEmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    NewEmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.String) {                    OldEmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.String) {                    NewEmailAddress = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 3;
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,updateBusinessUserIdentifier_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 3:                  if (field.Type == TType.Struct) {                    NotFoundException = new Evernote.EDAM.Error.EDAMNotFoundException();                    NotFoundException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,listBusinessUsers_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.UserProfile>();                      TList _list4 = iprot.ReadListBegin();                      for( int _i5 = 0; _i5 < _list4.Count; ++_i5)                      {                        Evernote.EDAM.Type.UserProfile _elem6;                        _elem6 = new Evernote.EDAM.Type.UserProfile();                        _elem6.Read(iprot);                        Success.Add(_elem6);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,listBusinessInvitations_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 1:                  if (field.Type == TType.String) {                    AuthenticationToken = iprot.ReadString();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Bool) {                    IncludeRequestedInvitations = iprot.ReadBool();                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
Magic Number,Evernote.EDAM.UserStore,listBusinessInvitations_args,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Write,The following statement contains a magic number: field.ID = 2;
Magic Number,Evernote.EDAM.UserStore,listBusinessInvitations_result,D:\research\architectureSmells\repos\evernote_evernote-sdk-csharp\src\Evernote\EDAM\UserStore\UserStore.cs,Read,The following statement contains a magic number: switch (field.ID)              {                case 0:                  if (field.Type == TType.List) {                    {                      Success = new List<Evernote.EDAM.Type.BusinessInvitation>();                      TList _list8 = iprot.ReadListBegin();                      for( int _i9 = 0; _i9 < _list8.Count; ++_i9)                      {                        Evernote.EDAM.Type.BusinessInvitation _elem10;                        _elem10 = new Evernote.EDAM.Type.BusinessInvitation();                        _elem10.Read(iprot);                        Success.Add(_elem10);                      }                      iprot.ReadListEnd();                    }                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 1:                  if (field.Type == TType.Struct) {                    UserException = new Evernote.EDAM.Error.EDAMUserException();                    UserException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                case 2:                  if (field.Type == TType.Struct) {                    SystemException = new Evernote.EDAM.Error.EDAMSystemException();                    SystemException.Read(iprot);                  } else {                     TProtocolUtil.Skip(iprot' field.Type);                  }                  break;                default:                   TProtocolUtil.Skip(iprot' field.Type);                  break;              }
