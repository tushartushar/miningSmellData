Implementation smell,Namespace,Class,File,Method,Description
Long Statement,CmisSync.Auth,Auth,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Auth.cs,GetParameters,The length of the statement  "	//parameters[SessionParameter.WriteTimeout] = "1200000"; // Twenty minutes // Apparently DotCMIS uses the same setting for both read and write' see https://github.com/aegif/chemistry-dotcmis/blob/trunk/DotCMIS/binding/http.cs#L155 " is 230.
Long Statement,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,GetCryptoKey,The length of the statement  "	return System.Text.Encoding.UTF8.GetBytes ("Thou art so farth away' I miss you my dear files‚ù•' with CmisSync be forever by my side!"); " is 134.
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: try {  	using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0  	}))  		using (AesManaged myAes = new AesManaged ()) {  			myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  			myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  			using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  				byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  				byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  				return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  			}  		}  } catch (CryptographicException e) {  	Console.WriteLine ("Data was not encrypted. An error occurred.");  	Console.WriteLine (e.ToString ());  	return null;  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: try {  	using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0  	}))  		using (AesManaged myAes = new AesManaged ()) {  			myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  			myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  			using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  				byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  				byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  				return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  			}  		}  } catch (CryptographicException e) {  	Console.WriteLine ("Data was not encrypted. An error occurred.");  	Console.WriteLine (e.ToString ());  	return null;  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }))  	using (AesManaged myAes = new AesManaged ()) {  		myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  		myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  		using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  			byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  			byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  			return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  		}  	}  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }))  	using (AesManaged myAes = new AesManaged ()) {  		myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  		myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  		using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  			byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  			byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  			return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  		}  	}  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: using (AesManaged myAes = new AesManaged ()) {  	myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  	myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  	using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  		byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  		byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  		return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: using (AesManaged myAes = new AesManaged ()) {  	myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  	myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  	using (ICryptoTransform encryptor = myAes.CreateEncryptor ()) {  		byte[] data = System.Text.Encoding.UTF8.GetBytes (value);  		byte[] crypt = encryptor.TransformFinalBlock (data' 0' data.Length);  		return Convert.ToBase64String (crypt' Base64FormattingOptions.None);  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixObfuscate,The following statement contains a magic number: myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: try {  	using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0  	}))  		using (AesManaged myAes = new AesManaged ()) {  			myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  			myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  			using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  				byte[] data = Convert.FromBase64String (value);  				byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  				return System.Text.Encoding.UTF8.GetString (uncrypt);  			}  		}  } catch (Exception e) {  	if (e is CryptographicException || e is FormatException || e is ArgumentException) {  		Console.WriteLine ("Your password is not obfuscated.");  		return value;  	} else {  		throw;  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: try {  	using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0'  		0  	}))  		using (AesManaged myAes = new AesManaged ()) {  			myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  			myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  			using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  				byte[] data = Convert.FromBase64String (value);  				byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  				return System.Text.Encoding.UTF8.GetString (uncrypt);  			}  		}  } catch (Exception e) {  	if (e is CryptographicException || e is FormatException || e is ArgumentException) {  		Console.WriteLine ("Your password is not obfuscated.");  		return value;  	} else {  		throw;  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }))  	using (AesManaged myAes = new AesManaged ()) {  		myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  		myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  		using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  			byte[] data = Convert.FromBase64String (value);  			byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  			return System.Text.Encoding.UTF8.GetString (uncrypt);  		}  	}  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: using (PasswordDeriveBytes pdb = new PasswordDeriveBytes (GetCryptoKey ()' new byte[] {  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0'  	0  }))  	using (AesManaged myAes = new AesManaged ()) {  		myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  		myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  		using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  			byte[] data = Convert.FromBase64String (value);  			byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  			return System.Text.Encoding.UTF8.GetString (uncrypt);  		}  	}  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: using (AesManaged myAes = new AesManaged ()) {  	myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  	myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  	using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  		byte[] data = Convert.FromBase64String (value);  		byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  		return System.Text.Encoding.UTF8.GetString (uncrypt);  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: using (AesManaged myAes = new AesManaged ()) {  	myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  	myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  	using (ICryptoTransform decryptor = myAes.CreateDecryptor ()) {  		byte[] data = Convert.FromBase64String (value);  		byte[] uncrypt = decryptor.TransformFinalBlock (data' 0' data.Length);  		return System.Text.Encoding.UTF8.GetString (uncrypt);  	}  }  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: myAes.Key = pdb.GetBytes (myAes.KeySize / 8);  
Magic Number,CmisSync.Auth,Crypto,F:\newReposMay17\aegif_CmisSync\CmisSync.Auth\Crypto.cs,UnixDeobfuscate,The following statement contains a magic number: myAes.IV = pdb.GetBytes (myAes.BlockSize / 8);  
