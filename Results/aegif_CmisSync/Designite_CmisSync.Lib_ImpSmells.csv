Implementation smell,Namespace,Class,File,Method,Description
Long Method,CmisSync.Lib.Cmis,MimeType,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\MimeType.cs,MimeType,The method has 3939 lines of code.
Complex Method,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetRepositoriesFuzzy,Cyclomatic complexity of the method is 8
Complex Method,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetRepositories,Cyclomatic complexity of the method is 8
Complex Method,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetBrowsableURL,Cyclomatic complexity of the method is 9
Complex Method,CmisSync.Lib.Database,DatabaseMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigration.cs,Migrate,Cyclomatic complexity of the method is 13
Complex Method,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,Cyclomatic complexity of the method is 10
Complex Method,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,Cyclomatic complexity of the method is 10
Complex Method,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,Cyclomatic complexity of the method is 19
Complex Method,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,ExecuteOneRecordSQL,Cyclomatic complexity of the method is 8
Complex Method,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,ExecuteMultiRecordSQL,Cyclomatic complexity of the method is 8
Complex Method,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,Cyclomatic complexity of the method is 15
Complex Method,CmisSync.Lib.Sync,ConfigMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\ConfigMigration.cs,Migrate,Cyclomatic complexity of the method is 12
Long Parameter List,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetSubfolders,The method has 5 parameters.
Long Parameter List,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,AddFile,The method has 5 parameters.
Long Parameter List,CmisSync.Lib,RepoInfo,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoInfo.cs,RepoInfo,The method has 11 parameters.
Long Parameter List,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromLocalPath,The method has 5 parameters.
Long Parameter List,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromPaths,The method has 5 parameters.
Long Parameter List,CmisSync.Lib,LocalPathSyncItem,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,LocalPathSyncItem,The method has 5 parameters.
Long Parameter List,CmisSync.Lib,RemotePathSyncItem,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,RemotePathSyncItem,The method has 6 parameters.
Long Identifier,CmisSync.Lib,RemotePathSyncItem,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,RemotePathSyncItem,The length of the parameter remoteRelativePathWithCorrectLeafname is 37.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetRepositoriesFuzzy,The length of the statement  "			return new Tuple<CmisServer' Exception> (new CmisServer (credentials.Address' null)' new ServerNotFoundException (e.Message' e)); " is 129.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetRepositoriesFuzzy,The length of the statement  "	return new Tuple<CmisServer' Exception> (new CmisServer (bestUrl == null ? credentials.Address : new Uri (bestUrl)' null)' firstException); " is 139.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetRepositories,The length of the statement  "		repositories = Auth.Auth.GetCmisRepositories (credentials.Address' credentials.UserName' credentials.Password.ToString ()); " is 123.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetSubfolderTree,The length of the statement  "	ISession session = Auth.Auth.GetCmisSession (credentials.Address.ToString ()' credentials.UserName' credentials.Password.ToString ()' credentials.RepoId); " is 154.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetBrowsableURL,The length of the statement  "			// Result: http://server/share/page/site/thesite/documentlibrary#filter=path%7C%2Fa%2523bc%2F%25E9%25DF%25u548C%25u1EC7%7C " is 122.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetBrowsableURL,The length of the statement  "			ISession session = Auth.Auth.GetCmisSession (repo.Address.ToString ()' repo.User' repo.Password.ToString ()' repo.RepoID); " is 122.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetBrowsableURL,The length of the statement  "			if (session.RepositoryInfo.ThinClientUri == null || String.IsNullOrEmpty (session.RepositoryInfo.ThinClientUri.ToString ())) { " is 126.
Long Statement,CmisSync.Lib.Cmis,CmisUtils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\CmisUtils.cs,GetChangeLogToken,The length of the statement  "	string token = session.Binding.GetRepositoryService ().GetRepositoryInfo (session.RepositoryInfo.Id' null).LatestChangeLogToken; " is 128.
Long Statement,CmisSync.Lib.Cmis,MimeType,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Cmis\MimeType.cs,GetMIMEType,The length of the statement  "	if (Path.GetExtension (fileName).Length > 1 && /* File with an extension */MIMETypesDictionary.ContainsKey (Path.GetExtension (fileName).Remove (0' 1))) { " is 154.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,AddFile,The length of the statement  "			Logger.Warn ("IOException while calculating checksum of " + item.LocalPath + " ' The file was removed while reading. Just skip it' as it does not need to be added anymore. "' e); " is 178.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,MoveFolder,The length of the statement  "	ExecuteSQLAction ("UPDATE folders SET path=@newPath||SUBSTR(path' @substringIndex)' localPath=@newLocalPath||SUBSTR(localPath' @substringIndex) WHERE path LIKE @oldPathLike"' parameters); " is 187.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,MoveFolder,The length of the statement  "	ExecuteSQLAction ("UPDATE files SET path=@newPath||SUBSTR(path' @substringIndex)' localPath=@newLocalPath||SUBSTR(localPath' @substringIndex) WHERE path LIKE @oldPathLike"' parameters); " is 185.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,The length of the statement  "		result = ExecuteSQLFunction (String.Format ("SELECT {0}Counter FROM failedoperations WHERE path=@path"' operationTypeToString (type))' parameters); " is 147.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,The length of the statement  "		result = ExecuteSQLFunction (String.Format ("SELECT {0}Counter FROM failedoperations WHERE path=@path AND lastLocalModificationDate=@date"' operationTypeToString (type))' parameters); " is 183.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,The length of the statement  "		result = ExecuteSQLFunction (String.Format ("SELECT {0}Counter FROM failedoperations WHERE path=@path"' operationTypeToString (type))' parameters); " is 147.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetOperationRetryCounter,The length of the statement  "		result = ExecuteSQLFunction (String.Format ("SELECT {0}Counter FROM failedoperations WHERE path=@path AND lastLocalModificationDate=@date"' operationTypeToString (type))' parameters); " is 183.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "	string uploadCounter = "(SELECT CASE WHEN lastLocalModificationDate=@date THEN uploadCounter ELSE '' END FROM failedoperations WHERE path=@path)"; " is 146.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "	string downloadCounter = "(SELECT CASE WHEN lastLocalModificationDate=@date THEN downloadCounter ELSE '' END FROM failedoperations WHERE path=@path)"; " is 150.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "	string changeCounter = "(SELECT CASE WHEN lastLocalModificationDate=@date THEN changeCounter ELSE '' END FROM failedoperations WHERE path=@path)"; " is 146.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "	string deleteCounter = "(SELECT CASE WHEN lastLocalModificationDate=@date THEN deleteCounter ELSE '' END FROM failedoperations WHERE path=@path)"; " is 146.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "                                (SELECT CASE WHEN lastLocalModificationDate=@date THEN uploadMessage ELSE '' END FROM failedoperations WHERE path=@path )' " is 122.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "                                (SELECT CASE WHEN lastLocalModificationDate=@date THEN downloadMessage ELSE '' END FROM failedoperations WHERE path=@path)'" is 123.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "                                (SELECT CASE WHEN lastLocalModificationDate=@date THEN changeMessage ELSE '' END FROM failedoperations WHERE path=@path)'" is 121.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The length of the statement  "                                (SELECT CASE WHEN lastLocalModificationDate=@date THEN deleteMessage ELSE '' END FROM failedoperations WHERE path=@path)" is 120.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,ContainsLocalFile,The length of the statement  "	return null != ExecuteSQLFunction ("SELECT serverSideModificationDate FROM files WHERE localPath=@localPath"' parameters); " is 122.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,RemoteToLocal,The length of the statement  "	string localPath = (string)ExecuteSQLFunction ("SELECT localPath FROM " + table + " WHERE path=@remotePath"' parameters); " is 121.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,LocalToRemote,The length of the statement  "	string remotePath = (string)ExecuteSQLFunction ("SELECT path FROM " + table + " WHERE localPath=@localPath"' parameters); " is 121.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,ContainsFolder,The length of the statement  "	return null != ExecuteSQLFunction ("SELECT serverSideModificationDate FROM folders WHERE localPath=@localPath"' parameters); " is 124.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,ContainsFolder,The length of the statement  "		return null != ExecuteSQLFunction ("SELECT serverSideModificationDate FROM folders WHERE localPath=@localPath"' parameters); " is 124.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetAllFoldersWithCmisId,The length of the statement  "	var results = ExecuteMultiRecordSQL ("SELECT path ' localPath FROM folders WHERE id=@id ORDER BY serverSideModificationDate DESC"' parameters); " is 143.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,LocalFileHasChanged,The length of the statement  "		Logger.Warn ("IOException while reading file checksum: " + path + " File is probably being edited right now' so skip it. See https://github.com/aegif/CmisSync/issues/245"); " is 172.
Long Statement,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,GetRemotePathPrefix,The length of the statement  "		var syncFolder = ConfigManager.CurrentConfig.Folders.Find (f => f.GetRepoInfo ().CmisDatabase == this.databaseFileName); " is 120.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "	Utils.NotifyUser ("CmisSync needs to upgrade its own local data for folder \"" + syncFolder.RepositoryId + "\".\nPlease stay on the network during that time' sorry for the inconvenience." + "\nIt can take up to HOURS if you have many files' thank you for your patience." + "\nA notification will pop up when it is done."); " is 322.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "	var session = Auth.Auth.GetCmisSession (((Uri)syncFolder.RemoteUrl).ToString ()' syncFolder.UserName' Crypto.Deobfuscate (syncFolder.ObfuscatedPassword)' syncFolder.RepositoryId); " is 179.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "					ExecuteSQLAction (connection' "UPDATE files SET id = @id' path = @remotePath' localPath = @localPath WHERE path = @path;"' parameters); " is 135.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "					ExecuteSQLAction (connection' "UPDATE folders SET id = @id' path = @remotePath' localPath = @localPath WHERE path = @path;"' parameters); " is 137.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "				ExecuteSQLAction (connection' "INSERT OR REPLACE INTO general (key' value) VALUES (\"PathPrefix\"' @prefix)"' parameters); " is 122.
Long Statement,CmisSync.Lib.Database,DatabaseMigrationToVersion3,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigrationToVersion3.cs,FillMissingData,The length of the statement  "	Utils.NotifyUser ("CmisSync has finished upgrading its own local data for folder \"" + syncFolder.RepositoryId + "\"."); " is 120.
Long Statement,CmisSync.Lib.Sync,ConfigMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\ConfigMigration.cs,Migrate,The length of the statement  "	Logger.DebugFormat ("Current config schema must be updated from {0} to {0}"' configSchemaVersion' Config.SchemaVersion); " is 120.
Long Statement,CmisSync.Lib.Sync,ConfigMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\ConfigMigration.cs,IsAlfresco42OrLater,The length of the statement  "		CmisUtils.GetSubfolders (folder.RepositoryId' folder.RemotePath' newUrl' folder.UserName' Crypto.Deobfuscate (folder.ObfuscatedPassword)); " is 138.
Long Statement,CmisSync.Lib,RepoBase,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoBase.cs,Initialize,The length of the statement  "			Logger.Info (String.Format ("Repo {0} - sync not launch based on last success time sync + poll interval - Next sync at {1}"' RepoInfo.Name' tm)); " is 145.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,HasWritePermissionOnDir,The length of the statement  "			if ((System.Security.AccessControl.FileSystemRights.Write & rule.FileSystemRights) != System.Security.AccessControl.FileSystemRights.Write) { " is 141.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,IsDirectoryWorthSyncing,The length of the statement  "		Logger.WarnFormat ("Local directory is outside repo target directory.  local={0}' repo={1}"' localDirectory' repoInfo.TargetDirectory); " is 135.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,WorthSyncing,The length of the statement  "	return IsFilenameWorthSyncing (localDirectory' filename) && IsDirectoryWorthSyncing (localDirectory' repoInfo) && IsFileWorthSyncing (Path.Combine (localDirectory' filename)' repoInfo); " is 185.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,WorthSyncing,The length of the statement  "	if (ignoredFilenames.Contains (filename) || ignoredExtensions.Contains (Path.GetExtension (filename)) || filename [0] == '~' // Microsoft Office temporary files start with ~ " is 173.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,IsvalidURL,The length of the statement  "	return Uri.TryCreate (url' UriKind.Absolute' out uri) && (uri.Scheme == Uri.UriSchemeHttp || uri.Scheme == Uri.UriSchemeHttps); " is 127.
Long Statement,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,ConfigureLogging,The length of the statement  "	FileInfo alternativeLog4NetConfigFile = new FileInfo (Path.Combine (Directory.GetParent (ConfigManager.CurrentConfigFile).FullName' "log4net.config")); " is 151.
Long Statement,CmisSync.Lib,Config,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Config.cs,GetFolder,The length of the statement  "		if (RemoteUri.ToString ().Equals (RemoteUrl) && folder.UserName.Equals (UserName) && folder.RepositoryId.Equals (RepositoryId)) { " is 129.
Long Statement,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,GetChangeQueue,The length of the statement  "					if (nextChange.ChangeType == WatcherChangeTypes.Created && nextFileName.Equals (fileName) && !nextDirName.Equals (dirName)) { " is 125.
Long Statement,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,GetChangeQueue,The length of the statement  "						if (changeList [j].GetFileSystemEventArgs ().ChangeType == WatcherChangeTypes.Created || changeList [j].GetFileSystemEventArgs ().ChangeType == WatcherChangeTypes.Changed) { " is 173.
Long Statement,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,Clear,The length of the statement  "				Logger.Debug ("Clearing from change list: " + change.GetFileSystemEventArgs ().ChangeType + ": " + change.GetFileSystemEventArgs ().Name); " is 138.
Long Statement,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,ChangeHandle,The length of the statement  "	Debug.Assert (change.FullPath.StartsWith (Path)' String.Format ("Invalid change path {0} for watcher {1}."' change.FullPath' Path)); " is 132.
Long Statement,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromRemoteDocument,The length of the statement  "	string remoteFolderPath = remoteDocumentPath.Substring (0' remoteDocumentPath.LastIndexOf (CmisUtils.CMIS_FILE_SEPARATOR)); " is 123.
Long Statement,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromRemoteDocument,The length of the statement  "	string remoteDocumentName = remoteDocumentPath.Substring (remoteDocumentPath.LastIndexOf (CmisUtils.CMIS_FILE_SEPARATOR) + 1); " is 126.
Long Statement,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromRemoteDocument,The length of the statement  "	RemotePathSyncItem item = new RemotePathSyncItem (remoteFolderPath' remoteDocumentName' localFilename' false' repoInfo' database); " is 130.
Long Statement,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromRemoteDocument,The length of the statement  "	string remoteFolderPath = remoteDocumentPath.Substring (0' remoteDocumentPath.LastIndexOf (CmisUtils.CMIS_FILE_SEPARATOR)); " is 123.
Long Statement,CmisSync.Lib,SyncItemFactory,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\SyncItem.cs,CreateFromRemoteDocument,The length of the statement  "	string relativeRemoteDocumentPath = remoteDocumentPath.Substring (remoteRoot.Length).TrimStart (CmisUtils.CMIS_FILE_SEPARATOR); " is 127.
Long Statement,CmisSync,WindowsPathRepresentationConverter,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\WindowsPathRepresentationConverter.cs,RemoteToLocal,The length of the statement  "	//path = path.Replace('<'' '＜'); // The < character is allowed on CMIS' but not on Windows' so thr trick is to use its two-bytes representation. " is 144.
Complex Conditional,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,WorthSyncing,The conditional expression  "ignoredFilenames.Contains (filename) || ignoredExtensions.Contains (Path.GetExtension (filename)) || filename [0] == '~' // Microsoft Office temporary files start with ~  || filename [0] == '.' && filename [1] == '_'"  is complex.
Virtual Method Call from Constructor,CmisSync.Lib,RepoBase,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoBase.cs,RepoBase,The constructor "RepoBase" calls a virtual method "SyncInBackground".
Virtual Method Call from Constructor,CmisSync.Lib,RepoBase,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoBase.cs,RepoBase,The constructor "RepoBase" calls a virtual method "SyncInBackground".
Magic Number,CmisSync.Lib.Database,DatabaseMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigration.cs,Migrate,The following statement contains a magic number: try {  	Logger.Info (String.Format ("Checking whether database {0} exists"' dbPath));  	if (!File.Exists (dbPath)) {  		Logger.Info (string.Format ("Database file {0} not exists."' dbPath));  		return;  	}  	using (var connection = GetConnection (dbPath)) {  		// Check database version.  		int dbVersion = GetDatabaseVersion (connection);  		// Skip migration if up-to-date.  		if (dbVersion >= currentDbVersion) {  			return;  		}  		// Migrate with various step according to the version.  		Logger.DebugFormat ("Current database schema must be updated from {0} to {0}"' dbVersion' currentDbVersion);  		switch (dbVersion) {  		case 0:  			new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  			break;  		case 2:  			// Need to fill the localPath value.  			new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  			break;  		default:  			throw new NotSupportedException (String.Format ("Unexpected database version: {0}."' dbVersion));  		}  	}  	Logger.Debug ("Database migration successful");  } catch (Exception e) {  	Logger.Error ("Error migrating database: " + e.Message' e);  	throw;  }  
Magic Number,CmisSync.Lib.Database,DatabaseMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigration.cs,Migrate,The following statement contains a magic number: using (var connection = GetConnection (dbPath)) {  	// Check database version.  	int dbVersion = GetDatabaseVersion (connection);  	// Skip migration if up-to-date.  	if (dbVersion >= currentDbVersion) {  		return;  	}  	// Migrate with various step according to the version.  	Logger.DebugFormat ("Current database schema must be updated from {0} to {0}"' dbVersion' currentDbVersion);  	switch (dbVersion) {  	case 0:  		new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  		break;  	case 2:  		// Need to fill the localPath value.  		new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  		break;  	default:  		throw new NotSupportedException (String.Format ("Unexpected database version: {0}."' dbVersion));  	}  }  
Magic Number,CmisSync.Lib.Database,DatabaseMigration,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\DatabaseMigration.cs,Migrate,The following statement contains a magic number: switch (dbVersion) {  case 0:  	new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  	break;  case 2:  	// Need to fill the localPath value.  	new DatabaseMigrationToVersion3 ().Migrate (syncFolder' connection' currentDbVersion);  	break;  default:  	throw new NotSupportedException (String.Format ("Unexpected database version: {0}."' dbVersion));  }  
Magic Number,CmisSync.Lib,RepoInfo,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoInfo.cs,RepoInfo,The following statement contains a magic number: MaxUploadRetries = 2;  
Magic Number,CmisSync.Lib,RepoInfo,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoInfo.cs,RepoInfo,The following statement contains a magic number: MaxDownloadRetries = 2;  
Magic Number,CmisSync.Lib,RepoInfo,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\RepoInfo.cs,RepoInfo,The following statement contains a magic number: MaxDeletionRetries = 2;  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,IsFileWorthSyncing,The following statement contains a magic number: if (File.Exists (filepath)) {  	bool allowBlankFiles = true;  	//TODO: add a preference repoInfo.allowBlankFiles  	bool limitFilesize = false;  	//TODO: add preference for filesize limiting  	long filesizeLimit = 256 * 1024 * 1024;  	//TODO: add a preference for filesize limit  	FileInfo fileInfo = new FileInfo (filepath);  	//Check permissions  	if (fileInfo.Attributes.HasFlag (FileAttributes.Hidden)) {  		Logger.InfoFormat ("Skipping {0}: hidden file"' filepath);  		return false;  	}  	if (fileInfo.Attributes.HasFlag (FileAttributes.System)) {  		Logger.InfoFormat ("Skipping {0}: system file"' filepath);  		return false;  	}  	//Check filesize  	if (!allowBlankFiles && fileInfo.Length <= 0) {  		Logger.InfoFormat ("Skipping {0}: blank file"' filepath);  		return false;  	}  	if (limitFilesize && fileInfo.Length > filesizeLimit) {  		Logger.InfoFormat ("Skipping {0}: file too large {1}MB"' filepath' fileInfo.Length / (1024f * 1024f));  		return false;  	}  } else if (Directory.Exists (filepath)) {  	return IsDirectoryWorthSyncing (filepath' repoInfo);  }  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,IsFileWorthSyncing,The following statement contains a magic number: if (File.Exists (filepath)) {  	bool allowBlankFiles = true;  	//TODO: add a preference repoInfo.allowBlankFiles  	bool limitFilesize = false;  	//TODO: add preference for filesize limiting  	long filesizeLimit = 256 * 1024 * 1024;  	//TODO: add a preference for filesize limit  	FileInfo fileInfo = new FileInfo (filepath);  	//Check permissions  	if (fileInfo.Attributes.HasFlag (FileAttributes.Hidden)) {  		Logger.InfoFormat ("Skipping {0}: hidden file"' filepath);  		return false;  	}  	if (fileInfo.Attributes.HasFlag (FileAttributes.System)) {  		Logger.InfoFormat ("Skipping {0}: system file"' filepath);  		return false;  	}  	//Check filesize  	if (!allowBlankFiles && fileInfo.Length <= 0) {  		Logger.InfoFormat ("Skipping {0}: blank file"' filepath);  		return false;  	}  	if (limitFilesize && fileInfo.Length > filesizeLimit) {  		Logger.InfoFormat ("Skipping {0}: file too large {1}MB"' filepath' fileInfo.Length / (1024f * 1024f));  		return false;  	}  } else if (Directory.Exists (filepath)) {  	return IsDirectoryWorthSyncing (filepath' repoInfo);  }  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,IsFileWorthSyncing,The following statement contains a magic number: if (File.Exists (filepath)) {  	bool allowBlankFiles = true;  	//TODO: add a preference repoInfo.allowBlankFiles  	bool limitFilesize = false;  	//TODO: add preference for filesize limiting  	long filesizeLimit = 256 * 1024 * 1024;  	//TODO: add a preference for filesize limit  	FileInfo fileInfo = new FileInfo (filepath);  	//Check permissions  	if (fileInfo.Attributes.HasFlag (FileAttributes.Hidden)) {  		Logger.InfoFormat ("Skipping {0}: hidden file"' filepath);  		return false;  	}  	if (fileInfo.Attributes.HasFlag (FileAttributes.System)) {  		Logger.InfoFormat ("Skipping {0}: system file"' filepath);  		return false;  	}  	//Check filesize  	if (!allowBlankFiles && fileInfo.Length <= 0) {  		Logger.InfoFormat ("Skipping {0}: blank file"' filepath);  		return false;  	}  	if (limitFilesize && fileInfo.Length > filesizeLimit) {  		Logger.InfoFormat ("Skipping {0}: file too large {1}MB"' filepath' fileInfo.Length / (1024f * 1024f));  		return false;  	}  } else if (Directory.Exists (filepath)) {  	return IsDirectoryWorthSyncing (filepath' repoInfo);  }  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1099511627776)  	return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  else if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: return String.Format ("{0:##.##} TB"' Math.Round (byteCount / 1099511627776' 1));  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1073741824)  	return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  else if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: return String.Format ("{0:##.##} GB"' Math.Round (byteCount / 1073741824' 1));  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1048576)  	return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  else if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: return String.Format ("{0:##.##} MB"' Math.Round (byteCount / 1048576' 0));  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: if (byteCount >= 1024)  	return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  else  	return byteCount.ToString () + " bytes";  
Magic Number,CmisSync.Lib,Utils,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Utils.cs,FormatSize,The following statement contains a magic number: return String.Format ("{0:##.##} KB"' Math.Round (byteCount / 1024' 0));  
Magic Number,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,Watcher,The following statement contains a magic number: InternalBufferSize = 4 * 1024 * 16;  
Magic Number,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,Watcher,The following statement contains a magic number: InternalBufferSize = 4 * 1024 * 16;  
Magic Number,CmisSync.Lib,Watcher,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,Watcher,The following statement contains a magic number: InternalBufferSize = 4 * 1024 * 16;  
Magic Number,CmisSync.Lib,Grace,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,WaitGraceTime,The following statement contains a magic number: while (DateTime.Now < graceEnd) {  	Logger.Debug ("Waiting grace time");  	Thread.Sleep (1000);  	// Wait a second.  }  
Magic Number,CmisSync.Lib,Grace,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Watcher.cs,WaitGraceTime,The following statement contains a magic number: Thread.Sleep (1000);  
Missing Default,CmisSync.Lib.Database,Database,F:\newReposMay17\aegif_CmisSync\CmisSync.Lib\Database\Database.cs,SetOperationRetryCounter,The following switch statement is missing a default case: switch (type) {  case OperationType.UPLOAD:  	uploadCounter = "@counter";  	break;  case OperationType.DOWNLOAD:  	downloadCounter = "@counter";  	break;  case OperationType.CHANGE:  	changeCounter = "@counter";  	break;  case OperationType.DELETE:  	deleteCounter = "@counter";  	break;  }  
