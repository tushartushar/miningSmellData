Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,Cyclomatic complexity of the method is 9
Complex Method,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,Cyclomatic complexity of the method is 9
Complex Method,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,Cyclomatic complexity of the method is 9
Complex Method,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WritePacketLength,Cyclomatic complexity of the method is 18
Complex Method,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,Crypt,Cyclomatic complexity of the method is 10
Complex Method,WarhammerEmu.GameServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Listener.cs,LoadPacketHandler,Cyclomatic complexity of the method is 8
Complex Method,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,HandlePacket,Cyclomatic complexity of the method is 21
Complex Method,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,Cyclomatic complexity of the method is 12
Long Statement,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The length of the statement  "					Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2)); " is 124.
Long Statement,WarhammerEmu.GameServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Listener.cs,HandlePacket,The length of the statement  "		PacketHandlerAttribute[] packethandlerattribs = (PacketHandlerAttribute[])packetHandler.GetType ().GetCustomAttributes (typeof(PacketHandlerAttribute)' true); " is 158.
Long Statement,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_REQUEST_CHAR,The length of the statement  "		// Out.WriteHexStringBytes(""); " is 11455.
Long Statement,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_REQUEST_CHAR,The length of the statement  "		Out.WriteHexStringBytes (""); " is 11453.
Long Statement,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_INIT_PLAYER,The length of the statement  "            Out.WriteHexStringBytes("00CA00000028D5BF1D7F0000000CF824000CAFC7051700020000000000080001001A000000000000084261646C616E6473000000");" is 132.
Long Statement,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,BuildCluster,The length of the statement  "	cluster.SetClusterId (122).SetClusterName ("Cluster 1").SetLobbyHost ("127.0.0.1").SetLobbyPort (10622).SetLanguageId (0).SetMaxClusterPop (500).SetClusterPopStatus (ClusterPopStatus.POP_HIGH).SetLanguageId (0).SetClusterStatus (ClusterStatus.STATUS_ONLINE); " is 258.
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt16".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt16R".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt16".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt16R".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt32".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt32R".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt32".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt32R".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt64".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt64R".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt64".
Virtual Method Call from Constructor,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,PacketOut,The constructor "PacketOut" calls a virtual method "WriteUInt64R".
Empty Catch Block,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The method has an empty catch block.
Empty Catch Block,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The method has an empty catch block.
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt32,The following statement contains a magic number: return ConvertToInt32 (val [startIndex]' val [startIndex + 1]' val [startIndex + 2]' val [startIndex + 3]);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt32,The following statement contains a magic number: return ConvertToInt32 (val [startIndex]' val [startIndex + 1]' val [startIndex + 2]' val [startIndex + 3]);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt32,The following statement contains a magic number: return ((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt32,The following statement contains a magic number: return ((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt32,The following statement contains a magic number: return ((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt32,The following statement contains a magic number: return ConvertToUInt32 (val [startIndex]' val [startIndex + 1]' val [startIndex + 2]' val [startIndex + 3]);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt32,The following statement contains a magic number: return ConvertToUInt32 (val [startIndex]' val [startIndex + 1]' val [startIndex + 2]' val [startIndex + 3]);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt32,The following statement contains a magic number: return (uint)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt32,The following statement contains a magic number: return (uint)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt32,The following statement contains a magic number: return (uint)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToFloat,The following statement contains a magic number: return (float)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToFloat,The following statement contains a magic number: return (float)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToFloat,The following statement contains a magic number: return (float)((v1 << 24) | (v2 << 16) | (v3 << 8) | v4);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToInt16,The following statement contains a magic number: return (short)((v1 << 8) | v2);  
Magic Number,WarhammerEmu,Marshal,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\Marshal.cs,ConvertToUInt16,The following statement contains a magic number: return (ushort)(v2 | (v1 << 8));  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,GetFloat,The following statement contains a magic number: b [2] = (byte)ReadByte ();  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,GetFloat,The following statement contains a magic number: b [3] = (byte)ReadByte ();  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,ReadPs,The following statement contains a magic number: if (Length >= Position + 2)  	return BitConverter.ToChar (new byte[] {  		GetUint8 ()'  		GetUint8 ()  	}' 0);  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeMythicSize,The following statement contains a magic number: while ((mByte & 0x80) == 0x80) {  	//Log.Debug("readSize"' "mByte = " + mByte);  	mByte ^= 0x80;  	mSize = (mSize | (mByte << (7 * mByteCount)));  	if (Length == Capacity)  		return 0;  	mByte = ReadByte ();  	mByteCount++;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeMythicSize,The following statement contains a magic number: mSize = (mSize | (mByte << (7 * mByteCount)));  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeMythicSize,The following statement contains a magic number: mSize = (mSize | (mByte << (7 * mByteCount)));  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: try {  	byte[] Packet = new byte[Length];  	Read (Packet' (int)Position' Packet.Length);  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		Packet [pos] ^= Key [tmp];  		y = (y + Packet [pos]) & 255;  	}  	return new PacketIn (Packet' 0' Packet.Length);  }  catch (Exception) {  	//  Log.Error("PacketIn"' "DecryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: midpoint = Packet.Length / 2;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: x = (x + 1) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: y = (y + Key [x]) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: tmp = (byte)((Key [x] + Key [y]) & 255);  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: y = (y + Packet [pos]) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	Packet [pos] ^= Key [tmp];  	y = (y + Packet [pos]) & 255;  }  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: x = (x + 1) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: y = (y + Key [x]) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: tmp = (byte)((Key [x] + Key [y]) & 255);  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecryptMythicRC4,The following statement contains a magic number: y = (y + Packet [pos]) & 255;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeGamebryoSize,The following statement contains a magic number: if (Size >= 128)  	Size += ((GetUint8 () - 1) * 128) + 2;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeGamebryoSize,The following statement contains a magic number: if (Size >= 128)  	Size += ((GetUint8 () - 1) * 128) + 2;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeGamebryoSize,The following statement contains a magic number: if (Size >= 128)  	Size += ((GetUint8 () - 1) * 128) + 2;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeGamebryoSize,The following statement contains a magic number: Size += ((GetUint8 () - 1) * 128) + 2;  
Magic Number,WarhammerEmu,PacketIn,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketIn.cs,DecodeGamebryoSize,The following statement contains a magic number: Size += ((GetUint8 () - 1) * 128) + 2;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt16,The following statement contains a magic number: WriteByte ((byte)(val >> 8));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt16R,The following statement contains a magic number: WriteByte ((byte)(val >> 8));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32,The following statement contains a magic number: WriteByte ((byte)(val >> 24));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32,The following statement contains a magic number: WriteByte ((byte)((val >> 16) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32,The following statement contains a magic number: WriteByte ((byte)((val & 0xffff) >> 8));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32R,The following statement contains a magic number: WriteByte ((byte)((val & 0xffff) >> 8));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32R,The following statement contains a magic number: WriteByte ((byte)((val >> 16) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt32R,The following statement contains a magic number: WriteByte ((byte)(val >> 24));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)(val >> 56));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 48) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 40) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 32) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 24) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 16) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64,The following statement contains a magic number: WriteByte ((byte)((val >> 8) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 8) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 16) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 24) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 32) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 40) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)((val >> 48) & 0xff));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteUInt64R,The following statement contains a magic number: WriteByte ((byte)(val >> 56));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < Position - 6; ++i)  	val += buf [i + 8];  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,GetChecksum,The following statement contains a magic number: for (int i = 0; i < Position - 6; ++i)  	val += buf [i + 8];  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,GetChecksum,The following statement contains a magic number: val += buf [i + 8];  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: if ((length & 1) == 0) {  	for (int i = 0; i < length; i++)  		WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  }  else {  	WriteByte (0);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: if ((length & 1) == 0) {  	for (int i = 0; i < length; i++)  		WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  }  else {  	WriteByte (0);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: if ((length & 1) == 0) {  	for (int i = 0; i < length; i++)  		WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  }  else {  	WriteByte (0);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: for (int i = 0; i < length; i++)  	WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: for (int i = 0; i < length; i++)  	WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: for (int i = 0; i < length; i++)  	WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteHexStringBytes,The following statement contains a magic number: WriteByte (Convert.ToByte (hexString.Substring (i * 2' 2)' 16));  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: try {  	int x' y' midpoint' pos;  	byte tmp = 0;  	x = y = 0;  	midpoint = Packet.Length / 2;  	for (pos = midpoint; pos < Packet.Length; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	for (pos = 0; pos < midpoint; ++pos) {  		x = (x + 1) & 255;  		y = (y + Key [x]) & 255;  		tmp = Key [x];  		Key [x] = Key [y];  		Key [y] = tmp;  		tmp = (byte)((Key [x] + Key [y]) & 255);  		y = (y + Packet [pos]) & 255;  		Packet [pos] ^= Key [tmp];  	}  	return Packet;  }  catch (Exception) {  	//Log.Error("PacketOut"' "EncryptMythicRC4 : Failled !" + e.ToString());  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: midpoint = Packet.Length / 2;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = midpoint; pos < Packet.Length; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: x = (x + 1) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: y = (y + Key [x]) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: tmp = (byte)((Key [x] + Key [y]) & 255);  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: y = (y + Packet [pos]) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: for (pos = 0; pos < midpoint; ++pos) {  	x = (x + 1) & 255;  	y = (y + Key [x]) & 255;  	tmp = Key [x];  	Key [x] = Key [y];  	Key [y] = tmp;  	tmp = (byte)((Key [x] + Key [y]) & 255);  	y = (y + Packet [pos]) & 255;  	Packet [pos] ^= Key [tmp];  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: x = (x + 1) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: y = (y + Key [x]) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: tmp = (byte)((Key [x] + Key [y]) & 255);  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,EncryptMythicRC4,The following statement contains a magic number: y = (y + Packet [pos]) & 255;  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: if (Total.Length - 1 < 0x80)  	WriteByte ((byte)(Total.Length));  else {  	int Size = Total.Length;  	int Offset = 1;  	while (Size >= (128 * 2)) {  		Size -= 128;  		++Offset;  	}  	WriteByte ((byte)Size);  	WriteByte ((byte)Offset);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: if (Total.Length - 1 < 0x80)  	WriteByte ((byte)(Total.Length));  else {  	int Size = Total.Length;  	int Offset = 1;  	while (Size >= (128 * 2)) {  		Size -= 128;  		++Offset;  	}  	WriteByte ((byte)Size);  	WriteByte ((byte)Offset);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: if (Total.Length - 1 < 0x80)  	WriteByte ((byte)(Total.Length));  else {  	int Size = Total.Length;  	int Offset = 1;  	while (Size >= (128 * 2)) {  		Size -= 128;  		++Offset;  	}  	WriteByte ((byte)Size);  	WriteByte ((byte)Offset);  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: while (Size >= (128 * 2)) {  	Size -= 128;  	++Offset;  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: while (Size >= (128 * 2)) {  	Size -= 128;  	++Offset;  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: while (Size >= (128 * 2)) {  	Size -= 128;  	++Offset;  }  
Magic Number,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WriteGamebryoSize,The following statement contains a magic number: Size -= 128;  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: try {  	int end = start + len;  	for (int i = start; i < end; i += 16) {  		StringBuilder text = new StringBuilder ();  		StringBuilder hex = new StringBuilder ();  		hex.Append ("\n");  		for (int j = 0; j < 16; j++) {  			if (j + i < end) {  				byte val = dump [j + i];  				hex.Append (" ");  				hex.Append (dump [j + i].ToString ("X2"));  				if (j == 3 || j == 7 || j == 11)  					hex.Append (" ");  				if (val >= 32 && val <= 127) {  					text.Append ((char)val);  				}  				else {  					text.Append (".");  				}  			}  			else {  				hex.Append ("   ");  				text.Append ("  ");  			}  		}  		hex.Append ("  ");  		hex.Append ("//" + text.ToString ());  		hexDump.Append (hex.ToString ());  	}  }  catch (Exception e) {  	Log.Error ("HexDump"' e.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int i = start; i < end; i += 16) {  	StringBuilder text = new StringBuilder ();  	StringBuilder hex = new StringBuilder ();  	hex.Append ("\n");  	for (int j = 0; j < 16; j++) {  		if (j + i < end) {  			byte val = dump [j + i];  			hex.Append (" ");  			hex.Append (dump [j + i].ToString ("X2"));  			if (j == 3 || j == 7 || j == 11)  				hex.Append (" ");  			if (val >= 32 && val <= 127) {  				text.Append ((char)val);  			}  			else {  				text.Append (".");  			}  		}  		else {  			hex.Append ("   ");  			text.Append ("  ");  		}  	}  	hex.Append ("  ");  	hex.Append ("//" + text.ToString ());  	hexDump.Append (hex.ToString ());  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: i += 16
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: for (int j = 0; j < 16; j++) {  	if (j + i < end) {  		byte val = dump [j + i];  		hex.Append (" ");  		hex.Append (dump [j + i].ToString ("X2"));  		if (j == 3 || j == 7 || j == 11)  			hex.Append (" ");  		if (val >= 32 && val <= 127) {  			text.Append ((char)val);  		}  		else {  			text.Append (".");  		}  	}  	else {  		hex.Append ("   ");  		text.Append ("  ");  	}  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j + i < end) {  	byte val = dump [j + i];  	hex.Append (" ");  	hex.Append (dump [j + i].ToString ("X2"));  	if (j == 3 || j == 7 || j == 11)  		hex.Append (" ");  	if (val >= 32 && val <= 127) {  		text.Append ((char)val);  	}  	else {  		text.Append (".");  	}  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j + i < end) {  	byte val = dump [j + i];  	hex.Append (" ");  	hex.Append (dump [j + i].ToString ("X2"));  	if (j == 3 || j == 7 || j == 11)  		hex.Append (" ");  	if (val >= 32 && val <= 127) {  		text.Append ((char)val);  	}  	else {  		text.Append (".");  	}  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j + i < end) {  	byte val = dump [j + i];  	hex.Append (" ");  	hex.Append (dump [j + i].ToString ("X2"));  	if (j == 3 || j == 7 || j == 11)  		hex.Append (" ");  	if (val >= 32 && val <= 127) {  		text.Append ((char)val);  	}  	else {  		text.Append (".");  	}  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j + i < end) {  	byte val = dump [j + i];  	hex.Append (" ");  	hex.Append (dump [j + i].ToString ("X2"));  	if (j == 3 || j == 7 || j == 11)  		hex.Append (" ");  	if (val >= 32 && val <= 127) {  		text.Append ((char)val);  	}  	else {  		text.Append (".");  	}  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j + i < end) {  	byte val = dump [j + i];  	hex.Append (" ");  	hex.Append (dump [j + i].ToString ("X2"));  	if (j == 3 || j == 7 || j == 11)  		hex.Append (" ");  	if (val >= 32 && val <= 127) {  		text.Append ((char)val);  	}  	else {  		text.Append (".");  	}  }  else {  	hex.Append ("   ");  	text.Append ("  ");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j == 3 || j == 7 || j == 11)  	hex.Append (" ");  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j == 3 || j == 7 || j == 11)  	hex.Append (" ");  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (j == 3 || j == 7 || j == 11)  	hex.Append (" ");  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (val >= 32 && val <= 127) {  	text.Append ((char)val);  }  else {  	text.Append (".");  }  
Magic Number,WarhammerEmu,Log,C:\repos\zozooo_WarEmuDebug\WarServer\Log.cs,Hex,The following statement contains a magic number: if (val >= 32 && val <= 127) {  	text.Append ((char)val);  }  else {  	text.Append (".");  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: lock (this) {  	long PacketLength = packet.Length;  	while (PacketLength > 0) {  		// Lecture du Header  		if (!ReadingData) {  			if (PacketLength < 2) {  				Log.Error ("OnReceive"' "invalid header " + PacketLength);  				break;  			}  			PacketSize = packet.GetUint16 ();  			PacketLength -= 2;  			if (PacketLength < PacketSize + 10) {  				Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  				break;  			}  			packet.Size = (ulong)PacketSize + 10;  			packet = DeCrypt (packet);  			SequenceID = packet.GetUint16 ();  			SessionID = packet.GetUint16 ();  			Unk1 = packet.GetUint16 ();  			Unk2 = packet.GetUint8 ();  			Opcode = packet.GetUint8 ();  			PacketLength -= 8;  			if (PacketLength > PacketSize + 2) {  				Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  			}  			ReadingData = true;  		}  		else {  			ReadingData = false;  			if (PacketLength >= PacketSize + 2) {  				byte[] BPack = new byte[PacketSize + 2];  				packet.Read (BPack' 0' (int)(PacketSize + 2));  				PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  				Packet.Opcode = Opcode;  				Packet.Size = (ulong)PacketSize;  				// handler.HandlePacket(Packet);  				listener.HandlePacket (this' Packet);  				PacketLength -= PacketSize + 2;  			}  			else {  				Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  				break;  			}  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: while (PacketLength > 0) {  	// Lecture du Header  	if (!ReadingData) {  		if (PacketLength < 2) {  			Log.Error ("OnReceive"' "invalid header " + PacketLength);  			break;  		}  		PacketSize = packet.GetUint16 ();  		PacketLength -= 2;  		if (PacketLength < PacketSize + 10) {  			Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  			break;  		}  		packet.Size = (ulong)PacketSize + 10;  		packet = DeCrypt (packet);  		SequenceID = packet.GetUint16 ();  		SessionID = packet.GetUint16 ();  		Unk1 = packet.GetUint16 ();  		Unk2 = packet.GetUint8 ();  		Opcode = packet.GetUint8 ();  		PacketLength -= 8;  		if (PacketLength > PacketSize + 2) {  			Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  		}  		ReadingData = true;  	}  	else {  		ReadingData = false;  		if (PacketLength >= PacketSize + 2) {  			byte[] BPack = new byte[PacketSize + 2];  			packet.Read (BPack' 0' (int)(PacketSize + 2));  			PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  			Packet.Opcode = Opcode;  			Packet.Size = (ulong)PacketSize;  			// handler.HandlePacket(Packet);  			listener.HandlePacket (this' Packet);  			PacketLength -= PacketSize + 2;  		}  		else {  			Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  			break;  		}  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (!ReadingData) {  	if (PacketLength < 2) {  		Log.Error ("OnReceive"' "invalid header " + PacketLength);  		break;  	}  	PacketSize = packet.GetUint16 ();  	PacketLength -= 2;  	if (PacketLength < PacketSize + 10) {  		Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  		break;  	}  	packet.Size = (ulong)PacketSize + 10;  	packet = DeCrypt (packet);  	SequenceID = packet.GetUint16 ();  	SessionID = packet.GetUint16 ();  	Unk1 = packet.GetUint16 ();  	Unk2 = packet.GetUint8 ();  	Opcode = packet.GetUint8 ();  	PacketLength -= 8;  	if (PacketLength > PacketSize + 2) {  		Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  	}  	ReadingData = true;  }  else {  	ReadingData = false;  	if (PacketLength >= PacketSize + 2) {  		byte[] BPack = new byte[PacketSize + 2];  		packet.Read (BPack' 0' (int)(PacketSize + 2));  		PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  		Packet.Opcode = Opcode;  		Packet.Size = (ulong)PacketSize;  		// handler.HandlePacket(Packet);  		listener.HandlePacket (this' Packet);  		PacketLength -= PacketSize + 2;  	}  	else {  		Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  		break;  	}  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength < 2) {  	Log.Error ("OnReceive"' "invalid header " + PacketLength);  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: PacketLength -= 2;  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength < PacketSize + 10) {  	Log.Error ("OnReceive"' "Incomplete Packet Header " + PacketLength + "<" + PacketSize);  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: packet.Size = (ulong)PacketSize + 10;  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: PacketLength -= 8;  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength > PacketSize + 2) {  	Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength > PacketSize + 2) {  	Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: Log.Debug ("OnReceive::Packet contain multiple opcodes " + PacketLength + ">" + (PacketSize + 2));  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength >= PacketSize + 2) {  	byte[] BPack = new byte[PacketSize + 2];  	packet.Read (BPack' 0' (int)(PacketSize + 2));  	PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  	Packet.Opcode = Opcode;  	Packet.Size = (ulong)PacketSize;  	// handler.HandlePacket(Packet);  	listener.HandlePacket (this' Packet);  	PacketLength -= PacketSize + 2;  }  else {  	Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength >= PacketSize + 2) {  	byte[] BPack = new byte[PacketSize + 2];  	packet.Read (BPack' 0' (int)(PacketSize + 2));  	PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  	Packet.Opcode = Opcode;  	Packet.Size = (ulong)PacketSize;  	// handler.HandlePacket(Packet);  	listener.HandlePacket (this' Packet);  	PacketLength -= PacketSize + 2;  }  else {  	Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength >= PacketSize + 2) {  	byte[] BPack = new byte[PacketSize + 2];  	packet.Read (BPack' 0' (int)(PacketSize + 2));  	PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  	Packet.Opcode = Opcode;  	Packet.Size = (ulong)PacketSize;  	// handler.HandlePacket(Packet);  	listener.HandlePacket (this' Packet);  	PacketLength -= PacketSize + 2;  }  else {  	Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength >= PacketSize + 2) {  	byte[] BPack = new byte[PacketSize + 2];  	packet.Read (BPack' 0' (int)(PacketSize + 2));  	PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  	Packet.Opcode = Opcode;  	Packet.Size = (ulong)PacketSize;  	// handler.HandlePacket(Packet);  	listener.HandlePacket (this' Packet);  	PacketLength -= PacketSize + 2;  }  else {  	Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: if (PacketLength >= PacketSize + 2) {  	byte[] BPack = new byte[PacketSize + 2];  	packet.Read (BPack' 0' (int)(PacketSize + 2));  	PacketIn Packet = new PacketIn (BPack' 0' BPack.Length);  	Packet.Opcode = Opcode;  	Packet.Size = (ulong)PacketSize;  	// handler.HandlePacket(Packet);  	listener.HandlePacket (this' Packet);  	PacketLength -= PacketSize + 2;  }  else {  	Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  	break;  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: packet.Read (BPack' 0' (int)(PacketSize + 2));  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: PacketLength -= PacketSize + 2;  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,OnReceive,The following statement contains a magic number: Log.Error ("OnReceive"' "The size of the packet is less than the total received :" + PacketLength + "<" + (PacketSize + 2));  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,SendCustomPacket,The following statement contains a magic number: try {  	hexStringBytes = hexStringBytes.Replace (" "' "");  	byte opcode = Convert.ToByte (hexStringBytes.Substring (0' 2)' 16);  	PacketOut packet = new PacketOut (opcode);  	packet.WriteHexStringBytes (hexStringBytes.Remove (0' 2));  	packet.WritePacketLength ();  	packet = Crypt (packet);  	byte[] buf = packet.ToArray ();  	//packet.WritePacketLength sets the Capacity  	socket.Send (buf);  }  catch {  	Log.Error ("SendCustomPacket: Failed to send packet");  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,SendCustomPacket,The following statement contains a magic number: try {  	hexStringBytes = hexStringBytes.Replace (" "' "");  	byte opcode = Convert.ToByte (hexStringBytes.Substring (0' 2)' 16);  	PacketOut packet = new PacketOut (opcode);  	packet.WriteHexStringBytes (hexStringBytes.Remove (0' 2));  	packet.WritePacketLength ();  	packet = Crypt (packet);  	byte[] buf = packet.ToArray ();  	//packet.WritePacketLength sets the Capacity  	socket.Send (buf);  }  catch {  	Log.Error ("SendCustomPacket: Failed to send packet");  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,SendCustomPacket,The following statement contains a magic number: try {  	hexStringBytes = hexStringBytes.Replace (" "' "");  	byte opcode = Convert.ToByte (hexStringBytes.Substring (0' 2)' 16);  	PacketOut packet = new PacketOut (opcode);  	packet.WriteHexStringBytes (hexStringBytes.Remove (0' 2));  	packet.WritePacketLength ();  	packet = Crypt (packet);  	byte[] buf = packet.ToArray ();  	//packet.WritePacketLength sets the Capacity  	socket.Send (buf);  }  catch {  	Log.Error ("SendCustomPacket: Failed to send packet");  }  
Magic Number,WarhammerEmu.GameServer,Connection,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Connection.cs,SendCustomPacket,The following statement contains a magic number: packet.WriteHexStringBytes (hexStringBytes.Remove (0' 2));  
Magic Number,WarhammerEmu.GameServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Listener.cs,Run,The following statement contains a magic number: try {  	LoadPacketHandler ();  	LoadCryptHandler ();  	m_socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	m_socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.DontLinger' true);  	m_socket.Bind (new IPEndPoint (IPAddress.Parse (hostIp)' hostPort));  	m_socket.Listen (10);  	m_socket.BeginAccept (new AsyncCallback (OnConnect)' null);  }  catch (SocketException se) {  	Log.Warn ("GameServer: Listener exception.." + se);  }  
Magic Number,WarhammerEmu.GameServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Listener.cs,Run,The following statement contains a magic number: m_socket.Listen (10);  
Magic Number,WarhammerEmu.GameServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Listener.cs,GetTimeStamp,The following statement contains a magic number: return (int)(DateTime.UtcNow - new DateTime (1970' 1' 1)).TotalSeconds;  
Magic Number,WarhammerEmu.GameServer,Authentication,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Authentication.cs,F_CONNECT,The following statement contains a magic number: packet.Skip (8);  
Magic Number,WarhammerEmu.GameServer,Authentication,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Authentication.cs,F_CONNECT,The following statement contains a magic number: packet.Skip (21);  
Magic Number,WarhammerEmu.GameServer,Authentication,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Authentication.cs,F_CONNECT,The following statement contains a magic number: Out.WriteByte (112);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_PLAYER_ENTER_FULL,The following statement contains a magic number: Out.WriteUInt16R (15);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_REQUEST_CHAR,The following statement contains a magic number: if (Operation == 0x2D58) {  	PacketOut Out = new PacketOut ((byte)Opcodes.F_REQUEST_CHAR_ERROR);  	Out.WriteByte (2);  	conn.SendTCP (Out);  }  else {  	PacketOut Out = new PacketOut ((byte)Opcodes.F_REQUEST_CHAR_RESPONSE);  	// Out.WriteHexStringBytes("");  	Out.WriteHexStringBytes	conn.SendTCP (Out);  }  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_REQUEST_CHAR,The following statement contains a magic number: Out.WriteByte (2);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_DUMP_ARENAS_LARGE,The following statement contains a magic number: Out.Fill (0' 20);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_DUMP_ARENAS_LARGE,The following statement contains a magic number: Out.WriteString ("38699"' 5);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_DUMP_ARENAS_LARGE,The following statement contains a magic number: Out.WriteString ("38700"' 5);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_DUMP_ARENAS_LARGE,The following statement contains a magic number: Out.WriteString ("0.0.0.0"' 20);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_INIT_PLAYER,The following statement contains a magic number: Out.Fill (0' 4);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_INIT_PLAYER,The following statement contains a magic number: Out.Fill (0' 6);  
Magic Number,WarhammerEmu.GameServer,CharacterResponse,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\CharacterResponse.cs,F_INIT_PLAYER,The following statement contains a magic number: Out.Fill (0' 3);  
Magic Number,WarhammerEmu.GameServer,Encryptions,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Encryptions.cs,F_ENCRYPTKEY,The following statement contains a magic number: if (Result.cipher == 0) {  	PacketOut Out = new PacketOut ((byte)Opcodes.F_RECEIVE_ENCRYPTKEY);  	Out.WriteByte (1);  	conn.SendTCP (Out);  }  else if (Result.cipher == 1) {  	byte[] EncryptKey = new byte[256];  	packet.Read (EncryptKey' 0' EncryptKey.Length);  	conn.AddCrypt ("RC4Crypto"' new CryptKey (EncryptKey)' new CryptKey (EncryptKey));  	Log.Trace ("KEY:" + BitConverter.ToString (EncryptKey));  }  
Magic Number,WarhammerEmu.GameServer,Encryptions,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Encryptions.cs,F_ENCRYPTKEY,The following statement contains a magic number: if (Result.cipher == 1) {  	byte[] EncryptKey = new byte[256];  	packet.Read (EncryptKey' 0' EncryptKey.Length);  	conn.AddCrypt ("RC4Crypto"' new CryptKey (EncryptKey)' new CryptKey (EncryptKey));  	Log.Trace ("KEY:" + BitConverter.ToString (EncryptKey));  }  
Magic Number,WarhammerEmu.GameServer,Mounts,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Mounts.cs,MountPacketTest,The following statement contains a magic number: Out.WriteUInt16 (1286);  
Magic Number,WarhammerEmu.GameServer,Movement,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Movement.cs,F_PLAYER_STATE2,The following statement contains a magic number: X /= 2;  
Magic Number,WarhammerEmu.GameServer,Movement,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Movement.cs,F_PLAYER_STATE2,The following statement contains a magic number: Y /= 2;  
Magic Number,WarhammerEmu.GameServer,Movement,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Movement.cs,F_PLAYER_STATE2,The following statement contains a magic number: Z /= 4;  
Magic Number,WarhammerEmu.GameServer,Movement,C:\repos\zozooo_WarEmuDebug\WarServer\GameServer\Packets\Movement.cs,F_PLAYER_STATE2,The following statement contains a magic number: if (packet.Size < 10) {  	Log.Debug ("Player: state refresh");  }  else {  	if (Type == (byte)MovementTypes.NotMoving) {  		// player not moving or has stopped in position  		Log.Debug ("Player: not moving or has stopped in position " + Type);  	}  	else if (Type == (byte)MovementTypes.GroundForward) {  		// player is moving forward  		Log.Debug ("Player: moving forward " + Type);  	}  	else if (Type == (byte)MovementTypes.GroundBackward) {  		// player is moving backward  		Log.Debug ("Player: moving backward " + Type);  	}  	else if (Type == (byte)MovementTypes.FlyModeForward) {  		// player is using fly mode  		Log.Debug ("Player: flying forward " + Type);  	}  	else if (Type == (byte)MovementTypes.FlyModeBackward) {  		// player is using fly mode  		Log.Debug ("Player: flying backward " + Type);  	}  	GetPosition (X' Y' Z);  }  
Magic Number,WarhammerEmu.LoginServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\Listener.cs,Run,The following statement contains a magic number: try {  	m_socket = new Socket (AddressFamily.InterNetwork' SocketType.Stream' ProtocolType.Tcp);  	m_socket.SetSocketOption (SocketOptionLevel.Socket' SocketOptionName.DontLinger' true);  	m_socket.Bind (new IPEndPoint (IPAddress.Parse (hostIp)' hostPort));  	m_socket.Listen (10);  	m_socket.BeginAccept (new AsyncCallback (OnConnect)' null);  }  catch (SocketException se) {  	Log.Warn ("LoginServer: Listener exception.." + se);  }  
Magic Number,WarhammerEmu.LoginServer,Listener,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\Listener.cs,Run,The following statement contains a magic number: m_socket.Listen (10);  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: while (PSize > 0x7f) {  	Header.Add ((byte)((byte)(PSize) | 0x80));  	PSize >>= 7;  	itemcount++;  	if (itemcount >= Header.Capacity + 10)  		Header.Capacity += 10;  }  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: while (PSize > 0x7f) {  	Header.Add ((byte)((byte)(PSize) | 0x80));  	PSize >>= 7;  	itemcount++;  	if (itemcount >= Header.Capacity + 10)  		Header.Capacity += 10;  }  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: while (PSize > 0x7f) {  	Header.Add ((byte)((byte)(PSize) | 0x80));  	PSize >>= 7;  	itemcount++;  	if (itemcount >= Header.Capacity + 10)  		Header.Capacity += 10;  }  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: PSize >>= 7;  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: if (itemcount >= Header.Capacity + 10)  	Header.Capacity += 10;  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: if (itemcount >= Header.Capacity + 10)  	Header.Capacity += 10;  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,SendTCPCuted,The following statement contains a magic number: Header.Capacity += 10;  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,onGetCharSummaryListReq,The following statement contains a magic number: Out.Write (new byte[2] {  	0x08'  	00  });  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,BuildCluster,The following statement contains a magic number: cluster.SetClusterId (122).SetClusterName ("Cluster 1").SetLobbyHost ("127.0.0.1").SetLobbyPort (10622).SetLanguageId (0).SetMaxClusterPop (500).SetClusterPopStatus (ClusterPopStatus.POP_HIGH).SetLanguageId (0).SetClusterStatus (ClusterStatus.STATUS_ONLINE);  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,BuildCluster,The following statement contains a magic number: cluster.SetClusterId (122).SetClusterName ("Cluster 1").SetLobbyHost ("127.0.0.1").SetLobbyPort (10622).SetLanguageId (0).SetMaxClusterPop (500).SetClusterPopStatus (ClusterPopStatus.POP_HIGH).SetLanguageId (0).SetClusterStatus (ClusterStatus.STATUS_ONLINE);  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,BuildCluster,The following statement contains a magic number: cluster.SetClusterId (122).SetClusterName ("Cluster 1").SetLobbyHost ("127.0.0.1").SetLobbyPort (10622).SetLanguageId (0).SetMaxClusterPop (500).SetClusterPopStatus (ClusterPopStatus.POP_HIGH).SetLanguageId (0).SetClusterStatus (ClusterStatus.STATUS_ONLINE);  
Magic Number,WarhammerEmu.LoginServer,PacketHandler,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\PacketHandler.cs,BuildCluster,The following statement contains a magic number: cluster.AddServerList (ServerInfo.CreateBuilder ().SetServerId (122).SetServerName ("Emulator").Build ());  
Magic Number,WarProtocol,GetAcctPropListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetAcctPropListReplyProto.cs,WriteTo,The following statement contains a magic number: if (propList_.Count > 0) {  	output.WriteMessageArray (2' field_names [0]' propList_);  }  
Magic Number,WarProtocol,GetAcctPropListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetAcctPropListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (2' field_names [0]' propList_);  
Magic Number,WarProtocol,GetCharSummaryListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetCharSummaryListReplyProto.cs,WriteTo,The following statement contains a magic number: if (summaryList_.Count > 0) {  	output.WriteMessageArray (2' field_names [1]' summaryList_);  }  
Magic Number,WarProtocol,GetCharSummaryListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetCharSummaryListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (2' field_names [1]' summaryList_);  
Magic Number,WarProtocol,GetClusterListReplyProto,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,GetClusterListReplyProto,The following statement contains a magic number: internal__static_login_proto_ClusterInfo__Descriptor = Descriptor.MessageTypes [2];  
Magic Number,WarProtocol,GetClusterListReplyProto,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,GetClusterListReplyProto,The following statement contains a magic number: internal__static_login_proto_GetClusterListReply__Descriptor = Descriptor.MessageTypes [3];  
Magic Number,WarProtocol,ServerInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasServerName) {  	output.WriteString (2' field_names [1]' ServerName);  }  
Magic Number,WarProtocol,ServerInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteString (2' field_names [1]' ServerName);  
Magic Number,WarProtocol,ClusterProp,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasPropValue) {  	output.WriteString (2' field_names [1]' PropValue);  }  
Magic Number,WarProtocol,ClusterProp,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteString (2' field_names [1]' PropValue);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterName) {  	output.WriteString (2' field_names [1]' ClusterName);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteString (2' field_names [1]' ClusterName);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLobbyHost) {  	output.WriteString (3' field_names [6]' LobbyHost);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLobbyHost) {  	output.WriteString (3' field_names [6]' LobbyHost);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteString (3' field_names [6]' LobbyHost);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteString (3' field_names [6]' LobbyHost);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLobbyPort) {  	output.WriteUInt32 (4' field_names [7]' LobbyPort);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLobbyPort) {  	output.WriteUInt32 (4' field_names [7]' LobbyPort);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (4' field_names [7]' LobbyPort);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (4' field_names [7]' LobbyPort);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterPop) {  	output.WriteUInt32 (5' field_names [2]' ClusterPop);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterPop) {  	output.WriteUInt32 (5' field_names [2]' ClusterPop);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (5' field_names [2]' ClusterPop);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (5' field_names [2]' ClusterPop);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasMaxClusterPop) {  	output.WriteUInt32 (6' field_names [8]' MaxClusterPop);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasMaxClusterPop) {  	output.WriteUInt32 (6' field_names [8]' MaxClusterPop);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (6' field_names [8]' MaxClusterPop);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (6' field_names [8]' MaxClusterPop);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterPopStatus) {  	output.WriteEnum (7' field_names [3]' (int)ClusterPopStatus' ClusterPopStatus);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterPopStatus) {  	output.WriteEnum (7' field_names [3]' (int)ClusterPopStatus' ClusterPopStatus);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteEnum (7' field_names [3]' (int)ClusterPopStatus' ClusterPopStatus);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteEnum (7' field_names [3]' (int)ClusterPopStatus' ClusterPopStatus);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLanguageId) {  	output.WriteUInt32 (8' field_names [5]' LanguageId);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasLanguageId) {  	output.WriteUInt32 (8' field_names [5]' LanguageId);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (8' field_names [5]' LanguageId);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (8' field_names [5]' LanguageId);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterStatus) {  	output.WriteEnum (9' field_names [4]' (int)ClusterStatus' ClusterStatus);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasClusterStatus) {  	output.WriteEnum (9' field_names [4]' (int)ClusterStatus' ClusterStatus);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteEnum (9' field_names [4]' (int)ClusterStatus' ClusterStatus);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteEnum (9' field_names [4]' (int)ClusterStatus' ClusterStatus);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (serverList_.Count > 0) {  	output.WriteMessageArray (10' field_names [10]' serverList_);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (serverList_.Count > 0) {  	output.WriteMessageArray (10' field_names [10]' serverList_);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (10' field_names [10]' serverList_);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (10' field_names [10]' serverList_);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (propertyList_.Count > 0) {  	output.WriteMessageArray (11' field_names [9]' propertyList_);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (propertyList_.Count > 0) {  	output.WriteMessageArray (11' field_names [9]' propertyList_);  }  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (11' field_names [9]' propertyList_);  
Magic Number,WarProtocol,ClusterInfo,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (11' field_names [9]' propertyList_);  
Magic Number,WarProtocol,GetClusterListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: if (clusterList_.Count > 0) {  	output.WriteMessageArray (2' field_names [0]' clusterList_);  }  
Magic Number,WarProtocol,GetClusterListReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\GetClusterListReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteMessageArray (2' field_names [0]' clusterList_);  
Magic Number,WarProtocol,MetricEventNotify,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\MetricEventNotifyProto.cs,WriteTo,The following statement contains a magic number: if (hasEventData) {  	output.WriteBytes (2' field_names [0]' EventData);  }  
Magic Number,WarProtocol,MetricEventNotify,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\MetricEventNotifyProto.cs,WriteTo,The following statement contains a magic number: output.WriteBytes (2' field_names [0]' EventData);  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasResultCode) {  	output.WriteEnum (1' field_names [2]' (int)ResultCode' ResultCode);  }  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteEnum (1' field_names [2]' (int)ResultCode' ResultCode);  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasIv1) {  	output.WriteBytes (2' field_names [0]' Iv1);  }  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteBytes (2' field_names [0]' Iv1);  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: if (hasIv2) {  	output.WriteBytes (3' field_names [1]' Iv2);  }  
Magic Number,WarProtocol,VerifyProtocolReply,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReplyProto.cs,WriteTo,The following statement contains a magic number: output.WriteBytes (3' field_names [1]' Iv2);  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: if (hasProtocolVersion) {  	output.WriteUInt32 (1' field_names [2]' ProtocolVersion);  }  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (1' field_names [2]' ProtocolVersion);  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: if (hasProductId) {  	output.WriteUInt32 (2' field_names [1]' ProductId);  }  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: output.WriteUInt32 (2' field_names [1]' ProductId);  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: if (hasClientPublicKey) {  	output.WriteBytes (3' field_names [0]' ClientPublicKey);  }  
Magic Number,WarProtocol,VerifyProtocolReq,C:\repos\zozooo_WarEmuDebug\WarServer\LoginServer\WarProto\VerifyProtocolReqProto.cs,WriteTo,The following statement contains a magic number: output.WriteBytes (3' field_names [0]' ClientPublicKey);  
Missing Default,WarhammerEmu,PacketOut,C:\repos\zozooo_WarEmuDebug\WarServer\Buffers\PacketOut.cs,WritePacketLength,The following switch statement is missing a default case: switch (SizeLen) {  case sizeof(byte):  	WriteByte ((byte)(size));  	break;  case sizeof(UInt16):  	if (!SizeReverse)  		WriteUInt16 ((UInt16)(size));  	else  		WriteUInt16R ((UInt16)size);  	break;  case sizeof(UInt32):  	if (!SizeReverse)  		WriteUInt32 ((UInt16)(size));  	else  		WriteUInt32R ((UInt16)size);  	break;  case sizeof(UInt64):  	if (!SizeReverse)  		WriteUInt32 ((UInt16)(size));  	else  		WriteUInt32R ((UInt16)size);  	break;  }  
