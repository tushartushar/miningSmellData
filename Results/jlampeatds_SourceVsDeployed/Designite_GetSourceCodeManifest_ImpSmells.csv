Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,Cyclomatic complexity of the method is 10
Complex Method,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,ProcessTfsFolder,Cyclomatic complexity of the method is 12
Long Parameter List,GetSourceCodeManifest,ManifestFile,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\ManifestFile.cs,WriteHeader,The method has 6 parameters.
Long Parameter List,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,ProcessTfsFolder,The method has 6 parameters.
Long Statement,GetSourceCodeManifest,Cli,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\CLI.cs,PrintHelp,The length of the statement  "	Console.WriteLine ("    GetSourceCodeManifest [repository] [operation] [address] [sourcedir] [expectfile] [manifestfile]"); " is 123.
Long Statement,GetSourceCodeManifest,ManifestFile,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\ManifestFile.cs,WriteHeader,The length of the statement  "	string sHeader = "" + "' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n" + "' Manifest file created by GetSourceCodeManifest for SourceVsDeployed on " + DateTime.Now.ToString ("yyyy-MM-dd HH:mm:ss") + "\r\n" + "' ...using arguments: \r\n" + "'   repository   = " + repository + "\r\n" + "'   operation    = " + operation + "\r\n" + "'   address      = " + address + "\r\n" + "'   sourcedir    = " + sourcedir + "\r\n" + "'   expectfile   = " + expectfile + "\r\n" + "'   manifestfile = " + manifestfile + "\r\n" + "' - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\r\n"; " is 659.
Long Statement,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The length of the statement  "		ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath); " is 120.
Long Statement,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,ProcessTfsFolder,The length of the statement  "			string sPathSpec = Pathing.RemoveTfsFileWildcard (pathSpec) + "/" + Pathing.GetLastFolderInTfsPath (item.ServerItem) + "/*.*"; " is 126.
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (_masks == null) {  	// Support up to MaxExpectations lines  	var stTempMasks = new string[MaxExpectations' 2];  	string sLine;  	int lineNumber = 0;  	var caSpace = new char[1];  	caSpace [0] = ' ';  	// Read the file and crap it into the cache array line by line.  	var file = new StreamReader (_filePath);  	while ((sLine = file.ReadLine ()) != null) {  		sLine = sLine.Trim ();  		if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  			string[] saLineSplit = sLine.Split (caSpace' 2);  			if (saLineSplit.Length == 2) {  				if (lineNumber < MaxExpectations) {  					stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  					stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  					lineNumber++;  				}  				else {  					Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  				}  			}  			else {  				Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  			}  		}  	}  	// Clean up the open file and resize^b^b^b^b^b^bcopy the large array (can't use resize on 2d arrays)  	file.Close ();  	_masks = new string[lineNumber' 2];  	for (int i = 0; i < lineNumber; i++) {  		_masks [i' 0] = stTempMasks [i' 0];  		_masks [i' 1] = stTempMasks [i' 1];  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (_masks == null) {  	// Support up to MaxExpectations lines  	var stTempMasks = new string[MaxExpectations' 2];  	string sLine;  	int lineNumber = 0;  	var caSpace = new char[1];  	caSpace [0] = ' ';  	// Read the file and crap it into the cache array line by line.  	var file = new StreamReader (_filePath);  	while ((sLine = file.ReadLine ()) != null) {  		sLine = sLine.Trim ();  		if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  			string[] saLineSplit = sLine.Split (caSpace' 2);  			if (saLineSplit.Length == 2) {  				if (lineNumber < MaxExpectations) {  					stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  					stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  					lineNumber++;  				}  				else {  					Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  				}  			}  			else {  				Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  			}  		}  	}  	// Clean up the open file and resize^b^b^b^b^b^bcopy the large array (can't use resize on 2d arrays)  	file.Close ();  	_masks = new string[lineNumber' 2];  	for (int i = 0; i < lineNumber; i++) {  		_masks [i' 0] = stTempMasks [i' 0];  		_masks [i' 1] = stTempMasks [i' 1];  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (_masks == null) {  	// Support up to MaxExpectations lines  	var stTempMasks = new string[MaxExpectations' 2];  	string sLine;  	int lineNumber = 0;  	var caSpace = new char[1];  	caSpace [0] = ' ';  	// Read the file and crap it into the cache array line by line.  	var file = new StreamReader (_filePath);  	while ((sLine = file.ReadLine ()) != null) {  		sLine = sLine.Trim ();  		if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  			string[] saLineSplit = sLine.Split (caSpace' 2);  			if (saLineSplit.Length == 2) {  				if (lineNumber < MaxExpectations) {  					stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  					stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  					lineNumber++;  				}  				else {  					Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  				}  			}  			else {  				Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  			}  		}  	}  	// Clean up the open file and resize^b^b^b^b^b^bcopy the large array (can't use resize on 2d arrays)  	file.Close ();  	_masks = new string[lineNumber' 2];  	for (int i = 0; i < lineNumber; i++) {  		_masks [i' 0] = stTempMasks [i' 0];  		_masks [i' 1] = stTempMasks [i' 1];  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (_masks == null) {  	// Support up to MaxExpectations lines  	var stTempMasks = new string[MaxExpectations' 2];  	string sLine;  	int lineNumber = 0;  	var caSpace = new char[1];  	caSpace [0] = ' ';  	// Read the file and crap it into the cache array line by line.  	var file = new StreamReader (_filePath);  	while ((sLine = file.ReadLine ()) != null) {  		sLine = sLine.Trim ();  		if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  			string[] saLineSplit = sLine.Split (caSpace' 2);  			if (saLineSplit.Length == 2) {  				if (lineNumber < MaxExpectations) {  					stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  					stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  					lineNumber++;  				}  				else {  					Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  				}  			}  			else {  				Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  			}  		}  	}  	// Clean up the open file and resize^b^b^b^b^b^bcopy the large array (can't use resize on 2d arrays)  	file.Close ();  	_masks = new string[lineNumber' 2];  	for (int i = 0; i < lineNumber; i++) {  		_masks [i' 0] = stTempMasks [i' 0];  		_masks [i' 1] = stTempMasks [i' 1];  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: while ((sLine = file.ReadLine ()) != null) {  	sLine = sLine.Trim ();  	if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  		string[] saLineSplit = sLine.Split (caSpace' 2);  		if (saLineSplit.Length == 2) {  			if (lineNumber < MaxExpectations) {  				stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  				stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  				lineNumber++;  			}  			else {  				Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  			}  		}  		else {  			Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  		}  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: while ((sLine = file.ReadLine ()) != null) {  	sLine = sLine.Trim ();  	if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  		string[] saLineSplit = sLine.Split (caSpace' 2);  		if (saLineSplit.Length == 2) {  			if (lineNumber < MaxExpectations) {  				stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  				stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  				lineNumber++;  			}  			else {  				Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  			}  		}  		else {  			Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  		}  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  	string[] saLineSplit = sLine.Split (caSpace' 2);  	if (saLineSplit.Length == 2) {  		if (lineNumber < MaxExpectations) {  			stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  			stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  			lineNumber++;  		}  		else {  			Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  		}  	}  	else {  		Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (sLine.Length > 0 && !sLine.StartsWith ("'")) {  	string[] saLineSplit = sLine.Split (caSpace' 2);  	if (saLineSplit.Length == 2) {  		if (lineNumber < MaxExpectations) {  			stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  			stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  			lineNumber++;  		}  		else {  			Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  		}  	}  	else {  		Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  	}  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: if (saLineSplit.Length == 2) {  	if (lineNumber < MaxExpectations) {  		stTempMasks [lineNumber' 0] = saLineSplit [0].ToLower ();  		stTempMasks [lineNumber' 1] = saLineSplit [1].ToLower ();  		lineNumber++;  	}  	else {  		Cli.PrintError ("\r\nSorry' this program only supports up to " + MaxExpectations + " expectations at the moment.\r\n");  	}  }  else {  	Cli.PrintError ("\r\nUnparsable entry in " + _filePath + ": " + sLine + "\r\n");  }  
Magic Number,GetSourceCodeManifest,Expectations,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Expectations.cs,MakeMasksFromFile,The following statement contains a magic number: _masks = new string[lineNumber' 2];  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: try {  	// Simple command-line processing  	if (args.Length < 6) {  		throw new NotSupportedException ("This application requires more command-line arguments.");  	}  	string sTypeOfRepository = args [0].ToLower ();  	if (sTypeOfRepository != "tfs") {  		throw new NotImplementedException ("Repository type " + sTypeOfRepository + " is not supported!");  	}  	string sOp = args [1].ToLower ();  	if (!(sOp == "list" || sOp == "md5list")) {  		throw new NotImplementedException ("Operations " + sTypeOfRepository + " is not supported!");  	}  	string sTfsUri = args [2];  	string sPathSpec = "$/" + args [3];  	string sExpectationPath = args [4];  	_expectations = new Expectations (sExpectationPath);  	if (!_expectations.FileExists ()) {  		throw new FileNotFoundException ("Could not find Expectation File " + sExpectationPath + "!");  	}  	string sManifestPath = args [5];  	_manifestFile = new ManifestFile (sManifestPath);  	string sLocalDownloadPath = ConfigurationManager.AppSettings ["LocalDownloadFolder"];  	if (!Directory.Exists (sLocalDownloadPath)) {  		throw new DirectoryNotFoundException ("Could not find LocalDownloadFolder " + sLocalDownloadPath + "!");  	}  	if (!sLocalDownloadPath.EndsWith ("\\")) {  		sLocalDownloadPath += "\\";  	}  	// Prepare the manifest file  	_manifestFile.Delete ();  	_manifestFile.WriteHeader (sTypeOfRepository' sOp' sTfsUri' sPathSpec' sExpectationPath' sManifestPath);  	// Connect to the TFS service (a future implementation supporting multiple source types would break this out)  	// from http://stackoverflow.com/questions/4757883/get-a-file-list-from-tfs   	Console.Write ("Connecting to " + sTfsUri + "...");  	var server = RegisteredTfsConnections.GetProjectCollection (new Uri (sTfsUri));  	var projects = TfsTeamProjectCollectionFactory.GetTeamProjectCollection (server);  	var versionControl = (VersionControlServer)projects.GetService (typeof(VersionControlServer));  	Console.WriteLine ("OK.");  	if (sOp == "md5list") {  		Console.WriteLine ("Using local download path " + sLocalDownloadPath + " for MD5 calculations.");  	}  	// Get a list of files and write it out to the manifest file  	sPathSpec = Pathing.FixTfsPathSpec (sPathSpec);  	Console.WriteLine ("Getting a list of files that matches " + sPathSpec + "...");  	var items = versionControl.GetItems (sPathSpec);  	ProcessTfsFolder (versionControl' items' Pathing.RemoveTfsFileWildcard (sPathSpec)' sPathSpec' sOp' sLocalDownloadPath);  	Console.WriteLine ("File listing is complete. Check " + sManifestPath + " for results.");  }  catch (NotSupportedException nse) {  	// This is often caused by not having enough command-line parameters  	// Just print the complaint (no "failed") and the help message.  	Cli.PrintError (nse.Message);  	Cli.PrintHelp ();  	return 2;  }  catch (Exception e) {  	Cli.PrintError ("FAILED! (" + e.Message + ")");  	return 1;  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: if (args.Length < 6) {  	throw new NotSupportedException ("This application requires more command-line arguments.");  }  
Magic Number,GetSourceCodeManifest,Program,C:\repos\jlampeatds_SourceVsDeployed\GetSourceCodeManifest\Program.cs,Main,The following statement contains a magic number: return 2;  
