Implementation smell,Namespace,Class,File,Method,Description
Long Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchTouchEvent,The method has 176 lines of code.
Long Method,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithString,The method has 129 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The method has 121 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The method has 103 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The method has 108 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The method has 116 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestArchive,The method has 105 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The method has 221 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,RunUpdates,The method has 111 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The method has 147 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The method has 105 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,PutNextEntry,The method has 193 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,Finish,The method has 118 lines of code.
Complex Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchTouchEvent,Cyclomatic complexity of the method is 8
Complex Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,VisitTarget,Cyclomatic complexity of the method is 12
Complex Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,UpdateListeners,Cyclomatic complexity of the method is 10
Complex Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,UpdateListeners,Cyclomatic complexity of the method is 8
Complex Method,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchEventToListeners,Cyclomatic complexity of the method is 13
Complex Method,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,InternalLoadFont,Cyclomatic complexity of the method is 10
Complex Method,CocosSharp,CCActionManager,C:\repos\mono_CocosSharp\src\actions\CCActionManager.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithString,Cyclomatic complexity of the method is 14
Complex Method,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Core,FileSystemScanner,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\FileSystemScanner.cs,ScanDir,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Core,StreamUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\StreamUtils.cs,Copy,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateFast,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractFileEntry,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractEntry,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\WindowsNameTransform.cs,MakeValidName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestArchive,Cyclomatic complexity of the method is 17
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,BeginUpdate,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLocalEntryHeader,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteCentralDirectoryHeader,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,RunUpdates,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLocalHeader,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,InitialRead,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,PutNextEntry,Cyclomatic complexity of the method is 26
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,CloseEntry,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,Finish,Cyclomatic complexity of the method is 18
Long Parameter List,CocosSharp,CCQuadCommand,C:\repos\mono_CocosSharp\src\Renderer\RenderCommands\CCQuadCommand.cs,CCQuadCommand,The method has 5 parameters. Parameters: globalDepth' worldTransform' texture' blendType' quads
Long Parameter List,CocosSharp,CCQuadCommand,C:\repos\mono_CocosSharp\src\Renderer\RenderCommands\CCQuadCommand.cs,CCQuadCommand,The method has 6 parameters. Parameters: globalDepth' worldTransform' texture' blendType' quadCount' quads
Long Parameter List,CocosSharp,CCFocusManager,C:\repos\mono_CocosSharp\src\platform\CCFocusManager.cs,SharedApplication_GamePadDPadUpdate,The method has 5 parameters. Parameters: leftButton' upButton' rightButton' downButton' player
Long Parameter List,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawIndexedPrimitives,The method has 7 parameters. Parameters: primitiveType' vertexData' vertexOffset' numVertices' indexData' indexOffset' primitiveCount
Long Parameter List,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawRawBuffer,The method has 6 parameters. Parameters: vertexBuffer' vStart' vCount' indexBuffer' iStart' iCount
Long Parameter List,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CreateRenderTarget,The method has 5 parameters. Parameters: width' height' colorFormat' depthFormat' usage
Long Parameter List,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The method has 6 parameters. Parameters: p0' p1' p2' p3' tension' t
Long Parameter List,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CubicBezier,The method has 5 parameters. Parameters: a' b' c' d' t
Long Parameter List,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The method has 6 parameters. Parameters: p0' p1' p2' p3' tension' t
Long Parameter List,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,AddRawImage,The method has 7 parameters. Parameters: data' width' height' assetName' format' premultiplied' mipMap
Long Parameter List,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,AddRawImage,The method has 8 parameters. Parameters: data' width' height' assetName' format' premultiplied' mipMap' contentSize
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,CCTexture2D,The method has 5 parameters. Parameters: pixelsWide' pixelsHigh' pixelFormat' premultipliedAlpha' mipMap
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,CCTexture2D,The method has 6 parameters. Parameters: text' dimensions' hAlignment' vAlignment' fontName' fontSize
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithRawData,The method has 6 parameters. Parameters: data' pixelFormat' pixelsWide' pixelsHigh' premultipliedAlpha' mipMap
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithRawData,The method has 7 parameters. Parameters: data' pixelFormat' pixelsWide' pixelsHigh' premultipliedAlpha' mipMap' ContentSizeInPixelsIn
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithString,The method has 6 parameters. Parameters: text' dimensions' hAlignment' vAlignment' fontName' fontSize
Long Parameter List,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,LoadRawData,The method has 5 parameters. Parameters: data' width' height' pixelFormat' mipMap
Long Parameter List,ICSharpCode.SharpZipLib.Core,ExtendedPathFilter,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\PathFilter.cs,ExtendedPathFilter,The method has 5 parameters. Parameters: filter' minSize' maxSize' minDate' maxDate
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\StreamUtils.cs,Copy,The method has 7 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name
Long Parameter List,ICSharpCode.SharpZipLib.Core,StreamUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\StreamUtils.cs,Copy,The method has 8 parameters. Parameters: source' destination' buffer' progressHandler' updateInterval' sender' name' fixedTarget
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicEncryptCryptoTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,PkzipClassicDecryptCryptoTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESTransform.cs,TransformBlock,The method has 5 parameters. Parameters: inputBuffer' inputOffset' inputCount' outputBuffer' outputOffset
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginRead,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\DeflaterOutputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,BeginWrite,The method has 5 parameters. Parameters: buffer' offset' count' callback' state
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: zipFileName' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,CreateZip,The method has 5 parameters. Parameters: outputStream' sourceDirectory' recurse' fileFilter' directoryFilter
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractZip,The method has 7 parameters. Parameters: zipFileName' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime
Long Parameter List,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractZip,The method has 8 parameters. Parameters: inputStream' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' isStreamOwner
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CopyBytes,The method has 5 parameters. Parameters: update' destination' source' bytesToCopy' updateCrc
Long Parameter List,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CopyEntryDataDirect,The method has 5 parameters. Parameters: update' stream' updateCrc' destinationPosition' sourcePosition
Long Identifier,CocosSharp,IMEKeyboardImpl,C:\repos\mono_CocosSharp\src\platform\Keyboard\Windows\IMEKeyboardImpl.cs,,The length of the parameter AutorepeatIncreaseTimeIncrement is 31.
Long Identifier,CocosSharp,CCMacros,C:\repos\mono_CocosSharp\src\predefine\CCMacros.cs,,The length of the parameter CCDirectorStatsUpdateIntervalInSeconds is 38.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralFileHeaderSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipConstants.cs,,The length of the parameter Zip64CentralDirLocatorSignature is 31.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipConstants,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipConstants.cs,,The length of the parameter EndOfCentralDirectorySignature is 30.
Long Identifier,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,UpdateCommentOnly,The length of the parameter CentralHeaderCommentSizeOffset is 30.
Long Statement,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,GetListenerID,The length of the statement  "                // Touch listener is very special' it contains two kinds of listeners' EventListenerTouchOneByOne and EventListenerTouchAllAtOnce. " is 130.
Long Statement,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,AddEventListener,The length of the statement  "            Debug.Assert(fixedPriority != 0' "0 priority is forbidden for fixed priority since it's used for scene graph based priority."); " is 127.
Long Statement,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,AddEventListener,The length of the statement  "                CCLog.Log("-----  Add > --  Available > " + listener.IsAvailable + " ------{0}------{1}---------"' listener' listener.SceneGraphPriority); " is 138.
Long Statement,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,SortEventListenersOfSceneGraphPriority,The length of the statement  "            CCLog.Log("listener priority: node ({0}[{1}])' priority {2}' localZ {3}' globalZ {4}"' l.SceneGraphPriority' l.SceneGraphPriority.Name' nodePriorityMap[l.SceneGraphPriority]' l.SceneGraphPriority.LocalZOrder' l.SceneGraphPriority.GlobalZOrder); " is 244.
Long Statement,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,SortEventListenersOfSceneGraphPriority,The length of the statement  "            //                    CCLog.Log("listener priority: node ({0}[{1}])' priority {2}' localZ {3}' globalZ {4}"' l.SceneGraphPriority' l.SceneGraphPriority.Name' -1' l.SceneGraphPriority.LocalZOrder' l.SceneGraphPriority.GlobalZOrder); " is 231.
Long Statement,CocosSharp,CCFocusManager,C:\repos\mono_CocosSharp\src\platform\CCFocusManager.cs,SharedApplication_GamePadDPadUpdate,The length of the statement  "            if (leftButton == CCGamePadButtonStatus.Released || upButton == CCGamePadButtonStatus.Released || rightButton == CCGamePadButtonStatus.Released || downButton == CCGamePadButtonStatus.Released) " is 192.
Long Statement,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawBuffer,The length of the statement  "                graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' vertexBuffer.VertexBuffer.VertexCount' start' count); " is 124.
Long Statement,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuadsBuffer,The length of the statement  "                graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' vertexBuffer.VertexBuffer.VertexCount' start * 6' n * 2); " is 128.
Long Statement,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CreateRenderTarget,The length of the statement  "            return new RenderTarget2D(graphicsDevice' width' height' false' (SurfaceFormat)colorFormat' (DepthFormat)depthFormat' 0' (RenderTargetUsage)usage); " is 147.
Long Statement,CocosSharp,CCVertexBuffer<T>,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,ReinitResource,The length of the statement  "            vertexBuffer = new VertexBuffer(CCDrawManager.SharedDrawManager.XnaGraphicsDevice' typeof(T)' data.Capacity' (BufferUsage)usage); " is 129.
Long Statement,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,ReinitResource,The length of the statement  "            vertexBuffer = new VertexBuffer(CCDrawManager.SharedDrawManager.XnaGraphicsDevice' typeof(CCV3F_C4B_T2F)' data.Capacity * 4' (BufferUsage)usage); " is 145.
Long Statement,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The length of the statement  "                return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound)); " is 141.
Long Statement,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The length of the statement  "            return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range); " is 128.
Long Statement,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The length of the statement  "             * Formula: s(-ttt + 2tt - t)P1 + s(-ttt + tt)P2 + (2ttt - 3tt + 1)P2 + s(ttt - 2tt + t)P3 + (-2ttt + 3tt)P3 + s(ttt - tt)P4 " is 123.
Long Statement,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,Write,The length of the statement  "            writer.WriteDocType("plist"' "-//Apple Computer//DTD PLIST 1.0//EN"' "http://www.apple.com/DTDs/PropertyList-1.0.dtd"' null); " is 125.
Long Statement,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryAsciiString,The length of the statement  "			return buffer.Count > 0 ? new PlistString(Encoding.UTF8.GetString(buffer.ToArray()' 0' buffer.Count)) : new PlistString(string.Empty); " is 134.
Long Statement,CocosSharp,CCUserDefault,C:\repos\mono_CocosSharp\src\support\CCUserDefault.cs,CreateXMLFile,The length of the statement  "            using (StreamWriter writeFile = new StreamWriter(new IsolatedStorageFileStream(XML_FILE_NAME' FileMode.Create' FileAccess.Write' myIsolatedStorage))) " is 149.
Long Statement,CocosSharp,CCUserDefault,C:\repos\mono_CocosSharp\src\support\CCUserDefault.cs,Flush,The length of the statement  "    		using (StreamWriter stream = new StreamWriter(new IsolatedStorageFileStream(XML_FILE_NAME' FileMode.Create' FileAccess.Write' myIsolatedStorage)))  " is 146.
Long Statement,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The length of the statement  "             * Formula: s(-ttt + 2tt - t)P1 + s(-ttt + tt)P2 + (2ttt - 3tt + 1)P2 + s(ttt - 2tt + t)P3 + (-2ttt + 3tt)P3 + s(ttt - tt)P4 " is 123.
Long Statement,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,AddImageAsync,The length of the statement  "                dataAsyncLoadedImages.Add(new DataAsyncStruct() { Data = data' AssetName = assetName' Format = format  ' Action = action}); " is 123.
Long Statement,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithRawData,The length of the statement  "            InitWithRawData(data' pixelFormat' pixelsWide' pixelsHigh' premultipliedAlpha' mipMap' new CCSize(pixelsWide' pixelsHigh)); " is 123.
Long Statement,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,GenerateMipmap,The length of the statement  "                var target = new RenderTarget2D(CCDrawManager.SharedDrawManager.XnaGraphicsDevice' PixelsWide' PixelsHigh' true' (SurfaceFormat)PixelFormat' " is 140.
Long Statement,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESStream.cs,Read,The length of the statement  "							throw new Exception("AES Authentication Code does not match. This is a super-CRC check on the data in the file after compression and encryption. \r\n" " is 150.
Long Statement,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The length of the statement  "						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) { " is 123.
Long Statement,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractZip,The length of the statement  "			ExtractZip(inputStream' targetDirectory' overwrite' confirmDelegate' fileFilter' directoryFilter' restoreDateTime' true); " is 121.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntryFactory.cs,MakeFileEntry,The length of the statement  "			ZipEntry result = new ZipEntry(nameTransform_.TransformFile(entryName != null && entryName.Length > 0 ? entryName : fileName)); " is 127.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) { " is 162.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "                    if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0) " is 133.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "                        throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The length of the statement  "                            throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion)); " is 128.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The length of the statement  "				long offset = LocateBlockWithSignature(ZipConstants.Zip64CentralDirLocatorSignature' locatedEndOfCentralDir' 0' 0x1000); " is 120.
Long Statement,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The length of the statement  "			if (method == (int)CompressionMethod.Stored && (!isCrypted && csize != size || (isCrypted && csize - ZipConstants.CryptoHeaderSize != size))) { " is 143.
Complex Conditional,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchEventToListeners,The conditional expression  "l.IsEnabled && !l.IsPaused && l.IsRegistered && onEvent(l)"  is complex.
Complex Conditional,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchEventToListeners,The conditional expression  "l.IsEnabled && !l.IsPaused && l.IsRegistered && onEvent(l)"  is complex.
Complex Conditional,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,DispatchEventToListeners,The conditional expression  "l.IsEnabled && !l.IsPaused && l.IsRegistered && onEvent(l)"  is complex.
Complex Conditional,CocosSharp,CCFocusManager,C:\repos\mono_CocosSharp\src\platform\CCFocusManager.cs,SharedApplication_GamePadDPadUpdate,The conditional expression  "leftButton == CCGamePadButtonStatus.Released || upButton == CCGamePadButtonStatus.Released || rightButton == CCGamePadButtonStatus.Released || downButton == CCGamePadButtonStatus.Released"  is complex.
Complex Conditional,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,GetScissorRasterizerState,The conditional expression  "state.ScissorTestEnable == scissorEnabled &&                      currentState.CullMode == state.CullMode &&                      currentState.DepthBias == state.DepthBias &&                      currentState.FillMode == state.FillMode &&                      currentState.MultiSampleAntiAlias == state.MultiSampleAntiAlias &&                      currentState.SlopeScaleDepthBias == state.SlopeScaleDepthBias"  is complex.
Complex Conditional,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The conditional expression  "name == "key" || name == "integer" || name == "real" || name == "string""  is complex.
Complex Conditional,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,Dispose,The conditional expression  "disposing && texture2D != null && !texture2D.IsDisposed && !managed"  is complex.
Complex Conditional,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The conditional expression  "data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A"  is complex.
Complex Conditional,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The conditional expression  "(data[0] == 0x49 && data[1] == 0x49) || (data[0] == 0x4d && data[1] == 0x4d)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The conditional expression  "(index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The conditional expression  "window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateStored,The conditional expression  "(storedLength >= DeflaterConstants.MAX_BLOCK_SIZE) || // Block is full  				(blockStart < WSIZE && storedLength >= MAX_DIST) ||   // Block may move out of window  				flush"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateFast,The conditional expression  "lookahead >= MIN_MATCH &&   					(hashHead = InsertString()) != 0 &&   					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= MAX_DIST &&   					FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The conditional expression  "matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The conditional expression  "(extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The conditional expression  "(thisDiskNumber == 0xffff) ||  				(startCentralDirDisk == 0xffff) ||  				(entriesForThisDisk == 0xffff) ||  				(entriesForWholeCentralDir == 0xffff) ||  				(centralDirSize == 0xffffffff) ||  				(offsetOfCentralDir == 0xffffffff)"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "header == ZipConstants.CentralHeaderSignature ||  				header == ZipConstants.EndOfCentralDirectorySignature ||  				header == ZipConstants.CentralHeaderDigitalSignature ||  				header == ZipConstants.ArchiveExtraDataSignature ||  				header == ZipConstants.Zip64CentralFileHeaderSignature"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The conditional expression  "method == (int)CompressionMethod.Stored && (!isCrypted && csize != size || (isCrypted && csize - ZipConstants.CryptoHeaderSize != size))"  is complex.
Complex Conditional,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,BodyRead,The conditional expression  "(flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)"  is complex.
Virtual Method Call from Constructor,CocosSharp,CCRenderCommand,C:\repos\mono_CocosSharp\src\Renderer\RenderCommands\CCRenderCommand.cs,CCRenderCommand,The constructor "CCRenderCommand" calls a virtual method "GenerateFlags".
Empty Catch Block,CocosSharp,CCContentManager,C:\repos\mono_CocosSharp\src\platform\CCContentManager.cs,Load,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCContentManager,C:\repos\mono_CocosSharp\src\platform\CCContentManager.cs,GetAssetStream,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,TryLoadFont,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,TryLoadFont,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,InternalLoadFont,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,InternalLoadFont,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCSpriteFontCache,C:\repos\mono_CocosSharp\src\platform\CCSpriteFontCache.cs,InternalLoadFont,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithStream,The method has an empty catch block.
Empty Catch Block,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,InitWithFile,The method has an empty catch block.
Magic Number,CocosSharp,CCEventDispatcher,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,CCEventDispatcher,The following statement contains a magic number: toBeAddedListeners = new List<CCEventListener>(50);
Magic Number,CocosSharp,CCEventListenerVector,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,PushBack,The following statement contains a magic number: if (listener.FixedPriority == 0)                  {                      if (sceneGraphListeners == null)                       {                          sceneGraphListeners = new List<CCEventListener> (100);                      }                        sceneGraphListeners.Add(listener);                  }                  else                  {                      if (fixedListeners == null)                       {                          fixedListeners = new List<CCEventListener> (100);                      }                          fixedListeners.Add(listener);                  }
Magic Number,CocosSharp,CCEventListenerVector,C:\repos\mono_CocosSharp\src\events\CCEventDispatcher.cs,PushBack,The following statement contains a magic number: if (listener.FixedPriority == 0)                  {                      if (sceneGraphListeners == null)                       {                          sceneGraphListeners = new List<CCEventListener> (100);                      }                        sceneGraphListeners.Add(listener);                  }                  else                  {                      if (fixedListeners == null)                       {                          fixedListeners = new List<CCEventListener> (100);                      }                          fixedListeners.Add(listener);                  }
Magic Number,CocosSharp,CCEventTouch,C:\repos\mono_CocosSharp\src\events\CCEventTouch.cs,CCEventTouch,The following statement contains a magic number: Touches = new List<CCTouch> (5);
Magic Number,CocosSharp,IMEKeyboardImpl,C:\repos\mono_CocosSharp\src\platform\Keyboard\Windows\IMEKeyboardImpl.cs,StartAutorepeat,The following statement contains a magic number: TextFieldInFocus.Schedule(Repeater' AutorepeatDeltaTime' CCSchedulePriority.RepeatForever' AutorepeatDeltaTime * 3);
Magic Number,CocosSharp,IMEKeyboardImpl,C:\repos\mono_CocosSharp\src\platform\Keyboard\Windows\IMEKeyboardImpl.cs,Repeater,The following statement contains a magic number: if ((autorepeatCount < AutorepeatIncreaseTimeIncrement) && (autorepeatCount % 3) != 0)                  return;
Magic Number,CocosSharp,CCRenderer,C:\repos\mono_CocosSharp\src\Renderer\CCRenderer.cs,CCRenderer,The following statement contains a magic number: currentBatchedQuads = new CCRawList<CCV3F_C4B_T2F_Quad>(256' false);
Magic Number,CocosSharp,CCRenderer,C:\repos\mono_CocosSharp\src\Renderer\CCRenderer.cs,CCRenderer,The following statement contains a magic number: quadCommands = new CCRawList<CCQuadCommand>(256' false);
Magic Number,CocosSharp,CCQuadCommand,C:\repos\mono_CocosSharp\src\Renderer\RenderCommands\CCQuadCommand.cs,GenerateMaterialId,The following statement contains a magic number: materialId = (uint)textureId << 12 | (uint)BlendType.GetHashCode();
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CCDrawManager,The following statement contains a magic number: matrixStack = new Matrix[100];
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeRawQuadBuffers,The following statement contains a magic number: for (int i = 0; i < MaxNumQuads; i++)               {                  quadsIndices [i6 + 0] = (short)(i4 + 0);                  quadsIndices [i6 + 1] = (short)(i4 + 1);                  quadsIndices [i6 + 2] = (short)(i4 + 2);                  quadsIndices [i6 + 3] = (short)(i4 + 3);                  quadsIndices [i6 + 4] = (short)(i4 + 2);                  quadsIndices [i6 + 5] = (short)(i4 + 1);                    i4 += 4;                  i6 += 6;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuads,The following statement contains a magic number: while (n > 0)               {                  int nIteration = Math.Min (n' MaxNumQuads);                    int i4 = 0;                  for (int i = start' N = start + nIteration; i < N; i++)                  {                      quadsVertices[i4 + 0] = quads[i].TopLeft;                      quadsVertices[i4 + 1] = quads[i].BottomLeft;                      quadsVertices[i4 + 2] = quads[i].TopRight;                      quadsVertices[i4 + 3] = quads[i].BottomRight;                        i4 += 4;                  }                    EffectPassCollection passes = currentEffect.CurrentTechnique.Passes;                  for (int i = 0; i < passes.Count; i++)                   {                      passes[i].Apply();                      graphicsDevice.DrawUserIndexedPrimitives(                          PrimitiveType.TriangleList' quadsVertices' 0' nIteration * NumOfVerticesPerQuad' quadsIndices' 0' nIteration * 2);                  }                    n -= nIteration;                  start += nIteration;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuads,The following statement contains a magic number: while (n > 0)               {                  int nIteration = Math.Min (n' MaxNumQuads);                    int i4 = 0;                  for (int i = start' N = start + nIteration; i < N; i++)                  {                      quadsVertices[i4 + 0] = quads[i].TopLeft;                      quadsVertices[i4 + 1] = quads[i].BottomLeft;                      quadsVertices[i4 + 2] = quads[i].TopRight;                      quadsVertices[i4 + 3] = quads[i].BottomRight;                        i4 += 4;                  }                    EffectPassCollection passes = currentEffect.CurrentTechnique.Passes;                  for (int i = 0; i < passes.Count; i++)                   {                      passes[i].Apply();                      graphicsDevice.DrawUserIndexedPrimitives(                          PrimitiveType.TriangleList' quadsVertices' 0' nIteration * NumOfVerticesPerQuad' quadsIndices' 0' nIteration * 2);                  }                    n -= nIteration;                  start += nIteration;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuads,The following statement contains a magic number: while (n > 0)               {                  int nIteration = Math.Min (n' MaxNumQuads);                    int i4 = 0;                  for (int i = start' N = start + nIteration; i < N; i++)                  {                      quadsVertices[i4 + 0] = quads[i].TopLeft;                      quadsVertices[i4 + 1] = quads[i].BottomLeft;                      quadsVertices[i4 + 2] = quads[i].TopRight;                      quadsVertices[i4 + 3] = quads[i].BottomRight;                        i4 += 4;                  }                    EffectPassCollection passes = currentEffect.CurrentTechnique.Passes;                  for (int i = 0; i < passes.Count; i++)                   {                      passes[i].Apply();                      graphicsDevice.DrawUserIndexedPrimitives(                          PrimitiveType.TriangleList' quadsVertices' 0' nIteration * NumOfVerticesPerQuad' quadsIndices' 0' nIteration * 2);                  }                    n -= nIteration;                  start += nIteration;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuads,The following statement contains a magic number: while (n > 0)               {                  int nIteration = Math.Min (n' MaxNumQuads);                    int i4 = 0;                  for (int i = start' N = start + nIteration; i < N; i++)                  {                      quadsVertices[i4 + 0] = quads[i].TopLeft;                      quadsVertices[i4 + 1] = quads[i].BottomLeft;                      quadsVertices[i4 + 2] = quads[i].TopRight;                      quadsVertices[i4 + 3] = quads[i].BottomRight;                        i4 += 4;                  }                    EffectPassCollection passes = currentEffect.CurrentTechnique.Passes;                  for (int i = 0; i < passes.Count; i++)                   {                      passes[i].Apply();                      graphicsDevice.DrawUserIndexedPrimitives(                          PrimitiveType.TriangleList' quadsVertices' 0' nIteration * NumOfVerticesPerQuad' quadsIndices' 0' nIteration * 2);                  }                    n -= nIteration;                  start += nIteration;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuadsBuffer,The following statement contains a magic number: for (int i = 0; i < passes.Count; i++)              {                  passes[i].Apply();                  graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' vertexBuffer.VertexBuffer.VertexCount' start * 6' n * 2);              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,DrawQuadsBuffer,The following statement contains a magic number: for (int i = 0; i < passes.Count; i++)              {                  passes[i].Apply();                  graphicsDevice.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' vertexBuffer.VertexBuffer.VertexCount' start * 6' n * 2);              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,CheckQuadsIndexBuffer,The following statement contains a magic number: if (quadsIndexBuffer == null || quadsIndexBuffer.Capacity < capacity * 6)              {                  capacity = Math.Max(capacity' DefaultQuadBufferSize);                    if (quadsIndexBuffer == null)                  {                      quadsIndexBuffer = new CCIndexBuffer<short>(capacity * 6' BufferUsage.WriteOnly);                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    if (quadsIndexBuffer.Capacity < capacity * 6)                  {                      quadsIndexBuffer.Capacity = capacity * 6;                      quadsIndexBuffer.Count = quadsIndexBuffer.Capacity;                  }                    var indices = quadsIndexBuffer.Data.Elements;                    int i6 = 0;                  int i4 = 0;                    for (int i = 0; i < capacity; ++i)                  {                      indices[i6 + 0] = (short)(i4 + 0);                      indices[i6 + 1] = (short)(i4 + 2);                      indices[i6 + 2] = (short)(i4 + 1);                        indices[i6 + 3] = (short)(i4 + 1);                      indices[i6 + 4] = (short)(i4 + 2);                      indices[i6 + 5] = (short)(i4 + 3);                        i6 += 6;                      i4 += 4;                  }                    quadsIndexBuffer.UpdateBuffer();              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,BeginDrawMask,The following statement contains a magic number: if (maskLayer + 1 == 8) //DepthFormat.Depth24Stencil8              {                  if (maskOnceLog)                  {                      CCLog.Log(                          @"Nesting more than 8 stencils is not supported.                           Everything will be drawn without stencil for this node and its childs."                          );                      maskOnceLog = false;                  }                  return false;              }
Magic Number,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,BeginDrawMask,The following statement contains a magic number: if (maskState.AlphaTreshold < 1f)              {                  AlphaTestEffect.AlphaFunction = CompareFunction.Greater;                  AlphaTestEffect.ReferenceAlpha = (byte)(255 * maskState.AlphaTreshold);                    PushEffect(AlphaTestEffect);              }
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: while (tmp.Capacity < elementCount)              {                  tmp.Capacity = tmp.Capacity * 2;              }
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: tmp.Count = elementCount * 4;
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: for (int i = startIndex; i < startIndex + elementCount; i++)              {                  vertices[i4 + 0] = quads[i].TopLeft;                  vertices[i4 + 1] = quads[i].BottomLeft;                  vertices[i4 + 2] = quads[i].TopRight;                  vertices[i4 + 3] = quads[i].BottomRight;                    i4 += 4;              }
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: for (int i = startIndex; i < startIndex + elementCount; i++)              {                  vertices[i4 + 0] = quads[i].TopLeft;                  vertices[i4 + 1] = quads[i].BottomLeft;                  vertices[i4 + 2] = quads[i].TopRight;                  vertices[i4 + 3] = quads[i].BottomRight;                    i4 += 4;              }
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: for (int i = startIndex; i < startIndex + elementCount; i++)              {                  vertices[i4 + 0] = quads[i].TopLeft;                  vertices[i4 + 1] = quads[i].BottomLeft;                  vertices[i4 + 2] = quads[i].TopRight;                  vertices[i4 + 3] = quads[i].BottomRight;                    i4 += 4;              }
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: vertexBuffer.SetData(vertexByteSize * startIndex * 4' vertices' 0' elementCount * 4' vertexByteSize);
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,UpdateBuffer,The following statement contains a magic number: vertexBuffer.SetData(vertexByteSize * startIndex * 4' vertices' 0' elementCount * 4' vertexByteSize);
Magic Number,CocosSharp,CCQuadVertexBuffer,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,ReinitResource,The following statement contains a magic number: vertexBuffer = new VertexBuffer(CCDrawManager.SharedDrawManager.XnaGraphicsDevice' typeof(CCV3F_C4B_T2F)' data.Capacity * 4' (BufferUsage)usage);
Magic Number,CocosSharp,CCV3F_T2F,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CCV3F_T2F,The following statement contains a magic number: var elements = new[]              {                  new VertexElement(0' VertexElementFormat.Vector3' VertexElementUsage.Position' 0)'                  new VertexElement(12' VertexElementFormat.Vector2' VertexElementUsage.TextureCoordinate' 0)              };
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,Blit,The following statement contains a magic number: drawManager.DrawBuffer(vertexBuffer' indexBuffer' 0' Indices.Length / 3);
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: indexBuffer = new CCIndexBuffer<ushort>(GridSize.X * GridSize.Y * 6' BufferUsage.WriteOnly);
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: indexBuffer.Count = GridSize.X * GridSize.Y * 6;
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: var l1 = new int[4];
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: var l2 = new CCVertex3F[4];
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: var tex1 = new int[4];
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: var tex2 = new CCPoint[4];
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCGrid3D,C:\repos\mono_CocosSharp\src\effects\CCGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; ++x)              {                  for (int y = 0; y < GridSize.Y; ++y)                  {                      float x1 = x * Step.X;                      float x2 = x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y1 + Step.Y;                        var a = (short) (x * (GridSize.Y + 1) + y);                      var b = (short) ((x + 1) * (GridSize.Y + 1) + y);                      var c = (short) ((x + 1) * (GridSize.Y + 1) + (y + 1));                      var d = (short) (x * (GridSize.Y + 1) + (y + 1));                        int idx = ((y * GridSize.X) + x) * 6;                        idxArray[idx + 0] = (ushort) a;                      idxArray[idx + 1] = (ushort) b;                      idxArray[idx + 2] = (ushort) d;                      idxArray[idx + 3] = (ushort) b;                      idxArray[idx + 4] = (ushort) c;                      idxArray[idx + 5] = (ushort) d;                        //var tempidx = new short[6] {a' d' b' b' d' c};                      //Array.Copy(tempidx' 0' idxArray' 6 * idx' tempidx.Length);                        l1[0] = a;                      l1[1] = b;                      l1[2] = c;                      l1[3] = d;                        //var e = new Vector3(x1' y1' 0);                      //var f = new Vector3(x2' y1' 0);                      //var g = new Vector3(x2' y2' 0);                      //var h = new Vector3(x1' y2' 0);                        l2[0] = new CCVertex3F(x1' y1' 0);                      l2[1] = new CCVertex3F(x2' y1' 0);                      l2[2] = new CCVertex3F(x2' y2' 0);                      l2[3] = new CCVertex3F(x1' y2' 0);                        tex1[0] = a;                      tex1[1] = b;                      tex1[2] = c;                      tex1[3] = d;                        tex2[0] = new CCPoint(x1' y1);                      tex2[1] = new CCPoint(x2' y1);                      tex2[2] = new CCPoint(x2' y2);                      tex2[3] = new CCPoint(x1' y2);                        for (int i = 0; i < 4; ++i)                      {                          vertArray[l1[i]].Vertices = l2[i];                            vertArray[tex1[i]].TexCoords.U = tex2[i].X / width;                            if (TextureFlipped)                          {                              vertArray[tex1[i]].TexCoords.V = tex2[i].Y / height;                          }                          else                          {                              vertArray[tex1[i]].TexCoords.V = (imageH - tex2[i].Y) / height;                          }                      }                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,Blit,The following statement contains a magic number: drawManager.DrawBuffer(vertexBuffer' indexBuffer' 0' Indices.Length / 3);
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,Reuse,The following statement contains a magic number: if (ReuseGrid > 0)              {                  int numQuads = GridSize.X * GridSize.Y;                    CCQuad3[] orig = OriginalVertices;                  CCV3F_T2F[] verts = Vertices;                    for (int i = 0; i < numQuads; i++)                  {                      int i4 = i * 4;                      orig[i].BottomLeft = verts[i4 + 0].Vertices;                      orig[i].BottomRight = verts[i4 + 1].Vertices;                      orig[i].TopLeft = verts[i4 + 2].Vertices;                      orig[i].TopRight = verts[i4 + 3].Vertices;                  }                    --ReuseGrid;              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,Reuse,The following statement contains a magic number: if (ReuseGrid > 0)              {                  int numQuads = GridSize.X * GridSize.Y;                    CCQuad3[] orig = OriginalVertices;                  CCV3F_T2F[] verts = Vertices;                    for (int i = 0; i < numQuads; i++)                  {                      int i4 = i * 4;                      orig[i].BottomLeft = verts[i4 + 0].Vertices;                      orig[i].BottomRight = verts[i4 + 1].Vertices;                      orig[i].TopLeft = verts[i4 + 2].Vertices;                      orig[i].TopRight = verts[i4 + 3].Vertices;                  }                    --ReuseGrid;              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,Reuse,The following statement contains a magic number: if (ReuseGrid > 0)              {                  int numQuads = GridSize.X * GridSize.Y;                    CCQuad3[] orig = OriginalVertices;                  CCV3F_T2F[] verts = Vertices;                    for (int i = 0; i < numQuads; i++)                  {                      int i4 = i * 4;                      orig[i].BottomLeft = verts[i4 + 0].Vertices;                      orig[i].BottomRight = verts[i4 + 1].Vertices;                      orig[i].TopLeft = verts[i4 + 2].Vertices;                      orig[i].TopRight = verts[i4 + 3].Vertices;                  }                    --ReuseGrid;              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: vertexBuffer = new CCVertexBuffer<CCV3F_T2F>(numQuads * 4' CCBufferUsage.WriteOnly);
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: vertexBuffer.Count = numQuads * 4;
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: indexBuffer = new CCIndexBuffer<short>(numQuads * 6' BufferUsage.WriteOnly);
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: indexBuffer.Count = numQuads * 6;
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; x++)              {                  for (int y = 0; y < GridSize.Y; y++)                  {                      float x1 = x * Step.X;                      float x2 = x == GridSize.X - 1 ? width : x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y == GridSize.Y - 1 ? height : y1 + Step.Y;                        vertArray[index + 0].Vertices = new CCVertex3F(x1' y1' 0);                      vertArray[index + 1].Vertices = new CCVertex3F(x2' y1' 0);                      vertArray[index + 2].Vertices = new CCVertex3F(x1' y2' 0);                      vertArray[index + 3].Vertices = new CCVertex3F(x2' y2' 0);                        float newY1 = y1;                      float newY2 = y2;                        if (!TextureFlipped)                      {                          newY1 = imageH - y1;                          newY2 = imageH - y2;                      }                        vertArray[index + 0].TexCoords = new CCTex2F(x1 / width' newY1 / height);                      vertArray[index + 1].TexCoords = new CCTex2F(x2 / width' newY1 / height);                      vertArray[index + 2].TexCoords = new CCTex2F(x1 / width' newY2 / height);                      vertArray[index + 3].TexCoords = new CCTex2F(x2 / width' newY2 / height);                        index += 4;                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; x++)              {                  for (int y = 0; y < GridSize.Y; y++)                  {                      float x1 = x * Step.X;                      float x2 = x == GridSize.X - 1 ? width : x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y == GridSize.Y - 1 ? height : y1 + Step.Y;                        vertArray[index + 0].Vertices = new CCVertex3F(x1' y1' 0);                      vertArray[index + 1].Vertices = new CCVertex3F(x2' y1' 0);                      vertArray[index + 2].Vertices = new CCVertex3F(x1' y2' 0);                      vertArray[index + 3].Vertices = new CCVertex3F(x2' y2' 0);                        float newY1 = y1;                      float newY2 = y2;                        if (!TextureFlipped)                      {                          newY1 = imageH - y1;                          newY2 = imageH - y2;                      }                        vertArray[index + 0].TexCoords = new CCTex2F(x1 / width' newY1 / height);                      vertArray[index + 1].TexCoords = new CCTex2F(x2 / width' newY1 / height);                      vertArray[index + 2].TexCoords = new CCTex2F(x1 / width' newY2 / height);                      vertArray[index + 3].TexCoords = new CCTex2F(x2 / width' newY2 / height);                        index += 4;                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; x++)              {                  for (int y = 0; y < GridSize.Y; y++)                  {                      float x1 = x * Step.X;                      float x2 = x == GridSize.X - 1 ? width : x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y == GridSize.Y - 1 ? height : y1 + Step.Y;                        vertArray[index + 0].Vertices = new CCVertex3F(x1' y1' 0);                      vertArray[index + 1].Vertices = new CCVertex3F(x2' y1' 0);                      vertArray[index + 2].Vertices = new CCVertex3F(x1' y2' 0);                      vertArray[index + 3].Vertices = new CCVertex3F(x2' y2' 0);                        float newY1 = y1;                      float newY2 = y2;                        if (!TextureFlipped)                      {                          newY1 = imageH - y1;                          newY2 = imageH - y2;                      }                        vertArray[index + 0].TexCoords = new CCTex2F(x1 / width' newY1 / height);                      vertArray[index + 1].TexCoords = new CCTex2F(x2 / width' newY1 / height);                      vertArray[index + 2].TexCoords = new CCTex2F(x1 / width' newY2 / height);                      vertArray[index + 3].TexCoords = new CCTex2F(x2 / width' newY2 / height);                        index += 4;                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; x++)              {                  for (int y = 0; y < GridSize.Y; y++)                  {                      float x1 = x * Step.X;                      float x2 = x == GridSize.X - 1 ? width : x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y == GridSize.Y - 1 ? height : y1 + Step.Y;                        vertArray[index + 0].Vertices = new CCVertex3F(x1' y1' 0);                      vertArray[index + 1].Vertices = new CCVertex3F(x2' y1' 0);                      vertArray[index + 2].Vertices = new CCVertex3F(x1' y2' 0);                      vertArray[index + 3].Vertices = new CCVertex3F(x2' y2' 0);                        float newY1 = y1;                      float newY2 = y2;                        if (!TextureFlipped)                      {                          newY1 = imageH - y1;                          newY2 = imageH - y2;                      }                        vertArray[index + 0].TexCoords = new CCTex2F(x1 / width' newY1 / height);                      vertArray[index + 1].TexCoords = new CCTex2F(x2 / width' newY1 / height);                      vertArray[index + 2].TexCoords = new CCTex2F(x1 / width' newY2 / height);                      vertArray[index + 3].TexCoords = new CCTex2F(x2 / width' newY2 / height);                        index += 4;                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < GridSize.X; x++)              {                  for (int y = 0; y < GridSize.Y; y++)                  {                      float x1 = x * Step.X;                      float x2 = x == GridSize.X - 1 ? width : x1 + Step.X;                      float y1 = y * Step.Y;                      float y2 = y == GridSize.Y - 1 ? height : y1 + Step.Y;                        vertArray[index + 0].Vertices = new CCVertex3F(x1' y1' 0);                      vertArray[index + 1].Vertices = new CCVertex3F(x2' y1' 0);                      vertArray[index + 2].Vertices = new CCVertex3F(x1' y2' 0);                      vertArray[index + 3].Vertices = new CCVertex3F(x2' y2' 0);                        float newY1 = y1;                      float newY2 = y2;                        if (!TextureFlipped)                      {                          newY1 = imageH - y1;                          newY2 = imageH - y2;                      }                        vertArray[index + 0].TexCoords = new CCTex2F(x1 / width' newY1 / height);                      vertArray[index + 1].TexCoords = new CCTex2F(x2 / width' newY1 / height);                      vertArray[index + 2].TexCoords = new CCTex2F(x1 / width' newY2 / height);                      vertArray[index + 3].TexCoords = new CCTex2F(x2 / width' newY2 / height);                        index += 4;                  }              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int x = 0; x < numQuads; x++)              {                  int i6 = x * 6;                  int i4 = x * 4;                  idxArray[i6 + 0] = (short) (i4 + 0);                  idxArray[i6 + 1] = (short) (i4 + 2);                  idxArray[i6 + 2] = (short) (i4 + 1);                    idxArray[i6 + 3] = (short) (i4 + 1);                  idxArray[i6 + 4] = (short) (i4 + 2);                  idxArray[i6 + 5] = (short) (i4 + 3);              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int i = 0; i < numQuads; i++)              {                  int i4 = i * 4;                  OriginalVertices[i].BottomLeft = vertArray[i4 + 0].Vertices;                  OriginalVertices[i].BottomRight = vertArray[i4 + 1].Vertices;                  OriginalVertices[i].TopLeft = vertArray[i4 + 2].Vertices;                  OriginalVertices[i].TopRight = vertArray[i4 + 3].Vertices;              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int i = 0; i < numQuads; i++)              {                  int i4 = i * 4;                  OriginalVertices[i].BottomLeft = vertArray[i4 + 0].Vertices;                  OriginalVertices[i].BottomRight = vertArray[i4 + 1].Vertices;                  OriginalVertices[i].TopLeft = vertArray[i4 + 2].Vertices;                  OriginalVertices[i].TopRight = vertArray[i4 + 3].Vertices;              }
Magic Number,CocosSharp,CCTiledGrid3D,C:\repos\mono_CocosSharp\src\effects\CCTiledGrid3D.cs,CalculateVertexPoints,The following statement contains a magic number: for (int i = 0; i < numQuads; i++)              {                  int i4 = i * 4;                  OriginalVertices[i].BottomLeft = vertArray[i4 + 0].Vertices;                  OriginalVertices[i].BottomRight = vertArray[i4 + 1].Vertices;                  OriginalVertices[i].TopLeft = vertArray[i4 + 2].Vertices;                  OriginalVertices[i].TopRight = vertArray[i4 + 3].Vertices;              }
Magic Number,CocosSharp,CCActionManager,C:\repos\mono_CocosSharp\src\actions\CCActionManager.cs,Update,The following statement contains a magic number: while (tmpKeysArray.Length < count)              {                  tmpKeysArray = new CCNode[tmpKeysArray.Length * 2];              }
Magic Number,CocosSharp,CCActionManager,C:\repos\mono_CocosSharp\src\actions\CCActionManager.cs,RemoveAllActions,The following statement contains a magic number: if (tmpKeysArray.Length < count)              {                  tmpKeysArray = new CCNode[tmpKeysArray.Length * 2];              }
Magic Number,CocosSharp,CCGridBase,C:\repos\mono_CocosSharp\src\effects\CCGridBase.cs,NextPOT,The following statement contains a magic number: x = x | (x >> 2);
Magic Number,CocosSharp,CCGridBase,C:\repos\mono_CocosSharp\src\effects\CCGridBase.cs,NextPOT,The following statement contains a magic number: x = x | (x >> 4);
Magic Number,CocosSharp,CCGridBase,C:\repos\mono_CocosSharp\src\effects\CCGridBase.cs,NextPOT,The following statement contains a magic number: x = x | (x >> 8);
Magic Number,CocosSharp,CCGridBase,C:\repos\mono_CocosSharp\src\effects\CCGridBase.cs,NextPOT,The following statement contains a magic number: x = x | (x >> 16);
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BackInOut,The following statement contains a magic number: time = time * 2;
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BackInOut,The following statement contains a magic number: if (time < 1)              {                  return (time * time * ((overshoot + 1) * time - overshoot)) / 2;              }              else              {                  time = time - 2;                  return (time * time * ((overshoot + 1) * time + overshoot)) / 2 + 1;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BackInOut,The following statement contains a magic number: if (time < 1)              {                  return (time * time * ((overshoot + 1) * time - overshoot)) / 2;              }              else              {                  time = time - 2;                  return (time * time * ((overshoot + 1) * time + overshoot)) / 2 + 1;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BackInOut,The following statement contains a magic number: if (time < 1)              {                  return (time * time * ((overshoot + 1) * time - overshoot)) / 2;              }              else              {                  time = time - 2;                  return (time * time * ((overshoot + 1) * time + overshoot)) / 2 + 1;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceOut,The following statement contains a magic number: if (time < 1 / 2.75)              {                  return 7.5625f * time * time;              }              else if (time < 2 / 2.75)              {                  time -= 1.5f / 2.75f;                  return 7.5625f * time * time + 0.75f;              }              else if (time < 2.5 / 2.75)              {                  time -= 2.25f / 2.75f;                  return 7.5625f * time * time + 0.9375f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceOut,The following statement contains a magic number: if (time < 1 / 2.75)              {                  return 7.5625f * time * time;              }              else if (time < 2 / 2.75)              {                  time -= 1.5f / 2.75f;                  return 7.5625f * time * time + 0.75f;              }              else if (time < 2.5 / 2.75)              {                  time -= 2.25f / 2.75f;                  return 7.5625f * time * time + 0.9375f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceOut,The following statement contains a magic number: if (time < 1 / 2.75)              {                  return 7.5625f * time * time;              }              else if (time < 2 / 2.75)              {                  time -= 1.5f / 2.75f;                  return 7.5625f * time * time + 0.75f;              }              else if (time < 2.5 / 2.75)              {                  time -= 2.25f / 2.75f;                  return 7.5625f * time * time + 0.9375f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceOut,The following statement contains a magic number: if (time < 1 / 2.75)              {                  return 7.5625f * time * time;              }              else if (time < 2 / 2.75)              {                  time -= 1.5f / 2.75f;                  return 7.5625f * time * time + 0.75f;              }              else if (time < 2.5 / 2.75)              {                  time -= 2.25f / 2.75f;                  return 7.5625f * time * time + 0.9375f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceOut,The following statement contains a magic number: if (time < 1 / 2.75)              {                  return 7.5625f * time * time;              }              else if (time < 2 / 2.75)              {                  time -= 1.5f / 2.75f;                  return 7.5625f * time * time + 0.75f;              }              else if (time < 2.5 / 2.75)              {                  time -= 2.25f / 2.75f;                  return 7.5625f * time * time + 0.9375f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceInOut,The following statement contains a magic number: if (time < 0.5f)              {                  time = time * 2;                  return (1 - BounceOut(1 - time)) * 0.5f;              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,BounceInOut,The following statement contains a magic number: return BounceOut(time * 2 - 1) * 0.5f + 0.5f;
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticIn,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;                  time = time - 1;  				return -(float)(Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2.0f / period));              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticIn,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;                  time = time - 1;  				return -(float)(Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2.0f / period));              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticIn,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;                  time = time - 1;  				return -(float)(Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2.0f / period));              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;  				return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2f / period) + 1);              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;  				return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2f / period) + 1);              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  float s = period / 4;  				return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.Pi * 2f / period) + 1);              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCEaseMath,C:\repos\mono_CocosSharp\src\Math\CCEaseMath.cs,ElasticInOut,The following statement contains a magic number: if (time == 0 || time == 1)              {                  return time;              }              else              {                  time = time * 2;                  if (period == 0)                  {                      period = 0.3f * 1.5f;                  }                    float s = period / 4;                    time = time - 1;                  if (time < 0)                  {  					return (float)(-0.5f * Math.Pow(2' 10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period));                  }                  else                  {  					return (float)(Math.Pow(2' -10 * time) * Math.Sin((time - s) * CCMathHelper.TwoPi / period) * 0.5f + 1);                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: return (int)((REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * upperBound);
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: if (range < 0)              {	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).                  // We also must use all 32 bits of precision' instead of the normal 31' which again is slower.	                  return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: if (range < 0)              {	// If range is <0 then an overflow has occured and must resort to using long integer arithmetic instead (slower).                  // We also must use all 32 bits of precision' instead of the normal 31' which again is slower.	                  return lowerBound + (int)((REAL_UNIT_UINT * (double)(w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))) * (double)((long)upperBound - (long)lowerBound));              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,Next,The following statement contains a magic number: return lowerBound + (int)((REAL_UNIT_INT * (double)(int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))))) * (double)range);
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextDouble,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextDouble,The following statement contains a magic number: return (REAL_UNIT_INT * (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)))));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: for (int bound = buffer.Length - 3; i < bound; )              {                  // Generate 4 bytes.                   // Increased performance is achieved by generating 4 random bytes per loop.                  // Also note that no mask needs to be applied to zero out the higher order bytes before                  // casting because the cast ignores thos bytes. Thanks to Stefan Troschьtz for pointing this out.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  buffer[i++] = (byte)(w >> 8);                  buffer[i++] = (byte)(w >> 16);                  buffer[i++] = (byte)(w >> 24);              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBytes,The following statement contains a magic number: if (i < buffer.Length)              {                  // Generate 4 bytes.                  t = (x ^ (x << 11));                  x = y; y = z; z = w;                  w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    buffer[i++] = (byte)w;                  if (i < buffer.Length)                  {                      buffer[i++] = (byte)(w >> 8);                      if (i < buffer.Length)                      {                          buffer[i++] = (byte)(w >> 16);                          if (i < buffer.Length)                          {                              buffer[i] = (byte)(w >> 24);                          }                      }                  }              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextUInt,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextUInt,The following statement contains a magic number: return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextUInt,The following statement contains a magic number: return (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8)));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextInt,The following statement contains a magic number: uint t = (x ^ (x << 11));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextInt,The following statement contains a magic number: return (int)(0x7FFFFFFF & (w = (w ^ (w >> 19)) ^ (t ^ (t >> 8))));
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBool,The following statement contains a magic number: if (bitMask == 1)              {                  // Generate 32 more bits.                  uint t = (x ^ (x << 11));                  x = y; y = z; z = w;                  bitBuffer = w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    // Reset the bitMask that tells us which bit to read next.                  bitMask = 0x80000000;                  return (bitBuffer & bitMask) == 0;              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBool,The following statement contains a magic number: if (bitMask == 1)              {                  // Generate 32 more bits.                  uint t = (x ^ (x << 11));                  x = y; y = z; z = w;                  bitBuffer = w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    // Reset the bitMask that tells us which bit to read next.                  bitMask = 0x80000000;                  return (bitBuffer & bitMask) == 0;              }
Magic Number,CocosSharp,CCFastRandom,C:\repos\mono_CocosSharp\src\Math\CCFastRandom.cs,NextBool,The following statement contains a magic number: if (bitMask == 1)              {                  // Generate 32 more bits.                  uint t = (x ^ (x << 11));                  x = y; y = z; z = w;                  bitBuffer = w = (w ^ (w >> 19)) ^ (t ^ (t >> 8));                    // Reset the bitMask that tells us which bit to read next.                  bitMask = 0x80000000;                  return (bitBuffer & bitMask) == 0;              }
Magic Number,CocosSharp,CCMathHelper,C:\repos\mono_CocosSharp\src\Math\CCMathHelper.cs,ToDegrees,The following statement contains a magic number: return (float)(radians * 57.295779513082320876798154814105);
Magic Number,CocosSharp,CCMathHelper,C:\repos\mono_CocosSharp\src\Math\CCMathHelper.cs,ToRadians,The following statement contains a magic number: return (float)(degrees * 0.017453292519943295769236907684886);
Magic Number,CocosSharp,CCRandom,C:\repos\mono_CocosSharp\src\Math\CCRandom.cs,Float_Minus1_1,The following statement contains a magic number: return (float)(_random.NextDouble() * 2.0 - 1.0);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float s = (1 - tension) / 2;
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b1 = s * ((-t3 + (2 * t2)) - t);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCSplineMath,C:\repos\mono_CocosSharp\src\Math\CCSplineMath.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCDictMaker,C:\repos\mono_CocosSharp\src\platform\CCDictMaker.cs,ArrayWithContentsOfFile,The following statement contains a magic number: TextHandler(parser' System.Text.UTF8Encoding.UTF8.GetBytes("root")' 4);
Magic Number,CocosSharp,CCFileUtils,C:\repos\mono_CocosSharp\src\platform\CCFileUtils.cs,GetFileBytes,The following statement contains a magic number: using (var stream = TitleContainer.OpenStream(filename))              {                  var buffer = new byte[1024];                  var ms = new MemoryStream();                    int readed = 0;                    readed = stream.Read(buffer' 0' 1024);                  while (readed > 0)                  {                      ms.Write(buffer' 0' readed);                      readed = stream.Read(buffer' 0' 1024);                  }                    return ms.ToArray();              }
Magic Number,CocosSharp,CCFileUtils,C:\repos\mono_CocosSharp\src\platform\CCFileUtils.cs,GetFileBytes,The following statement contains a magic number: using (var stream = TitleContainer.OpenStream(filename))              {                  var buffer = new byte[1024];                  var ms = new MemoryStream();                    int readed = 0;                    readed = stream.Read(buffer' 0' 1024);                  while (readed > 0)                  {                      ms.Write(buffer' 0' readed);                      readed = stream.Read(buffer' 0' 1024);                  }                    return ms.ToArray();              }
Magic Number,CocosSharp,CCFileUtils,C:\repos\mono_CocosSharp\src\platform\CCFileUtils.cs,GetFileBytes,The following statement contains a magic number: using (var stream = TitleContainer.OpenStream(filename))              {                  var buffer = new byte[1024];                  var ms = new MemoryStream();                    int readed = 0;                    readed = stream.Read(buffer' 0' 1024);                  while (readed > 0)                  {                      ms.Write(buffer' 0' readed);                      readed = stream.Read(buffer' 0' 1024);                  }                    return ms.ToArray();              }
Magic Number,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The following statement contains a magic number: while (xmlReader.Read())              {                  string name = xmlReader.Name;                    switch (xmlReader.NodeType)                  {                  case XmlNodeType.Element:                        string[] attrs = null;                        if (name == "map")                      {                          Width = CCUtils.CCParseInt(xmlReader.GetAttribute("width"));                          Height = CCUtils.CCParseInt(xmlReader.GetAttribute("height"));                      }                        if (xmlReader.HasAttributes)                      {                          attrs = new string[xmlReader.AttributeCount * 2];                          xmlReader.MoveToFirstAttribute();                          int i = 0;                          attrs[0] = xmlReader.Name;                          attrs[1] = xmlReader.Value;                          i += 2;                            while (xmlReader.MoveToNextAttribute())                          {                              attrs[i] = xmlReader.Name;                              attrs[i + 1] = xmlReader.Value;                              i += 2;                          }                            // Move the reader back to the element node.                          xmlReader.MoveToElement();                      }                      StartElement(this' name' attrs);                        byte[] buffer = null;                        //read data content of tmx file                      if (name == "data")                      {                          if (attrs != null) {                              string encoding = "";                              for (int i = 0; i < attrs.Length; i++) {                                  if (attrs [i] == "encoding") {                                      encoding = attrs [i + 1];                                  }                              }                                if (encoding == "base64") {                                  var base64String = xmlReader.ReadElementContentAsString().Trim();                                  buffer = Convert.FromBase64String(base64String);                              } else {                                  string value = xmlReader.ReadElementContentAsString ();                                  buffer = Encoding.UTF8.GetBytes (value);                              }                          }                          // Pure XML TileMap                          else                           {                              int dataSize = (Width * Height * 4) + 1024;                              buffer = new byte[dataSize];                          }                            TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (name == "key" || name == "integer" || name == "real" || name == "string")                      {                          string value = xmlReader.ReadElementContentAsString();                          buffer = Encoding.UTF8.GetBytes(value);                          TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (xmlReader.IsEmptyElement)                      {                          EndElement(this' name);                      }                      break;                    case XmlNodeType.EndElement:                      EndElement(this' xmlReader.Name);                      dataindex++;                      break;                    default:                      break;                  }              }
Magic Number,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The following statement contains a magic number: while (xmlReader.Read())              {                  string name = xmlReader.Name;                    switch (xmlReader.NodeType)                  {                  case XmlNodeType.Element:                        string[] attrs = null;                        if (name == "map")                      {                          Width = CCUtils.CCParseInt(xmlReader.GetAttribute("width"));                          Height = CCUtils.CCParseInt(xmlReader.GetAttribute("height"));                      }                        if (xmlReader.HasAttributes)                      {                          attrs = new string[xmlReader.AttributeCount * 2];                          xmlReader.MoveToFirstAttribute();                          int i = 0;                          attrs[0] = xmlReader.Name;                          attrs[1] = xmlReader.Value;                          i += 2;                            while (xmlReader.MoveToNextAttribute())                          {                              attrs[i] = xmlReader.Name;                              attrs[i + 1] = xmlReader.Value;                              i += 2;                          }                            // Move the reader back to the element node.                          xmlReader.MoveToElement();                      }                      StartElement(this' name' attrs);                        byte[] buffer = null;                        //read data content of tmx file                      if (name == "data")                      {                          if (attrs != null) {                              string encoding = "";                              for (int i = 0; i < attrs.Length; i++) {                                  if (attrs [i] == "encoding") {                                      encoding = attrs [i + 1];                                  }                              }                                if (encoding == "base64") {                                  var base64String = xmlReader.ReadElementContentAsString().Trim();                                  buffer = Convert.FromBase64String(base64String);                              } else {                                  string value = xmlReader.ReadElementContentAsString ();                                  buffer = Encoding.UTF8.GetBytes (value);                              }                          }                          // Pure XML TileMap                          else                           {                              int dataSize = (Width * Height * 4) + 1024;                              buffer = new byte[dataSize];                          }                            TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (name == "key" || name == "integer" || name == "real" || name == "string")                      {                          string value = xmlReader.ReadElementContentAsString();                          buffer = Encoding.UTF8.GetBytes(value);                          TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (xmlReader.IsEmptyElement)                      {                          EndElement(this' name);                      }                      break;                    case XmlNodeType.EndElement:                      EndElement(this' xmlReader.Name);                      dataindex++;                      break;                    default:                      break;                  }              }
Magic Number,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The following statement contains a magic number: while (xmlReader.Read())              {                  string name = xmlReader.Name;                    switch (xmlReader.NodeType)                  {                  case XmlNodeType.Element:                        string[] attrs = null;                        if (name == "map")                      {                          Width = CCUtils.CCParseInt(xmlReader.GetAttribute("width"));                          Height = CCUtils.CCParseInt(xmlReader.GetAttribute("height"));                      }                        if (xmlReader.HasAttributes)                      {                          attrs = new string[xmlReader.AttributeCount * 2];                          xmlReader.MoveToFirstAttribute();                          int i = 0;                          attrs[0] = xmlReader.Name;                          attrs[1] = xmlReader.Value;                          i += 2;                            while (xmlReader.MoveToNextAttribute())                          {                              attrs[i] = xmlReader.Name;                              attrs[i + 1] = xmlReader.Value;                              i += 2;                          }                            // Move the reader back to the element node.                          xmlReader.MoveToElement();                      }                      StartElement(this' name' attrs);                        byte[] buffer = null;                        //read data content of tmx file                      if (name == "data")                      {                          if (attrs != null) {                              string encoding = "";                              for (int i = 0; i < attrs.Length; i++) {                                  if (attrs [i] == "encoding") {                                      encoding = attrs [i + 1];                                  }                              }                                if (encoding == "base64") {                                  var base64String = xmlReader.ReadElementContentAsString().Trim();                                  buffer = Convert.FromBase64String(base64String);                              } else {                                  string value = xmlReader.ReadElementContentAsString ();                                  buffer = Encoding.UTF8.GetBytes (value);                              }                          }                          // Pure XML TileMap                          else                           {                              int dataSize = (Width * Height * 4) + 1024;                              buffer = new byte[dataSize];                          }                            TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (name == "key" || name == "integer" || name == "real" || name == "string")                      {                          string value = xmlReader.ReadElementContentAsString();                          buffer = Encoding.UTF8.GetBytes(value);                          TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (xmlReader.IsEmptyElement)                      {                          EndElement(this' name);                      }                      break;                    case XmlNodeType.EndElement:                      EndElement(this' xmlReader.Name);                      dataindex++;                      break;                    default:                      break;                  }              }
Magic Number,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The following statement contains a magic number: while (xmlReader.Read())              {                  string name = xmlReader.Name;                    switch (xmlReader.NodeType)                  {                  case XmlNodeType.Element:                        string[] attrs = null;                        if (name == "map")                      {                          Width = CCUtils.CCParseInt(xmlReader.GetAttribute("width"));                          Height = CCUtils.CCParseInt(xmlReader.GetAttribute("height"));                      }                        if (xmlReader.HasAttributes)                      {                          attrs = new string[xmlReader.AttributeCount * 2];                          xmlReader.MoveToFirstAttribute();                          int i = 0;                          attrs[0] = xmlReader.Name;                          attrs[1] = xmlReader.Value;                          i += 2;                            while (xmlReader.MoveToNextAttribute())                          {                              attrs[i] = xmlReader.Name;                              attrs[i + 1] = xmlReader.Value;                              i += 2;                          }                            // Move the reader back to the element node.                          xmlReader.MoveToElement();                      }                      StartElement(this' name' attrs);                        byte[] buffer = null;                        //read data content of tmx file                      if (name == "data")                      {                          if (attrs != null) {                              string encoding = "";                              for (int i = 0; i < attrs.Length; i++) {                                  if (attrs [i] == "encoding") {                                      encoding = attrs [i + 1];                                  }                              }                                if (encoding == "base64") {                                  var base64String = xmlReader.ReadElementContentAsString().Trim();                                  buffer = Convert.FromBase64String(base64String);                              } else {                                  string value = xmlReader.ReadElementContentAsString ();                                  buffer = Encoding.UTF8.GetBytes (value);                              }                          }                          // Pure XML TileMap                          else                           {                              int dataSize = (Width * Height * 4) + 1024;                              buffer = new byte[dataSize];                          }                            TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (name == "key" || name == "integer" || name == "real" || name == "string")                      {                          string value = xmlReader.ReadElementContentAsString();                          buffer = Encoding.UTF8.GetBytes(value);                          TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (xmlReader.IsEmptyElement)                      {                          EndElement(this' name);                      }                      break;                    case XmlNodeType.EndElement:                      EndElement(this' xmlReader.Name);                      dataindex++;                      break;                    default:                      break;                  }              }
Magic Number,CocosSharp,CCSAXParser,C:\repos\mono_CocosSharp\src\platform\CCSAXParser.cs,ParseContent,The following statement contains a magic number: while (xmlReader.Read())              {                  string name = xmlReader.Name;                    switch (xmlReader.NodeType)                  {                  case XmlNodeType.Element:                        string[] attrs = null;                        if (name == "map")                      {                          Width = CCUtils.CCParseInt(xmlReader.GetAttribute("width"));                          Height = CCUtils.CCParseInt(xmlReader.GetAttribute("height"));                      }                        if (xmlReader.HasAttributes)                      {                          attrs = new string[xmlReader.AttributeCount * 2];                          xmlReader.MoveToFirstAttribute();                          int i = 0;                          attrs[0] = xmlReader.Name;                          attrs[1] = xmlReader.Value;                          i += 2;                            while (xmlReader.MoveToNextAttribute())                          {                              attrs[i] = xmlReader.Name;                              attrs[i + 1] = xmlReader.Value;                              i += 2;                          }                            // Move the reader back to the element node.                          xmlReader.MoveToElement();                      }                      StartElement(this' name' attrs);                        byte[] buffer = null;                        //read data content of tmx file                      if (name == "data")                      {                          if (attrs != null) {                              string encoding = "";                              for (int i = 0; i < attrs.Length; i++) {                                  if (attrs [i] == "encoding") {                                      encoding = attrs [i + 1];                                  }                              }                                if (encoding == "base64") {                                  var base64String = xmlReader.ReadElementContentAsString().Trim();                                  buffer = Convert.FromBase64String(base64String);                              } else {                                  string value = xmlReader.ReadElementContentAsString ();                                  buffer = Encoding.UTF8.GetBytes (value);                              }                          }                          // Pure XML TileMap                          else                           {                              int dataSize = (Width * Height * 4) + 1024;                              buffer = new byte[dataSize];                          }                            TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (name == "key" || name == "integer" || name == "real" || name == "string")                      {                          string value = xmlReader.ReadElementContentAsString();                          buffer = Encoding.UTF8.GetBytes(value);                          TextHandler(this' buffer' buffer.Length);                          EndElement(this' name);                      }                      else if (xmlReader.IsEmptyElement)                      {                          EndElement(this' name);                      }                      break;                    case XmlNodeType.EndElement:                      EndElement(this' xmlReader.Name);                      dataindex++;                      break;                    default:                      break;                  }              }
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,LoadFromXmlFile,The following statement contains a magic number: byte[] magicHeader = new byte[8];
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,LoadFromXmlFile,The following statement contains a magic number: data.Read(magicHeader' 0' 8);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,LoadFromXmlFile,The following statement contains a magic number: if (BitConverter.ToInt64 (magicHeader' 0) == 3472403351741427810) {  				using (BinaryReader reader = new BinaryReader(data))  				{  					byte[] plistData = reader.ReadBytes((int) reader.BaseStream.Length);  					Root = ReadBinary(plistData);  				}    			} else {  				//allow DTD but not try to resolve it from web  				var settings = new XmlReaderSettings () {  					DtdProcessing = DtdProcessing.Ignore'  					//ProhibitDtd = false'  #if !NETFX_CORE  					XmlResolver = null'  #endif  				};  				using (var reader = XmlReader.Create(data' settings))  					LoadFromXml (reader);  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ReadBinary,The following statement contains a magic number: List<byte> trailer = bList.GetRange(bList.Count - 32' 32);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ReadBinary,The following statement contains a magic number: List<byte> trailer = bList.GetRange(bList.Count - 32' 32);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ReadBinary,The following statement contains a magic number: offsetTableBytes = bList.GetRange((int)offsetTableOffset' bList.Count - (int)offsetTableOffset - 32);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: offsetByteSize = BitConverter.ToInt32(RegulateNullBytes(trailer.GetRange(6' 1).ToArray()' 4)' 0);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: offsetByteSize = BitConverter.ToInt32(RegulateNullBytes(trailer.GetRange(6' 1).ToArray()' 4)' 0);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: objRefSize = BitConverter.ToInt32(RegulateNullBytes(trailer.GetRange(7' 1).ToArray()' 4)' 0);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: objRefSize = BitConverter.ToInt32(RegulateNullBytes(trailer.GetRange(7' 1).ToArray()' 4)' 0);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: byte[] refCountBytes = trailer.GetRange(12' 4).ToArray();
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: byte[] refCountBytes = trailer.GetRange(12' 4).ToArray();
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: byte[] offsetTableOffsetBytes = trailer.GetRange(24' 8).ToArray();
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseTrailer,The following statement contains a magic number: byte[] offsetTableOffsetBytes = trailer.GetRange(24' 8).ToArray();
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseOffsetTable,The following statement contains a magic number: for (int i = 0; i < offsetTableBytes.Count; i += offsetByteSize)  			{  				byte[] buffer = offsetTableBytes.GetRange(i' offsetByteSize).ToArray();  				Array.Reverse(buffer);  				offsetTable.Add(BitConverter.ToInt32(RegulateNullBytes(buffer' 4)' 0));  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,GetCount,The following statement contains a magic number: if (headerByteTrail < 15)  			{  				count = headerByteTrail;  				newBytePosition = bytePosition + 1;  			}  			else  				count = ((PlistInteger)ParseBinaryInt(bytePosition + 1' out newBytePosition)).AsInt;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinary,The following statement contains a magic number: switch (header & 0xF0)  			{  				case 0:  			{  				//If the byte is  				//0 return null  				//9 return true  				//8 return false  				if (objectTable [offsetTable [objRef]] == 0)  					return new PlistNull ();  				else   					if (objectTable[offsetTable[objRef]] == 9)  				    	return new PlistBoolean(true);  					else  						return new PlistBoolean(false);    			}  				case 0x10:  			{  				return ParseBinaryInt(offsetTable[objRef]);  			}  				case 0x20:  			{  				return ParseBinaryReal(offsetTable[objRef]);  			}  				case 0x30:  			{  				return ParseBinaryDate(offsetTable[objRef]);  			}  				case 0x40:  			{  				return ParseBinaryByteArray(offsetTable[objRef]);  			}  				case 0x50://String ASCII  			{  				return ParseBinaryAsciiString(offsetTable[objRef]);  			}  				case 0x60://String Unicode  			{  				return ParseBinaryUnicodeString(offsetTable[objRef]);  			}  				case 0xD0:  			{  				return ParseBinaryDictionary(objRef);  			}  				case 0xA0:  			{  				return ParseBinaryArray(objRef);  			}  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryDate,The following statement contains a magic number: byte[] buffer = objectTable.GetRange(headerPosition + 1' 8).ToArray();
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryInt,The following statement contains a magic number: int byteCount = (int)Math.Pow(2' header & 0xf);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryInt,The following statement contains a magic number: return new PlistInteger(BitConverter.ToInt32(RegulateNullBytes(buffer' 4)' 0));
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryReal,The following statement contains a magic number: int byteCount = (int)Math.Pow(2' header & 0xf);
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryReal,The following statement contains a magic number: return new PlistReal((float)BitConverter.ToDouble(RegulateNullBytes(buffer' 8)' 0));
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryUnicodeString,The following statement contains a magic number: charCount = charCount * 2;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryUnicodeString,The following statement contains a magic number: for (int i = 0; i < charCount; i+=2)  			{  				one = objectTable.GetRange(charStartPosition+i'1)[0];  				two = objectTable.GetRange(charStartPosition + i+1' 1)[0];    				if (BitConverter.IsLittleEndian)  				{  					buffer[i] = two;  					buffer[i + 1] = one;  				}  				else  				{  					buffer[i] = one;  					buffer[i + 1] = two;  				}  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryDictionary,The following statement contains a magic number: if (refCount < 15)  				refStartPosition = offsetTable[objRef] + 1;  			else  				refStartPosition = offsetTable[objRef] + 2 + RegulateNullBytes(BitConverter.GetBytes(refCount)' 1).Length;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryDictionary,The following statement contains a magic number: if (refCount < 15)  				refStartPosition = offsetTable[objRef] + 1;  			else  				refStartPosition = offsetTable[objRef] + 2 + RegulateNullBytes(BitConverter.GetBytes(refCount)' 1).Length;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryDictionary,The following statement contains a magic number: for (int i = refStartPosition; i < refStartPosition + refCount * 2 * objRefSize; i += objRefSize)  			{  				byte[] refBuffer = objectTable.GetRange(i' objRefSize).ToArray();  				Array.Reverse(refBuffer);  				refs.Add(BitConverter.ToInt32(RegulateNullBytes(refBuffer' 4)' 0));  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryDictionary,The following statement contains a magic number: for (int i = refStartPosition; i < refStartPosition + refCount * 2 * objRefSize; i += objRefSize)  			{  				byte[] refBuffer = objectTable.GetRange(i' objRefSize).ToArray();  				Array.Reverse(refBuffer);  				refs.Add(BitConverter.ToInt32(RegulateNullBytes(refBuffer' 4)' 0));  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryArray,The following statement contains a magic number: if (refCount < 15)  				refStartPosition = offsetTable[objRef] + 1;  			else  				//The following integer has a header as well so we increase the refStartPosition by two to account for that.  				refStartPosition = offsetTable[objRef] + 2 + RegulateNullBytes(BitConverter.GetBytes(refCount)' 1).Length;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryArray,The following statement contains a magic number: if (refCount < 15)  				refStartPosition = offsetTable[objRef] + 1;  			else  				//The following integer has a header as well so we increase the refStartPosition by two to account for that.  				refStartPosition = offsetTable[objRef] + 2 + RegulateNullBytes(BitConverter.GetBytes(refCount)' 1).Length;
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinaryArray,The following statement contains a magic number: for (int i = refStartPosition; i < refStartPosition + refCount * objRefSize; i += objRefSize)  			{  				byte[] refBuffer = objectTable.GetRange(i' objRefSize).ToArray();  				Array.Reverse(refBuffer);  				refs.Add(BitConverter.ToInt32(RegulateNullBytes(refBuffer' 4)' 0));  			}
Magic Number,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ConvertFromAppleTimeStamp,The following statement contains a magic number: DateTime origin = new DateTime(2001' 1' 1' 0' 0' 0' 0);
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,CCPrimitiveBatch,The following statement contains a magic number: triangleVertices = new CCV3F_C4B[bufferSize - bufferSize % 3];
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,CCPrimitiveBatch,The following statement contains a magic number: lineVertices = new CCV3F_C4B[bufferSize - bufferSize % 2];
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,CCPrimitiveBatch,The following statement contains a magic number: triangleVerts = new CCRawList<CCV3F_C4B[]>(100' true);
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,CCPrimitiveBatch,The following statement contains a magic number: lineVerts = new CCRawList<CCV3F_C4B[]>(100' true);
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,Flush,The following statement contains a magic number: while (triangleVerts.Count > 0)              {                  var triangle = triangleVerts.Pop();                  DrawManager.DrawPrimitives(PrimitiveType.TriangleList' triangle' 0' triangle.Length / 3);                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,Flush,The following statement contains a magic number: while (lineVerts.Count > 0)              {                  var line = lineVerts.Pop();                  DrawManager.DrawPrimitives(PrimitiveType.LineList' line' 0' line.Length / 2);              }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushTriangles,The following statement contains a magic number: if (triangleVertsCount >= 3)              {                  int primitiveCount = triangleVertsCount / 3;                    var triangles = new CCV3F_C4B[triangleVertsCount];                  Array.Copy(triangleVertices' triangles' triangleVertsCount);                  // add the Triangle List to our triangles list vertices for later rendering from the Renderer                  triangleVerts.Add(triangles);                    triangleVertsCount -= primitiveCount * 3;                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushTriangles,The following statement contains a magic number: if (triangleVertsCount >= 3)              {                  int primitiveCount = triangleVertsCount / 3;                    var triangles = new CCV3F_C4B[triangleVertsCount];                  Array.Copy(triangleVertices' triangles' triangleVertsCount);                  // add the Triangle List to our triangles list vertices for later rendering from the Renderer                  triangleVerts.Add(triangles);                    triangleVertsCount -= primitiveCount * 3;                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushTriangles,The following statement contains a magic number: if (triangleVertsCount >= 3)              {                  int primitiveCount = triangleVertsCount / 3;                    var triangles = new CCV3F_C4B[triangleVertsCount];                  Array.Copy(triangleVertices' triangles' triangleVertsCount);                  // add the Triangle List to our triangles list vertices for later rendering from the Renderer                  triangleVerts.Add(triangles);                    triangleVertsCount -= primitiveCount * 3;                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushLines,The following statement contains a magic number: if (lineVertsCount >= 2)              {                  int primitiveCount = lineVertsCount / 2;                    var lines = new CCV3F_C4B[lineVertsCount];                  Array.Copy(lineVertices' lines' triangleVertsCount);                  // add the Line Lists to our line list vertices for later rendering from the Renderer                  lineVerts.Add(lines);                    lineVertsCount -= primitiveCount * 2;                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushLines,The following statement contains a magic number: if (lineVertsCount >= 2)              {                  int primitiveCount = lineVertsCount / 2;                    var lines = new CCV3F_C4B[lineVertsCount];                  Array.Copy(lineVertices' lines' triangleVertsCount);                  // add the Line Lists to our line list vertices for later rendering from the Renderer                  lineVerts.Add(lines);                    lineVertsCount -= primitiveCount * 2;                }
Magic Number,CocosSharp,CCPrimitiveBatch,C:\repos\mono_CocosSharp\src\platform\CCPrimitiveBatch.cs,FlushLines,The following statement contains a magic number: if (lineVertsCount >= 2)              {                  int primitiveCount = lineVertsCount / 2;                    var lines = new CCV3F_C4B[lineVertsCount];                  Array.Copy(lineVertices' lines' triangleVertsCount);                  // add the Line Lists to our line list vertices for later rendering from the Renderer                  lineVerts.Add(lines);                    lineVertsCount -= primitiveCount * 2;                }
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,CCRawList,The following statement contains a magic number: if (useArrayPool)              {                  Elements = ArrayPool<T>.Create(4);              }              else              {                  Elements = new T[4];              }
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,CCRawList,The following statement contains a magic number: if (useArrayPool)              {                  Elements = ArrayPool<T>.Create(4);              }              else              {                  Elements = new T[4];              }
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,Push,The following statement contains a magic number: if (count == Elements.Length)  			{  				Capacity = Elements.Length * 2;  			}
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,Add,The following statement contains a magic number: if (count == Elements.Length)  			{  				Capacity = Elements.Length * 2;  			}
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,Insert,The following statement contains a magic number: if (index < count)  			{  				if (count == Elements.Length)  				{  					Capacity = Elements.Length * 2;  				}    				Array.Copy(Elements' index' Elements' index + 1' count - index);  				Elements[index] = item;  				count++;  			}  			else  				Add(item);
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,FastInsert,The following statement contains a magic number: if (index < count)  			{  				if (count == Elements.Length)  				{  					Capacity = Elements.Length * 2;  				}    				//Array.Copy(Elements' index' Elements' index + 1' count - index);  				Elements[count] = Elements[index];  				Elements[index] = item;  				count++;  			}  			else  				Add(item);
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,AddRange,The following statement contains a magic number: if (neededLength > Elements.Length)  			{  				int newLength = Elements.Length * 2;  				if (newLength < neededLength)  					newLength = neededLength;  				Capacity = newLength;  			}
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,AddRange,The following statement contains a magic number: if (neededLength > Elements.Length)  			{  				int newLength = Elements.Length * 2;  				if (newLength < neededLength)  					newLength = neededLength;  				Capacity = newLength;  			}
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,AddRange,The following statement contains a magic number: if (neededLength > Elements.Length)  			{  				int newLength = Elements.Length * 2;  				if (newLength < neededLength)  					newLength = neededLength;  				Capacity = newLength;  			}
Magic Number,CocosSharp,CCRawList<T>,C:\repos\mono_CocosSharp\src\platform\CCRawList.cs,AddRange,The following statement contains a magic number: if (neededLength > Elements.Length)  			{  				int newLength = Elements.Length * 2;  				if (newLength < neededLength)  					newLength = neededLength;  				Capacity = newLength;  			}
Magic Number,CocosSharp,ArrayPool<T>,C:\repos\mono_CocosSharp\src\platform\CCArrayPool.cs,Create,The following statement contains a magic number: if (pow)              {                  var l = 2;                  while (l < length)                   {                      l <<= 1;                  }                  length = l;              }
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCColor4B,The following statement contains a magic number: R = (byte)CCMathHelper.Clamp(red * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCColor4B,The following statement contains a magic number: G = (byte)CCMathHelper.Clamp(green * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCColor4B,The following statement contains a magic number: B = (byte)CCMathHelper.Clamp(blue * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCColor4B,The following statement contains a magic number: A = (byte)CCMathHelper.Clamp(alpha * 255' Byte.MinValue' Byte.MaxValue);
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,Parse,The following statement contains a magic number: return (new CCColor4B(byte.Parse(f[0])' byte.Parse(f[1])' byte.Parse(f[2])' byte.Parse(f[3])));
Magic Number,CocosSharp,CCColor4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,Parse,The following statement contains a magic number: return (new CCColor4B(byte.Parse(f[0])' byte.Parse(f[1])' byte.Parse(f[2])' byte.Parse(f[3])));
Magic Number,CocosSharp,CCColor4F,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,Parse,The following statement contains a magic number: return (new CCColor4F(float.Parse(f[0])' float.Parse(f[1])' float.Parse(f[2])' float.Parse(f[3])));
Magic Number,CocosSharp,CCColor4F,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,Parse,The following statement contains a magic number: return (new CCColor4F(float.Parse(f[0])' float.Parse(f[1])' float.Parse(f[2])' float.Parse(f[3])));
Magic Number,CocosSharp,CCV3F_C4B,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCV3F_C4B,The following statement contains a magic number: var elements = new VertexElement[]                  {                      new VertexElement(0' VertexElementFormat.Vector3' VertexElementUsage.Position' 0)'                      new VertexElement(12' VertexElementFormat.Color' VertexElementUsage.Color' 0)'                  };
Magic Number,CocosSharp,CCV3F_C4B_T2F,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCV3F_C4B_T2F,The following statement contains a magic number: var elements = new VertexElement[]                  {                      new VertexElement(0' VertexElementFormat.Vector3' VertexElementUsage.Position' 0)'                      new VertexElement(12' VertexElementFormat.Color' VertexElementUsage.Color' 0)'                      new VertexElement(0x10' VertexElementFormat.Vector2' VertexElementUsage.TextureCoordinate' 0)                  };
Magic Number,CocosSharp,CCV3F_C4B_T2F_Quad,C:\repos\mono_CocosSharp\src\predefine\CCTypes.cs,CCV3F_C4B_T2F_Quad,The following statement contains a magic number: var elements = new VertexElement[]                  {                      new VertexElement(0' VertexElementFormat.Vector3' VertexElementUsage.Position' 0)'                      new VertexElement(12' VertexElementFormat.Color' VertexElementUsage.Color' 0)'                      new VertexElement(0x10' VertexElementFormat.Vector2' VertexElementUsage.TextureCoordinate' 0)                  };
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float s = (1 - tension) / 2;
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b1 = s * ((-t3 + (2 * t2)) - t);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCCardinalSplineAt,The following statement contains a magic number: float b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 2);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 4);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 8);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 16);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 2);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 4);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 8);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,CCNextPOT,The following statement contains a magic number: x = x | (x >> 16);
Magic Number,CocosSharp,CCUtils,C:\repos\mono_CocosSharp\src\support\CCUtils.cs,SplitWithForm,The following statement contains a magic number: do  			{  				if (pStr == null)  				{  					break;  				}  				  				// string is empty  				string content = pStr;  				if (content.Length == 0)  				{  					break;  				}  				  				int nPosLeft = content.IndexOf('{');  				int nPosRight = content.IndexOf('}');  				  				// don't have '{' and '}'  				if (nPosLeft == -1 || nPosRight == -1)  				{  					break;  				}  				// '}' is before '{'  				if (nPosLeft > nPosRight)  				{  					break;  				}  				  				string pointStr = content.Substring(nPosLeft + 1' nPosRight - nPosLeft - 1);  				// nothing between '{' and '}'  				if (pointStr.Length == 0)  				{  					break;  				}  				  				int nPos1 = pointStr.IndexOf('{');  				int nPos2 = pointStr.IndexOf('}');  				// contain '{' or '}'   				if (nPos1 != -1 || nPos2 != -1) break;  				  				Split(pointStr' "'"' strs);  				if (strs.Count != 2 || strs[0].Length == 0 || strs[1].Length == 0)  				{  					strs.Clear();  					break;  				}  				  				bRet = true;  			} while (false);
Magic Number,CocosSharp,CCRectConverter,C:\repos\mono_CocosSharp\src\support\Converters\CCRectConverter.cs,CCRectFromString,The following statement contains a magic number: do              {                  if (rectSpec == null)                  {                      break;                  }                    string content = rectSpec;                    // find the first '{' and the third '}'                  int nPosLeft = content.IndexOf('{');                  int nPosRight = content.IndexOf('}');                  for (int i = 1; i < 3; ++i)                  {                      if (nPosRight == -1)                      {                          break;                      }                      nPosRight = content.IndexOf('}'' nPosRight + 1);                  }                  if (nPosLeft == -1 || nPosRight == -1)                  {                      break;                  }                  content = content.Substring(nPosLeft + 1' nPosRight - nPosLeft - 1);                  int nPointEnd = content.IndexOf('}');                  if (nPointEnd == -1)                  {                      break;                  }                  nPointEnd = content.IndexOf('''' nPointEnd);                  if (nPointEnd == -1)                  {                      break;                  }                    // get the point string and size string                  string pointStr = content.Substring(0' nPointEnd);                  string sizeStr = content.Substring(nPointEnd + 1);                  //' content.Length - nPointEnd                  // split the string with '''                  List<string> pointInfo = new List<string>();                    if (!CCUtils.SplitWithForm(pointStr' pointInfo))                  {                      break;                  }                  List<string> sizeInfo = new List<string>();                  if (!CCUtils.SplitWithForm(sizeStr' sizeInfo))                  {                      break;                  }                    float x = CCUtils.CCParseFloat(pointInfo[0]);                  float y = CCUtils.CCParseFloat(pointInfo[1]);                  float width = CCUtils.CCParseFloat(sizeInfo[0]);                  float height = CCUtils.CCParseFloat(sizeInfo[1]);                    result = new CCRect(x' y' width' height);              } while (false);
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: return new Matrix()              {                  M11 = m[0]' M21 = m[4]' M31 = m[8]'  M41 = m[12]'                  M12 = m[1]' M22 = m[5]' M32 = m[9]'  M42 = m[13]'                  M13 = m[2]' M23 = m[6]' M33 = m[10]' M43 = m[14]'                  M14 = m[3]' M24 = m[7]' M34 = m[11]' M44 = m[15]'              };
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToMatrix,The following statement contains a magic number: var m = new float[16];
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[2] = m[3] = m[6] = m[7] = m[8] = m[9] = m[11] = m[14] = 0.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[10] = m[15] = 1.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[10] = m[15] = 1.0f;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[4] = t.C;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[12] = t.Tx;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[5] = t.D;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,CGAffineToGL,The following statement contains a magic number: m[13] = t.Ty;
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,GLToCGAffine,The following statement contains a magic number: t.C = m[4];
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,GLToCGAffine,The following statement contains a magic number: t.Tx = m[12];
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,GLToCGAffine,The following statement contains a magic number: t.D = m[5];
Magic Number,CocosSharp,TransformUtils,C:\repos\mono_CocosSharp\src\support\TransformUtils.cs,GLToCGAffine,The following statement contains a magic number: t.Ty = m[13];
Magic Number,CocosSharp,CCTextureAtlas,C:\repos\mono_CocosSharp\src\textures\CCTextureAtlas.cs,CCTextureAtlas,The following statement contains a magic number: if (capacity < 4)              {                  capacity = 4;              }
Magic Number,CocosSharp,CCTextureAtlas,C:\repos\mono_CocosSharp\src\textures\CCTextureAtlas.cs,CCTextureAtlas,The following statement contains a magic number: if (capacity < 4)              {                  capacity = 4;              }
Magic Number,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,DumpCachedTextureInfo,The following statement contains a magic number: foreach (var pair in textures)              {                  var texture = pair.Value.XNATexture;                    if (texture != null)                  {                      var bytes = texture.Width * texture.Height * 4;                      CCLog.Log("{0} {1} x {2} => {3} KB."' pair.Key' texture.Width' texture.Height' bytes / 1024);                      total += bytes;                  }                    count++;              }
Magic Number,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,DumpCachedTextureInfo,The following statement contains a magic number: foreach (var pair in textures)              {                  var texture = pair.Value.XNATexture;                    if (texture != null)                  {                      var bytes = texture.Width * texture.Height * 4;                      CCLog.Log("{0} {1} x {2} => {3} KB."' pair.Key' texture.Width' texture.Height' bytes / 1024);                      total += bytes;                  }                    count++;              }
Magic Number,CocosSharp,CCTextureCache,C:\repos\mono_CocosSharp\src\textures\CCTextureCache.cs,DumpCachedTextureInfo,The following statement contains a magic number: CCLog.Log("{0} textures' for {1} KB ({2:00.00} MB)"' count' total / 1024' total / (1024f * 1024f));
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: var data = new byte[8];
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: var dataLen = stream.Read(data' 0' 8);
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 8)              {                  if (data[0] == 0x89 && data[1] == 0x50 && data[2] == 0x4E && data[3] == 0x47                      && data[4] == 0x0D && data[5] == 0x0A && data[6] == 0x1A && data[7] == 0x0A)                  {                      return CCImageFormat.Png;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 3)              {                  if (data[0] == 0x47 && data[1] == 0x49 && data[1] == 0x46)                  {                      return CCImageFormat.Gif;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 2)              {                  if ((data[0] == 0x49 && data[1] == 0x49) || (data[0] == 0x4d && data[1] == 0x4d))                  {                      return CCImageFormat.Tiff;                  }              }
Magic Number,CocosSharp,CCTexture2D,C:\repos\mono_CocosSharp\src\textures\CCTexture2D.cs,DetectImageFormat,The following statement contains a magic number: if (dataLen >= 2)              {                  if (data[0] == 0xff && data[1] == 0xd8)                  {                      return CCImageFormat.Jpg;                  }              }
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,The following statement contains a magic number: while (count > 0) {  				// We can defer the modulo operation:  				// s1 maximally grows from 65521 to 65521 + 255 * 3800  				// s2 maximally grows by 3800 * median(s1) = 2090079800 < 2^31  				int n = 3800;  				if (n > count) {  					n = count;  				}  				count -= n;  				while (--n >= 0) {  					s1 = s1 + (uint)(buffer[offset++] & 0xff);  					s2 = s2 + s1;  				}  				s1 %= BASE;  				s2 %= BASE;  			}
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\CRC32.cs,ComputeCrc32,The following statement contains a magic number: return (uint)(Crc32.CrcTable[(oldCrc ^ value) & 0xFF] ^ (oldCrc >> 8));
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\CRC32.cs,Update,The following statement contains a magic number: crc  = CrcTable[(crc ^ value) & 0xFF] ^ (crc >> 8);
Magic Number,ICSharpCode.SharpZipLib.Checksums,Crc32,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\CRC32.cs,Update,The following statement contains a magic number: while (--count >= 0) {  				crc = CrcTable[(crc ^ buffer[offset++]) & 0xFF] ^ (crc >> 8);  			}
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: int temp = (globalCrc >> 24) ^ value;
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: if (temp < 0) {  				temp = 256 + temp;  			}
Magic Number,ICSharpCode.SharpZipLib.Checksums,StrangeCRC,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Checksums\StrangeCRC.cs,Update,The following statement contains a magic number: globalCrc = unchecked((int)((globalCrc << 8) ^ crc32Table[temp]));
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\StreamUtils.cs,Copy,The following statement contains a magic number: if (buffer.Length < 128) {  				throw new ArgumentException("Buffer is too small"' "buffer");  			}
Magic Number,ICSharpCode.SharpZipLib.Core,StreamUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\StreamUtils.cs,Copy,The following statement contains a magic number: if (buffer.Length < 128) {  				throw new ArgumentException("Buffer is too small"' "buffer");  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Core,WindowsPathUtils,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Core\WindowsPathUtils.cs,DropPathRoot,The following statement contains a magic number: if ( (path != null) && (path.Length > 0) ) {  				if ((path[0] == '\\') || (path[0] == '/')) {  					// UNC name ?  					if ((path.Length > 1) && ((path[1] == '\\') || (path[1] == '/'))) {  						int index = 2;  						int elements = 2;    						// Scan for two separate elements \\machine\share\restofpath  						while ((index <= path.Length) &&  							(((path[index] != '\\') && (path[index] != '/')) || (--elements > 0))) {  							index++;  						}    						index++;    						if (index < path.Length) {  							result = path.Substring(index);  						}  						else {  							result = "";  						}  					}  				}  				else if ((path.Length > 1) && (path[1] == ':')) {  					int dropCount = 2;  					if ((path.Length > 2) && ((path[2] == '\\') || (path[2] == '/'))) {  						dropCount = 3;  					}  					result = result.Remove(0' dropCount);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i) {  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i) {  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i) {  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: for (int i = 0; i < seed.Length; ++i) {  				newKeys[0] = Crc32.ComputeCrc32(newKeys[0]' seed[i]);  				newKeys[1] = newKeys[1] + (byte)newKeys[0];  				newKeys[1] = newKeys[1] * 134775813 + 1;  				newKeys[2] = Crc32.ComputeCrc32(newKeys[2]' (byte)(newKeys[1] >> 24));  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: byte[] result = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[1] = (byte)((newKeys[0] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[2] = (byte)((newKeys[0] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[3] = (byte)((newKeys[0] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[4] = (byte)(newKeys[1] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[5] = (byte)((newKeys[1] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[6] = (byte)((newKeys[1] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[7] = (byte)((newKeys[1] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[8] = (byte)(newKeys[2] & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[9] = (byte)((newKeys[2] >> 8) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[10] = (byte)((newKeys[2] >> 16) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassic,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKeys,The following statement contains a magic number: result[11] = (byte)((newKeys[2] >> 24) & 0xff);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: uint temp = ((keys[2] & 0xFFFF) | 2);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,TransformByte,The following statement contains a magic number: return (byte)((temp * (temp ^ 1)) >> 8);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: if ( keyData.Length != 12 ) {  				throw new InvalidOperationException("Key length is not valid");  			}
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys = new uint[3];
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[0] = (uint)((keyData[3] << 24) | (keyData[2] << 16) | (keyData[1] << 8) | keyData[0]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[1] = (uint)((keyData[7] << 24) | (keyData[6] << 16) | (keyData[5] << 8) | keyData[4]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,SetKeys,The following statement contains a magic number: keys[2] = (uint)((keyData[11] << 24) | (keyData[10] << 16) | (keyData[9] << 8) | keyData[8]);
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[1] = keys[1] * 134775813 + 1;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,UpdateKeys,The following statement contains a magic number: keys[2] = Crc32.ComputeCrc32(keys[2]' (byte)(keys[1] >> 24));
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicCryptoBase,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,Reset,The following statement contains a magic number: keys[2] = 0;
Magic Number,ICSharpCode.SharpZipLib.Encryption,PkzipClassicManaged,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\PkzipClassic.cs,GenerateKey,The following statement contains a magic number: key_ = new byte[12];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESStream.cs,ZipAESStream,The following statement contains a magic number: _slideBuffer = new byte[1024];
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: if (blockSize != 16 && blockSize != 32)	// 24 valid for AES but not supported by Winzip  				throw new Exception("Invalid blocksize " + blockSize + ". Must be 16 or 32.");
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: if (blockSize != 16 && blockSize != 32)	// 24 valid for AES but not supported by Winzip  				throw new Exception("Invalid blocksize " + blockSize + ". Must be 16 or 32.");
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: if (saltBytes.Length != blockSize / 2)  				throw new Exception("Invalid salt len. Must be " + blockSize / 2 + " for blocksize " + blockSize);
Magic Number,ICSharpCode.SharpZipLib.Encryption,ZipAESTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Encryption\ZipAESTransform.cs,ZipAESTransform,The following statement contains a magic number: if (saltBytes.Length != blockSize / 2)  				throw new Exception("Invalid salt len. Must be " + blockSize / 2 + " for blocksize " + blockSize);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflater,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION) {  				level = 6;  			} else if (level < NO_COMPRESSION || level > BEST_COMPRESSION) {  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,SetLevel,The following statement contains a magic number: if (level == DEFAULT_COMPRESSION) {  				level = 6;  			} else if (level < NO_COMPRESSION || level > BEST_COMPRESSION) {  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: if (state < BUSY_STATE) {  				// output header  				int header = (DEFLATED +  					((DeflaterConstants.MAX_WBITS - 8) << 4)) << 8;  				int level_flags = (level - 1) >> 1;  				if (level_flags < 0 || level_flags > 3) {  					level_flags = 3;  				}  				header |= level_flags << 6;  				if ((state & IS_SETDICT) != 0) {  					// Dictionary was set  					header |= DeflaterConstants.PRESET_DICT;  				}  				header += 31 - (header % 31);  				  				pending.WriteShortMSB(header);  				if ((state & IS_SETDICT) != 0) {  					int chksum = engine.Adler;  					engine.ResetAdler();  					pending.WriteShortMSB(chksum >> 16);  					pending.WriteShortMSB(chksum & 0xffff);  				}  				  				state = BUSY_STATE | (state & (IS_FLUSHING | IS_FINISHING));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Deflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Deflater.cs,Deflate,The following statement contains a magic number: for (;;) {  				int count = pending.Flush(output' offset' length);  				offset   += count;  				totalOut += count;  				length   -= count;  				  				if (length == 0 || state == FINISHED_STATE) {  					break;  				}  				  				if (!engine.Deflate((state & IS_FLUSHING) != 0' (state & IS_FINISHING) != 0)) {  					if (state == BUSY_STATE) {  						// We need more input now  						return origLength - length;  					} else if (state == FLUSHING_STATE) {  						if (level != NO_COMPRESSION) {  							/* We have to supply some lookahead.  8 bit lookahead  							 * is needed by the zlib inflater' and we must fill  							 * the next byte' so that all bits are flushed.  							 */  							int neededbits = 8 + ((-pending.BitCount) & 7);  							while (neededbits > 0) {  								/* write a static tree block consisting solely of  								 * an EOF:  								 */  								pending.WriteBits(2' 10);  								neededbits -= 10;  							}  						}  						state = BUSY_STATE;  					} else if (state == FINISHING_STATE) {  						pending.AlignToByte();    						// Compressed data is complete.  Write footer information if required.  						if (!noZlibHeaderOrFooter) {  							int adler = engine.Adler;  							pending.WriteShortMSB(adler >> 16);  							pending.WriteShortMSB(adler & 0xffff);  						}  						state = FINISHED_STATE;  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflaterEngine,The following statement contains a magic number: window = new byte[2 * WSIZE];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,SetDictionary,The following statement contains a magic number: strstart += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,SetLevel,The following statement contains a magic number: if ( (level < 0) || (level > 9) )  			{  				throw new ArgumentOutOfRangeException("level");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FillWindow,The following statement contains a magic number: while (lookahead < DeflaterConstants.MIN_LOOKAHEAD && inputOff < inputEnd)   			{  				int more = 2 * WSIZE - lookahead - strstart;  				  				if (more > inputEnd - inputOff)   				{  					more = inputEnd - inputOff;  				}  				  				System.Array.Copy(inputBuf' inputOff' window' strstart + lookahead' more);  				adler.Update(inputBuf' inputOff' more);  				  				inputOff += more;  				totalIn  += more;  				lookahead += more;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: if (best_len >= this.goodLength) {  				chainLength >>= 2;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do {    #if DebugDeflation    				if (DeflaterConstants.DEBUGGING && (curMatch >= strstart) )  				{  					throw new InvalidOperationException("no future");  				}  #endif              				if (window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]) {  					continue;  				}  				  				match = curMatch + 2;  				scan += 2;  				  				/* We check for insufficient lookahead only every 8th comparison;  				* the 256th check will be made at strstart + 258.  				*/  				while (  					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend))  				{  					// Do nothing  				}  				  				if (scan > best_end) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && (ins_h == 0) )  						Console.Error.WriteLine("Found match: " + curMatch + "-" + (scan - strstart));  #endif  					matchStart = curMatch;  					best_end = scan;  					best_len = scan - strstart;  					  					if (best_len >= niceLength) {  						break;  					}  					  					scan_end1  = window[best_end - 1];  					scan_end   = window[best_end];  				}  				scan = strstart;  			} while ((curMatch = (prev[curMatch & WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,FindLongestMatch,The following statement contains a magic number: do {    #if DebugDeflation    				if (DeflaterConstants.DEBUGGING && (curMatch >= strstart) )  				{  					throw new InvalidOperationException("no future");  				}  #endif              				if (window[curMatch + best_len] != scan_end      ||   					window[curMatch + best_len - 1] != scan_end1 ||   					window[curMatch] != window[scan]             ||   					window[curMatch + 1] != window[scan + 1]) {  					continue;  				}  				  				match = curMatch + 2;  				scan += 2;  				  				/* We check for insufficient lookahead only every 8th comparison;  				* the 256th check will be made at strstart + 258.  				*/  				while (  					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&   					window[++scan] == window[++match] &&  					(scan < strend))  				{  					// Do nothing  				}  				  				if (scan > best_end) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && (ins_h == 0) )  						Console.Error.WriteLine("Found match: " + curMatch + "-" + (scan - strstart));  #endif  					matchStart = curMatch;  					best_end = scan;  					best_len = scan - strstart;  					  					if (best_len >= niceLength) {  						break;  					}  					  					scan_end1  = window[best_end - 1];  					scan_end   = window[best_end];  				}  				scan = strstart;  			} while ((curMatch = (prev[curMatch & WMASK] & 0xffff)) > limit && --chainLength != 0);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateFast,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					// We are flushing everything  					huffman.FlushBlock(window' blockStart' strstart - blockStart' finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart > 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int hashHead;  				if (lookahead >= MIN_MATCH &&   					(hashHead = InsertString()) != 0 &&   					strategy != DeflateStrategy.HuffmanOnly &&  					strstart - hashHead <= MAX_DIST &&   					FindLongestMatch(hashHead)) {  					// longestMatch sets matchStart and matchLen  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  						for (int i = 0 ; i < matchLen; i++) {  							if (window[strstart + i] != window[matchStart + i]) {  								throw new SharpZipBaseException("Match failure");  							}  						}  					}  #endif					    					bool full = huffman.TallyDist(strstart - matchStart' matchLen);    					lookahead -= matchLen;  					if (matchLen <= max_lazy && lookahead >= MIN_MATCH) {  						while (--matchLen > 0) {  							++strstart;  							InsertString();  						}  						++strstart;  					} else {  						strstart += matchLen;  						if (lookahead >= MIN_MATCH - 1) {  							UpdateHash();  						}  					}  					matchLen = MIN_MATCH - 1;  					if (!full) {  						continue;  					}  				} else {  					// No match found  					huffman.TallyLit(window[strstart] & 0xff);  					++strstart;  					--lookahead;  				}  				  				if (huffman.IsFull()) {  					bool lastBlock = finish && (lookahead == 0);  					huffman.FlushBlock(window' blockStart' strstart - blockStart' lastBlock);  					blockStart = strstart;  					return !lastBlock;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,DeflateSlow,The following statement contains a magic number: while (lookahead >= MIN_LOOKAHEAD || flush) {  				if (lookahead == 0) {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = false;  					  					// We are flushing everything  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING && !flush)   					{  						throw new SharpZipBaseException("Not flushing' but no lookahead");  					}  #endif                 					huffman.FlushBlock(window' blockStart' strstart - blockStart'  						finish);  					blockStart = strstart;  					return false;  				}  				  				if (strstart >= 2 * WSIZE - MIN_LOOKAHEAD) {  					/* slide window' as FindLongestMatch needs this.  					 * This should only happen when flushing and the window  					 * is almost full.  					 */  					SlideWindow();  				}  				  				int prevMatch = matchStart;  				int prevLen = matchLen;  				if (lookahead >= MIN_MATCH) {    					int hashHead = InsertString();    					if (strategy != DeflateStrategy.HuffmanOnly &&  						hashHead != 0 &&  						strstart - hashHead <= MAX_DIST &&  						FindLongestMatch(hashHead)) {  						  						// longestMatch sets matchStart and matchLen  							  						// Discard match if too small and too far away  						if (matchLen <= 5 && (strategy == DeflateStrategy.Filtered || (matchLen == MIN_MATCH && strstart - matchStart > TooFar))) {  							matchLen = MIN_MATCH - 1;  						}  					}  				}  				  				// previous match was better  				if ((prevLen >= MIN_MATCH) && (matchLen <= prevLen) ) {  #if DebugDeflation  					if (DeflaterConstants.DEBUGGING)   					{  					   for (int i = 0 ; i < matchLen; i++) {  						  if (window[strstart-1+i] != window[prevMatch + i])  							 throw new SharpZipBaseException();  						}  					}  #endif  					huffman.TallyDist(strstart - 1 - prevMatch' prevLen);  					prevLen -= 2;  					do {  						strstart++;  						lookahead--;  						if (lookahead >= MIN_MATCH) {  							InsertString();  						}  					} while (--prevLen > 0);    					strstart ++;  					lookahead--;  					prevAvailable = false;  					matchLen = MIN_MATCH - 1;  				} else {  					if (prevAvailable) {  						huffman.TallyLit(window[strstart-1] & 0xff);  					}  					prevAvailable = true;  					strstart++;  					lookahead--;  				}  				  				if (huffman.IsFull()) {  					int len = strstart - blockStart;  					if (prevAvailable) {  						len--;  					}  					bool lastBlock = (finish && (lookahead == 0) && !prevAvailable);  					huffman.FlushBlock(window' blockStart' len' lastBlock);  					blockStart += len;  					return !lastBlock;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 144) {  				staticLCodes[i] = BitReverse((0x030 + i) << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 256) {  				staticLCodes[i] = BitReverse((0x190 - 144 + i) << 7);  				staticLLength[i++] = 9;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < 280) {  				staticLCodes[i] = BitReverse((0x000 - 256 + i) << 9);  				staticLLength[i++] = 7;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: while (i < LITERAL_NUM) {  				staticLCodes[i] = BitReverse((0x0c0 - 280 + i)  << 8);  				staticLLength[i++] = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++) {  				staticDCodes[i] = BitReverse(i << 11);  				staticDLength[i] = 5;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: for (i = 0; i < DIST_NUM; i++) {  				staticDCodes[i] = BitReverse(i << 11);  				staticDLength[i] = 5;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: literalTree = new Tree(this' LITERAL_NUM' 257' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: distTree    = new Tree(this' DIST_NUM' 1' 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,DeflaterHuffman,The following statement contains a magic number: blTree      = new Tree(this' BITLEN_NUM' 4' 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(literalTree.numCodes - 257' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(distTree.numCodes - 1' 5);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: pending.WriteBits(blTreeCodes - 4' 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,SendAllTrees,The following statement contains a magic number: for (int rank = 0; rank < blTreeCodes; rank++) {  				pending.WriteBits(blTree.length[BL_ORDER[rank]]' 3);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CompressBlock,The following statement contains a magic number: for (int i = 0; i < last_lit; i++) {  				int litlen = l_buf[i] & 0xff;  				int dist = d_buf[i];  				if (dist-- != 0) {  					//					if (DeflaterConstants.DEBUGGING) {  					//						Console.Write("["+(dist+1)+"'"+(litlen+3)+"]: ");  					//					}  					  					int lc = Lcode(litlen);  					literalTree.WriteSymbol(lc);  					  					int bits = (lc - 261) / 4;  					if (bits > 0 && bits <= 5) {  						pending.WriteBits(litlen & ((1 << bits) - 1)' bits);  					}  					  					int dc = Dcode(dist);  					distTree.WriteSymbol(dc);  					  					bits = dc / 2 - 1;  					if (bits > 0) {  						pending.WriteBits(dist & ((1 << bits) - 1)' bits);  					}  				} else {  					//					if (DeflaterConstants.DEBUGGING) {  					//						if (litlen > 32 && litlen < 127) {  					//							Console.Write("("+(char)litlen+"): ");  					//						} else {  					//							Console.Write("{"+litlen+"}: ");  					//						}  					//					}  					literalTree.WriteSymbol(litlen);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushStoredBlock,The following statement contains a magic number: pending.WriteBits((DeflaterConstants.STORED_BLOCK << 1) + (lastBlock ? 1 : 0)' 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int blTreeCodes = 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: for (int i = 18; i > blTreeCodes; i--) {  				if (blTree.length[BL_ORDER[i]] > 0) {  					blTreeCodes = i+1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: int opt_len = 14 + blTreeCodes * 3 + blTree.GetEncodedLength() +   				literalTree.GetEncodedLength() + distTree.GetEncodedLength() +   				extra_bits;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,FlushBlock,The following statement contains a magic number: if (storedOffset >= 0 && storedLength + 4 < opt_len >> 3) {  				// Store Block    				//				if (DeflaterConstants.DEBUGGING) {  				//					//Console.WriteLine("Storing' since " + storedLength + " < " + opt_len  				//					                  + " <= " + static_len);  				//				}  				FlushStoredBlock(stored' storedOffset' storedLength' lastBlock);  			} else if (opt_len == static_len) {  				// Encode with static tree  				pending.WriteBits((DeflaterConstants.STATIC_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				literalTree.SetStaticCodes(staticLCodes' staticLLength);  				distTree.SetStaticCodes(staticDCodes' staticDLength);  				CompressBlock();  				Reset();  			} else {  				// Encode with dynamic tree  				pending.WriteBits((DeflaterConstants.DYN_TREES << 1) + (lastBlock ? 1 : 0)' 3);  				SendAllTrees(blTreeCodes);  				CompressBlock();  				Reset();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: l_buf[last_lit++] = (byte)(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: int lc = Lcode(length - 3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (lc >= 265 && lc < 285) {  				extra_bits += (lc - 261) / 4;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4) {  				extra_bits += dc / 2 - 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,TallyDist,The following statement contains a magic number: if (dc >= 4) {  				extra_bits += dc / 2 - 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255) {  				return 285;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: if (length == 255) {  				return 285;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: int code = 257;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8) {  				code += 4;  				length >>= 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Lcode,The following statement contains a magic number: while (length >= 8) {  				code += 4;  				length >>= 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4) {  				code += 2;  				distance >>= 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterHuffman,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,Dcode,The following statement contains a magic number: while (distance >= 4) {  				code += 2;  				distance >>= 1;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (int bits = 0; bits < maxLength; bits++) {  					nextCode[bits] = code;  					code += bl_counts[bits] << (15 - bits);    					//					if (DeflaterConstants.DEBUGGING) {  					//						//Console.WriteLine("bits: " + ( bits + 1) + " count: " + bl_counts[bits]  					//						                  +" nextCode: "+code);  					//					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildCodes,The following statement contains a magic number: for (int i=0; i < numCodes; i++) {  					int bits = length[i];  					if (bits > 0) {    						//						if (DeflaterConstants.DEBUGGING) {  						//								//Console.WriteLine("codes["+i+"] = rev(" + nextCode[bits-1]+")'  						//								                  +bits);  						//						}    						codes[i] = BitReverse(nextCode[bits-1]);  						nextCode[bits-1] += 1 << (16 - bits);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int n = 0; n < numSymbols; n++) {  					int freq = freqs[n];  					if (freq != 0) {  						// Insert n into heap  						int pos = heapLen++;  						int ppos;  						while (pos > 0 && freqs[heap[ppos = (pos - 1) / 2]] > freq) {  							heap[pos] = heap[ppos];  							pos = ppos;  						}  						heap[pos] = n;  						  						maxCode = n;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2) {  					int node = maxCode < 2 ? ++maxCode : 0;  					heap[heapLen++] = node;  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: while (heapLen < 2) {  					int node = maxCode < 2 ? ++maxCode : 0;  					heap[heapLen++] = node;  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] childs = new int[4 * heapLen - 2];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: int[] values = new int[2 * heapLen - 1];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < heapLen; i++) {  					int node = heap[i];  					childs[2 * i]   = node;  					childs[2 * i + 1] = -1;  					values[i] = freqs[node] << 8;  					heap[i] = i;  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: do {  					int first = heap[0];  					int last  = heap[--heapLen];  					  					// Propagate the hole to the leafs of the heap  					int ppos = 0;  					int path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = path * 2 + 1;  					}  						  					/* Now propagate the last element down along path.  Normally  					* it shouldn't go too deep.  					*/  					int lastVal = values[last];  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  					  					  					int second = heap[0];  					  					// Create a new node father of first and second  					last = numNodes++;  					childs[2 * last] = first;  					childs[2 * last + 1] = second;  					int mindepth = Math.Min(values[first] & 0xff' values[second] & 0xff);  					values[last] = lastVal = values[first] + values[second] - mindepth + 1;  					  					// Again' propagate the hole to the leafs  					ppos = 0;  					path = 1;  					  					while (path < heapLen) {  						if (path + 1 < heapLen && values[heap[path]] > values[heap[path+1]]) {  							path++;  						}  							  						heap[ppos] = heap[path];  						ppos = path;  						path = ppos * 2 + 1;  					}  						  					// Now propagate the new element down along path  					while ((path = ppos) > 0 && values[heap[ppos = (path - 1)/2]] > lastVal) {  						heap[path] = heap[ppos];  					}  					heap[path] = last;  				} while (heapLen > 1);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildTree,The following statement contains a magic number: if (heap[0] != childs.Length / 2 - 1) {  					throw new SharpZipBaseException("Heap invariant violated");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,CalcBLFreq,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.freqs[nextlen]++;  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						blTree.freqs[curlen] += (short)count;  					} else if (curlen != 0) {  						blTree.freqs[REP_3_6]++;  					} else if (count <= 10) {  						blTree.freqs[REP_3_10]++;  					} else {  						blTree.freqs[REP_11_138]++;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,WriteTree,The following statement contains a magic number: while (i < numCodes) {  					count = 1;  					int nextlen = length[i];  					if (nextlen == 0) {  						max_count = 138;  						min_count = 3;  					} else {  						max_count = 6;  						min_count = 3;  						if (curlen != nextlen) {  							blTree.WriteSymbol(nextlen);  							count = 0;  						}  					}  					curlen = nextlen;  					i++;  					  					while (i < numCodes && curlen == length[i]) {  						i++;  						if (++count >= max_count) {  							break;  						}  					}  					  					if (count < min_count) {  						while (count-- > 0) {  							blTree.WriteSymbol(curlen);  						}  					} else if (curlen != 0) {  						blTree.WriteSymbol(REP_3_6);  						dh.pending.WriteBits(count - 3' 2);  					} else if (count <= 10) {  						blTree.WriteSymbol(REP_3_10);  						dh.pending.WriteBits(count - 3' 3);  					} else {  						blTree.WriteSymbol(REP_11_138);  						dh.pending.WriteBits(count - 11' 7);  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numNodes = childs.Length / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int numLeafs = (numNodes + 1) / 2;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int i = numNodes - 1; i >= 0; i--) {  					if (childs[2 * i + 1] != -1) {  						int bitLength = lengths[i] + 1;  						if (bitLength > maxLength) {  							bitLength = maxLength;  							overflow++;  						}  						lengths[childs[2 * i]] = lengths[childs[2 * i + 1]] = bitLength;  					} else {  						// A leaf node  						int bitLength = lengths[i];  						bl_counts[bitLength - 1]++;  						this.length[childs[2*i]] = (byte) lengths[i];  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: bl_counts[maxLength-2] -= overflow;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: int nodePtr = 2 * numLeafs;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Tree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterHuffman.cs,BuildLength,The following statement contains a magic number: for (int bits = maxLength; bits != 0; bits--) {  					int n = bl_counts[bits-1];  					while (n > 0) {  						int childPtr = 2*childs[nodePtr++];  						if (childs[childPtr + 1] == -1) {  							// We found another leaf  							length[childs[childPtr]] = (byte) bits;  							n--;  						}  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if (header % 31 != 0) {  				throw new SharpZipBaseException("Header checksum illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0f00) != (Deflater.DEFLATED << 8)) {  				throw new SharpZipBaseException("Compression Method unknown");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: if ((header & 0x0020) == 0) { // Dictionary flag?  				mode = DECODE_BLOCKS;  			} else {  				mode = DECODE_DICT;  				neededBits = 32;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: while (neededBits > 0) {  				int dictByte = input.PeekBits(8);  				if (dictByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | dictByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: while (free >= 258)   			{  				int symbol;  				switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: while (neededBits > 0) {  				int chkByte = input.PeekBits(8);  				if (chkByte < 0) {  					return false;  				}  				input.DropBits(8);  				readAdler = (readAdler << 8) | chkByte;  				neededBits -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int type = input.PeekBits(3);  					if (type < 0) {  						return false;  					}  					input.DropBits(3);  					  					if ((type & 1) != 0) {  						isLastBlock = true;  					}  					switch (type >> 1){  						case DeflaterConstants.STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case DeflaterConstants.STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DeflaterConstants.DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + type);  					}  					return true;  				  				case DECODE_STORED_LEN1:   				{  					if ((uncomprLen = input.PeekBits(16)) < 0) {  						return false;  					}  					input.DropBits(16);  					mode = DECODE_STORED_LEN2;  				}  					goto case DECODE_STORED_LEN2; // fall through  					  				case DECODE_STORED_LEN2:   				{  					int nlen = input.PeekBits(16);  					if (nlen < 0) {  						return false;  					}  					input.DropBits(16);  					if (nlen != (uncomprLen ^ 0xffff)) {  						throw new SharpZipBaseException("broken uncompressed block");  					}  					mode = DECODE_STORED;  				}  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following statement contains a magic number: decode_loop:  				for (;;) {  					switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: try {  				byte[] codeLengths = new byte[288];  				int i = 0;  				while (i < 144) {  					codeLengths[i++] = 8;  				}  				while (i < 256) {  					codeLengths[i++] = 9;  				}  				while (i < 280) {  					codeLengths[i++] = 7;  				}  				while (i < 288) {  					codeLengths[i++] = 8;  				}  				defLitLenTree = new InflaterHuffmanTree(codeLengths);  				  				codeLengths = new byte[32];  				i = 0;  				while (i < 32) {  					codeLengths[i++] = 5;  				}  				defDistTree = new InflaterHuffmanTree(codeLengths);  			} catch (Exception) {  				throw new SharpZipBaseException("InflaterHuffmanTree: static tree length illegal");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = 1; bits <= MAX_BITLEN; bits++) {  				nextCode[bits] = code;  				code += blCount[bits] << (16 - bits);  				if (bits >= 10) {  					/* We need an extra table for bit lengths >= 10. */  					int start = nextCode[bits] & 0x1ff80;  					int end   = code & 0x1ff80;  					treeSize += (end - start) >> (16 - bits);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int bits = MAX_BITLEN; bits >= 10; bits--) {  				int end   = code & 0x1ff80;  				code -= blCount[bits] << (16 - bits);  				int start = code & 0x1ff80;  				for (int i = start; i < end; i += 1 << 7) {  					tree[DeflaterHuffman.BitReverse(i)] = (short) ((-treePtr << 4) | bits);  					treePtr += 1 << (bits-9);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: for (int i = 0; i < codeLengths.Length; i++) {  				int bits = codeLengths[i];  				if (bits == 0) {  					continue;  				}  				code = nextCode[bits];  				int revcode = DeflaterHuffman.BitReverse(code);  				if (bits <= 9) {  					do {  						tree[revcode] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < 512);  				} else {  					int subTree = tree[revcode & 511];  					int treeLen = 1 << (subTree & 15);  					subTree = -(subTree >> 4);  					do {  						tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);  						revcode += 1 << bits;  					} while (revcode < treeLen);  				}  				nextCode[bits] = code + (1 << (16 - bits));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: if ((lookahead = input.PeekBits(9)) >= 0) {  				if ((symbol = tree[lookahead]) >= 0) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				}  				int subtree = -(symbol >> 4);  				int bitlen = symbol & 15;  				if ((lookahead = input.PeekBits(bitlen)) >= 0) {  					symbol = tree[subtree | (lookahead >> 9)];  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					int bits = input.AvailableBits;  					lookahead = input.PeekBits(bits);  					symbol = tree[subtree | (lookahead >> 9)];  					if ((symbol & 15) <= bits) {  						input.DropBits(symbol & 15);  						return symbol >> 4;  					} else {  						return -1;  					}  				}  			} else {  				int bits = input.AvailableBits;  				lookahead = input.PeekBits(bits);  				symbol = tree[lookahead];  				if (symbol >= 0 && (symbol & 15) <= bits) {  					input.DropBits(symbol & 15);  					return symbol >> 4;  				} else {  					return -1;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteShort,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteInt,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (value >> 24));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (bitCount > 0)   			{  				buffer_[end++] = unchecked((byte) bits);  				if (bitCount > 8) {  					buffer_[end++] = unchecked((byte) (bits >> 8));  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,AlignToByte,The following statement contains a magic number: if (bitCount > 0)   			{  				buffer_[end++] = unchecked((byte) bits);  				if (bitCount > 8) {  					buffer_[end++] = unchecked((byte) (bits >> 8));  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteBits,The following statement contains a magic number: if (bitCount >= 16) {  				buffer_[end++] = unchecked((byte) bits);  				buffer_[end++] = unchecked((byte) (bits >> 8));  				bits >>= 16;  				bitCount -= 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,WriteShortMSB,The following statement contains a magic number: buffer_[end++] = unchecked((byte) (s >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,PendingBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\PendingBuffer.cs,Flush,The following statement contains a magic number: if (bitCount >= 8) {  				buffer_[end++] = unchecked((byte) bits);  				bits >>= 8;  				bitCount -= 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\DeflaterOutputStream.cs,DeflaterOutputStream,The following statement contains a magic number: if (bufferSize < 512) {  				throw new ArgumentOutOfRangeException("bufferSize");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,DeflaterOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\DeflaterOutputStream.cs,InitializeAESPassword,The following statement contains a magic number: int blockSize = entry.AESKeySize / 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if ( bufferSize < 1024 ) {  				bufferSize = 1024;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,InflaterInputBuffer,The following statement contains a magic number: if ( bufferSize < 1024 ) {  				bufferSize = 1024;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeShort,The following statement contains a magic number: return ReadLeByte() | (ReadLeByte() << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeInt,The following statement contains a magic number: return ReadLeShort() | (ReadLeShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputBuffer,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,ReadLeLong,The following statement contains a magic number: return (uint)ReadLeInt() | ((long)ReadLeInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,InflaterInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\InflaterInputStream.cs,Skip,The following statement contains a magic number: if (baseInputStream.CanSeek) {  				baseInputStream.Seek(count' SeekOrigin.Current);  				return count;  			}   			else {  				int length = 2048;  				if (count < length) {  					length = (int) count;  				}    				byte[] tmp = new byte[length];  				int readCount = 1;  				long toSkip = count;    				while ((toSkip > 0) && (readCount > 0) ) {  					if (toSkip < length) {  						length = (int)toSkip;  					}    					readCount = baseInputStream.Read(tmp' 0' length);  					toSkip -= readCount;  				}    				return count - toSkip;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (bitsInBuffer_ < bitCount) {  				if (windowStart_ == windowEnd_) {  					return -1; // ok  				}  				buffer_ |= (uint)((window_[windowStart_++] & 0xff |  								 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);  				bitsInBuffer_ += 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: if (bitsInBuffer_ < bitCount) {  				if (windowStart_ == windowEnd_) {  					return -1; // ok  				}  				buffer_ |= (uint)((window_[windowStart_++] & 0xff |  								 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);  				bitsInBuffer_ += 16;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if ((bitsInBuffer_ & 7) != 0) {  				// bits_in_buffer may only be 0 or a multiple of 8  				throw new InvalidOperationException("Bit buffer is not byte aligned!");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((bitsInBuffer_ > 0) && (length > 0)) {  				output[offset++] = (byte) buffer_;  				buffer_ >>= 8;  				bitsInBuffer_ -= 8;  				length--;  				count++;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: while ((bitsInBuffer_ > 0) && (length > 0)) {  				output[offset++] = (byte) buffer_;  				buffer_ >>= 8;  				bitsInBuffer_ -= 8;  				length--;  				count++;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: if (((windowStart_ - windowEnd_) & 1) != 0) {  				// We always want an even number of bytes in input' see peekBits  				buffer_ = (uint)(window_[windowStart_++] & 0xff);  				bitsInBuffer_ = 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: if ((count & 1) != 0) {  				// We always want an even number of bytes in input' see PeekBits  				buffer_ |= (uint)((buffer[offset++] & 0xff) << bitsInBuffer_);  				bitsInBuffer_ += 8;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,AddFileContents,The following statement contains a magic number: if( buffer_==null ) {  				buffer_=new byte[4096];  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,FastZip,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\FastZip.cs,ExtractFileEntry,The following statement contains a magic number: if ( proceed ) {  				if ( events_ != null ) {  					continueRunning_ = events_.OnProcessFile(entry.Name);  				}  			  				if ( continueRunning_ ) {  					try {  						using ( FileStream outputStream = File.Create(targetName) ) {  							if ( buffer_ == null ) {  								buffer_ = new byte[4096];  							}  							if ((events_ != null) && (events_.Progress != null))  							{  								StreamUtils.Copy(zipFile_.GetInputStream(entry)' outputStream' buffer_'  									events_.Progress' events_.ProgressInterval' this' entry.Name' entry.Size);  							}  							else  							{  								StreamUtils.Copy(zipFile_.GetInputStream(entry)' outputStream' buffer_);  							}  							  							if (events_ != null) {  								continueRunning_ = events_.OnCompletedFile(entry.Name);  							}  						}    #if !NETCF_1_0 && !NETCF_2_0  						if ( restoreDateTimeOnExtract_ ) {  							File.SetLastWriteTime(targetName' entry.DateTime);  						}  						  						if ( RestoreAttributesOnExtract && entry.IsDOSEntry && (entry.ExternalFileAttributes != -1)) {  							FileAttributes fileAttributes = (FileAttributes) entry.ExternalFileAttributes;  							// TODO: FastZip - Setting of other file attributes on extraction is a little trickier.  							fileAttributes &= (FileAttributes.Archive | FileAttributes.Normal | FileAttributes.ReadOnly | FileAttributes.Hidden);  							File.SetAttributes(targetName' fileAttributes);  						}  #endif						  					}  					catch(Exception ex) {  						if ( events_ != null ) {  							continueRunning_ = events_.OnFileFailure(targetName' ex);  						}  						else {                              continueRunning_ = false;                              throw;  						}  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 3;
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,WindowsNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\WindowsNameTransform.cs,WindowsNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = ':';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ZipEntry,The following statement contains a magic number: if ( (versionRequiredToExtract != 0) && (versionRequiredToExtract < 10) ) {  				throw new ArgumentOutOfRangeException("versionRequiredToExtract");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(0x0001) ) {                  // Version required to extract is ignored here as some archivers dont set it correctly                  // in theory it should be version 45 or higher    				// The recorded size will change but remember that this is zip64.  				forceZip64_ = true;    				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("Extra data extended Zip64 information length is invalid");  				}    				if ( localHeader || (size == uint.MaxValue) ) {  					size = (ulong)extraData.ReadLong();  				}    				if ( localHeader || (compressedSize == uint.MaxValue) ) {  					compressedSize = (ulong)extraData.ReadLong();  				}    				if ( !localHeader && (offset == uint.MaxValue) ) {  					offset = extraData.ReadLong();  				}                    // Disk number on which file starts is ignored  			}  			else {  				if (   					((versionToExtract & 0xff) >= ZipConstants.VersionZip64) &&  					((size == uint.MaxValue) || (compressedSize == uint.MaxValue))  				) {  					throw new ZipException("Zip64 Extended information required but is missing.");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessExtraData,The following statement contains a magic number: if ( extraData.Find(10) ) {  				// No room for any tags.  				if ( extraData.ValueLength < 4 ) {  					throw new ZipException("NTFS Extra data invalid");  				}    				extraData.ReadInt(); // Reserved    				while ( extraData.UnreadCount >= 4 ) {  					int ntfsTag = extraData.ReadShort();  					int ntfsLength = extraData.ReadShort();  					if ( ntfsTag == 1 ) {  						if ( ntfsLength >= 24 ) {  							long lastModification = extraData.ReadLong();  							long lastAccess = extraData.ReadLong();  							long createTime = extraData.ReadLong();    							DateTime = System.DateTime.FromFileTime(lastModification);  						}  						break;  					}  					else {  						// An unknown NTFS tag so simply skip it.  						extraData.Skip(ntfsLength);  					}  				}  			}  			else if ( extraData.Find(0x5455) ) {  				int length = extraData.ValueLength;	  				int flags = extraData.ReadByte();  					  				// Can include other times but these are ignored.  Length of data should  				// actually be 1 + 4 * no of bits in flags.  				if ( ((flags & 1) != 0) && (length >= 5) ) {  					int iTime = extraData.ReadInt();    					DateTime = (new System.DateTime ( 1970' 1' 1' 0' 0' 0 ).ToUniversalTime() +  						new TimeSpan ( 0' 0' 0' iTime' 0 )).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntry,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntry.cs,ProcessAESExtraData,The following statement contains a magic number: if (extraData.Find(0x9901)) {  				// Set version and flag for Zipfile.CreateAndInitDecryptionStream  				versionToExtract = ZipConstants.VERSION_AES;			// Ver 5.1 = AES see "Version" getter  				// Set StrongEncryption flag for ZipFile.CreateAndInitDecryptionStream  				Flags = Flags | (int)GeneralBitFlags.StrongEncryption;  				//  				// Unpack AES extra data field see http://www.winzip.com/aes_info.htm  				int length = extraData.ValueLength;			// Data size currently 7  				if (length < 7)  					throw new ZipException("AES Extra Data Length " + length + " invalid.");  				int ver = extraData.ReadShort();			// Version number (1=AE-1 2=AE-2)  				int vendorId = extraData.ReadShort();		// 2-character vendor ID 0x4541 = "AE"  				int encrStrength = extraData.ReadByte();	// encryption strength 1 = 128 2 = 192 3 = 256  				int actualCompress = extraData.ReadShort(); // The actual compression method used to compress the file  				_aesVer = ver;  				_aesEncryptionStrength = encrStrength;  				method = (CompressionMethod)actualCompress;  			} else  				throw new ZipException("AES Extra Data missing");
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipEntryFactory,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipEntryFactory.cs,MakeDirectoryEntry,The following statement contains a magic number: externalAttributes |= (setAttributes_ | 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				_flags = (Flags)helperStream.ReadByte();  				if (((_flags & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					_modificationTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((_flags & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_lastAccessTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((_flags & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_createTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				_flags = (Flags)helperStream.ReadByte();  				if (((_flags & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					_modificationTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((_flags & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_lastAccessTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((_flags & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_createTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				_flags = (Flags)helperStream.ReadByte();  				if (((_flags & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					_modificationTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((_flags & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_lastAccessTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((_flags & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_createTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				// bit 0           if set' modification time is present  				// bit 1           if set' access time is present  				// bit 2           if set' creation time is present  				  				_flags = (Flags)helperStream.ReadByte();  				if (((_flags & Flags.ModificationTime) != 0) && (count >= 5))  				{  					int iTime = helperStream.ReadLEInt();    					_modificationTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}    				if ((_flags & Flags.AccessTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_lastAccessTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  				  				if ((_flags & Flags.CreateTime) != 0)  				{  					int iTime = helperStream.ReadLEInt();    					_createTime = (new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime() +  						new TimeSpan(0' 0' 0' iTime' 0)).ToLocalTime();  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)_flags);     // Flags  				if ( (_flags & Flags.ModificationTime) != 0) {  					TimeSpan span = _modificationTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.AccessTime) != 0) {  					TimeSpan span = _lastAccessTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.CreateTime) != 0) {  					TimeSpan span = _createTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)_flags);     // Flags  				if ( (_flags & Flags.ModificationTime) != 0) {  					TimeSpan span = _modificationTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.AccessTime) != 0) {  					TimeSpan span = _lastAccessTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.CreateTime) != 0) {  					TimeSpan span = _createTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteByte((byte)_flags);     // Flags  				if ( (_flags & Flags.ModificationTime) != 0) {  					TimeSpan span = _modificationTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.AccessTime) != 0) {  					TimeSpan span = _lastAccessTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				if ( (_flags & Flags.CreateTime) != 0) {  					TimeSpan span = _createTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0).ToUniversalTime();  					int seconds = (int)span.TotalSeconds;  					helperStream.WriteLEInt(seconds);  				}  				return ms.ToArray();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,ExtendedUnixData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,IsValidValue,The following statement contains a magic number: return (( value >= new DateTime(1901' 12' 13' 20' 45' 52)) ||   					( value <= new DateTime(2038' 1' 19' 03' 14' 07) ));
Magic Number,ICSharpCode.SharpZipLib.Zip,NTTaggedData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream(data' index' count' false))   			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.ReadLEInt(); // Reserved  				while (helperStream.Position < helperStream.Length)  				{  					int ntfsTag = helperStream.ReadLEShort();  					int ntfsLength = helperStream.ReadLEShort();  					if (ntfsTag == 1)  					{  						if (ntfsLength >= 24)  						{  							long lastModificationTicks = helperStream.ReadLELong();  							_lastModificationTime = DateTime.FromFileTime(lastModificationTicks);    							long lastAccessTicks = helperStream.ReadLELong();  							_lastAccessTime = DateTime.FromFileTime(lastAccessTicks);    							long createTimeTicks = helperStream.ReadLELong();  							_createTime = DateTime.FromFileTime(createTimeTicks);  						}  						break;  					}  					else  					{  						// An unknown NTFS tag so simply skip it.  						helperStream.Seek(ntfsLength' SeekOrigin.Current);  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,NTTaggedData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,GetData,The following statement contains a magic number: using (MemoryStream ms = new MemoryStream())  			using (ZipHelperStream helperStream = new ZipHelperStream(ms))  			{  				helperStream.IsStreamOwner = false;  				helperStream.WriteLEInt(0);       // Reserved  				helperStream.WriteLEShort(1);     // Tag  				helperStream.WriteLEShort(24);    // Length = 3 x 8.  				helperStream.WriteLELong(_lastModificationTime.ToFileTime());  				helperStream.WriteLELong(_lastAccessTime.ToFileTime());  				helperStream.WriteLELong(_createTime.ToFileTime());  				return ms.ToArray();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,Find,The following statement contains a magic number: while ( (localTag != headerID) && (_index < _data.Length - 3) ) {  				localTag = ReadShortInternal();  				localLength = ReadShortInternal();  				if ( localTag != headerID ) {  					_index += localLength;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: int newLength = _data.Length + addLength + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,AddEntry,The following statement contains a magic number: if ( Find(headerID) )  			{  				newLength -= (ValueLength + 4);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,AddLeShort,The following statement contains a magic number: unchecked {  				_newEntry.WriteByte(( byte )toAdd);  				_newEntry.WriteByte(( byte )(toAdd >> 8));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,AddLeInt,The following statement contains a magic number: unchecked {  				AddLeShort(( short )toAdd);  				AddLeShort(( short )(toAdd >> 16));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,AddLeLong,The following statement contains a magic number: unchecked {  				AddLeInt(( int )(toAdd & 0xffffffff));  				AddLeInt(( int )(toAdd >> 32));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = _readValueStart - 4;    				byte[] newData = new byte[_data.Length - (ValueLength + 4)];  				Array.Copy(_data' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(_data' trueEnd' newData' trueStart' _data.Length - trueEnd);  				_data = newData;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = _readValueStart - 4;    				byte[] newData = new byte[_data.Length - (ValueLength + 4)];  				Array.Copy(_data' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(_data' trueEnd' newData' trueStart' _data.Length - trueEnd);  				_data = newData;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,Delete,The following statement contains a magic number: if ( Find(headerID) ) {  				result = true;  				int trueStart = _readValueStart - 4;    				byte[] newData = new byte[_data.Length - (ValueLength + 4)];  				Array.Copy(_data' 0' newData' 0' trueStart);    				int trueEnd = trueStart + ValueLength + 4;  				Array.Copy(_data' trueEnd' newData' trueStart' _data.Length - trueEnd);  				_data = newData;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: ReadCheck(8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadLong,The following statement contains a magic number: return (ReadInt() & 0xffffffff) | ((( long )ReadInt()) << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: ReadCheck(4);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +   				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +   				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +   				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +   				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8) +   				(_data[_index + 2] << 16) + (_data[_index + 3] << 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadInt,The following statement contains a magic number: _index += 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: ReadCheck(2);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShort,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: if ((_readValueStart > _data.Length) ||  				(_readValueStart < 4) ) {  				throw new ZipException("Find must be called before calling a Read method");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadCheck,The following statement contains a magic number: if ( _index + length < 4 ) {                  throw new ZipException("Cannot read before start of tag");              }
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: if ( _index > _data.Length - 2) {  				throw new ZipException("End of extra data");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: int result = _data[_index] + (_data[_index + 1] << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,ReadShortInternal,The following statement contains a magic number: _index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: _data[index + 1] = (byte)(source >> 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipExtraData,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipExtraData.cs,SetShort,The following statement contains a magic number: index += 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestArchive,The following statement contains a magic number: try {  				int entryIndex = 0;    				while ( testing && (entryIndex < Count) ) {  					if ( resultHandler != null ) {  						status.SetEntry(this[entryIndex]);  						status.SetOperation(TestOperation.EntryHeader);  						resultHandler(status' null);  					}    					try	{  						TestLocalHeader(this[entryIndex]' test);  					}  					catch(ZipException ex) {  						status.AddError();    						if ( resultHandler != null ) {  							resultHandler(status'  								string.Format("Exception during test - '{0}'"' ex.Message));  						}    						if ( strategy == TestStrategy.FindFirstError ) {  							testing = false;   						}  					}    					if ( testing && testData && this[entryIndex].IsFile ) {  						if ( resultHandler != null ) {  							status.SetOperation(TestOperation.EntryData);  							resultHandler(status' null);  						}                            Crc32 crc = new Crc32();                            using (Stream entryStream = this.GetInputStream(this[entryIndex]))                          {                                byte[] buffer = new byte[4096];                              long totalBytes = 0;                              int bytesRead;                              while ((bytesRead = entryStream.Read(buffer' 0' buffer.Length)) > 0)                              {                                  crc.Update(buffer' 0' bytesRead);                                    if (resultHandler != null)                                  {                                      totalBytes += bytesRead;                                      status.SetBytesTested(totalBytes);                                      resultHandler(status' null);                                  }                              }                          }    						if (this[entryIndex].Crc != crc.Value) {  							status.AddError();  							  							if ( resultHandler != null ) {  								resultHandler(status' "CRC mismatch");  							}    							if ( strategy == TestStrategy.FindFirstError ) {  								testing = false;  							}  						}    						if (( this[entryIndex].Flags & (int)GeneralBitFlags.Descriptor) != 0 ) {  							ZipHelperStream helper = new ZipHelperStream(baseStream_);  							DescriptorData data = new DescriptorData();  							helper.ReadDataDescriptor(this[entryIndex].LocalHeaderRequiresZip64' data);  							if (this[entryIndex].Crc != data.Crc) {  								status.AddError();  							}    							if (this[entryIndex].CompressedSize != data.CompressedSize) {  								status.AddError();  							}    							if (this[entryIndex].Size != data.Size) {  								status.AddError();  							}  						}  					}    					if ( resultHandler != null ) {  						status.SetOperation(TestOperation.EntryComplete);  						resultHandler(status' null);  					}    					entryIndex += 1;  				}    				if ( resultHandler != null ) {  					status.SetOperation(TestOperation.MiscellaneousTests);  					resultHandler(status' null);  				}    				// TODO: the 'Corrina Johns' test where local headers are missing from  				// the central directory.  They are therefore invisible to many archivers.  			}  			catch (Exception ex) {  				status.AddError();    				if ( resultHandler != null ) {  					resultHandler(status' string.Format("Exception during test - '{0}'"' ex.Message));  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,TestLocalHeader,The following statement contains a magic number: lock(baseStream_)   			{  				bool testHeader = (tests & HeaderTest.Header) != 0;  				bool testData = (tests & HeaderTest.Extract) != 0;    				baseStream_.Seek(offsetOfFirstEntry + entry.Offset' SeekOrigin.Begin);  				if ((int)ReadLEUint() != ZipConstants.LocalHeaderSignature) {  					throw new ZipException(string.Format("Wrong local header signature @{0:X}"' offsetOfFirstEntry + entry.Offset));  				}    				short extractVersion = ( short ) (ReadLEUshort() & 0x00ff);  				short localFlags = ( short )ReadLEUshort();  				short compressionMethod = ( short )ReadLEUshort();  				short fileTime = ( short )ReadLEUshort();  				short fileDate = ( short )ReadLEUshort();  				uint crcValue = ReadLEUint();  				long compressedSize = ReadLEUint();  				long size = ReadLEUint();  				int storedNameLength = ReadLEUshort();  				int extraDataLength = ReadLEUshort();    				byte[] nameData = new byte[storedNameLength];  				StreamUtils.ReadFully(baseStream_' nameData);    				byte[] extraData = new byte[extraDataLength];  				StreamUtils.ReadFully(baseStream_' extraData);    				ZipExtraData localExtraData = new ZipExtraData(extraData);    				// Extra data / zip64 checks  				if (localExtraData.Find(1))  				{  					// 2010-03-04 Forum 10512: removed checks for version >= ZipConstants.VersionZip64  					// and size or compressedSize = MaxValue' due to rogue creators.    					size = localExtraData.ReadLong();  					compressedSize = localExtraData.ReadLong();                        if ((localFlags & (int)GeneralBitFlags.Descriptor) != 0)                      {                          // These may be valid if patched later                          if ( (size != -1) && (size != entry.Size)) {                              throw new ZipException("Size invalid for descriptor");                          }                            if ((compressedSize != -1) && (compressedSize != entry.CompressedSize)) {                              throw new ZipException("Compressed size invalid for descriptor");                          }                      }                  }  				else  				{  					// No zip64 extra data but entry requires it.  					if ((extractVersion >= ZipConstants.VersionZip64) &&  						(((uint)size == uint.MaxValue) || ((uint)compressedSize == uint.MaxValue)))  					{  						throw new ZipException("Required Zip64 extended information missing");  					}  				}    				if ( testData ) {  					if ( entry.IsFile ) {  						if ( !entry.IsCompressionMethodSupported() ) {  							throw new ZipException("Compression method not supported");  						}    						if ( (extractVersion > ZipConstants.VersionMadeBy)  							|| ((extractVersion > 20) && (extractVersion < ZipConstants.VersionZip64)) ) {  							throw new ZipException(string.Format("Version required to extract this entry not supported ({0})"' extractVersion));  						}    						if ( (localFlags & ( int )(GeneralBitFlags.Patched | GeneralBitFlags.StrongEncryption | GeneralBitFlags.EnhancedCompress | GeneralBitFlags.HeaderMasked)) != 0 ) {  							throw new ZipException("The library does not support the zip version required to extract this entry");  						}  					}  				}                    if (testHeader)                  {                      if ((extractVersion <= 63) &&	// Ignore later versions as we dont know about them..                          (extractVersion != 10) &&                          (extractVersion != 11) &&                          (extractVersion != 20) &&                          (extractVersion != 21) &&                          (extractVersion != 25) &&                          (extractVersion != 27) &&                          (extractVersion != 45) &&                          (extractVersion != 46) &&                          (extractVersion != 50) &&                          (extractVersion != 51) &&                          (extractVersion != 52) &&                          (extractVersion != 61) &&                          (extractVersion != 62) &&                          (extractVersion != 63)                          )                      {                          throw new ZipException(string.Format("Version required to extract this entry is invalid ({0})"' extractVersion));                      }                        // Local entry flags dont have reserved bit set on.                      if ((localFlags & (int)(GeneralBitFlags.ReservedPKware4 | GeneralBitFlags.ReservedPkware14 | GeneralBitFlags.ReservedPkware15)) != 0)                      {                          throw new ZipException("Reserved bit flags cannot be set.");                      }                        // Encryption requires extract version >= 20                      if (((localFlags & (int)GeneralBitFlags.Encrypted) != 0) && (extractVersion < 20))                      {                          throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                      }                        // Strong encryption requires encryption flag to be set and extract version >= 50.                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if ((localFlags & (int)GeneralBitFlags.Encrypted) == 0)                          {                              throw new ZipException("Strong encryption flag set but encryption flag is not set");                          }                            if (extractVersion < 50)                          {                              throw new ZipException(string.Format("Version required to extract this entry is too low for encryption ({0})"' extractVersion));                          }                      }                        // Patched entries require extract version >= 27                      if (((localFlags & (int)GeneralBitFlags.Patched) != 0) && (extractVersion < 27))                      {                          throw new ZipException(string.Format("Patched data requires higher version than ({0})"' extractVersion));                      }                        // Central header flags match local entry flags.                      if (localFlags != entry.Flags)                      {                          throw new ZipException("Central header/local header flags mismatch");                      }                        // Central header compression method matches local entry                      if (entry.CompressionMethod != (CompressionMethod)compressionMethod)                      {                          throw new ZipException("Central header/local header compression method mismatch");                      }                        if (entry.Version != extractVersion)                      {                          throw new ZipException("Extract version mismatch");                      }                        // Strong encryption and extract version match                      if ((localFlags & (int)GeneralBitFlags.StrongEncryption) != 0)                      {                          if (extractVersion < 62)                          {                              throw new ZipException("Strong encryption flag set but version not high enough");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.HeaderMasked) != 0)                      {                          if ((fileTime != 0) || (fileDate != 0))                          {                              throw new ZipException("Header masked set but date/time values non-zero");                          }                      }                        if ((localFlags & (int)GeneralBitFlags.Descriptor) == 0)                      {                          if (crcValue != (uint)entry.Crc)                          {                              throw new ZipException("Central header/local header crc mismatch");                          }                      }                        // Crc valid for empty entry.                      // This will also apply to streamed entries where size isnt known and the header cant be patched                      if ((size == 0) && (compressedSize == 0))                      {                          if (crcValue != 0)                          {                              throw new ZipException("Invalid CRC for empty entry");                          }                      }                        // TODO: make test more correct...  can't compare lengths as was done originally as this can fail for MBCS strings                      // Assuming a code page at this point is not valid?  Best is to store the name length in the ZipEntry probably                      if (entry.Name.Length > storedNameLength)                      {                          throw new ZipException("File name length mismatch");                      }                        // Name data has already been read convert it and compare.                      string localName = ZipConstants.ConvertToStringExt(localFlags' nameData);                        // Central directory and local entry name match                      if (localName != entry.Name)                      {                          throw new ZipException("Central header and local header file name mismatch");                      }                        // Directories have zero actual size but can have compressed size                      if (entry.IsDirectory)                      {                          if (size > 0)                          {                              throw new ZipException("Directory cannot have size");                          }                            // There may be other cases where the compressed size can be greater than this?                          // If so until details are known we will be strict.                          if (entry.IsCrypted)                          {                              if (compressedSize > ZipConstants.CryptoHeaderSize + 2)                              {                                  throw new ZipException("Directory compressed size invalid");                              }                          }                          else if (compressedSize > 2)                          {                              // When not compressed the directory size can validly be 2 bytes                              // if the true size wasnt known when data was originally being written.                              // NOTE: Versions of the library 0.85.4 and earlier always added 2 bytes                              throw new ZipException("Directory compressed size invalid");                          }                      }                        if (!ZipNameTransform.IsValidName(localName' true))                      {                          throw new ZipException("Name is invalid");                      }                  }    				// Tests that apply to both data and header.    				// Size can be verified only if it is known in the local header.  				// it will always be known in the central header.  				if (((localFlags & (int)GeneralBitFlags.Descriptor) == 0) ||  					((size > 0) || (compressedSize > 0))) {    					if (size != entry.Size) {  						throw new ZipException(  							string.Format("Size mismatch between central header({0}) and local header({1})"'  								entry.Size' size));  					}    					if (compressedSize != entry.CompressedSize &&  						compressedSize != 0xFFFFFFFF && compressedSize != -1) {  						throw new ZipException(  							string.Format("Compressed size mismatch between central header({0}) and local header({1})"'  							entry.CompressedSize' compressedSize));  					}  				}    				int extraLength = storedNameLength + extraDataLength;  				return offsetOfFirstEntry + entry.Offset + ZipConstants.LocalHeaderBaseSize + extraLength;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLEShort,The following statement contains a magic number: baseStream_.WriteByte(( byte )((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLEUshort,The following statement contains a magic number: baseStream_.WriteByte(( byte )(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort((ushort)(value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLeLong,The following statement contains a magic number: WriteLEInt(( int )(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint(( uint )(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteCentralDirectoryHeader,The following statement contains a magic number: if ( entry.ExternalFileAttributes != -1 ) {  				WriteLEInt(entry.ExternalFileAttributes);  			}  			else {  				if ( entry.IsDirectory ) {  					WriteLEUint(16);  				}  				else {  					WriteLEUint(0);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ( (update.Entry.Flags & (int)GeneralBitFlags.Descriptor) != 0) {  				result = ZipConstants.DataDescriptorSize - 4;  				if ( update.Entry.LocalHeaderRequiresZip64 ) {  					result = ZipConstants.Zip64DataDescriptorSize - 4;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,GetDescriptorSize,The following statement contains a magic number: if ( (update.Entry.Flags & (int)GeneralBitFlags.Descriptor) != 0) {  				result = ZipConstants.DataDescriptorSize - 4;  				if ( update.Entry.LocalHeaderRequiresZip64 ) {  					result = ZipConstants.Zip64DataDescriptorSize - 4;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,GetOutputStream,The following statement contains a magic number: switch ( entry.CompressionMethod ) {  				case CompressionMethod.Stored:  					result = new UncompressedStream(result);  					break;    				case CompressionMethod.Deflated:  					DeflaterOutputStream dos = new DeflaterOutputStream(result' new Deflater(9' true));  					dos.IsStreamOwner = false;  					result = dos;  					break;    				default:  					throw new ZipException("Unknown compression method " + entry.CompressionMethod);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CopyEntryDirect,The following statement contains a magic number: const int NameLengthOffset = 26;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CopyEntry,The following statement contains a magic number: if ( update.Entry.CompressedSize > 0 ) {  				const int NameLengthOffset = 26;    				long entryDataOffset = update.Entry.Offset + NameLengthOffset;    				// TODO: This wont work for SFX files!  				baseStream_.Seek(entryDataOffset' SeekOrigin.Begin);    				uint nameLength = ReadLEUshort();  				uint extraLength = ReadLEUshort();    				baseStream_.Seek(nameLength + extraLength' SeekOrigin.Current);    				CopyBytes(update' workFile.baseStream_' baseStream_' update.Entry.CompressedSize' false);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,UpdateCommentOnly,The following statement contains a magic number: using ( updateFile ) {  				long locatedCentralDirOffset =   					updateFile.LocateBlockWithSignature(ZipConstants.EndOfCentralDirectorySignature'   														baseLength' ZipConstants.EndOfCentralRecordBaseSize' 0xffff);  				if ( locatedCentralDirOffset < 0 ) {  					throw new ZipException("Cannot find central directory");  				}    				const int CentralHeaderCommentSizeOffset = 16;  				updateFile.Position += CentralHeaderCommentSizeOffset;    				byte[] rawComment = newComment_.RawComment;    				updateFile.WriteLEShort(rawComment.Length);  				updateFile.Write(rawComment' 0' rawComment.Length);  				updateFile.SetLength(updateFile.Position);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadLEUshort,The following statement contains a magic number: return unchecked((ushort)((ushort)data1 | (ushort)(data2 << 8)));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadLEUint,The following statement contains a magic number: return (uint)(ReadLEUshort() | (ReadLEUshort() << 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadLEUlong,The following statement contains a magic number: return ReadLEUint() | ((ulong)ReadLEUint() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if ( !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long)centralDirSize)) ) {  				offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long)centralDirSize + offsetOfCentralDir);  				if (offsetOfFirstEntry <= 0) {  					throw new ZipException("Invalid embedded zip archive");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: if ( !isZip64 && (offsetOfCentralDir < locatedEndOfCentralDir - (4 + (long)centralDirSize)) ) {  				offsetOfFirstEntry = locatedEndOfCentralDir - (4 + (long)centralDirSize + offsetOfCentralDir);  				if (offsetOfFirstEntry <= 0) {  					throw new ZipException("Invalid embedded zip archive");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,ReadEntries,The following statement contains a magic number: for (ulong i = 0; i < entriesForThisDisk; i++) {  				if (ReadLEUint() != ZipConstants.CentralHeaderSignature) {  					throw new ZipException("Wrong Central Directory signature");  				}  				  				int versionMadeBy      = ReadLEUshort();  				int versionToExtract   = ReadLEUshort();  				int bitFlags           = ReadLEUshort();  				int method             = ReadLEUshort();  				uint dostime           = ReadLEUint();  				uint crc               = ReadLEUint();  				long csize             = (long)ReadLEUint();  				long size              = (long)ReadLEUint();  				int nameLen            = ReadLEUshort();  				int extraLen           = ReadLEUshort();  				int commentLen         = ReadLEUshort();  				  				int diskStartNo        = ReadLEUshort();  // Not currently used  				int internalAttributes = ReadLEUshort();  // Not currently used    				uint externalAttributes = ReadLEUint();  				long offset             = ReadLEUint();  				  				byte[] buffer = new byte[Math.Max(nameLen' commentLen)];  				  				StreamUtils.ReadFully(baseStream_' buffer' 0' nameLen);  				string name = ZipConstants.ConvertToStringExt(bitFlags' buffer' nameLen);  				  				ZipEntry entry = new ZipEntry(name' versionToExtract' versionMadeBy' (CompressionMethod)method);  				entry.Crc = crc & 0xffffffffL;  				entry.Size = size & 0xffffffffL;  				entry.CompressedSize = csize & 0xffffffffL;  				entry.Flags = bitFlags;  				entry.DosTime = (uint)dostime;  				entry.ZipFileIndex = (long)i;  				entry.Offset = offset;  				entry.ExternalFileAttributes = (int)externalAttributes;    				if ((bitFlags & 8) == 0) {  					entry.CryptoCheckValue = (byte)(crc >> 24);  				}  				else {  					entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  				}    				if (extraLen > 0) {  					byte[] extra = new byte[extraLen];  					StreamUtils.ReadFully(baseStream_' extra);  					entry.ExtraData = extra;  				}    				entry.ProcessExtraData(false);  				  				if (commentLen > 0) {  					StreamUtils.ReadFully(baseStream_' buffer' 0' commentLen);  					entry.Comment = ZipConstants.ConvertToStringExt(bitFlags' buffer' commentLen);  				}  				  				entries_[i] = entry;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CreateAndInitDecryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				result = new CryptoStream(baseStream' classicManaged.CreateDecryptor(key' null)' CryptoStreamMode.Read);  				CheckClassicPassword(result' entry);  			}  			else {  #if !NET_1_1 && !NETCF_2_0  				if (entry.Version == ZipConstants.VERSION_AES) {  					//  					OnKeysRequired(entry.Name);  					if (HaveKeys == false) {  						throw new ZipException("No password available for AES encrypted stream");  					}  					int saltLen = entry.AESSaltLen;  					byte[] saltBytes = new byte[saltLen];  					int saltIn = baseStream.Read(saltBytes' 0' saltLen);  					if (saltIn != saltLen)  						throw new ZipException("AES Salt expected " + saltLen + " got " + saltIn);  					//  					byte[] pwdVerifyRead = new byte[2];  					baseStream.Read(pwdVerifyRead' 0' 2);  					int blockSize = entry.AESKeySize / 8;	// bits to bytes    					ZipAESTransform decryptor = new ZipAESTransform(rawPassword_' saltBytes' blockSize' false);  					byte[] pwdVerifyCalc = decryptor.PwdVerifier;  					if (pwdVerifyCalc[0] != pwdVerifyRead[0] || pwdVerifyCalc[1] != pwdVerifyRead[1])  						throw new Exception("Invalid password for AES");  					result = new ZipAESStream(baseStream' decryptor' CryptoStreamMode.Read);  				}  				else  #endif  				{  					throw new ZipException("Decryption method not supported");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CreateAndInitDecryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				result = new CryptoStream(baseStream' classicManaged.CreateDecryptor(key' null)' CryptoStreamMode.Read);  				CheckClassicPassword(result' entry);  			}  			else {  #if !NET_1_1 && !NETCF_2_0  				if (entry.Version == ZipConstants.VERSION_AES) {  					//  					OnKeysRequired(entry.Name);  					if (HaveKeys == false) {  						throw new ZipException("No password available for AES encrypted stream");  					}  					int saltLen = entry.AESSaltLen;  					byte[] saltBytes = new byte[saltLen];  					int saltIn = baseStream.Read(saltBytes' 0' saltLen);  					if (saltIn != saltLen)  						throw new ZipException("AES Salt expected " + saltLen + " got " + saltIn);  					//  					byte[] pwdVerifyRead = new byte[2];  					baseStream.Read(pwdVerifyRead' 0' 2);  					int blockSize = entry.AESKeySize / 8;	// bits to bytes    					ZipAESTransform decryptor = new ZipAESTransform(rawPassword_' saltBytes' blockSize' false);  					byte[] pwdVerifyCalc = decryptor.PwdVerifier;  					if (pwdVerifyCalc[0] != pwdVerifyRead[0] || pwdVerifyCalc[1] != pwdVerifyRead[1])  						throw new Exception("Invalid password for AES");  					result = new ZipAESStream(baseStream' decryptor' CryptoStreamMode.Read);  				}  				else  #endif  				{  					throw new ZipException("Decryption method not supported");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CreateAndInitDecryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				result = new CryptoStream(baseStream' classicManaged.CreateDecryptor(key' null)' CryptoStreamMode.Read);  				CheckClassicPassword(result' entry);  			}  			else {  #if !NET_1_1 && !NETCF_2_0  				if (entry.Version == ZipConstants.VERSION_AES) {  					//  					OnKeysRequired(entry.Name);  					if (HaveKeys == false) {  						throw new ZipException("No password available for AES encrypted stream");  					}  					int saltLen = entry.AESSaltLen;  					byte[] saltBytes = new byte[saltLen];  					int saltIn = baseStream.Read(saltBytes' 0' saltLen);  					if (saltIn != saltLen)  						throw new ZipException("AES Salt expected " + saltLen + " got " + saltIn);  					//  					byte[] pwdVerifyRead = new byte[2];  					baseStream.Read(pwdVerifyRead' 0' 2);  					int blockSize = entry.AESKeySize / 8;	// bits to bytes    					ZipAESTransform decryptor = new ZipAESTransform(rawPassword_' saltBytes' blockSize' false);  					byte[] pwdVerifyCalc = decryptor.PwdVerifier;  					if (pwdVerifyCalc[0] != pwdVerifyRead[0] || pwdVerifyCalc[1] != pwdVerifyRead[1])  						throw new Exception("Invalid password for AES");  					result = new ZipAESStream(baseStream' decryptor' CryptoStreamMode.Read);  				}  				else  #endif  				{  					throw new ZipException("Decryption method not supported");  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				// Closing a CryptoStream will close the base stream as well so wrap it in an UncompressedStream  				// which doesnt do this.  				result = new CryptoStream(new UncompressedStream(baseStream)'  					classicManaged.CreateEncryptor(key' null)' CryptoStreamMode.Write);    				if ( (entry.Crc < 0) || (entry.Flags & 8) != 0) {  					WriteEncryptionHeader(result' entry.DosTime << 16);  				}  				else {  					WriteEncryptionHeader(result' entry.Crc);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,CreateAndInitEncryptionStream,The following statement contains a magic number: if ( (entry.Version < ZipConstants.VersionStrongEncryption)  				|| (entry.Flags & (int)GeneralBitFlags.StrongEncryption) == 0) {  				PkzipClassicManaged classicManaged = new PkzipClassicManaged();    				OnKeysRequired(entry.Name);  				if (HaveKeys == false) {  					throw new ZipException("No password available for encrypted stream");  				}    				// Closing a CryptoStream will close the base stream as well so wrap it in an UncompressedStream  				// which doesnt do this.  				result = new CryptoStream(new UncompressedStream(baseStream)'  					classicManaged.CreateEncryptor(key' null)' CryptoStreamMode.Write);    				if ( (entry.Crc < 0) || (entry.Flags & 8) != 0) {  					WriteEncryptionHeader(result' entry.DosTime << 16);  				}  				else {  					WriteEncryptionHeader(result' entry.Crc);  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,MakeTemporaryCopy,The following statement contains a magic number: StreamUtils.Copy(stream' temporaryStream_' new byte[4096]);
Magic Number,ICSharpCode.SharpZipLib.Zip,MemoryArchiveStorage,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,OpenForDirectUpdate,The following statement contains a magic number: if ((stream == null) || !stream.CanWrite) {    				result = new MemoryStream();    				if (stream != null) {  					stream.Position = 0;  					StreamUtils.Copy(stream' result' new byte[4096]);    					stream.Close();  				}  			}  			else {  				result = stream;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteZip64EndOfCentralDirectory,The following statement contains a magic number: WriteLELong(44);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,ReadLEShort,The following statement contains a magic number: return byteValue1 | (byteValue2 << 8);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,ReadLEInt,The following statement contains a magic number: return ReadLEShort() | (ReadLEShort() << 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,ReadLELong,The following statement contains a magic number: return (uint)ReadLEInt() | ((long)ReadLEInt() << 32);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLEShort,The following statement contains a magic number: stream_.WriteByte(( byte )((value >> 8) & 0xff));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLEUshort,The following statement contains a magic number: stream_.WriteByte(( byte )(value >> 8));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLEInt,The following statement contains a magic number: WriteLEShort(value >> 16);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLEUint,The following statement contains a magic number: WriteLEUshort(( ushort )(value >> 16));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLELong,The following statement contains a magic number: WriteLEInt(( int )(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteLEUlong,The following statement contains a magic number: WriteLEUint(( uint )(value >> 32));
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipHelperStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipHelperStream.cs,WriteDataDescriptor,The following statement contains a magic number: if ((entry.Flags & (int)GeneralBitFlags.Descriptor) != 0)  			{  				// The signature is not PKZIP originally but is now described as optional  				// in the PKZIP Appnote documenting trhe format.  				WriteLEInt(ZipConstants.DataDescriptorSignature);  				WriteLEInt(unchecked((int)(entry.Crc)));    				result+=8;    				if (entry.LocalHeaderRequiresZip64)  				{  					WriteLELong(entry.CompressedSize);  					WriteLELong(entry.Size);  					result+=16;  				}  				else  				{  					WriteLEInt((int)entry.CompressedSize);  					WriteLEInt((int)entry.Size);  					result+=8;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: if ((flags & 8) == 0) {  				entry.Crc  = crc2 & 0xFFFFFFFFL;  				entry.Size = size & 0xFFFFFFFFL;  				entry.CompressedSize = csize & 0xFFFFFFFFL;    				entry.CryptoCheckValue = (byte)((crc2 >> 24) & 0xff);    			} else {  				  				// This allows for GNU' WinZip and possibly other archives' the PKZIP spec  				// says these values are zero under these circumstances.  				if (crc2 != 0) {  					entry.Crc = crc2 & 0xFFFFFFFFL;  				}  				  				if (size != 0) {  					entry.Size = size & 0xFFFFFFFFL;  				}    				if (csize != 0) {  					entry.CompressedSize = csize & 0xFFFFFFFFL;  				}    				entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: if ((flags & 8) == 0) {  				entry.Crc  = crc2 & 0xFFFFFFFFL;  				entry.Size = size & 0xFFFFFFFFL;  				entry.CompressedSize = csize & 0xFFFFFFFFL;    				entry.CryptoCheckValue = (byte)((crc2 >> 24) & 0xff);    			} else {  				  				// This allows for GNU' WinZip and possibly other archives' the PKZIP spec  				// says these values are zero under these circumstances.  				if (crc2 != 0) {  					entry.Crc = crc2 & 0xFFFFFFFFL;  				}  				  				if (size != 0) {  					entry.Size = size & 0xFFFFFFFFL;  				}    				if (csize != 0) {  					entry.CompressedSize = csize & 0xFFFFFFFFL;  				}    				entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,GetNextEntry,The following statement contains a magic number: if ((flags & 8) == 0) {  				entry.Crc  = crc2 & 0xFFFFFFFFL;  				entry.Size = size & 0xFFFFFFFFL;  				entry.CompressedSize = csize & 0xFFFFFFFFL;    				entry.CryptoCheckValue = (byte)((crc2 >> 24) & 0xff);    			} else {  				  				// This allows for GNU' WinZip and possibly other archives' the PKZIP spec  				// says these values are zero under these circumstances.  				if (crc2 != 0) {  					entry.Crc = crc2 & 0xFFFFFFFFL;  				}  				  				if (size != 0) {  					entry.Size = size & 0xFFFFFFFFL;  				}    				if (csize != 0) {  					entry.CompressedSize = csize & 0xFFFFFFFFL;  				}    				entry.CryptoCheckValue = (byte)((dostime >> 8) & 0xff);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,CompleteCloseEntry,The following statement contains a magic number: if ((flags & 8) != 0) {  				ReadDataDescriptor();  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: if (method == (int)CompressionMethod.Deflated) {  				if ((flags & 8) != 0) {  					// We don't know how much we must skip' read until end.  					byte[] tmp = new byte[4096];    					// Read will close this entry  					while (Read(tmp' 0' tmp.Length) > 0) {  					}  					return;  				}    				csize -= inf.TotalIn;  				inputBuffer.Available += inf.RemainingInput;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,CloseEntry,The following statement contains a magic number: if (method == (int)CompressionMethod.Deflated) {  				if ((flags & 8) != 0) {  					// We don't know how much we must skip' read until end.  					byte[] tmp = new byte[4096];    					// Read will close this entry  					while (Read(tmp' 0' tmp.Length) > 0) {  					}  					return;  				}    				csize -= inf.TotalIn;  				inputBuffer.Available += inf.RemainingInput;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,BodyRead,The following statement contains a magic number: switch (method) {  				case (int)CompressionMethod.Deflated:  					count = base.Read(buffer' offset' count);  					if (count <= 0) {  						if (!inf.IsFinished) {  							throw new ZipException("Inflater not finished!");  						}  						inputBuffer.Available = inf.RemainingInput;    						// A csize of -1 is from an unpatched local header  						if ((flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)) {  							throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" + inf.TotalOut);  						}  						inf.Reset();  						finished = true;  					}  					break;  					  				case (int)CompressionMethod.Stored:  					if ( (count > csize) && (csize >= 0) ) {  						count = (int)csize;  					}  					  					if ( count > 0 ) {  						count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);  						if (count > 0) {  							csize -= count;  							size -= count;  						}  					}  					  					if (csize == 0) {  						finished = true;  					} else {  						if (count < 0) {  							throw new ZipException("EOF in stored block");  						}  					}  					break;  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: int howMany = invalidPathChars.Length + 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryCharsRelaxed[howMany - 2] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: howMany = invalidPathChars.Length + 4;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 2] = '\\';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 3] = '*';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipNameTransform,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipNameTransform.cs,ZipNameTransform,The following statement contains a magic number: InvalidEntryChars[howMany - 4] = '?';
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,WriteLeShort,The following statement contains a magic number: unchecked {  				baseOutputStream_.WriteByte((byte)(value & 0xff));  				baseOutputStream_.WriteByte((byte)((value >> 8) & 0xff));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,WriteLeInt,The following statement contains a magic number: unchecked {  				WriteLeShort(value);  				WriteLeShort(value >> 16);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,WriteLeLong,The following statement contains a magic number: unchecked {  				WriteLeInt((int)value);  				WriteLeInt((int)(value >> 32));  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (headerInfoAvailable == false) {  				if (CanPatchEntries == false) {  					// Only way to record size and compressed size is to append a data descriptor  					// after compressed data.    					// Stored entries of this form have already been converted to deflating.  					entry.Flags |= 8;  				} else {  					patchEntryHeader = true;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (Password != null) {  				entry.IsCrypted = true;  				if (entry.Crc < 0) {  					// Need to append a data descriptor as the crc isnt available for use  					// with encryption' the date is used instead.  Setting the flag  					// indicates this to the decompressor.  					entry.Flags |= 8;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,PutNextEntry,The following statement contains a magic number: if (entry.IsCrypted) {  #if !NET_1_1 && !NETCF_2_0  				if (entry.AESKeySize > 0) {  					WriteAESHeader(entry);  				} else  #endif  				{  					if (entry.Crc < 0) {			// so testing Zip will says its ok  						WriteEncryptionHeader(entry.DosTime << 16);  					} else {  						WriteEncryptionHeader(entry.Crc);  					}  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: if (curEntry.AESKeySize > 0) {  				baseOutputStream_.Write(AESAuthCode' 0' 10);  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,CloseEntry,The following statement contains a magic number: if ((curEntry.Flags & 8) != 0) {  				WriteLeInt(ZipConstants.DataDescriptorSignature);  				WriteLeInt(unchecked((int)curEntry.Crc));  				  				if ( curEntry.LocalHeaderRequiresZip64 ) {  					WriteLeLong(curEntry.CompressedSize);  					WriteLeLong(curEntry.Size);  					offset += ZipConstants.Zip64DataDescriptorSize;  				}  				else {  					WriteLeInt((int)curEntry.CompressedSize);  					WriteLeInt((int)curEntry.Size);  					offset += ZipConstants.DataDescriptorSize;  				}  			}
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,WriteEncryptionHeader,The following statement contains a magic number: cryptBuffer[11] = (byte)(crcValue >> 24);
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,AddExtraDataAES,The following statement contains a magic number: const int VENDOR_VERSION = 2;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,CopyAndEncrypt,The following statement contains a magic number: const int CopyBufferSize = 4096;
Magic Number,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,Finish,The following statement contains a magic number: foreach (ZipEntry entry in entries) {  				WriteLeInt(ZipConstants.CentralHeaderSignature);   				WriteLeShort(ZipConstants.VersionMadeBy);  				WriteLeShort(entry.Version);  				WriteLeShort(entry.Flags);  				WriteLeShort((short)entry.CompressionMethodForHeader);  				WriteLeInt((int)entry.DosTime);  				WriteLeInt((int)entry.Crc);    				if ( entry.IsZip64Forced() ||   					(entry.CompressedSize >= uint.MaxValue) )  				{  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.CompressedSize);  				}    				if ( entry.IsZip64Forced() ||  					(entry.Size >= uint.MaxValue) )  				{  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.Size);  				}    				byte[] name = ZipConstants.ConvertToArray(entry.Flags' entry.Name);  				  				if (name.Length > 0xffff) {  					throw new ZipException("Name too long.");  				}  				  				ZipExtraData ed = new ZipExtraData(entry.ExtraData);    				if ( entry.CentralHeaderRequiresZip64 ) {  					ed.StartNewEntry();  					if ( entry.IsZip64Forced() ||  						(entry.Size >= 0xffffffff) )  					{  						ed.AddLeLong(entry.Size);  					}    					if ( entry.IsZip64Forced() ||  						(entry.CompressedSize >= 0xffffffff) )  					{  						ed.AddLeLong(entry.CompressedSize);  					}    					if ( entry.Offset >= 0xffffffff )  					{  						ed.AddLeLong(entry.Offset);  					}    					ed.AddNewEntry(1);  				}  				else {  					ed.Delete(1);  				}    #if !NET_1_1 && !NETCF_2_0  				if (entry.AESKeySize > 0) {  					AddExtraDataAES(entry' ed);  				}  #endif  				byte[] extra = ed.GetEntryData();  				  				byte[] entryComment =   					(entry.Comment != null) ?   					ZipConstants.ConvertToArray(entry.Flags' entry.Comment) :  					new byte[0];    				if (entryComment.Length > 0xffff) {  					throw new ZipException("Comment too long.");  				}  				  				WriteLeShort(name.Length);  				WriteLeShort(extra.Length);  				WriteLeShort(entryComment.Length);  				WriteLeShort(0);	// disk number  				WriteLeShort(0);	// internal file attributes  									// external file attributes    				if (entry.ExternalFileAttributes != -1) {  					WriteLeInt(entry.ExternalFileAttributes);  				} else {  					if (entry.IsDirectory) {                         // mark entry as directory (from nikolam.AT.perfectinfo.com)  						WriteLeInt(16);  					} else {  						WriteLeInt(0);  					}  				}    				if ( entry.Offset >= uint.MaxValue ) {  					WriteLeInt(-1);  				}  				else {  					WriteLeInt((int)entry.Offset);  				}  				  				if ( name.Length > 0 ) {  					baseOutputStream_.Write(name'    0' name.Length);  				}    				if ( extra.Length > 0 ) {  					baseOutputStream_.Write(extra'   0' extra.Length);  				}    				if ( entryComment.Length > 0 ) {  					baseOutputStream_.Write(entryComment' 0' entryComment.Length);  				}    				sizeEntries += ZipConstants.CentralHeaderBaseSize + name.Length + extra.Length + entryComment.Length;  			}
Missing Default,CocosSharp,IMEKeyboardImpl,C:\repos\mono_CocosSharp\src\platform\Keyboard\Windows\IMEKeyboardImpl.cs,ConvertKey,The following switch statement is missing a default case: switch (key)              {                    case CCKeys.A: return ConvertToChar('a'' shift' capsLock);                  case CCKeys.B: return ConvertToChar('b'' shift' capsLock);                  case CCKeys.C: return ConvertToChar('c'' shift' capsLock);                  case CCKeys.D: return ConvertToChar('d'' shift' capsLock);                  case CCKeys.E: return ConvertToChar('e'' shift' capsLock);                  case CCKeys.F: return ConvertToChar('f'' shift' capsLock);                  case CCKeys.G: return ConvertToChar('g'' shift' capsLock);                  case CCKeys.H: return ConvertToChar('h'' shift' capsLock);                  case CCKeys.I: return ConvertToChar('i'' shift' capsLock);                  case CCKeys.J: return ConvertToChar('j'' shift' capsLock);                  case CCKeys.K: return ConvertToChar('k'' shift' capsLock);                  case CCKeys.L: return ConvertToChar('l'' shift' capsLock);                  case CCKeys.M: return ConvertToChar('m'' shift' capsLock);                  case CCKeys.N: return ConvertToChar('n'' shift' capsLock);                  case CCKeys.O: return ConvertToChar('o'' shift' capsLock);                  case CCKeys.P: return ConvertToChar('p'' shift' capsLock);                  case CCKeys.Q: return ConvertToChar('q'' shift' capsLock);                  case CCKeys.R: return ConvertToChar('r'' shift' capsLock);                  case CCKeys.S: return ConvertToChar('s'' shift' capsLock);                  case CCKeys.T: return ConvertToChar('t'' shift' capsLock);                  case CCKeys.U: return ConvertToChar('u'' shift' capsLock);                  case CCKeys.V: return ConvertToChar('v'' shift' capsLock);                  case CCKeys.W: return ConvertToChar('w'' shift' capsLock);                  case CCKeys.X: return ConvertToChar('x'' shift' capsLock);                  case CCKeys.Y: return ConvertToChar('y'' shift' capsLock);                  case CCKeys.Z: return ConvertToChar('z'' shift' capsLock);                    case CCKeys.D0: return (shift) ? ')' : '0';                  case CCKeys.D1: return (shift) ? '!' : '1';                  case CCKeys.D2: return (shift) ? '@' : '2';                  case CCKeys.D3: return (shift) ? '#' : '3';                  case CCKeys.D4: return (shift) ? '$' : '4';                  case CCKeys.D5: return (shift) ? '%' : '5';                  case CCKeys.D6: return (shift) ? '^' : '6';                  case CCKeys.D7: return (shift) ? '&' : '7';                  case CCKeys.D8: return (shift) ? '*' : '8';                  case CCKeys.D9: return (shift) ? '(' : '9';                    case CCKeys.Add: return '+';                  case CCKeys.Divide: return '/';                  case CCKeys.Multiply: return '*';                  case CCKeys.Subtract: return '-';                    case CCKeys.Space: return ' ';                  case CCKeys.Enter: return '\n';                    case CCKeys.Decimal: if (numLock && !shift) return '.'; break;                  case CCKeys.NumPad0: if (numLock && !shift) return '0'; break;                  case CCKeys.NumPad1: if (numLock && !shift) return '1'; break;                  case CCKeys.NumPad2: if (numLock && !shift) return '2'; break;                  case CCKeys.NumPad3: if (numLock && !shift) return '3'; break;                  case CCKeys.NumPad4: if (numLock && !shift) return '4'; break;                  case CCKeys.NumPad5: if (numLock && !shift) return '5'; break;                  case CCKeys.NumPad6: if (numLock && !shift) return '6'; break;                  case CCKeys.NumPad7: if (numLock && !shift) return '7'; break;                  case CCKeys.NumPad8: if (numLock && !shift) return '8'; break;                  case CCKeys.NumPad9: if (numLock && !shift) return '9'; break;                    case CCKeys.OemBackslash: return shift ? '|' : '\\';                  case CCKeys.OemCloseBrackets: return shift ? '}' : ']';                  case CCKeys.OemComma: return shift ? '<' : ''';                  case CCKeys.OemMinus: return shift ? '_' : '-';                  case CCKeys.OemOpenBrackets: return shift ? '{' : '[';                  case CCKeys.OemPeriod: return shift ? '>' : '.';                  case CCKeys.OemPipe: return shift ? '|' : '\\';                  case CCKeys.OemPlus: return shift ? '+' : '=';                  case CCKeys.OemQuestion: return shift ? '?' : '/';                  case CCKeys.OemQuotes: return shift ? '"' : '\'';                  case CCKeys.OemSemicolon: return shift ? ':' : ';';                  case CCKeys.OemTilde: return shift ? '~' : '`';              }
Missing Default,CocosSharp,CCDrawManager,C:\repos\mono_CocosSharp\src\platform\CCDrawManager.cs,InitializeGraphicsDevice,The following switch statement is missing a default case: switch(s)                   {                  case "GL_OES_depth24":                      platformDepthFormat = CCDepthFormat.Depth24;                      break;                  case "GL_IMG_texture_npot":                      allowNonPower2Textures = true;                      break;                  case "GL_NV_depth_nonlinear":                       // nVidia Depth 16 non-linear                      platformDepthFormat = CCDepthFormat.Depth16;                      break;                  case "GL_NV_texture_npot_2D_mipmap":                // nVidia - nPot textures and mipmaps                      allowNonPower2Textures = true;                      break;                  }
Missing Default,CocosSharp,CCOGLES,C:\repos\mono_CocosSharp\src\platform\CCOGLES.cs,GetXNABlend,The following switch statement is missing a default case: switch (glBlend)              {                  case GL_ZERO:                      return Blend.Zero;                  case GL_ONE:                      return Blend.One;                  case GL_SRC_COLOR:                      return Blend.SourceColor;                  case GL_ONE_MINUS_SRC_COLOR:                      return Blend.InverseSourceColor;                  case GL_SRC_ALPHA:                      return Blend.SourceAlpha;                  case GL_ONE_MINUS_SRC_ALPHA:                      return Blend.InverseSourceAlpha;                  case GL_DST_ALPHA:                      return Blend.DestinationAlpha;                  case GL_ONE_MINUS_DST_ALPHA:                      return Blend.InverseDestinationAlpha;                    /* BlendingFactorSrc */                  /*      GL_ZERO */                  /*      GL_ONE */                  case GL_DST_COLOR:                      return Blend.DestinationColor;                  case GL_ONE_MINUS_DST_COLOR:                      return Blend.InverseDestinationColor;                  case GL_SRC_ALPHA_SATURATE:                      return Blend.SourceAlphaSaturation;              }
Missing Default,CocosSharp,PlistDocument,C:\repos\mono_CocosSharp\src\platform\PList\PlistDocument.cs,ParseBinary,The following switch statement is missing a default case: switch (header & 0xF0)  			{  				case 0:  			{  				//If the byte is  				//0 return null  				//9 return true  				//8 return false  				if (objectTable [offsetTable [objRef]] == 0)  					return new PlistNull ();  				else   					if (objectTable[offsetTable[objRef]] == 9)  				    	return new PlistBoolean(true);  					else  						return new PlistBoolean(false);    			}  				case 0x10:  			{  				return ParseBinaryInt(offsetTable[objRef]);  			}  				case 0x20:  			{  				return ParseBinaryReal(offsetTable[objRef]);  			}  				case 0x30:  			{  				return ParseBinaryDate(offsetTable[objRef]);  			}  				case 0x40:  			{  				return ParseBinaryByteArray(offsetTable[objRef]);  			}  				case 0x50://String ASCII  			{  				return ParseBinaryAsciiString(offsetTable[objRef]);  			}  				case 0x60://String Unicode  			{  				return ParseBinaryUnicodeString(offsetTable[objRef]);  			}  				case 0xD0:  			{  				return ParseBinaryDictionary(objRef);  			}  				case 0xA0:  			{  				return ParseBinaryArray(objRef);  			}  			}
Missing Default,CocosSharp,CCUserDefault,C:\repos\mono_CocosSharp\src\support\CCUserDefault.cs,ParseXMLFile,The following switch statement is missing a default case: switch (reader.NodeType) {  					case XmlNodeType.Element:  						key = reader.Name;  						break;  					case XmlNodeType.Text:  						values.Add(key' reader.Value);  						break;  					case XmlNodeType.XmlDeclaration:  					case XmlNodeType.ProcessingInstruction:  						break;  					case XmlNodeType.Comment:  						break;  					case XmlNodeType.EndElement:  						break;  					}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,DeflaterEngine,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\DeflaterEngine.cs,SetLevel,The following switch statement is missing a default case: switch (compressionFunction) {  					case DEFLATE_STORED:  						if (strstart > blockStart) {  							huffman.FlushStoredBlock(window' blockStart'  								strstart - blockStart' false);  							blockStart = strstart;  						}  						UpdateHash();  						break;    					case DEFLATE_FAST:  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart'  								false);  							blockStart = strstart;  						}  						break;    					case DEFLATE_SLOW:  						if (prevAvailable) {  							huffman.TallyLit(window[strstart-1] & 0xff);  						}  						if (strstart > blockStart) {  							huffman.FlushBlock(window' blockStart' strstart - blockStart' false);  							blockStart = strstart;  						}  						prevAvailable = false;  						matchLen = MIN_MATCH - 1;  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,WriteLocalEntryHeader,The following switch statement is missing a default case: switch (useZip64_) {  					case UseZip64.Dynamic:  						if (entry.Size < 0) {  							entry.ForceZip64();  						}  						break;    					case UseZip64.On:  						entry.ForceZip64();  						break;    					case UseZip64.Off:  						// Do nothing.  The entry itself may be using Zip64 independantly.  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipFile,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,RunUpdates,The following switch statement is missing a default case: switch (update.Command) {  							case UpdateCommand.Copy:  								if (directUpdate) {  									CopyEntryDirect(workFile' update' ref destinationPosition);  								}  								else {  									CopyEntry(workFile' update);  								}  								break;    							case UpdateCommand.Modify:  								// TODO: Direct modifying of an entry will take some legwork.  								ModifyEntry(workFile' update);  								break;    							case UpdateCommand.Add:  								if (!IsNewArchive && directUpdate) {  									workFile.baseStream_.Position = destinationPosition;  								}    								AddEntry(workFile' update);    								if (directUpdate) {  									destinationPosition = workFile.baseStream_.Position;  								}  								break;  						}
Missing Default,ICSharpCode.SharpZipLib.Zip,PartialInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipFile.cs,Seek,The following switch statement is missing a default case: switch ( origin )  				{  					case SeekOrigin.Begin:  						newPos = start_ + offset;  						break;  						  					case SeekOrigin.Current:  						newPos = readPos_ + offset;  						break;  						  					case SeekOrigin.End:  						newPos = end_ + offset;  						break;  				}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipInputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipInputStream.cs,BodyRead,The following switch statement is missing a default case: switch (method) {  				case (int)CompressionMethod.Deflated:  					count = base.Read(buffer' offset' count);  					if (count <= 0) {  						if (!inf.IsFinished) {  							throw new ZipException("Inflater not finished!");  						}  						inputBuffer.Available = inf.RemainingInput;    						// A csize of -1 is from an unpatched local header  						if ((flags & 8) == 0 &&  							(inf.TotalIn != csize && csize != 0xFFFFFFFF && csize != -1 || inf.TotalOut != size)) {  							throw new ZipException("Size mismatch: " + csize + ";" + size + " <-> " + inf.TotalIn + ";" + inf.TotalOut);  						}  						inf.Reset();  						finished = true;  					}  					break;  					  				case (int)CompressionMethod.Stored:  					if ( (count > csize) && (csize >= 0) ) {  						count = (int)csize;  					}  					  					if ( count > 0 ) {  						count = inputBuffer.ReadClearTextBuffer(buffer' offset' count);  						if (count > 0) {  							csize -= count;  							size -= count;  						}  					}  					  					if (csize == 0) {  						finished = true;  					} else {  						if (count < 0) {  							throw new ZipException("EOF in stored block");  						}  					}  					break;  			}
Missing Default,ICSharpCode.SharpZipLib.Zip,ZipOutputStream,C:\repos\mono_CocosSharp\src\external lib\SharpZipLib\src\Zip\ZipOutputStream.cs,Write,The following switch statement is missing a default case: switch (curMethod) {  				case CompressionMethod.Deflated:  					base.Write(buffer' offset' count);  					break;  				  				case CompressionMethod.Stored:  					if (Password != null) {  						CopyAndEncrypt(buffer' offset' count);  					} else {  						baseOutputStream_.Write(buffer' offset' count);  					}  					break;  			}
