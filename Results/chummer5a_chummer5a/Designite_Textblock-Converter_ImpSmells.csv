Implementation smell,Namespace,Class,File,Method,Description
Long Method,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The method has 253 lines of code.
Complex Method,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,Cyclomatic complexity of the method is 11
Long Statement,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The length of the statement  "		        else if (lines[i].StartsWith("Physical Skills") || (lines[i].StartsWith("Matrix Skills")) || (lines[i].StartsWith("Skills")) || (lines[i].StartsWith("Magic Skills"))) " is 166.
Long Statement,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The length of the statement  "			        var line = lines[i].Replace("Physical Skills "' string.Empty).Replace("Matrix Skills "' string.Empty).Replace("Magic Skills "' string.Empty).Replace("Skills "' string.Empty); " is 174.
Complex Conditional,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The conditional expression  "lines[i].StartsWith("Physical Skills") || (lines[i].StartsWith("Matrix Skills")) || (lines[i].StartsWith("Skills")) || (lines[i].StartsWith("Magic Skills"))"  is complex.
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The following statement contains a magic number: foreach (string str in _attList)  	        {  		        if (_attAbbrevs.Contains(str))  		        {  			        if (critter)  			        {  				        int i = _attAbbrevs.IndexOf(str);  				        foreach (var node in nodes)  				        {  					        xmlNode = doc.CreateElement($"{str}{node}".ToLower());  					        if (node == "aug" && int.TryParse(_attValues[i]' out int result))  					        {  						        xmlNode.InnerText = node == "aug" ? (result + 4).ToString() : _attValues[i];  					        }  					        else  					        {  						        xmlNode.InnerText = _attValues[i];  					        }    					        objHeader.AppendChild(xmlNode);  				        }  			        }  			        else  			        {  						int i = _attAbbrevs.IndexOf(str);  						xmlNode = doc.CreateElement($"{str}".ToLower());  						xmlNode.InnerText = _attValues[i];  						objHeader.AppendChild(xmlNode);  					}  		        }  		        else if (!critter)  				{  					xmlNode = doc.CreateElement($"{str}".ToLower());  					xmlNode.InnerText = "0";  					objHeader.AppendChild(xmlNode);  				}  	        }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The following statement contains a magic number: for (var i = 2; i < lines.Length; i++)  	        {  		        if (lines[i].StartsWith("Initiative"))  		        {  			        //Should probably be a handler for initiative dice here.   		        }  		        else if (lines[i].StartsWith("Movement"))  		        {  			        var rawMove = lines[i].Replace("Movement "'string.Empty);  			        if (rawMove.Contains('('))  			        {  				        rawMove = rawMove.Replace('('' ''').Replace(")"'string.Empty);  			        }  			        var movements = rawMove.Split(''').ToArray();  			        var walk = new[] {"0"' "1"' "0"};  			        var run = new[] { "0"' "0"' "0" };  			        var sprint = new[] { "0"' "1"' "0" };  			        foreach (var movement in movements.Where(movement => movement != "Movement"))  			        {  				        var current = movement.Replace("x"' string.Empty).Replace("+"' string.Empty).TrimEnd();  				        var position = 0;   				        if (current.ToLower().Contains("swimming"))  				        {  					        position = 1;  					        current = current.Split(' ')[0];  				        }  				        else if (current.ToLower().Contains("ï¬‚ight") || current.ToLower().Contains("flight"))  				        {  					        position = 2;  					        current = current.Split(' ')[0];  				        }  				        var currentMovement = current.Split('/');  				        walk[position] = currentMovement[0];  				        run[position] = currentMovement[1];  				        sprint[position] = currentMovement[2];    						// Set default swimming values if not present; based on metahuman values' may be incorrect.   				        if (position == 1)  				        {  					        walk[position] = Math.Max(Convert.ToInt32(walk[position])' 1).ToString();  							sprint[position] = Math.Max(Convert.ToInt32(sprint[position])' 1).ToString();  						}  			        }    			        xmlNode = doc.CreateElement("walk");  			        xmlNode.InnerText = string.Join("/"' walk);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("run");  			        xmlNode.InnerText = string.Join("/"' run);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("sprint");  			        xmlNode.InnerText = string.Join("/"' sprint);  			        objHeader.AppendChild(xmlNode);  		        }  		        else if (lines[i].StartsWith("Physical Skills") || (lines[i].StartsWith("Matrix Skills")) || (lines[i].StartsWith("Skills")) || (lines[i].StartsWith("Magic Skills")))  		        {  			        var line = lines[i].Replace("Physical Skills "' string.Empty).Replace("Matrix Skills "' string.Empty).Replace("Magic Skills "' string.Empty).Replace("Skills "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("skills");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("skill");   				        var index = s.LastIndexOf(" R");  				        if (index != -1)  						{  							var attr = doc.CreateAttribute("rating");  							xmlNode.InnerText = s.Substring(0' index).Trim();  							attr.Value = s.Substring(index + 1).Trim();  							xmlNode.Attributes?.Append(attr);  						}  				        else  				        {  					        xmlNode.InnerText = s.Trim();  				        }  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Complex Forms"))  		        {  			        var line = lines[i].Replace("Complex Forms "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("complexforms");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("complexform");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Powers"))  		        {  			        var line = lines[i].Replace("Powers "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("powers");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("power");  						if (s.Contains(':'))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split(':')[1].Trim();  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split(':')[0].Trim();  						}  						else if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						}  						else  						{  							xmlNode.InnerText = s.Trim();  						}    						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Programs"))  		        {  			        var line = lines[i].Replace("Programs "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("gears");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("quality");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("rating");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Qualities"))  		        {  			        var line = lines[i].Replace("Qualities "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("qualities");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("quality");  				        if (s.Contains('('))  				        {  					        var attr = doc.CreateAttribute("select");  					        attr.Value = s.Split('('' ')')[1];  					        xmlNode.Attributes?.Append(attr);  				        }  							  				        xmlNode.InnerText = s.Split('('' ')')[0].Trim();  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Armor"))  				{  					var line = lines[i].Replace("Armor "' string.Empty);  					xmlNode = doc.CreateElement("armor");  					xmlNode.InnerText = line.Trim();  					objHeader.AppendChild(xmlNode);  				}  	        }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The following statement contains a magic number: for (var i = 2; i < lines.Length; i++)  	        {  		        if (lines[i].StartsWith("Initiative"))  		        {  			        //Should probably be a handler for initiative dice here.   		        }  		        else if (lines[i].StartsWith("Movement"))  		        {  			        var rawMove = lines[i].Replace("Movement "'string.Empty);  			        if (rawMove.Contains('('))  			        {  				        rawMove = rawMove.Replace('('' ''').Replace(")"'string.Empty);  			        }  			        var movements = rawMove.Split(''').ToArray();  			        var walk = new[] {"0"' "1"' "0"};  			        var run = new[] { "0"' "0"' "0" };  			        var sprint = new[] { "0"' "1"' "0" };  			        foreach (var movement in movements.Where(movement => movement != "Movement"))  			        {  				        var current = movement.Replace("x"' string.Empty).Replace("+"' string.Empty).TrimEnd();  				        var position = 0;   				        if (current.ToLower().Contains("swimming"))  				        {  					        position = 1;  					        current = current.Split(' ')[0];  				        }  				        else if (current.ToLower().Contains("ï¬‚ight") || current.ToLower().Contains("flight"))  				        {  					        position = 2;  					        current = current.Split(' ')[0];  				        }  				        var currentMovement = current.Split('/');  				        walk[position] = currentMovement[0];  				        run[position] = currentMovement[1];  				        sprint[position] = currentMovement[2];    						// Set default swimming values if not present; based on metahuman values' may be incorrect.   				        if (position == 1)  				        {  					        walk[position] = Math.Max(Convert.ToInt32(walk[position])' 1).ToString();  							sprint[position] = Math.Max(Convert.ToInt32(sprint[position])' 1).ToString();  						}  			        }    			        xmlNode = doc.CreateElement("walk");  			        xmlNode.InnerText = string.Join("/"' walk);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("run");  			        xmlNode.InnerText = string.Join("/"' run);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("sprint");  			        xmlNode.InnerText = string.Join("/"' sprint);  			        objHeader.AppendChild(xmlNode);  		        }  		        else if (lines[i].StartsWith("Physical Skills") || (lines[i].StartsWith("Matrix Skills")) || (lines[i].StartsWith("Skills")) || (lines[i].StartsWith("Magic Skills")))  		        {  			        var line = lines[i].Replace("Physical Skills "' string.Empty).Replace("Matrix Skills "' string.Empty).Replace("Magic Skills "' string.Empty).Replace("Skills "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("skills");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("skill");   				        var index = s.LastIndexOf(" R");  				        if (index != -1)  						{  							var attr = doc.CreateAttribute("rating");  							xmlNode.InnerText = s.Substring(0' index).Trim();  							attr.Value = s.Substring(index + 1).Trim();  							xmlNode.Attributes?.Append(attr);  						}  				        else  				        {  					        xmlNode.InnerText = s.Trim();  				        }  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Complex Forms"))  		        {  			        var line = lines[i].Replace("Complex Forms "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("complexforms");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("complexform");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Powers"))  		        {  			        var line = lines[i].Replace("Powers "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("powers");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("power");  						if (s.Contains(':'))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split(':')[1].Trim();  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split(':')[0].Trim();  						}  						else if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						}  						else  						{  							xmlNode.InnerText = s.Trim();  						}    						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Programs"))  		        {  			        var line = lines[i].Replace("Programs "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("gears");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("quality");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("rating");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Qualities"))  		        {  			        var line = lines[i].Replace("Qualities "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("qualities");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("quality");  				        if (s.Contains('('))  				        {  					        var attr = doc.CreateAttribute("select");  					        attr.Value = s.Split('('' ')')[1];  					        xmlNode.Attributes?.Append(attr);  				        }  							  				        xmlNode.InnerText = s.Split('('' ')')[0].Trim();  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Armor"))  				{  					var line = lines[i].Replace("Armor "' string.Empty);  					xmlNode = doc.CreateElement("armor");  					xmlNode.InnerText = line.Trim();  					objHeader.AppendChild(xmlNode);  				}  	        }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,ConvertString,The following statement contains a magic number: for (var i = 2; i < lines.Length; i++)  	        {  		        if (lines[i].StartsWith("Initiative"))  		        {  			        //Should probably be a handler for initiative dice here.   		        }  		        else if (lines[i].StartsWith("Movement"))  		        {  			        var rawMove = lines[i].Replace("Movement "'string.Empty);  			        if (rawMove.Contains('('))  			        {  				        rawMove = rawMove.Replace('('' ''').Replace(")"'string.Empty);  			        }  			        var movements = rawMove.Split(''').ToArray();  			        var walk = new[] {"0"' "1"' "0"};  			        var run = new[] { "0"' "0"' "0" };  			        var sprint = new[] { "0"' "1"' "0" };  			        foreach (var movement in movements.Where(movement => movement != "Movement"))  			        {  				        var current = movement.Replace("x"' string.Empty).Replace("+"' string.Empty).TrimEnd();  				        var position = 0;   				        if (current.ToLower().Contains("swimming"))  				        {  					        position = 1;  					        current = current.Split(' ')[0];  				        }  				        else if (current.ToLower().Contains("ï¬‚ight") || current.ToLower().Contains("flight"))  				        {  					        position = 2;  					        current = current.Split(' ')[0];  				        }  				        var currentMovement = current.Split('/');  				        walk[position] = currentMovement[0];  				        run[position] = currentMovement[1];  				        sprint[position] = currentMovement[2];    						// Set default swimming values if not present; based on metahuman values' may be incorrect.   				        if (position == 1)  				        {  					        walk[position] = Math.Max(Convert.ToInt32(walk[position])' 1).ToString();  							sprint[position] = Math.Max(Convert.ToInt32(sprint[position])' 1).ToString();  						}  			        }    			        xmlNode = doc.CreateElement("walk");  			        xmlNode.InnerText = string.Join("/"' walk);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("run");  			        xmlNode.InnerText = string.Join("/"' run);  			        objHeader.AppendChild(xmlNode);    			        xmlNode = doc.CreateElement("sprint");  			        xmlNode.InnerText = string.Join("/"' sprint);  			        objHeader.AppendChild(xmlNode);  		        }  		        else if (lines[i].StartsWith("Physical Skills") || (lines[i].StartsWith("Matrix Skills")) || (lines[i].StartsWith("Skills")) || (lines[i].StartsWith("Magic Skills")))  		        {  			        var line = lines[i].Replace("Physical Skills "' string.Empty).Replace("Matrix Skills "' string.Empty).Replace("Magic Skills "' string.Empty).Replace("Skills "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("skills");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("skill");   				        var index = s.LastIndexOf(" R");  				        if (index != -1)  						{  							var attr = doc.CreateAttribute("rating");  							xmlNode.InnerText = s.Substring(0' index).Trim();  							attr.Value = s.Substring(index + 1).Trim();  							xmlNode.Attributes?.Append(attr);  						}  				        else  				        {  					        xmlNode.InnerText = s.Trim();  				        }  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Complex Forms"))  		        {  			        var line = lines[i].Replace("Complex Forms "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("complexforms");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("complexform");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Powers"))  		        {  			        var line = lines[i].Replace("Powers "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("powers");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("power");  						if (s.Contains(':'))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split(':')[1].Trim();  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split(':')[0].Trim();  						}  						else if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("select");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  							xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						}  						else  						{  							xmlNode.InnerText = s.Trim();  						}    						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Programs"))  		        {  			        var line = lines[i].Replace("Programs "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("gears");  					foreach (var s in split.Where(s => s != string.Empty))  					{  						xmlNode = doc.CreateElement("quality");  						if (s.Contains('('))  						{  							var attr = doc.CreateAttribute("rating");  							attr.Value = s.Split('('' ')')[1];  							xmlNode.Attributes?.Append(attr);  						}    						xmlNode.InnerText = s.Split('('' ')')[0].Trim();  						xmlParentNode.AppendChild(xmlNode);  					}  					objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Qualities"))  		        {  			        var line = lines[i].Replace("Qualities "' string.Empty);  			        var split = line.Split(''');  			        XmlNode xmlParentNode = doc.CreateElement("qualities");  			        foreach (var s in split.Where(s => s != string.Empty))  			        {  				        xmlNode = doc.CreateElement("quality");  				        if (s.Contains('('))  				        {  					        var attr = doc.CreateAttribute("select");  					        attr.Value = s.Split('('' ')')[1];  					        xmlNode.Attributes?.Append(attr);  				        }  							  				        xmlNode.InnerText = s.Split('('' ')')[0].Trim();  				        xmlParentNode.AppendChild(xmlNode);  			        }  			        objHeader.AppendChild(xmlParentNode);  		        }  		        else if (lines[i].StartsWith("Armor"))  				{  					var line = lines[i].Replace("Armor "' string.Empty);  					xmlNode = doc.CreateElement("armor");  					xmlNode.InnerText = line.Trim();  					objHeader.AppendChild(xmlNode);  				}  	        }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Magic Number,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
Missing Default,WpfApplication1,MainWindow,C:\repos\chummer5a_chummer5a\TextblockConverter\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtRaw = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.button = ((System.Windows.Controls.Button)(target));                            #line 21 "..\..\MainWindow.xaml"              this.button.Click += new System.Windows.RoutedEventHandler(this.CreateCritter);                            #line default              #line hidden              return;              case 3:              this.txtName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtGUID = ((System.Windows.Controls.TextBox)(target));              return;              case 5:              this.txtSource = ((System.Windows.Controls.TextBox)(target));              return;              case 6:              this.txtPage = ((System.Windows.Controls.TextBox)(target));              return;              case 7:              this.button_Copy = ((System.Windows.Controls.Button)(target));                            #line 50 "..\..\MainWindow.xaml"              this.button_Copy.Click += new System.Windows.RoutedEventHandler(this.CreateSpirit);                            #line default              #line hidden              return;              }
