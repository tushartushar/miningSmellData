Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillFeedCollections,The method has 61 lines of code.
Long Method,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The method has 70 lines of code.
Long Method,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,Save,The method has 62 lines of code.
Long Method,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The method has 70 lines of code.
Long Method,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,Save,The method has 72 lines of code.
Long Method,Sage.SData.Client.Atom,AtomLink,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLink.cs,Load,The method has 63 lines of code.
Long Method,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,Load,The method has 76 lines of code.
Long Method,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,Load,The method has 61 lines of code.
Long Method,Sage.SData.Client.Framework,MediaTypeNames,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\MediaTypeNames.cs,MediaTypeNames,The method has 72 lines of code.
Long Method,Sage.SData.Client.Framework,SDataRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataRequest.cs,CreateRequest,The method has 116 lines of code.
Long Method,Sage.SData.Client.Framework,UriQueryParser,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriQueryParser.cs,ParserWorker,The method has 72 lines of code.
Long Method,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The method has 88 lines of code.
Long Method,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The method has 102 lines of code.
Long Method,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Write,The method has 70 lines of code.
Complex Method,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillEntryCollections,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillEntryOptionals,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillFeedCollections,Cyclomatic complexity of the method is 16
Complex Method,Sage.SData.Client.Atom,AtomCategory,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomCategory.cs,Load,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomCategory,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomCategory.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomContent,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomContent.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Atom,AtomContent,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomContent.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,Save,Cyclomatic complexity of the method is 15
Complex Method,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,Save,Cyclomatic complexity of the method is 18
Complex Method,Sage.SData.Client.Atom,AtomGenerator,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomGenerator.cs,Load,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomGenerator,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomGenerator.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomIcon,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomIcon.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomId,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomId.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomLink,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLink.cs,Load,Cyclomatic complexity of the method is 12
Complex Method,Sage.SData.Client.Atom,AtomLink,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLink.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomLogo,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLogo.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomPersonConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomPersonConstruct.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,WriteTo,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,CompareTo,Cyclomatic complexity of the method is 17
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,LoadCollections,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,LoadOptionals,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Atom,AtomTextConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomTextConstruct.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Atom,AtomTextConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomTextConstruct.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,ReplaceRfc822TimeZoneWithOffset,Cyclomatic complexity of the method is 15
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractUrls,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,SourceReferencesTarget,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractDiscoverableSyndicationEndpoints,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractPingbackNotificationServer,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,IsPingbackEnabled,Cyclomatic complexity of the method is 12
Complex Method,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,LocatePingbackNotificationServer,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,CreateSafeNavigator,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,Load,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,CompareTo,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Common,WebRequestOptions,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\WebRequestOptions.cs,ApplyOptions,Cyclomatic complexity of the method is 13
Complex Method,Sage.SData.Client.Common,WebRequestOptions,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\WebRequestOptions.cs,ApplyFtpOptions,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Common,WebRequestOptions,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\WebRequestOptions.cs,ApplyHttpOptions,Cyclomatic complexity of the method is 22
Complex Method,Sage.SData.Client.Extensions,OpenSearchExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\OpenSearch\OpenSearchExtension.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataHttpExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SDataHttp\SDataHttpExtension.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataHttpExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SDataHttp\SDataHttpExtensionContext.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Extensions,SDataHttpExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SDataHttp\SDataHttpExtensionContext.cs,WriteTo,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataSyncExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SDataSync\SDataSyncExtension.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataSyncExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SDataSync\SDataSyncExtensionContext.cs,Load,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataExtension.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SDataExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataExtensionContext.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,LoadItem,Cyclomatic complexity of the method is 14
Complex Method,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,InferItemType,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,WriteTo,Cyclomatic complexity of the method is 10
Complex Method,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,ValueToString,Cyclomatic complexity of the method is 18
Complex Method,Sage.SData.Client.Extensions,SimpleListGroup,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListGroup.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SimpleListSort,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSort.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Extensions,SimpleListSort,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSort.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SimpleListSyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSyndicationExtension.cs,ToString,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Extensions,SimpleListSyndicationExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSyndicationExtensionContext.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Sage.SData.Client.Extensions,SyndicationExtensionLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionLoadedEventArgs.cs,CompareTo,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Framework,Diagnosis,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\Diagnosis.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Framework,Diagnosis,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\Diagnosis.cs,WriteTo,Cyclomatic complexity of the method is 7
Complex Method,Sage.SData.Client.Framework,SDataException,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataException.cs,SDataException,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Framework,SDataRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataRequest.cs,CreateBatchOperation,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Framework,SDataRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataRequest.cs,CreateRequest,Cyclomatic complexity of the method is 24
Complex Method,Sage.SData.Client.Framework,SDataResponse,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataResponse.cs,SDataResponse,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Framework,UriFormatter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriFormatter.cs,OnBuildUri,Cyclomatic complexity of the method is 11
Complex Method,Sage.SData.Client.Framework,UriQueryParser,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriQueryParser.cs,ParserWorker,Cyclomatic complexity of the method is 16
Complex Method,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,Cyclomatic complexity of the method is 28
Complex Method,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Write,Cyclomatic complexity of the method is 12
Complex Method,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,Read,Cyclomatic complexity of the method is 8
Complex Method,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,ReadSmeAttribute,Cyclomatic complexity of the method is 31
Complex Method,Sage.SData.Client.Metadata,SDataSchemaComplexType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaComplexType.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,Sage.SData.Client.Metadata,SDataSchemaItem,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaItem.cs,ReadSmeAttribute,Cyclomatic complexity of the method is 9
Complex Method,Sage.SData.Client.Metadata,SDataSchemaRelationshipProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaRelationshipProperty.cs,ReadSmeAttribute,Cyclomatic complexity of the method is 19
Complex Method,Sage.SData.Client.Metadata,SDataSchemaResourceType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaResourceType.cs,ReadSmeAttribute,Cyclomatic complexity of the method is 33
Complex Method,Sage.SData.Client.Mime,MimeMessage,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeMessage.cs,EnumerateParts,Cyclomatic complexity of the method is 14
Long Parameter List,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillEntry,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillEntryCollections,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillEntryOptionals,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillFeedCollections,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Adapter,Atom10SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\Atom10SyndicationResourceAdapter.cs,FillFeedOptionals,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,Create,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,LoadAsync,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,LoadAsync,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,Load,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,Create,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,LoadAsync,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,LoadAsync,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,Load,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,Guard,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\Guard.cs,ArgumentNotOutOfRange,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,Guard,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\Guard.cs,ArgumentNotOutOfRange,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,Guard,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\Guard.cs,ArgumentNotOutOfRange,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,ISyndicationResource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\ISyndicationResource.cs,Load,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,ISyndicationResource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\ISyndicationResource.cs,LoadAsync,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Common,ISyndicationResource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\ISyndicationResource.cs,LoadAsync,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ConditionalGet,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ConditionalGet,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ConditionalGet,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The method has 6 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,CreateSafeNavigator,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,SyndicationResourceLoadedEventArgs,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,SyndicationResourceLoadedEventArgs,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,SyndicationResourceLoadedEventArgs,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Core,ReadCompletedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\ReadCompletedEventArgs.cs,ReadCompletedEventArgs,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,WriteTo,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,WriteItemTo,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Extensions,SDataPayloadCollection,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayloadCollection.cs,WriteTo,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Extensions,SDataSimpleCollection,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataSimpleCollection.cs,WriteItemTo,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Extensions,XPathNavigatorExtensions,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\XPathNavigatorExtensions.cs,TryGetAttribute,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Extensions,SyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtension.cs,SyndicationExtension,The method has 6 parameters.
Long Parameter List,Sage.SData.Client.Framework,Diagnosis,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\Diagnosis.cs,Diagnosis,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Framework,Diagnosis,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\Diagnosis.cs,Diagnosis,The method has 5 parameters.
Long Parameter List,Sage.SData.Client.Framework,Diagnosis,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\Diagnosis.cs,Diagnosis,The method has 6 parameters.
Long Parameter List,Sage.SData.Client.Framework,DigestEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\DigestEntry.cs,DigestEntry,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Framework,UriQueryParser,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriQueryParser.cs,Parse,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Framework,UriQueryParser,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriQueryParser.cs,ParserWorker,The method has 4 parameters.
Long Parameter List,Sage.SData.Client.Mime,MimeHelper,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeHelper.cs,FindMimeFromData,The method has 8 parameters.
Long Identifier,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,RemoveInvalidXmlHexadecimalCharacters,The length of the parameter invalidXmlHexadecimalCharacters is 31.
Long Statement,Sage.SData.Client.Adapter,SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\SyndicationResourceAdapter.cs,Fill,The length of the statement  "		throw new ArgumentException (String.Format (null' "The specified syndication content format of {0} is invalid."' format)' "format"); " is 132.
Long Statement,Sage.SData.Client.Adapter,SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\SyndicationResourceAdapter.cs,Fill,The length of the statement  "		throw new FormatException (String.Format (null' "The supplied syndication resource has a content format of {0}' which does not match the expected content format of {1}."' resourceMetadata.Format' format)); " is 205.
Long Statement,Sage.SData.Client.Atom,AtomCategory,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomCategory.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Scheme' value.Scheme' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 146.
Long Statement,Sage.SData.Client.Atom,AtomCategory,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomCategory.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomContent,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomContent.cs,WriteTo,The length of the statement  "	if (String.Compare (this.ContentType' "xhtml"' StringComparison.OrdinalIgnoreCase) == 0 && String.IsNullOrEmpty (writer.LookupPrefix (AtomUtility.XhtmlNamespace))) { " is 165.
Long Statement,Sage.SData.Client.Atom,AtomContent,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomContent.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Source' value.Source' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 146.
Long Statement,Sage.SData.Client.Atom,AtomContent,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomContent.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,LoadAsync,The length of the statement  "	asyncHttpWebRequest.Timeout = Convert.ToInt32 (settings.Timeout.TotalMilliseconds' System.Globalization.NumberFormatInfo.InvariantInfo); " is 136.
Long Statement,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,LoadAsync,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle' new WaitOrTimerCallback (AsyncTimeoutCallback)' state' settings.Timeout' true); " is 143.
Long Statement,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,Save,The length of the statement  "		writer.WriteElementString ("updated"' AtomUtility.AtomNamespace' SyndicationDateTimeUtility.ToRfc3339DateTime (this.UpdatedOn)); " is 128.
Long Statement,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,WriteEntryOptionals,The length of the statement  "		writer.WriteElementString ("published"' AtomUtility.AtomNamespace' SyndicationDateTimeUtility.ToRfc3339DateTime (this.PublishedOn)); " is 132.
Long Statement,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,LoadAsync,The length of the statement  "	asyncHttpWebRequest.Timeout = Convert.ToInt32 (settings.Timeout.TotalMilliseconds' System.Globalization.NumberFormatInfo.InvariantInfo); " is 136.
Long Statement,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,LoadAsync,The length of the statement  "	ThreadPool.RegisterWaitForSingleObject (result.AsyncWaitHandle' new WaitOrTimerCallback (AsyncTimeoutCallback)' state' settings.Timeout' true); " is 143.
Long Statement,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,Save,The length of the statement  "		writer.WriteElementString ("updated"' AtomUtility.AtomNamespace' SyndicationDateTimeUtility.ToRfc3339DateTime (this.UpdatedOn)); " is 128.
Long Statement,Sage.SData.Client.Atom,AtomGenerator,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomGenerator.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 140.
Long Statement,Sage.SData.Client.Atom,AtomGenerator,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomGenerator.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomIcon,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomIcon.cs,CompareTo,The length of the statement  "		int result = Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 135.
Long Statement,Sage.SData.Client.Atom,AtomIcon,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomIcon.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomId,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomId.cs,CompareTo,The length of the statement  "		int result = Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.Unescaped' StringComparison.Ordinal); " is 121.
Long Statement,Sage.SData.Client.Atom,AtomId,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomId.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomLink,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLink.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 140.
Long Statement,Sage.SData.Client.Atom,AtomLink,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLink.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomLogo,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLogo.cs,CompareTo,The length of the statement  "		int result = Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 135.
Long Statement,Sage.SData.Client.Atom,AtomLogo,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomLogo.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomPersonConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomPersonConstruct.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Uri' value.Uri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 140.
Long Statement,Sage.SData.Client.Atom,AtomPersonConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomPersonConstruct.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,WriteTo,The length of the statement  "		writer.WriteElementString ("updated"' AtomUtility.AtomNamespace' SyndicationDateTimeUtility.ToRfc3339DateTime (this.UpdatedOn)); " is 128.
Long Statement,Sage.SData.Client.Atom,AtomSource,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomSource.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomTextConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomTextConstruct.cs,WriteTo,The length of the statement  "	if (this.TextType == AtomTextConstructType.Xhtml && String.IsNullOrEmpty (writer.LookupPrefix (AtomUtility.XhtmlNamespace))) { " is 126.
Long Statement,Sage.SData.Client.Atom,AtomTextConstruct,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomTextConstruct.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Atom,AtomUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomUtility.cs,CreateNamespaceManager,The length of the statement  "	manager.AddNamespace ("atom"' !String.IsNullOrEmpty (manager.DefaultNamespace) ? manager.DefaultNamespace : ATOM_NAMESPACE); " is 124.
Long Statement,Sage.SData.Client.Atom,AtomUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomUtility.cs,CompareCommonObjectAttributes,The length of the statement  "	result = result | Uri.Compare (source.BaseUri' target.BaseUri' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 151.
Long Statement,Sage.SData.Client.Common,ComparisonUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\ComparisonUtility.cs,CompareSequence,The length of the statement  "			result = result | Uri.Compare (source [i]' target [i]' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' comparisonType); " is 123.
Long Statement,Sage.SData.Client.Common,DiscoverableSyndicationEndpoint,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\DiscoverableSyndicationEndpoint.cs,ToString,The length of the statement  "	return String.Format (null' "<link rel=\"alternate\" type=\"{0}\" title=\"{1}\" href=\"{2}\" />"' this.ContentType' this.Title' this.Source != null ? this.Source.ToString () : String.Empty); " is 190.
Long Statement,Sage.SData.Client.Common,DiscoverableSyndicationEndpoint,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\DiscoverableSyndicationEndpoint.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Source' value.Source' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 146.
Long Statement,Sage.SData.Client.Common,DiscoverableSyndicationEndpoint,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\DiscoverableSyndicationEndpoint.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,EnumerationMetadataAttribute,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\EnumerationMetadataAttribute.cs,ToString,The length of the statement  "	return String.Format (null' "[EnumerationMetadata(DisplayName = \"{0}\"' AlternateValue=\"{1}\")]"' this.DisplayName' this.AlternateValue); " is 139.
Long Statement,Sage.SData.Client.Common,EnumerationMetadataAttribute,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\EnumerationMetadataAttribute.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,MimeMediaTypeAttribute,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\MimeMediaTypeAttribute.cs,ToString,The length of the statement  "	return String.Format (null' "[MimeMediaType(Name = \"{0}\"' SubName = \"{1}\"' Documentation = \"{2}\")]"' this.Name' this.SubName' this.Documentation != null ? this.Documentation.ToString () : String.Empty); " is 208.
Long Statement,Sage.SData.Client.Common,MimeMediaTypeAttribute,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\MimeMediaTypeAttribute.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc822DateTime,The length of the statement  "	return DateTime.TryParseExact (SyndicationDateTimeUtility.ReplaceRfc822TimeZoneWithOffset (value)' formats' dateTimeFormat' DateTimeStyles.None' out result); " is 157.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,SyndicationContentFormatGet,The length of the statement  "	using (WebResponse response = SyndicationEncodingUtility.CreateWebResponse (source' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The length of the statement  "	Regex attributePattern = new Regex ("([a-zA-Z]+)=[\"']([^\"']+)[\"']|([a-zA-Z]+)=([^\"'>\r\n\t ]+)"' RegexOptions.IgnoreCase); " is 126.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,SourceReferencesTarget,The length of the statement  "	using (WebResponse response = SyndicationEncodingUtility.CreateWebResponse (source' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,SourceReferencesTarget,The length of the statement  "							if (Uri.Compare (link' target' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase) == 0) { " is 126.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,UriExists,The length of the statement  "		using (WebResponse response = SyndicationEncodingUtility.CreateWebResponse (uri' new WebRequestOptions (credentials))) { " is 120.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ConditionalGet,The length of the statement  "	return SyndicationDiscoveryUtility.ConditionalGet (source' lastModified' entityTag' new WebRequestOptions (credentials' proxy)); " is 128.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The length of the statement  "	return SyndicationDiscoveryUtility.TryConditionalGet (source' lastModified' entityTag' new WebRequestOptions ()' out response); " is 127.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The length of the statement  "		if (webException.Response != null && ((HttpWebResponse)webException.Response).StatusCode == HttpStatusCode.NotModified) { " is 121.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The length of the statement  "	return SyndicationDiscoveryUtility.TryConditionalGet (source' lastModified' entityTag' new WebRequestOptions (credentials' proxy)' out response); " is 145.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,TryConditionalGet,The length of the statement  "		if (webException.Response != null && ((HttpWebResponse)webException.Response).StatusCode == HttpStatusCode.NotModified) { " is 121.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,LocateDiscoverableSyndicationEndpoints,The length of the statement  "	using (WebResponse webResponse = SyndicationEncodingUtility.CreateWebResponse (uri' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,IsPingbackEnabled,The length of the statement  "	using (WebResponse webResponse = SyndicationEncodingUtility.CreateWebResponse (uri' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,LocatePingbackNotificationServer,The length of the statement  "	using (WebResponse webResponse = SyndicationEncodingUtility.CreateWebResponse (uri' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,LocateTrackbackNotificationServers,The length of the statement  "	using (WebResponse webResponse = SyndicationEncodingUtility.CreateWebResponse (uri' new WebRequestOptions (credentials))) { " is 123.
Long Statement,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,CreateWebRequest,The length of the statement  "		if (String.Compare (source.Scheme' Uri.UriSchemeHttp' StringComparison.OrdinalIgnoreCase) == 0 || String.Compare (source.Scheme' Uri.UriSchemeHttps' StringComparison.OrdinalIgnoreCase) == 0) { " is 192.
Long Statement,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,EncodeInvalidXmlHexadecimalCharacters,The length of the statement  "		encodedContent = encodedContent.Replace (match.Value' Convert.ToUInt32 (match.Value' 16).ToString (NumberFormatInfo.InvariantInfo)); " is 132.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadSettings.cs,ToString,The length of the statement  "	return String.Format (null' "[SyndicationResourceLoadSettings(CharacterEncoding = \"{0}\"' RetrievalLimit = \"{1}\"' Timeout = \"{2}\"' Autodetect = \"{3}\"' SupportedExtensions = \"{4}\")]"' this.CharacterEncoding.WebName' this.RetrievalLimit' this.Timeout.TotalMilliseconds' this.AutoDetectExtensions' this.SupportedExtensions.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo)); " is 408.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadSettings.cs,CompareTo,The length of the statement  "		int result = String.Compare (this.CharacterEncoding.WebName' value.CharacterEncoding.WebName' StringComparison.OrdinalIgnoreCase); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadSettings.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,ToString,The length of the statement  "	string data = this.Data != null ? this.Data.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 137.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,ToString,The length of the statement  "	string credentials = this.Credentials != null ? this.Credentials.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 158.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,ToString,The length of the statement  "	string proxy = this.Proxy != null ? this.Proxy.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 140.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,ToString,The length of the statement  "	string state = this.State != null ? this.State.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 140.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,ToString,The length of the statement  "	return String.Format (null' "[SyndicationResourceLoadedEventArgs(Source = \"{0}\"' Data = \"{1}\"' Credentials = \"{2}\"' Proxy = \"{3}\"' State = \"{4}\")]"' source' data' credentials' proxy' state); " is 200.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Source' value.Source' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 146.
Long Statement,Sage.SData.Client.Common,SyndicationResourceLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceLoadedEventArgs.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("APML"' manager)) != null || (navigator = resource.SelectSingleNode ("apml:APML"' manager)) != null) { " is 146.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:feed"' manager)) != null) { " is 222.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The length of the statement  "	} else if ((navigator = resource.SelectSingleNode ("entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:entry"' manager)) != null) { " is 232.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomPublishingCategoriesResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("categories"' manager)) != null || (navigator = resource.SelectSingleNode ("app:categories"' manager)) != null) { " is 157.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomPublishingCategoriesResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomPublishingServiceResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("service"' manager)) != null || (navigator = resource.SelectSingleNode ("app:service"' manager)) != null) { " is 151.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomPublishingServiceResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("blog"' manager)) != null || (navigator = resource.SelectSingleNode ("blogML:blog"' manager)) != null) { " is 148.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseMicroSummaryGeneratorResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("generator"' manager)) != null || (navigator = resource.SelectSingleNode ("micro:generator"' manager)) != null) { " is 157.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseMicroSummaryGeneratorResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseOpenSearchDescriptionResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("OpenSearchDescription"' manager)) != null || (navigator = resource.SelectSingleNode ("search:OpenSearchDescription"' manager)) != null) { " is 182.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseOpenSearchDescriptionResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRsdResource,The length of the statement  "	if ((navigator = resource.SelectSingleNode ("rsd"' manager)) != null || (navigator = resource.SelectSingleNode ("rsd:rsd"' manager)) != null) { " is 143.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRsdResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRsdResource,The length of the statement  "			//  Most web log software actually fails to provide the default XML namespace per RSD spec' so this is a hack/compromise " is 120.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The length of the statement  "		Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,Load,The length of the statement  "	Dictionary<string' string> namespaces = (Dictionary<string' string>)resource.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 129.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,Load,The length of the statement  "	} else if (SyndicationResourceMetadata.TryParseAtomPublishingCategoriesResource (resource' out navigator' out version)) { " is 121.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,ToString,The length of the statement  "	string namespaces = this.Namespaces != null ? this.Namespaces.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 155.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,ToString,The length of the statement  "	string resource = this.Resource != null ? this.Resource.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 149.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,ToString,The length of the statement  "	return String.Format (null' "[SyndicationResourceMetadata(Format = \"{0}\"' Version = \"{1}\"' Namespaces = \"{2}\"' Resource = \"{3}\")]"' format' version' namespaces' resource); " is 179.
Long Statement,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,SyndicationResourceSaveSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceSaveSettings.cs,ToString,The length of the statement  "	return String.Format (null' "[SyndicationResourceSaveSettings(CharacterEncoding = \"{0}\"' MinimizeOutputSize = \"{1}\"' Autodetect = \"{2}\"' SupportedExtensions = \"{3}\")]"' this.CharacterEncoding.WebName' this.MinimizeOutputSize' this.AutoDetectExtensions' this.SupportedExtensions.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo)); " is 365.
Long Statement,Sage.SData.Client.Common,SyndicationResourceSaveSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceSaveSettings.cs,CompareTo,The length of the statement  "		int result = String.Compare (this.CharacterEncoding.WebName' value.CharacterEncoding.WebName' StringComparison.OrdinalIgnoreCase); " is 130.
Long Statement,Sage.SData.Client.Common,SyndicationResourceSaveSettings,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceSaveSettings.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,WriteTo,The length of the statement  "	writer.WriteAttributeString ("rdf"' "about"' RDF_NAMESPACE' this.About != null ? this.About.ToString () : String.Empty); " is 120.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,WriteTo,The length of the statement  "	writer.WriteAttributeString ("dc"' "identifier"' DUBLIN_CORE_NAMESPACE' this.Identifier != null ? this.Identifier.ToString () : String.Empty); " is 142.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,WriteTo,The length of the statement  "	writer.WriteAttributeString ("dc"' "title"' DUBLIN_CORE_NAMESPACE' !String.IsNullOrEmpty (this.Title) ? this.Title : String.Empty); " is 131.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,WriteTo,The length of the statement  "	writer.WriteAttributeString ("trackback"' "ping"' TRACKBACK_NAMESPACE' this.PingUrl != null ? this.PingUrl.ToString () : String.Empty); " is 135.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,CompareTo,The length of the statement  "		int result = Uri.Compare (this.About' value.About' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 139.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Identifier' value.Identifier' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 154.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.PingUrl' value.PingUrl' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.OrdinalIgnoreCase); " is 148.
Long Statement,Sage.SData.Client.Common,TrackbackDiscoveryMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\TrackbackDiscoveryMetadata.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The length of the statement  "	var request = _requests.LastOrDefault (x => string.Equals (x.ToString ()' baseUri' StringComparison.InvariantCultureIgnoreCase)); " is 129.
Long Statement,Sage.SData.Client.Core,SDataSingleResourceRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataSingleResourceRequest.cs,BuildUrl,The length of the statement  "		uri.CollectionPredicate = ResourceSelector.StartsWith ("(") && ResourceSelector.EndsWith (")") ? ResourceSelector.Substring (1' ResourceSelector.Length - 2) : ResourceSelector; " is 176.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,Load,The length of the statement  "	Uri = source.TryGetAttribute ("uri"' Framework.Common.SData.Namespace' out value) && !string.IsNullOrEmpty (value) ? new Uri (value) : null; " is 140.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,Load,The length of the statement  "	Uuid = source.TryGetAttribute ("uuid"' Framework.Common.SData.Namespace' out value) && !string.IsNullOrEmpty (value) ? new Guid (value) : (Guid?)null; " is 150.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,Load,The length of the statement  "	IsDeleted = source.TryGetAttribute ("isDeleted"' Framework.Common.SData.Namespace' out value) && !string.IsNullOrEmpty (value) ? XmlConvert.ToBoolean (value) : (bool?)null; " is 172.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,Load,The length of the statement  "	return source.SelectChildren (XPathNodeType.Element).Cast<XPathNavigator> ().GroupBy (item => item.LocalName).All (group => LoadItem (group.Key' group' manager)); " is 162.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,InferItemType,The length of the statement  "	if (item.HasAttribute ("key"' Framework.Common.SData.Namespace) || item.HasAttribute ("uuid"' Framework.Common.SData.Namespace) || item.HasAttribute ("lookup"' Framework.Common.SData.Namespace) || item.HasAttribute ("descriptor"' Framework.Common.SData.Namespace)) { " is 266.
Long Statement,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,InferItemType,The length of the statement  "	if (item.HasAttribute ("url"' Framework.Common.SData.Namespace) || item.HasAttribute ("uri"' Framework.Common.SData.Namespace) || item.HasAttribute ("deleteMissing"' Framework.Common.SData.Namespace)) { " is 202.
Long Statement,Sage.SData.Client.Extensions,SDataPayloadCollection,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayloadCollection.cs,Load,The length of the statement  "	Uri = source.TryGetAttribute ("uri"' Framework.Common.SData.Namespace' out value) && !string.IsNullOrEmpty (value) ? new Uri (value) : null; " is 140.
Long Statement,Sage.SData.Client.Extensions,SDataPayloadCollection,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayloadCollection.cs,Load,The length of the statement  "	DeleteMissing = source.TryGetAttribute ("deleteMissing"' Framework.Common.SData.Namespace' out value) ? XmlConvert.ToBoolean (value) : (bool?)null; " is 147.
Long Statement,Sage.SData.Client.Extensions,XPathNavigatorExtensions,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\XPathNavigatorExtensions.cs,GetAllNamespaces,The length of the statement  "	return source.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml).Concat (source.Select ("descendant::*").Cast<XPathNavigator> ().SelectMany (descendant => descendant.GetNamespacesInScope (XmlNamespaceScope.Local))); " is 216.
Long Statement,Sage.SData.Client.Extensions,SimpleListGroup,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListGroup.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Namespace' value.Namespace' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.Ordinal); " is 142.
Long Statement,Sage.SData.Client.Extensions,SimpleListGroup,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListGroup.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Extensions,SimpleListSort,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSort.cs,CompareTo,The length of the statement  "		result = result | Uri.Compare (this.Namespace' value.Namespace' UriComponents.AbsoluteUri' UriFormat.SafeUnescaped' StringComparison.Ordinal); " is 142.
Long Statement,Sage.SData.Client.Extensions,SimpleListSort,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSort.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Extensions,SimpleListSyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSyndicationExtension.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Extensions,SimpleListSyndicationExtensionContext,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SimpleList\SimpleListSyndicationExtensionContext.cs,Load,The length of the statement  "		if (treatAsNavigator != null && String.Compare (treatAsNavigator.Value' "list"' StringComparison.OrdinalIgnoreCase) == 0) { " is 123.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtension.cs,CreateNamespaceManager,The length of the statement  "	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtension.cs,CreateNamespaceManager,The length of the statement  "	manager.AddNamespace (this.XmlPrefix' !String.IsNullOrEmpty (existingXmlNamespace) ? existingXmlNamespace : this.XmlNamespace); " is 127.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtension,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtension.cs,ExistsInSource,The length of the statement  "	//Dictionary<string' string> namespaces   = (Dictionary<string' string>)source.GetNamespacesInScope(XmlNamespaceScope.ExcludeXml); " is 130.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionAdapter.cs,GetExtensions,The length of the statement  "	Collection<ISyndicationExtension> nativeExtensions = SyndicationExtensionAdapter.GetExtensions (SyndicationExtensionAdapter.FrameworkExtensions); " is 145.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionAdapter.cs,GetExtensions,The length of the statement  "		if (namespaces.Any (item => item.Value == extension.XmlNamespace) || namespaces.Any (item => item.Key == extension.XmlPrefix))//END PATCH " is 137.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionAdapter.cs,Fill,The length of the statement  "		//extensions  = SyndicationExtensionAdapter.GetExtensions(this.Settings.SupportedExtensions' (Dictionary<string' string>)this.Navigator.GetNamespacesInScope(XmlNamespaceScope.ExcludeXml)); " is 188.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionAdapter.cs,Fill,The length of the statement  "		extensions = SyndicationExtensionAdapter.GetExtensions (this.Settings.SupportedExtensions' this.Navigator.GetAllNamespaces ()); " is 127.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionLoadedEventArgs.cs,ToString,The length of the statement  "	string extension = this.Extension != null ? this.Extension.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 152.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionLoadedEventArgs.cs,ToString,The length of the statement  "	string data = this.Data != null ? this.Data.GetHashCode ().ToString (System.Globalization.NumberFormatInfo.InvariantInfo) : String.Empty; " is 137.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionLoadedEventArgs.cs,ToString,The length of the statement  "	return String.Format (null' "[SyndicationExtensionLoadedEventArgs(Name = \"{0}\"' Prefix = \"{1}\"' Namespace = \"{2}\"' Extension = \"{3}\"' Data = \"{4}\")]"' name' prefix' xmlNamespace' extension' data); " is 206.
Long Statement,Sage.SData.Client.Extensions,SyndicationExtensionLoadedEventArgs,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SyndicationExtensionLoadedEventArgs.cs,CompareTo,The length of the statement  "		throw new ArgumentException (String.Format (null' "obj is not of type {0}' type was found to be '{1}'."' this.GetType ().FullName' obj.GetType ().FullName)' "obj"); " is 164.
Long Statement,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The length of the statement  "		var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1; " is 122.
Long Statement,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The length of the statement  "			millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0; " is 146.
Long Statement,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,ToString,The length of the statement  "	return (_utcDateTime + _utcOffset).ToString ("yyyy-MM-ddTHH:mm:ss"' CultureInfo.InvariantCulture) + FormatOffset (_utcOffset' ":"); " is 131.
Long Statement,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,ToDateString,The length of the statement  "	// e.g. a date string 2009-10-09-7:00 would be interpreted as 7AM on 9th October instead of being seen as a -7 hour offset " is 122.
Long Statement,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,FormatOffset,The length of the statement  "	formattedOffset = string.Concat (formattedOffset' offset.Hours.ToString ("00"' CultureInfo.InvariantCulture)' separator' offset.Minutes.ToString ("00"' CultureInfo.InvariantCulture)); " is 183.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "					var roleAttr = element.UnhandledAttributes != null ? element.UnhandledAttributes.FirstOrDefault (attr => attr.NamespaceURI == SmeNamespaceUri && attr.LocalName == "role") : null; " is 178.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "						throw new InvalidOperationException (string.Format ("Role attribute on top level element '{0}' not found"' element.Name)); " is 122.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "						throw new InvalidOperationException (string.Format ("Unexpected role attribute value '{0}' on top level element '{1}'"' roleAttr.Value' element.Name)); " is 151.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "					throw new InvalidOperationException (string.Format ("Particle on list complex type '{0}' does not contain exactly one element"' xmlComplexType.Name)); " is 150.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "					throw new InvalidOperationException (string.Format ("Unexpected sequence item type '{0}' on list complex type '{1}'"' sequence.Items [0].GetType ()' xmlComplexType.Name)); " is 171.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "				throw new InvalidOperationException (string.Format ("Unexpected particle type '{0}' on complex type '{1}'"' xmlComplexType.Particle.GetType ()' xmlComplexType.Name)); " is 166.
Long Statement,Sage.SData.Client.Metadata,SDataSchema,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchema.cs,Read,The length of the statement  "				throw new InvalidOperationException (string.Format ("Unexpected content type '{0}' on simple type '{1}'"' simpleType.Content.GetType ()' simpleType.Name)); " is 155.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaChoiceType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaChoiceType.cs,Read,The length of the statement  "		throw new InvalidOperationException (string.Format ("Unexpected particle type '{0}' on choice type '{1}'"' type.Particle.GetType ()' type.Name)); " is 145.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaChoiceType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaChoiceType.cs,Read,The length of the statement  "			throw new InvalidOperationException (string.Format ("Unexpected item type '{0}' on choice type '{1}'"' item.GetType ()' type.Name)); " is 132.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaComplexType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaComplexType.cs,Read,The length of the statement  "				throw new InvalidOperationException (string.Format ("Unexpected content type '{0}' on complex type content model '{1}'"' type.ContentModel.Content.GetType ()' type.Name)); " is 171.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaComplexType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaComplexType.cs,Read,The length of the statement  "				throw new InvalidOperationException (string.Format ("Unexpected particle type '{0}' on complex type '{1}'"' particle.GetType ()' type.Name)); " is 141.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaComplexType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaComplexType.cs,Read,The length of the statement  "					throw new InvalidOperationException (string.Format ("Unexpected all item type '{0}' on complex type '{1}'"' item.GetType ()' type.Name)); " is 137.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaComplexType,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaComplexType.cs,Read,The length of the statement  "				if (element.UnhandledAttributes != null && element.UnhandledAttributes.Any (attr => attr.NamespaceURI == SmeNamespaceUri && attr.LocalName == "relationship")) { " is 160.
Long Statement,Sage.SData.Client.Metadata,SDataSchemaSet,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaSet.cs,Compile,The length of the statement  "	var listTypes = _schemas.SelectMany (schema => schema.ComplexTypes.Where (type => type.ListName != null).Select (type => new { " is 126.
Complex Conditional,Sage.SData.Client.Extensions,SDataPayload,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Extensions\SData\SDataPayload.cs,InferItemType,The conditional expression  "item.HasAttribute ("key"' Framework.Common.SData.Namespace) || item.HasAttribute ("uuid"' Framework.Common.SData.Namespace) || item.HasAttribute ("lookup"' Framework.Common.SData.Namespace) || item.HasAttribute ("descriptor"' Framework.Common.SData.Namespace)"  is complex.
Empty Catch Block,Sage.SData.Client.Core,SDataService,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataService.cs,Read,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Core,SDataService,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataService.cs,Read,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Core,SDataService,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataService.cs,ReadAsync,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Core,SDataService,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataService.cs,ReadAsync,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Framework,SDataException,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataException.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Framework,SDataException,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataException.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Framework,SDataResponse,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataResponse.cs,LoadTrackingContent,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Framework,SDataResponse,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataResponse.cs,LoadTrackingContent,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Framework,UriFormatter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\UriFormatter.cs,UriFormatter,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Metadata,SDataSchemaTypeReference,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaTypeReference.cs,TryParseCode,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Mime,MimeHelper,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeHelper.cs,FindMimeType,The method has an empty catch block.
Empty Catch Block,Sage.SData.Client.Mime,MimeHelper,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeHelper.cs,FindMimeType,The method has an empty catch block.
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	entry = parameters [1] as AtomEntry;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (entry != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (entry' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					entry.OnEntryLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		entry.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	entry = parameters [1] as AtomEntry;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (entry != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (entry' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					entry.OnEntryLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		entry.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	entry = parameters [1] as AtomEntry;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (entry != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (entry' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					entry.OnEntryLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		entry.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	entry = parameters [1] as AtomEntry;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (entry != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (entry' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					entry.OnEntryLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		entry.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: source = parameters [2] as Uri;  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: settings = parameters [3] as SyndicationResourceLoadSettings;  
Magic Number,Sage.SData.Client.Atom,AtomEntry,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomEntry.cs,AsyncLoadCallback,The following statement contains a magic number: options = parameters [4] as WebRequestOptions;  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	feed = parameters [1] as AtomFeed;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (feed != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (feed' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					feed.OnFeedLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		feed.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	feed = parameters [1] as AtomFeed;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (feed != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (feed' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					feed.OnFeedLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		feed.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	feed = parameters [1] as AtomFeed;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (feed != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (feed' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					feed.OnFeedLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		feed.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: if (result.IsCompleted) {  	//------------------------------------------------------------  	//	Extract the send operations parameters from the user state  	//------------------------------------------------------------  	object[] parameters = (object[])result.AsyncState;  	httpWebRequest = parameters [0] as WebRequest;  	feed = parameters [1] as AtomFeed;  	source = parameters [2] as Uri;  	settings = parameters [3] as SyndicationResourceLoadSettings;  	options = parameters [4] as WebRequestOptions;  	object userToken = parameters [5];  	//------------------------------------------------------------  	//	Verify expected parameters were found  	//------------------------------------------------------------  	if (feed != null) {  		//------------------------------------------------------------  		//	Get the response to the syndication resource request  		//------------------------------------------------------------  		WebResponse httpWebResponse = (WebResponse)httpWebRequest.EndGetResponse (result);  		//------------------------------------------------------------  		//	Load syndication resource  		//------------------------------------------------------------  		using (Stream stream = httpWebResponse.GetResponseStream ()) {  			if (settings != null) {  				encoding = settings.CharacterEncoding;  			}  			using (StreamReader streamReader = new StreamReader (stream' encoding)) {  				XmlReaderSettings readerSettings = new XmlReaderSettings ();  				readerSettings.IgnoreComments = true;  				readerSettings.IgnoreWhitespace = true;  				readerSettings.ProhibitDtd = false;  				using (XmlReader reader = XmlReader.Create (streamReader' readerSettings)) {  					if (encoding == System.Text.Encoding.UTF8) {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' null);  					} else {  						navigator = SyndicationEncodingUtility.CreateSafeNavigator (source' options' settings.CharacterEncoding);  					}  					//------------------------------------------------------------  					//	Load syndication resource using the framework adapters  					//------------------------------------------------------------  					SyndicationResourceAdapter adapter = new SyndicationResourceAdapter (navigator' settings);  					adapter.Fill (feed' SyndicationContentFormat.Atom);  					//------------------------------------------------------------  					//	Raise Loaded event to notify registered handlers of state change  					//------------------------------------------------------------  					feed.OnFeedLoaded (new SyndicationResourceLoadedEventArgs (navigator' source' options' userToken));  				}  			}  		}  		//------------------------------------------------------------  		//	Reset load operation in progress indicator  		//------------------------------------------------------------  		feed.LoadOperationInProgress = false;  	}  }  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: source = parameters [2] as Uri;  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: settings = parameters [3] as SyndicationResourceLoadSettings;  
Magic Number,Sage.SData.Client.Atom,AtomFeed,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Atom\AtomFeed.cs,AsyncLoadCallback,The following statement contains a magic number: options = parameters [4] as WebRequestOptions;  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [2] = "yyyy'-'MM'-'dd'T'HH:mm:ss'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [3] = "yyyy'-'MM'-'dd'T'HH:mm:ss.f'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [4] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ff'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [5] = "yyyy'-'MM'-'dd'T'HH:mm:ss.fff'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [6] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ffff'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [7] = "yyyy'-'MM'-'dd'T'HH:mm:ss.fffff'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [8] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ffffff'Z'";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [9] = "yyyy'-'MM'-'dd'T'HH:mm:sszzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [10] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ffzzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [11] = "yyyy'-'MM'-'dd'T'HH:mm:ss.fffzzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [12] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ffffzzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [13] = "yyyy'-'MM'-'dd'T'HH:mm:ss.fffffzzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc3339DateTime,The following statement contains a magic number: formats [14] = "yyyy'-'MM'-'dd'T'HH:mm:ss.ffffffzzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDateTimeUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDateTimeUtility.cs,TryParseRfc822DateTime,The following statement contains a magic number: formats [2] = "ddd''' dd MMM yyyy HH:mm:ss zzz";  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: foreach (Match attribute in attributes) {  	if (attribute.Groups != null && attribute.Groups.Count > 0) {  		string name = attribute.Groups [1].Value;  		string value = String.Empty;  		if (!String.IsNullOrEmpty (name)) {  			value = attribute.Groups [2].Value;  		} else {  			name = attribute.Groups [3].Value;  			value = attribute.Groups [4].Value;  		}  		name = name.ToUpperInvariant ().Trim ();  		value = value.Trim ();  		if (!hashtable.ContainsKey (name)) {  			hashtable.Add (name' value);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: foreach (Match attribute in attributes) {  	if (attribute.Groups != null && attribute.Groups.Count > 0) {  		string name = attribute.Groups [1].Value;  		string value = String.Empty;  		if (!String.IsNullOrEmpty (name)) {  			value = attribute.Groups [2].Value;  		} else {  			name = attribute.Groups [3].Value;  			value = attribute.Groups [4].Value;  		}  		name = name.ToUpperInvariant ().Trim ();  		value = value.Trim ();  		if (!hashtable.ContainsKey (name)) {  			hashtable.Add (name' value);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: foreach (Match attribute in attributes) {  	if (attribute.Groups != null && attribute.Groups.Count > 0) {  		string name = attribute.Groups [1].Value;  		string value = String.Empty;  		if (!String.IsNullOrEmpty (name)) {  			value = attribute.Groups [2].Value;  		} else {  			name = attribute.Groups [3].Value;  			value = attribute.Groups [4].Value;  		}  		name = name.ToUpperInvariant ().Trim ();  		value = value.Trim ();  		if (!hashtable.ContainsKey (name)) {  			hashtable.Add (name' value);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (attribute.Groups != null && attribute.Groups.Count > 0) {  	string name = attribute.Groups [1].Value;  	string value = String.Empty;  	if (!String.IsNullOrEmpty (name)) {  		value = attribute.Groups [2].Value;  	} else {  		name = attribute.Groups [3].Value;  		value = attribute.Groups [4].Value;  	}  	name = name.ToUpperInvariant ().Trim ();  	value = value.Trim ();  	if (!hashtable.ContainsKey (name)) {  		hashtable.Add (name' value);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (attribute.Groups != null && attribute.Groups.Count > 0) {  	string name = attribute.Groups [1].Value;  	string value = String.Empty;  	if (!String.IsNullOrEmpty (name)) {  		value = attribute.Groups [2].Value;  	} else {  		name = attribute.Groups [3].Value;  		value = attribute.Groups [4].Value;  	}  	name = name.ToUpperInvariant ().Trim ();  	value = value.Trim ();  	if (!hashtable.ContainsKey (name)) {  		hashtable.Add (name' value);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (attribute.Groups != null && attribute.Groups.Count > 0) {  	string name = attribute.Groups [1].Value;  	string value = String.Empty;  	if (!String.IsNullOrEmpty (name)) {  		value = attribute.Groups [2].Value;  	} else {  		name = attribute.Groups [3].Value;  		value = attribute.Groups [4].Value;  	}  	name = name.ToUpperInvariant ().Trim ();  	value = value.Trim ();  	if (!hashtable.ContainsKey (name)) {  		hashtable.Add (name' value);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (!String.IsNullOrEmpty (name)) {  	value = attribute.Groups [2].Value;  } else {  	name = attribute.Groups [3].Value;  	value = attribute.Groups [4].Value;  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (!String.IsNullOrEmpty (name)) {  	value = attribute.Groups [2].Value;  } else {  	name = attribute.Groups [3].Value;  	value = attribute.Groups [4].Value;  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: if (!String.IsNullOrEmpty (name)) {  	value = attribute.Groups [2].Value;  } else {  	name = attribute.Groups [3].Value;  	value = attribute.Groups [4].Value;  }  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: value = attribute.Groups [2].Value;  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: name = attribute.Groups [3].Value;  
Magic Number,Sage.SData.Client.Common,SyndicationDiscoveryUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationDiscoveryUtility.cs,ExtractHtmlAttributes,The following statement contains a magic number: value = attribute.Groups [4].Value;  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,EncodeInvalidXmlHexadecimalCharacters,The following statement contains a magic number: foreach (Match match in matches) {  	encodedContent = encodedContent.Replace (match.Value' Convert.ToUInt32 (match.Value' 16).ToString (NumberFormatInfo.InvariantInfo));  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,EncodeInvalidXmlHexadecimalCharacters,The following statement contains a magic number: encodedContent = encodedContent.Replace (match.Value' Convert.ToUInt32 (match.Value' 16).ToString (NumberFormatInfo.InvariantInfo));  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: if (!String.IsNullOrEmpty (request.ContentType)) {  	if (request.ContentType.Contains (";")) {  		string[] contentTypeParts = request.ContentType.Split (";".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (contentTypeParts != null && contentTypeParts.Length > 0) {  			for (int i = 0; i < contentTypeParts.Length; i++) {  				string typePart = contentTypeParts [i].Trim ();  				if (typePart.Contains ("=")) {  					string[] nameValuePair = typePart.Split ("=".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  					if (nameValuePair != null && nameValuePair.Length == 2) {  						string name = nameValuePair [0].Trim ();  						string value = nameValuePair [1].Trim ();  						if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  							try {  								contentEncoding = Encoding.GetEncoding (value);  							} catch (ArgumentException) {  								return null;  							}  						}  					}  				}  			}  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: if (request.ContentType.Contains (";")) {  	string[] contentTypeParts = request.ContentType.Split (";".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	if (contentTypeParts != null && contentTypeParts.Length > 0) {  		for (int i = 0; i < contentTypeParts.Length; i++) {  			string typePart = contentTypeParts [i].Trim ();  			if (typePart.Contains ("=")) {  				string[] nameValuePair = typePart.Split ("=".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  				if (nameValuePair != null && nameValuePair.Length == 2) {  					string name = nameValuePair [0].Trim ();  					string value = nameValuePair [1].Trim ();  					if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  						try {  							contentEncoding = Encoding.GetEncoding (value);  						} catch (ArgumentException) {  							return null;  						}  					}  				}  			}  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: if (contentTypeParts != null && contentTypeParts.Length > 0) {  	for (int i = 0; i < contentTypeParts.Length; i++) {  		string typePart = contentTypeParts [i].Trim ();  		if (typePart.Contains ("=")) {  			string[] nameValuePair = typePart.Split ("=".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  			if (nameValuePair != null && nameValuePair.Length == 2) {  				string name = nameValuePair [0].Trim ();  				string value = nameValuePair [1].Trim ();  				if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  					try {  						contentEncoding = Encoding.GetEncoding (value);  					} catch (ArgumentException) {  						return null;  					}  				}  			}  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: for (int i = 0; i < contentTypeParts.Length; i++) {  	string typePart = contentTypeParts [i].Trim ();  	if (typePart.Contains ("=")) {  		string[] nameValuePair = typePart.Split ("=".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  		if (nameValuePair != null && nameValuePair.Length == 2) {  			string name = nameValuePair [0].Trim ();  			string value = nameValuePair [1].Trim ();  			if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  				try {  					contentEncoding = Encoding.GetEncoding (value);  				} catch (ArgumentException) {  					return null;  				}  			}  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: if (typePart.Contains ("=")) {  	string[] nameValuePair = typePart.Split ("=".ToCharArray ()' StringSplitOptions.RemoveEmptyEntries);  	if (nameValuePair != null && nameValuePair.Length == 2) {  		string name = nameValuePair [0].Trim ();  		string value = nameValuePair [1].Trim ();  		if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  			try {  				contentEncoding = Encoding.GetEncoding (value);  			} catch (ArgumentException) {  				return null;  			}  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetCharacterEncoding,The following statement contains a magic number: if (nameValuePair != null && nameValuePair.Length == 2) {  	string name = nameValuePair [0].Trim ();  	string value = nameValuePair [1].Trim ();  	if (String.Compare (name' "charset"' StringComparison.OrdinalIgnoreCase) == 0) {  		try {  			contentEncoding = Encoding.GetEncoding (value);  		} catch (ArgumentException) {  			return null;  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetStreamBytes,The following statement contains a magic number: while ((chunk = stream.Read (buffer' read' buffer.Length - read)) > 0) {  	read += chunk;  	//------------------------------------------------------------  	//	Determine if stream larger than default buffer size  	//------------------------------------------------------------  	if (read == buffer.Length) {  		int nextByte = stream.ReadByte ();  		//------------------------------------------------------------  		//	If at end of stream' return result  		//------------------------------------------------------------  		if (nextByte == -1) {  			return buffer;  		}  		//------------------------------------------------------------  		//	Resize the buffer and continue  		//------------------------------------------------------------  		byte[] newBuffer = new byte[buffer.Length * 2];  		Array.Copy (buffer' newBuffer' buffer.Length);  		newBuffer [read] = (byte)nextByte;  		buffer = newBuffer;  		read++;  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationEncodingUtility,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationEncodingUtility.cs,GetStreamBytes,The following statement contains a magic number: if (read == buffer.Length) {  	int nextByte = stream.ReadByte ();  	//------------------------------------------------------------  	//	If at end of stream' return result  	//------------------------------------------------------------  	if (nextByte == -1) {  		return buffer;  	}  	//------------------------------------------------------------  	//	Resize the buffer and continue  	//------------------------------------------------------------  	byte[] newBuffer = new byte[buffer.Length * 2];  	Array.Copy (buffer' newBuffer' buffer.Length);  	newBuffer [read] = (byte)nextByte;  	buffer = newBuffer;  	read++;  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("APML"' manager)) != null || (navigator = resource.SelectSingleNode ("apml:APML"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.apml.org/apml-0.6")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 6);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://www.apml.org/apml-0.6")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (0' 6);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The following statement contains a magic number: if (version == null) {  	version = new Version (0' 6);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseApmlResource,The following statement contains a magic number: version = new Version (0' 6);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:feed"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of feed  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (1' 0);  		}  	} else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 3);  		}  	}  } else if ((navigator = resource.SelectSingleNode ("entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:entry"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of entry  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (1' 0);  		}  	} else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 3);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:feed"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:feed"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of feed  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (1' 0);  		}  	} else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 3);  		}  	}  } else if ((navigator = resource.SelectSingleNode ("entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:entry"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of entry  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (1' 0);  		}  	} else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 3);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (1' 0);  	}  } else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (0' 3);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (0' 3);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (version == null) {  	version = new Version (0' 3);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: version = new Version (0' 3);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom:entry"' manager)) != null || (navigator = resource.SelectSingleNode ("atom03:entry"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of entry  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (1' 0);  		}  	} else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (0' 3);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://www.w3.org/2005/Atom")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (1' 0);  	}  } else if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (0' 3);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://purl.org/atom/ns#")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (0' 3);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: if (version == null) {  	version = new Version (0' 3);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseAtomResource,The following statement contains a magic number: version = new Version (0' 3);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("blog"' manager)) != null || (navigator = resource.SelectSingleNode ("blogML:blog"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://www.blogml.com/2006/09/BlogML")) {  		resourceConformsToFormat = true;  		if (version == null) {  			version = new Version (2' 0);  		}  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://www.blogml.com/2006/09/BlogML")) {  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (2' 0);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The following statement contains a magic number: if (version == null) {  	version = new Version (2' 0);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseBlogMLResource,The following statement contains a magic number: version = new Version (2' 0);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseNewsMLResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("NewsML")) != null) {  	//------------------------------------------------------------  	//	Extract version of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (2' 0);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseNewsMLResource,The following statement contains a magic number: if (version == null) {  	version = new Version (2' 0);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseNewsMLResource,The following statement contains a magic number: version = new Version (2' 0);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseOpmlResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("opml")) != null) {  	//------------------------------------------------------------  	//	Extract version of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (2' 0);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseOpmlResource,The following statement contains a magic number: if (version == null) {  	version = new Version (2' 0);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseOpmlResource,The following statement contains a magic number: version = new Version (2' 0);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("rss"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (2' 0);  	}  } else if ((navigator = resource.SelectSingleNode ("rdf:RDF"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://purl.org/rss/1.0/")) {  		resourceConformsToFormat = true;  		version = new Version (1' 0);  	} else if (namespaces.ContainsValue ("http://my.netscape.com/rdf/simple/0.9/")) {  		resourceConformsToFormat = true;  		version = new Version (0' 9);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("rss"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	resourceConformsToFormat = true;  	if (version == null) {  		version = new Version (2' 0);  	}  } else if ((navigator = resource.SelectSingleNode ("rdf:RDF"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://purl.org/rss/1.0/")) {  		resourceConformsToFormat = true;  		version = new Version (1' 0);  	} else if (namespaces.ContainsValue ("http://my.netscape.com/rdf/simple/0.9/")) {  		resourceConformsToFormat = true;  		version = new Version (0' 9);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if (version == null) {  	version = new Version (2' 0);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: version = new Version (2' 0);  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if ((navigator = resource.SelectSingleNode ("rdf:RDF"' manager)) != null) {  	//------------------------------------------------------------  	//	Extract version and namespaces of resource  	//------------------------------------------------------------  	version = SyndicationResourceMetadata.GetVersionFromAttribute (navigator' "version");  	Dictionary<string' string> namespaces = (Dictionary<string' string>)navigator.GetNamespacesInScope (XmlNamespaceScope.ExcludeXml);  	if (namespaces.ContainsValue ("http://purl.org/rss/1.0/")) {  		resourceConformsToFormat = true;  		version = new Version (1' 0);  	} else if (namespaces.ContainsValue ("http://my.netscape.com/rdf/simple/0.9/")) {  		resourceConformsToFormat = true;  		version = new Version (0' 9);  	}  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://purl.org/rss/1.0/")) {  	resourceConformsToFormat = true;  	version = new Version (1' 0);  } else if (namespaces.ContainsValue ("http://my.netscape.com/rdf/simple/0.9/")) {  	resourceConformsToFormat = true;  	version = new Version (0' 9);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: if (namespaces.ContainsValue ("http://my.netscape.com/rdf/simple/0.9/")) {  	resourceConformsToFormat = true;  	version = new Version (0' 9);  }  
Magic Number,Sage.SData.Client.Common,SyndicationResourceMetadata,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Common\SyndicationResourceMetadata.cs,TryParseRssResource,The following statement contains a magic number: version = new Version (0' 9);  
Magic Number,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The following statement contains a magic number: if (uri.PathSegments.Length > 4) {  	uri.TrimRange (4' uri.PathSegments.Length - 4);  }  
Magic Number,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The following statement contains a magic number: if (uri.PathSegments.Length > 4) {  	uri.TrimRange (4' uri.PathSegments.Length - 4);  }  
Magic Number,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The following statement contains a magic number: if (uri.PathSegments.Length > 4) {  	uri.TrimRange (4' uri.PathSegments.Length - 4);  }  
Magic Number,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The following statement contains a magic number: uri.TrimRange (4' uri.PathSegments.Length - 4);  
Magic Number,Sage.SData.Client.Core,BatchProcess,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\BatchProcess.cs,AddToBatch,The following statement contains a magic number: uri.TrimRange (4' uri.PathSegments.Length - 4);  
Magic Number,Sage.SData.Client.Core,SDataService,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataService.cs,SDataService,The following statement contains a magic number: Timeout = 120000;  
Magic Number,Sage.SData.Client.Core,SDataSingleResourceRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataSingleResourceRequest.cs,BuildUrl,The following statement contains a magic number: if (!string.IsNullOrEmpty (ResourceSelector)) {  	uri.CollectionPredicate = ResourceSelector.StartsWith ("(") && ResourceSelector.EndsWith (")") ? ResourceSelector.Substring (1' ResourceSelector.Length - 2) : ResourceSelector;  } else if (Entry != null) {  	var payload = Entry.GetSDataPayload ();  	if (payload != null) {  		uri.CollectionPredicate = string.Format ("'{0}'"' payload.Key);  	}  }  
Magic Number,Sage.SData.Client.Core,SDataSingleResourceRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Core\SDataSingleResourceRequest.cs,BuildUrl,The following statement contains a magic number: uri.CollectionPredicate = ResourceSelector.StartsWith ("(") && ResourceSelector.EndsWith (")") ? ResourceSelector.Substring (1' ResourceSelector.Length - 2) : ResourceSelector;  
Magic Number,Sage.SData.Client.Framework,SDataRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataRequest.cs,SDataRequest,The following statement contains a magic number: Timeout = 120000;  
Magic Number,Sage.SData.Client.Framework,SDataRequest,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\SDataRequest.cs,CreateBatchOperation,The following statement contains a magic number: if (uri.PathSegments.Length != 4) {  	throw new InvalidOperationException ("Batch requests can only be made on collection end points");  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: try {  	//------------------------------------------------------------  	//	Extract year and handle 2/3 digit years  	//------------------------------------------------------------  	var year = int.Parse (match.Groups ["year"].Value' CultureInfo.InvariantCulture);  	if (year < 1000 && match.Groups ["year"].Length < 3) {  		if (year < 50) {  			year = year + 2000;  		} else {  			year = year + 1999;  		}  	}  	//------------------------------------------------------------  	//	Extract other date time parts  	//------------------------------------------------------------  	var month = (match.Groups ["month"].Success) ? int.Parse (match.Groups ["month"].Value' CultureInfo.InvariantCulture) : 1;  	var day = match.Groups ["day"].Success ? int.Parse (match.Groups ["day"].Value' CultureInfo.InvariantCulture) : 1;  	int millisecond;  	int second;  	int minute;  	int hour;  	if (match.Groups ["hour"].Success) {  		hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  		minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  		second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  		millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  	} else {  		hour = 0;  		minute = 0;  		second = 0;  		millisecond = 0;  	}  	//------------------------------------------------------------  	//	Calculate offset  	//------------------------------------------------------------  	if (match.Groups ["ofs"].Success) {  		offset = ParseW3COffSet (match.Groups ["ofs"].Value);  	}  	//------------------------------------------------------------  	//	Generate result  	//------------------------------------------------------------  	w3CDateTime = new W3CDateTime (new DateTime (year' month' day' hour' minute' second' millisecond) - offset' offset);  } catch (Exception exception) {  	//------------------------------------------------------------  	//	Raise exception  	//------------------------------------------------------------  	throw new FormatException ("DateTime is not in a valid format"' exception);  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 1000 && match.Groups ["year"].Length < 3) {  	if (year < 50) {  		year = year + 2000;  	} else {  		year = year + 1999;  	}  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 1000 && match.Groups ["year"].Length < 3) {  	if (year < 50) {  		year = year + 2000;  	} else {  		year = year + 1999;  	}  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 1000 && match.Groups ["year"].Length < 3) {  	if (year < 50) {  		year = year + 2000;  	} else {  		year = year + 1999;  	}  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 1000 && match.Groups ["year"].Length < 3) {  	if (year < 50) {  		year = year + 2000;  	} else {  		year = year + 1999;  	}  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 1000 && match.Groups ["year"].Length < 3) {  	if (year < 50) {  		year = year + 2000;  	} else {  		year = year + 1999;  	}  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 50) {  	year = year + 2000;  } else {  	year = year + 1999;  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 50) {  	year = year + 2000;  } else {  	year = year + 1999;  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (year < 50) {  	year = year + 2000;  } else {  	year = year + 1999;  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: year = year + 2000;  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: year = year + 1999;  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: if (match.Groups ["hour"].Success) {  	hour = match.Groups ["hour"].Success ? int.Parse (match.Groups ["hour"].Value' CultureInfo.InvariantCulture) : 0;  	minute = match.Groups ["min"].Success ? int.Parse (match.Groups ["min"].Value' CultureInfo.InvariantCulture) : 0;  	second = match.Groups ["sec"].Success ? int.Parse (match.Groups ["sec"].Value' CultureInfo.InvariantCulture) : 0;  	millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  } else {  	hour = 0;  	minute = 0;  	second = 0;  	millisecond = 0;  }  
Magic Number,Sage.SData.Client.Framework,W3CDateTime,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Framework\W3CDateTime.cs,Parse,The following statement contains a magic number: millisecond = match.Groups ["ms"].Success ? (int)Math.Round ((1000 * double.Parse (match.Groups ["ms"].Value' CultureInfo.InvariantCulture))) : 0;  
Magic Number,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,ReadSmeAttribute,The following statement contains a magic number: switch (attribute.LocalName) {  case "canSort":  	CanSort = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canFilter":  	CanFilter = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canGroup":  	CanGroup = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isLocalized":  	IsLocalized = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isUniqueKey":  	IsUniqueKey = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "precedence":  	Precedence = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "groupName":  	GroupName = attribute.Value;  	return true;  case "maxLength":  	MaxLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "averageLength":  	AverageLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "totalDigits":  	TotalDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "fractionDigits":  	FractionDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  #pragma  case "isGlobalId":  	IsGlobalId = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isIdentifier":  	IsIdentifier = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isDescriptor":  	IsDescriptor = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "copiedFrom":  	CopiedFrom = attribute.Value;  	return true;  #pragma  default:  	return base.ReadSmeAttribute (attribute);  }  
Magic Number,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,ReadSmeAttribute,The following statement contains a magic number: switch (attribute.LocalName) {  case "canSort":  	CanSort = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canFilter":  	CanFilter = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canGroup":  	CanGroup = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isLocalized":  	IsLocalized = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isUniqueKey":  	IsUniqueKey = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "precedence":  	Precedence = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "groupName":  	GroupName = attribute.Value;  	return true;  case "maxLength":  	MaxLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "averageLength":  	AverageLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "totalDigits":  	TotalDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "fractionDigits":  	FractionDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  #pragma  case "isGlobalId":  	IsGlobalId = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isIdentifier":  	IsIdentifier = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isDescriptor":  	IsDescriptor = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "copiedFrom":  	CopiedFrom = attribute.Value;  	return true;  #pragma  default:  	return base.ReadSmeAttribute (attribute);  }  
Magic Number,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,ReadSmeAttribute,The following statement contains a magic number: switch (attribute.LocalName) {  case "canSort":  	CanSort = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canFilter":  	CanFilter = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canGroup":  	CanGroup = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isLocalized":  	IsLocalized = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isUniqueKey":  	IsUniqueKey = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "precedence":  	Precedence = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "groupName":  	GroupName = attribute.Value;  	return true;  case "maxLength":  	MaxLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "averageLength":  	AverageLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "totalDigits":  	TotalDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "fractionDigits":  	FractionDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  #pragma  case "isGlobalId":  	IsGlobalId = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isIdentifier":  	IsIdentifier = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isDescriptor":  	IsDescriptor = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "copiedFrom":  	CopiedFrom = attribute.Value;  	return true;  #pragma  default:  	return base.ReadSmeAttribute (attribute);  }  
Magic Number,Sage.SData.Client.Metadata,SDataSchemaValueProperty,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Metadata\SDataSchemaValueProperty.cs,ReadSmeAttribute,The following statement contains a magic number: switch (attribute.LocalName) {  case "canSort":  	CanSort = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canFilter":  	CanFilter = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "canGroup":  	CanGroup = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isLocalized":  	IsLocalized = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isUniqueKey":  	IsUniqueKey = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "precedence":  	Precedence = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "groupName":  	GroupName = attribute.Value;  	return true;  case "maxLength":  	MaxLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "averageLength":  	AverageLength = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "totalDigits":  	TotalDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  case "fractionDigits":  	FractionDigits = XmlConvert.ToInt32 (attribute.Value);  	return true;  #pragma  case "isGlobalId":  	IsGlobalId = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isIdentifier":  	IsIdentifier = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "isDescriptor":  	IsDescriptor = XmlConvert.ToBoolean (attribute.Value);  	return true;  case "copiedFrom":  	CopiedFrom = attribute.Value;  	return true;  #pragma  default:  	return base.ReadSmeAttribute (attribute);  }  
Magic Number,Sage.SData.Client.Mime,MimeMessage,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeMessage.cs,EnumerateParts,The following statement contains a magic number: foreach (var line in EnumerateLines (stream)) {  	if (line.Length >= boundary.Length + 2 && line.Length <= boundary.Length + 6) {  		var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  		var isStart = (str == "--" + boundary);  		if (isStart || str == "--" + boundary + "--") {  			if (headers != null) {  				if (content != null) {  					if (content.Position > 0) {  						content.Position--;  						if (content.ReadByte () == '\n') {  							content.SetLength (content.Length - 1);  						}  					}  					if (content.Position > 0) {  						content.Position--;  						if (content.ReadByte () == '\r') {  							content.SetLength (content.Length - 1);  						}  					}  					content.Seek (0' SeekOrigin.Begin);  				}  				yield return new MimePart (content' headers);  			}  			if (isStart) {  				headers = new WebHeaderCollection ();  				content = null;  				continue;  			}  			yield break;  		}  	}  	if (headers == null) {  		continue;  	}  	if (content == null) {  		var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  		if (str.Length > 0) {  			headers.Add (str);  		} else {  			content = new MemoryStream ();  		}  	} else {  		content.Write (line' 0' line.Length);  	}  }  
Magic Number,Sage.SData.Client.Mime,MimeMessage,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeMessage.cs,EnumerateParts,The following statement contains a magic number: foreach (var line in EnumerateLines (stream)) {  	if (line.Length >= boundary.Length + 2 && line.Length <= boundary.Length + 6) {  		var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  		var isStart = (str == "--" + boundary);  		if (isStart || str == "--" + boundary + "--") {  			if (headers != null) {  				if (content != null) {  					if (content.Position > 0) {  						content.Position--;  						if (content.ReadByte () == '\n') {  							content.SetLength (content.Length - 1);  						}  					}  					if (content.Position > 0) {  						content.Position--;  						if (content.ReadByte () == '\r') {  							content.SetLength (content.Length - 1);  						}  					}  					content.Seek (0' SeekOrigin.Begin);  				}  				yield return new MimePart (content' headers);  			}  			if (isStart) {  				headers = new WebHeaderCollection ();  				content = null;  				continue;  			}  			yield break;  		}  	}  	if (headers == null) {  		continue;  	}  	if (content == null) {  		var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  		if (str.Length > 0) {  			headers.Add (str);  		} else {  			content = new MemoryStream ();  		}  	} else {  		content.Write (line' 0' line.Length);  	}  }  
Magic Number,Sage.SData.Client.Mime,MimeMessage,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeMessage.cs,EnumerateParts,The following statement contains a magic number: if (line.Length >= boundary.Length + 2 && line.Length <= boundary.Length + 6) {  	var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  	var isStart = (str == "--" + boundary);  	if (isStart || str == "--" + boundary + "--") {  		if (headers != null) {  			if (content != null) {  				if (content.Position > 0) {  					content.Position--;  					if (content.ReadByte () == '\n') {  						content.SetLength (content.Length - 1);  					}  				}  				if (content.Position > 0) {  					content.Position--;  					if (content.ReadByte () == '\r') {  						content.SetLength (content.Length - 1);  					}  				}  				content.Seek (0' SeekOrigin.Begin);  			}  			yield return new MimePart (content' headers);  		}  		if (isStart) {  			headers = new WebHeaderCollection ();  			content = null;  			continue;  		}  		yield break;  	}  }  
Magic Number,Sage.SData.Client.Mime,MimeMessage,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Mime\MimeMessage.cs,EnumerateParts,The following statement contains a magic number: if (line.Length >= boundary.Length + 2 && line.Length <= boundary.Length + 6) {  	var str = Encoding.UTF8.GetString (line).TrimEnd ('\r'' '\n');  	var isStart = (str == "--" + boundary);  	if (isStart || str == "--" + boundary + "--") {  		if (headers != null) {  			if (content != null) {  				if (content.Position > 0) {  					content.Position--;  					if (content.ReadByte () == '\n') {  						content.SetLength (content.Length - 1);  					}  				}  				if (content.Position > 0) {  					content.Position--;  					if (content.ReadByte () == '\r') {  						content.SetLength (content.Length - 1);  					}  				}  				content.Seek (0' SeekOrigin.Begin);  			}  			yield return new MimePart (content' headers);  		}  		if (isStart) {  			headers = new WebHeaderCollection ();  			content = null;  			continue;  		}  		yield break;  	}  }  
Missing Default,Sage.SData.Client.Adapter,SyndicationResourceAdapter,D:\newReposJune17\Sage_SDataCSharpClientLib\Sage.SData.Client\Adapters\SyndicationResourceAdapter.cs,Fill,The following switch statement is missing a default case: switch (format) {  case SyndicationContentFormat.Atom:  	this.FillAtomResource (resource' resourceMetadata);  	break;  }  
