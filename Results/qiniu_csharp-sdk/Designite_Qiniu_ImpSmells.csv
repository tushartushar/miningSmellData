Implementation smell,Namespace,Class,File,Method,Description
Long Method,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The method has 196 lines of code.
Long Method,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,MakeBlock,The method has 122 lines of code.
Long Method,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,UploadStream,The method has 145 lines of code.
Complex Method,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,MakeFile,Cyclomatic complexity of the method is 8
Complex Method,Qiniu.Storage,ListResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ListResult.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Qiniu.CDN,RefreshResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\RefreshResult.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,Qiniu.CDN,PrefetchResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\PrefetchResult.cs,ToString,Cyclomatic complexity of the method is 9
Complex Method,Qiniu.CDN,BandwidthResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\BandwidthResult.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Qiniu.CDN,FluxResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\FluxResult.cs,ToString,Cyclomatic complexity of the method is 10
Complex Method,Qiniu.CDN,LogListResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\LogListResult.cs,ToString,Cyclomatic complexity of the method is 12
Complex Method,Qiniu.Http,HttpManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Http\HttpManager.cs,getHeaders,Cyclomatic complexity of the method is 9
Long Parameter List,Qiniu.Storage,ResumeBlocker,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumeBlocker.cs,ResumeBlocker,The method has 10 parameters. Parameters: doneEvent' blockBuffer' blockIndex' uploadToken' putExtra' resumeInfo' blockMakeResults' progressLock' uploadedBytesDict' fileSize
Long Parameter List,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,processMakeBlocks,The method has 7 parameters. Parameters: blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize
Long Parameter List,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,MakeFile,The method has 6 parameters. Parameters: fileName' size' key' upToken' putExtra' contexts
Long Parameter List,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,Copy,The method has 5 parameters. Parameters: srcBucket' srcKey' dstBucket' dstKey' force
Long Parameter List,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,Move,The method has 5 parameters. Parameters: srcBucket' srcKey' dstBucket' dstKey' force
Long Parameter List,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,ListFiles,The method has 5 parameters. Parameters: bucket' prefix' marker' limit' delimiter
Long Parameter List,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,CopyOp,The method has 5 parameters. Parameters: srcBucket' srcKey' dstBucket' dstKey' force
Long Parameter List,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,MoveOp,The method has 5 parameters. Parameters: srcBucket' srcKey' dstBucket' dstKey' force
Long Parameter List,Qiniu.Storage,OperationManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\OperationManager.cs,Pfop,The method has 6 parameters. Parameters: bucket' key' fops' pipeline' notifyUrl' force
Long Parameter List,Qiniu.Storage,OperationManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\OperationManager.cs,Pfop,The method has 6 parameters. Parameters: bucket' key' fops' pipeline' notifyUrl' force
Long Parameter List,Qiniu.CDN,CdnManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\CDN\CdnManager.cs,CreateTimestampAntiLeechUrl,The method has 5 parameters. Parameters: host' fileName' query' encryptKey' expireInSeconds
Long Parameter List,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,F,The method has 7 parameters. Parameters: a' b' c' d' k' s' i
Long Parameter List,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,G,The method has 7 parameters. Parameters: a' b' c' d' k' s' i
Long Parameter List,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,H,The method has 7 parameters. Parameters: a' b' c' d' k' s' i
Long Parameter List,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,I,The method has 7 parameters. Parameters: a' b' c' d' k' s' i
Long Parameter List,Qiniu.Util,UrlHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UrlHelper.cs,UrlSplit,The method has 5 parameters. Parameters: url' host' path' file' query
Long Parameter List,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,Update,The method has 5 parameters. Parameters: crc' table' p' offset' count
Long Parameter List,Qiniu.Http,HttpManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Http\HttpManager.cs,PostData,The method has 5 parameters. Parameters: url' data' mimeType' token' binaryMode
Long Parameter List,Qiniu.Http,HttpManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Http\HttpManager.cs,PostMultipart,The method has 5 parameters. Parameters: url' data' boundary' token' binaryMode
Long Statement,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,DefaultUploadProgressHandler,The length of the statement  "                Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes); " is 155.
Long Statement,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,DefaultUploadProgressHandler,The length of the statement  "                Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0); " is 128.
Long Statement,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,DefaultUploadProgressHandler,The length of the statement  "                Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes); " is 150.
Long Statement,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,DefaultUploadProgressHandler,The length of the statement  "                Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0); " is 123.
Long Statement,Qiniu.Http,HttpManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Http\HttpManager.cs,PostMultipart,The length of the statement  "                sb.AppendFormat("[{0}] [{1}] [HTTP-POST-MPART] Error:  "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' userAgent); " is 120.
Empty Catch Block,Qiniu.Util,UpToken,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UpToken.cs,GetBucketFromUpToken,The method has an empty catch block.
Empty Catch Block,Qiniu.Util,UrlHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UrlHelper.cs,UrlSplit,The method has an empty catch block.
Empty Catch Block,Qiniu.Util,ETag,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\ETag.cs,CalcHash,The method has an empty catch block.
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,ResumeChunk,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ChunkUnit.cs,GetChunkUnit,The following statement contains a magic number: if (chunkSize < 128 * 1024 || chunkSize > 4 * 1024 * 1024)              {                  return ChunkUnit.U2048K;              }              else              {                  int u = chunkSize / N;                  int cu;                    if (u == 1)                  {                      cu = 1;                  }                  else if (u < 4)                  {                      cu = 2;                  }                  else if (u < 8)                  {                      cu = 4;                  }                  else if (u < 16)                  {                      cu = 8;                  }                  else if (u < 32)                  {                      cu = 16;                  }                  else                  {                      cu = 32;                  }                    return (ChunkUnit)cu;              }
Magic Number,Qiniu.Storage,PutPolicy,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\PutPolicy.cs,ToJsonString,The following statement contains a magic number: if (this.Deadline == 0)              {                  //默认一个小时有效期                  this.SetExpires(3600);              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The following statement contains a magic number: if (!(putExtra.BlockUploadThreads > 0 && putExtra.BlockUploadThreads <= 64))              {                  putExtra.BlockUploadThreads = 1;              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  //start to upload                  try                  {                      long uploadedBytes = 0;                      long fileSize = stream.Length;                      long blockCount = (fileSize + BLOCK_SIZE - 1) / BLOCK_SIZE;                        //check resume record file                      ResumeInfo resumeInfo = null;                      if (File.Exists(putExtra.ResumeRecordFile))                      {                          resumeInfo = ResumeHelper.Load(putExtra.ResumeRecordFile);                          if (resumeInfo != null && fileSize == resumeInfo.FileSize)                          {                              //check whether ctx expired                              if (UnixTimestamp.IsContextExpired(resumeInfo.ExpiredAt))                              {                                  resumeInfo = null;                              }                          }                      }                      if (resumeInfo == null)                      {                          resumeInfo = new ResumeInfo()                          {                              FileSize = fileSize'                              BlockCount = blockCount'                              Contexts = new string[blockCount]'                              ExpiredAt = 0'                          };                      }                        //calc upload progress                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (!string.IsNullOrEmpty(context))                          {                              uploadedBytes += BLOCK_SIZE;                          }                      }                        //set upload progress                      putExtra.ProgressHandler(uploadedBytes' fileSize);                        //init block upload error                      //check not finished blocks to upload                      UploadControllerAction upCtrl = putExtra.UploadController();                      ManualResetEvent manualResetEvent = new ManualResetEvent(false);                      Dictionary<long' byte[]> blockDataDict = new Dictionary<long' byte[]>();                      Dictionary<long' HttpResult> blockMakeResults = new Dictionary<long' HttpResult>();                      Dictionary<string' long> uploadedBytesDict = new Dictionary<string' long>();                      uploadedBytesDict.Add("UploadProgress"' uploadedBytes);                      byte[] blockBuffer = new byte[BLOCK_SIZE];                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (string.IsNullOrEmpty(context))                          {                              //check upload controller action before each chunk                              while (true)                              {                                  upCtrl = putExtra.UploadController();                                    if (upCtrl == UploadControllerAction.Aborted)                                  {                                      result.Code = (int)HttpCode.USER_CANCELED;                                      result.RefCode = (int)HttpCode.USER_CANCELED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.Set();                                      return result;                                  }                                  else if (upCtrl == UploadControllerAction.Suspended)                                  {                                      result.RefCode = (int)HttpCode.USER_PAUSED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is paused\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.WaitOne(1000);                                  }                                  else if (upCtrl == UploadControllerAction.Activated)                                  {                                      break;                                  }                              }                                long offset = blockIndex * BLOCK_SIZE;                              stream.Seek(offset' SeekOrigin.Begin);                              int blockLen = stream.Read(blockBuffer' 0' BLOCK_SIZE);                              byte[] blockData = new byte[blockLen];                              Array.Copy(blockBuffer' blockData' blockLen);                              blockDataDict.Add(blockIndex' blockData);                                if (blockDataDict.Count == putExtra.BlockUploadThreads)                              {                                  processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                                  //check mkblk results                                  foreach (int blkIndex in blockMakeResults.Keys)                                  {                                      HttpResult mkblkRet = blockMakeResults[blkIndex];                                      if (mkblkRet.Code != 200)                                      {                                          result = mkblkRet;                                          manualResetEvent.Set();                                          return result;                                      }                                  }                                  blockDataDict.Clear();                                  blockMakeResults.Clear();                                  if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                                  {                                      ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                                  }                              }                          }                      }                        if (blockDataDict.Count > 0)                      {                          processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                          //check mkblk results                          foreach (int blkIndex in blockMakeResults.Keys)                          {                              HttpResult mkblkRet = blockMakeResults[blkIndex];                              if (mkblkRet.Code != 200)                              {                                  result = mkblkRet;                                  manualResetEvent.Set();                                  return result;                              }                          }                          blockDataDict.Clear();                          blockMakeResults.Clear();                          if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                          {                              ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                          }                      }                        if (upCtrl == UploadControllerAction.Activated)                      {                          HttpResult hr = MakeFile(key' fileSize' key' upToken' putExtra' resumeInfo.Contexts);                          if (hr.Code != (int)HttpCode.OK)                          {                              result.Shadow(hr);                              result.RefText += string.Format("[{0}] [ResumableUpload] Error: mkfile: code = {1}' text = {2}\n"'                                  DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' hr.Code' hr.Text);                          }                            if (File.Exists(putExtra.ResumeRecordFile))                          {                              File.Delete(putExtra.ResumeRecordFile);                          }                          result.Shadow(hr);                          result.RefText += string.Format("[{0}] [ResumableUpload] Uploaded: \"{1}\" ==> \"{2}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' putExtra.ResumeRecordFile' key);                      }                      else                      {                          result.Code = (int)HttpCode.USER_CANCELED;                          result.RefCode = (int)HttpCode.USER_CANCELED;                          result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted' mkfile\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      }                        manualResetEvent.Set();                      return result;                  }                  catch (Exception ex)                  {                      Console.WriteLine(ex.StackTrace);                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [ResumableUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        result.RefCode = (int)HttpCode.USER_UNDEF;                      result.RefText += sb.ToString();                  }              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  //start to upload                  try                  {                      long uploadedBytes = 0;                      long fileSize = stream.Length;                      long blockCount = (fileSize + BLOCK_SIZE - 1) / BLOCK_SIZE;                        //check resume record file                      ResumeInfo resumeInfo = null;                      if (File.Exists(putExtra.ResumeRecordFile))                      {                          resumeInfo = ResumeHelper.Load(putExtra.ResumeRecordFile);                          if (resumeInfo != null && fileSize == resumeInfo.FileSize)                          {                              //check whether ctx expired                              if (UnixTimestamp.IsContextExpired(resumeInfo.ExpiredAt))                              {                                  resumeInfo = null;                              }                          }                      }                      if (resumeInfo == null)                      {                          resumeInfo = new ResumeInfo()                          {                              FileSize = fileSize'                              BlockCount = blockCount'                              Contexts = new string[blockCount]'                              ExpiredAt = 0'                          };                      }                        //calc upload progress                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (!string.IsNullOrEmpty(context))                          {                              uploadedBytes += BLOCK_SIZE;                          }                      }                        //set upload progress                      putExtra.ProgressHandler(uploadedBytes' fileSize);                        //init block upload error                      //check not finished blocks to upload                      UploadControllerAction upCtrl = putExtra.UploadController();                      ManualResetEvent manualResetEvent = new ManualResetEvent(false);                      Dictionary<long' byte[]> blockDataDict = new Dictionary<long' byte[]>();                      Dictionary<long' HttpResult> blockMakeResults = new Dictionary<long' HttpResult>();                      Dictionary<string' long> uploadedBytesDict = new Dictionary<string' long>();                      uploadedBytesDict.Add("UploadProgress"' uploadedBytes);                      byte[] blockBuffer = new byte[BLOCK_SIZE];                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (string.IsNullOrEmpty(context))                          {                              //check upload controller action before each chunk                              while (true)                              {                                  upCtrl = putExtra.UploadController();                                    if (upCtrl == UploadControllerAction.Aborted)                                  {                                      result.Code = (int)HttpCode.USER_CANCELED;                                      result.RefCode = (int)HttpCode.USER_CANCELED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.Set();                                      return result;                                  }                                  else if (upCtrl == UploadControllerAction.Suspended)                                  {                                      result.RefCode = (int)HttpCode.USER_PAUSED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is paused\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.WaitOne(1000);                                  }                                  else if (upCtrl == UploadControllerAction.Activated)                                  {                                      break;                                  }                              }                                long offset = blockIndex * BLOCK_SIZE;                              stream.Seek(offset' SeekOrigin.Begin);                              int blockLen = stream.Read(blockBuffer' 0' BLOCK_SIZE);                              byte[] blockData = new byte[blockLen];                              Array.Copy(blockBuffer' blockData' blockLen);                              blockDataDict.Add(blockIndex' blockData);                                if (blockDataDict.Count == putExtra.BlockUploadThreads)                              {                                  processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                                  //check mkblk results                                  foreach (int blkIndex in blockMakeResults.Keys)                                  {                                      HttpResult mkblkRet = blockMakeResults[blkIndex];                                      if (mkblkRet.Code != 200)                                      {                                          result = mkblkRet;                                          manualResetEvent.Set();                                          return result;                                      }                                  }                                  blockDataDict.Clear();                                  blockMakeResults.Clear();                                  if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                                  {                                      ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                                  }                              }                          }                      }                        if (blockDataDict.Count > 0)                      {                          processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                          //check mkblk results                          foreach (int blkIndex in blockMakeResults.Keys)                          {                              HttpResult mkblkRet = blockMakeResults[blkIndex];                              if (mkblkRet.Code != 200)                              {                                  result = mkblkRet;                                  manualResetEvent.Set();                                  return result;                              }                          }                          blockDataDict.Clear();                          blockMakeResults.Clear();                          if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                          {                              ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                          }                      }                        if (upCtrl == UploadControllerAction.Activated)                      {                          HttpResult hr = MakeFile(key' fileSize' key' upToken' putExtra' resumeInfo.Contexts);                          if (hr.Code != (int)HttpCode.OK)                          {                              result.Shadow(hr);                              result.RefText += string.Format("[{0}] [ResumableUpload] Error: mkfile: code = {1}' text = {2}\n"'                                  DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' hr.Code' hr.Text);                          }                            if (File.Exists(putExtra.ResumeRecordFile))                          {                              File.Delete(putExtra.ResumeRecordFile);                          }                          result.Shadow(hr);                          result.RefText += string.Format("[{0}] [ResumableUpload] Uploaded: \"{1}\" ==> \"{2}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' putExtra.ResumeRecordFile' key);                      }                      else                      {                          result.Code = (int)HttpCode.USER_CANCELED;                          result.RefCode = (int)HttpCode.USER_CANCELED;                          result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted' mkfile\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      }                        manualResetEvent.Set();                      return result;                  }                  catch (Exception ex)                  {                      Console.WriteLine(ex.StackTrace);                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [ResumableUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        result.RefCode = (int)HttpCode.USER_UNDEF;                      result.RefText += sb.ToString();                  }              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  //start to upload                  try                  {                      long uploadedBytes = 0;                      long fileSize = stream.Length;                      long blockCount = (fileSize + BLOCK_SIZE - 1) / BLOCK_SIZE;                        //check resume record file                      ResumeInfo resumeInfo = null;                      if (File.Exists(putExtra.ResumeRecordFile))                      {                          resumeInfo = ResumeHelper.Load(putExtra.ResumeRecordFile);                          if (resumeInfo != null && fileSize == resumeInfo.FileSize)                          {                              //check whether ctx expired                              if (UnixTimestamp.IsContextExpired(resumeInfo.ExpiredAt))                              {                                  resumeInfo = null;                              }                          }                      }                      if (resumeInfo == null)                      {                          resumeInfo = new ResumeInfo()                          {                              FileSize = fileSize'                              BlockCount = blockCount'                              Contexts = new string[blockCount]'                              ExpiredAt = 0'                          };                      }                        //calc upload progress                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (!string.IsNullOrEmpty(context))                          {                              uploadedBytes += BLOCK_SIZE;                          }                      }                        //set upload progress                      putExtra.ProgressHandler(uploadedBytes' fileSize);                        //init block upload error                      //check not finished blocks to upload                      UploadControllerAction upCtrl = putExtra.UploadController();                      ManualResetEvent manualResetEvent = new ManualResetEvent(false);                      Dictionary<long' byte[]> blockDataDict = new Dictionary<long' byte[]>();                      Dictionary<long' HttpResult> blockMakeResults = new Dictionary<long' HttpResult>();                      Dictionary<string' long> uploadedBytesDict = new Dictionary<string' long>();                      uploadedBytesDict.Add("UploadProgress"' uploadedBytes);                      byte[] blockBuffer = new byte[BLOCK_SIZE];                      for (long blockIndex = 0; blockIndex < blockCount; blockIndex++)                      {                          string context = resumeInfo.Contexts[blockIndex];                          if (string.IsNullOrEmpty(context))                          {                              //check upload controller action before each chunk                              while (true)                              {                                  upCtrl = putExtra.UploadController();                                    if (upCtrl == UploadControllerAction.Aborted)                                  {                                      result.Code = (int)HttpCode.USER_CANCELED;                                      result.RefCode = (int)HttpCode.USER_CANCELED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.Set();                                      return result;                                  }                                  else if (upCtrl == UploadControllerAction.Suspended)                                  {                                      result.RefCode = (int)HttpCode.USER_PAUSED;                                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is paused\n"'                                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                                      manualResetEvent.WaitOne(1000);                                  }                                  else if (upCtrl == UploadControllerAction.Activated)                                  {                                      break;                                  }                              }                                long offset = blockIndex * BLOCK_SIZE;                              stream.Seek(offset' SeekOrigin.Begin);                              int blockLen = stream.Read(blockBuffer' 0' BLOCK_SIZE);                              byte[] blockData = new byte[blockLen];                              Array.Copy(blockBuffer' blockData' blockLen);                              blockDataDict.Add(blockIndex' blockData);                                if (blockDataDict.Count == putExtra.BlockUploadThreads)                              {                                  processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                                  //check mkblk results                                  foreach (int blkIndex in blockMakeResults.Keys)                                  {                                      HttpResult mkblkRet = blockMakeResults[blkIndex];                                      if (mkblkRet.Code != 200)                                      {                                          result = mkblkRet;                                          manualResetEvent.Set();                                          return result;                                      }                                  }                                  blockDataDict.Clear();                                  blockMakeResults.Clear();                                  if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                                  {                                      ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                                  }                              }                          }                      }                        if (blockDataDict.Count > 0)                      {                          processMakeBlocks(blockDataDict' upToken' putExtra' resumeInfo' blockMakeResults' uploadedBytesDict' fileSize);                          //check mkblk results                          foreach (int blkIndex in blockMakeResults.Keys)                          {                              HttpResult mkblkRet = blockMakeResults[blkIndex];                              if (mkblkRet.Code != 200)                              {                                  result = mkblkRet;                                  manualResetEvent.Set();                                  return result;                              }                          }                          blockDataDict.Clear();                          blockMakeResults.Clear();                          if (!string.IsNullOrEmpty(putExtra.ResumeRecordFile))                          {                              ResumeHelper.Save(resumeInfo' putExtra.ResumeRecordFile);                          }                      }                        if (upCtrl == UploadControllerAction.Activated)                      {                          HttpResult hr = MakeFile(key' fileSize' key' upToken' putExtra' resumeInfo.Contexts);                          if (hr.Code != (int)HttpCode.OK)                          {                              result.Shadow(hr);                              result.RefText += string.Format("[{0}] [ResumableUpload] Error: mkfile: code = {1}' text = {2}\n"'                                  DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' hr.Code' hr.Text);                          }                            if (File.Exists(putExtra.ResumeRecordFile))                          {                              File.Delete(putExtra.ResumeRecordFile);                          }                          result.Shadow(hr);                          result.RefText += string.Format("[{0}] [ResumableUpload] Uploaded: \"{1}\" ==> \"{2}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' putExtra.ResumeRecordFile' key);                      }                      else                      {                          result.Code = (int)HttpCode.USER_CANCELED;                          result.RefCode = (int)HttpCode.USER_CANCELED;                          result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted' mkfile\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      }                        manualResetEvent.Set();                      return result;                  }                  catch (Exception ex)                  {                      Console.WriteLine(ex.StackTrace);                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [ResumableUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        result.RefCode = (int)HttpCode.USER_UNDEF;                      result.RefText += sb.ToString();                  }              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,MakeBlock,The following statement contains a magic number: while (true)              {                  UploadControllerAction upCtl = resumeBlocker.PutExtra.UploadController();                  if (upCtl == UploadControllerAction.Suspended)                  {                      doneEvent.WaitOne(1000);                      continue;                  }                  else if (upCtl == UploadControllerAction.Aborted)                  {                      doneEvent.Set();                        result.Code = (int)HttpCode.USER_CANCELED;                      result.RefCode = (int)HttpCode.USER_CANCELED;                      result.RefText += string.Format("[{0}] [ResumableUpload] Info: upload task is aborted' mkblk {1}\n"'                          DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' blockIndex);                      blockMakeResults.Add(blockIndex' result);                      return;                  }                  else                  {                      break;                  }              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,DefaultUploadProgressHandler,The following statement contains a magic number: if (uploadedBytes < totalBytes)              {                  Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes);              }              else              {                  Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0);              }
Magic Number,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,DefaultUploadProgressHandler,The following statement contains a magic number: if (uploadedBytes < totalBytes)              {                  Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes);              }              else              {                  Console.WriteLine("[{0}] [ResumableUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0);              }
Magic Number,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  try                  {                      string boundary = HttpManager.CreateFormDataBoundary();                      StringBuilder bodyBuilder = new StringBuilder();                      bodyBuilder.AppendLine("--" + boundary);                        if (key != null)                      {                          //write key when it is not null                          bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"key\"");                          bodyBuilder.AppendLine();                          bodyBuilder.AppendLine(key);                          bodyBuilder.AppendLine("--" + boundary);                      }                        //write token                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"token\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(token);                      bodyBuilder.AppendLine("--" + boundary);                        //write extra params                      if (putExtra.Params != null && putExtra.Params.Count > 0)                      {                          foreach (var p in putExtra.Params)                          {                              if (p.Key.StartsWith("x:"))                              {                                  bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"{0}\""' p.Key);                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine(p.Value);                                  bodyBuilder.AppendLine("--" + boundary);                              }                          }                      }                        //prepare data buffer                      int bufferSize = 1024 * 1024;                      byte[] buffer = new byte[bufferSize];                      int bytesRead = 0;                      putExtra.ProgressHandler(0' stream.Length);                      MemoryStream dataMS = new MemoryStream();                      while ((bytesRead = stream.Read(buffer' 0' bufferSize)) != 0)                      {                          dataMS.Write(buffer' 0' bytesRead);                      }                        //write crc32                      uint crc32 = CRC32.CheckSumBytes(dataMS.ToArray());                      //write key when it is not null                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"crc32\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(crc32.ToString());                      bodyBuilder.AppendLine("--" + boundary);                        //write fname                      bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"file\"; filename=\"{0}\""' fname);                      bodyBuilder.AppendLine();                        //write mime type                      bodyBuilder.AppendFormat("Content-Type: {0}"' putExtra.MimeType);                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine();                        //write file data                      StringBuilder bodyEnd = new StringBuilder();                      bodyEnd.AppendLine();                      bodyEnd.AppendLine("--" + boundary + "--");                        byte[] partData1 = Encoding.UTF8.GetBytes(bodyBuilder.ToString());                      byte[] partData2 = dataMS.ToArray();                      byte[] partData3 = Encoding.UTF8.GetBytes(bodyEnd.ToString());                        MemoryStream ms = new MemoryStream();                      ms.Write(partData1' 0' partData1.Length);                      ms.Write(partData2' 0' partData2.Length);                      ms.Write(partData3' 0' partData3.Length);                        //get upload host                      string ak = UpToken.GetAccessKeyFromUpToken(token);                      string bucket = UpToken.GetBucketFromUpToken(token);                      if (ak == null || bucket == null)                      {                          return HttpResult.InvalidToken;                      }                        string uploadHost = this.config.UpHost(ak' bucket);                      putExtra.ProgressHandler(stream.Length / 5' stream.Length);                      result = httpManager.PostMultipart(uploadHost' ms.ToArray()' boundary' null);                      putExtra.ProgressHandler(stream.Length' stream.Length);                      if (result.Code == (int)HttpCode.OK)                      {                          result.RefText += string.Format("[{0}] [FormUpload] Uploaded: #STREAM# ==> \"{1}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' key);                      }                      else                      {                          result.RefText += string.Format("[{0}] [FormUpload] Failed: code = {1}' text = {2}\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' result.Code' result.Text);                      }                        //close memory stream                      ms.Close();                      dataMS.Close();                  }                  catch (Exception ex)                  {                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [FormUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        if (ex is QiniuException)                      {                          QiniuException qex = (QiniuException)ex;                          result.Code = qex.HttpResult.Code;                          result.RefCode = qex.HttpResult.Code;                          result.Text = qex.HttpResult.Text;                          result.RefText += sb.ToString();                      }                      else                      {                          result.RefCode = (int)HttpCode.USER_UNDEF;                          result.RefText += sb.ToString();                      }                  }              }
Magic Number,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  try                  {                      string boundary = HttpManager.CreateFormDataBoundary();                      StringBuilder bodyBuilder = new StringBuilder();                      bodyBuilder.AppendLine("--" + boundary);                        if (key != null)                      {                          //write key when it is not null                          bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"key\"");                          bodyBuilder.AppendLine();                          bodyBuilder.AppendLine(key);                          bodyBuilder.AppendLine("--" + boundary);                      }                        //write token                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"token\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(token);                      bodyBuilder.AppendLine("--" + boundary);                        //write extra params                      if (putExtra.Params != null && putExtra.Params.Count > 0)                      {                          foreach (var p in putExtra.Params)                          {                              if (p.Key.StartsWith("x:"))                              {                                  bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"{0}\""' p.Key);                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine(p.Value);                                  bodyBuilder.AppendLine("--" + boundary);                              }                          }                      }                        //prepare data buffer                      int bufferSize = 1024 * 1024;                      byte[] buffer = new byte[bufferSize];                      int bytesRead = 0;                      putExtra.ProgressHandler(0' stream.Length);                      MemoryStream dataMS = new MemoryStream();                      while ((bytesRead = stream.Read(buffer' 0' bufferSize)) != 0)                      {                          dataMS.Write(buffer' 0' bytesRead);                      }                        //write crc32                      uint crc32 = CRC32.CheckSumBytes(dataMS.ToArray());                      //write key when it is not null                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"crc32\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(crc32.ToString());                      bodyBuilder.AppendLine("--" + boundary);                        //write fname                      bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"file\"; filename=\"{0}\""' fname);                      bodyBuilder.AppendLine();                        //write mime type                      bodyBuilder.AppendFormat("Content-Type: {0}"' putExtra.MimeType);                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine();                        //write file data                      StringBuilder bodyEnd = new StringBuilder();                      bodyEnd.AppendLine();                      bodyEnd.AppendLine("--" + boundary + "--");                        byte[] partData1 = Encoding.UTF8.GetBytes(bodyBuilder.ToString());                      byte[] partData2 = dataMS.ToArray();                      byte[] partData3 = Encoding.UTF8.GetBytes(bodyEnd.ToString());                        MemoryStream ms = new MemoryStream();                      ms.Write(partData1' 0' partData1.Length);                      ms.Write(partData2' 0' partData2.Length);                      ms.Write(partData3' 0' partData3.Length);                        //get upload host                      string ak = UpToken.GetAccessKeyFromUpToken(token);                      string bucket = UpToken.GetBucketFromUpToken(token);                      if (ak == null || bucket == null)                      {                          return HttpResult.InvalidToken;                      }                        string uploadHost = this.config.UpHost(ak' bucket);                      putExtra.ProgressHandler(stream.Length / 5' stream.Length);                      result = httpManager.PostMultipart(uploadHost' ms.ToArray()' boundary' null);                      putExtra.ProgressHandler(stream.Length' stream.Length);                      if (result.Code == (int)HttpCode.OK)                      {                          result.RefText += string.Format("[{0}] [FormUpload] Uploaded: #STREAM# ==> \"{1}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' key);                      }                      else                      {                          result.RefText += string.Format("[{0}] [FormUpload] Failed: code = {1}' text = {2}\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' result.Code' result.Text);                      }                        //close memory stream                      ms.Close();                      dataMS.Close();                  }                  catch (Exception ex)                  {                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [FormUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        if (ex is QiniuException)                      {                          QiniuException qex = (QiniuException)ex;                          result.Code = qex.HttpResult.Code;                          result.RefCode = qex.HttpResult.Code;                          result.Text = qex.HttpResult.Text;                          result.RefText += sb.ToString();                      }                      else                      {                          result.RefCode = (int)HttpCode.USER_UNDEF;                          result.RefText += sb.ToString();                      }                  }              }
Magic Number,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,UploadStream,The following statement contains a magic number: using (stream)              {                  try                  {                      string boundary = HttpManager.CreateFormDataBoundary();                      StringBuilder bodyBuilder = new StringBuilder();                      bodyBuilder.AppendLine("--" + boundary);                        if (key != null)                      {                          //write key when it is not null                          bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"key\"");                          bodyBuilder.AppendLine();                          bodyBuilder.AppendLine(key);                          bodyBuilder.AppendLine("--" + boundary);                      }                        //write token                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"token\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(token);                      bodyBuilder.AppendLine("--" + boundary);                        //write extra params                      if (putExtra.Params != null && putExtra.Params.Count > 0)                      {                          foreach (var p in putExtra.Params)                          {                              if (p.Key.StartsWith("x:"))                              {                                  bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"{0}\""' p.Key);                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine();                                  bodyBuilder.AppendLine(p.Value);                                  bodyBuilder.AppendLine("--" + boundary);                              }                          }                      }                        //prepare data buffer                      int bufferSize = 1024 * 1024;                      byte[] buffer = new byte[bufferSize];                      int bytesRead = 0;                      putExtra.ProgressHandler(0' stream.Length);                      MemoryStream dataMS = new MemoryStream();                      while ((bytesRead = stream.Read(buffer' 0' bufferSize)) != 0)                      {                          dataMS.Write(buffer' 0' bytesRead);                      }                        //write crc32                      uint crc32 = CRC32.CheckSumBytes(dataMS.ToArray());                      //write key when it is not null                      bodyBuilder.AppendLine("Content-Disposition: form-data; name=\"crc32\"");                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine(crc32.ToString());                      bodyBuilder.AppendLine("--" + boundary);                        //write fname                      bodyBuilder.AppendFormat("Content-Disposition: form-data; name=\"file\"; filename=\"{0}\""' fname);                      bodyBuilder.AppendLine();                        //write mime type                      bodyBuilder.AppendFormat("Content-Type: {0}"' putExtra.MimeType);                      bodyBuilder.AppendLine();                      bodyBuilder.AppendLine();                        //write file data                      StringBuilder bodyEnd = new StringBuilder();                      bodyEnd.AppendLine();                      bodyEnd.AppendLine("--" + boundary + "--");                        byte[] partData1 = Encoding.UTF8.GetBytes(bodyBuilder.ToString());                      byte[] partData2 = dataMS.ToArray();                      byte[] partData3 = Encoding.UTF8.GetBytes(bodyEnd.ToString());                        MemoryStream ms = new MemoryStream();                      ms.Write(partData1' 0' partData1.Length);                      ms.Write(partData2' 0' partData2.Length);                      ms.Write(partData3' 0' partData3.Length);                        //get upload host                      string ak = UpToken.GetAccessKeyFromUpToken(token);                      string bucket = UpToken.GetBucketFromUpToken(token);                      if (ak == null || bucket == null)                      {                          return HttpResult.InvalidToken;                      }                        string uploadHost = this.config.UpHost(ak' bucket);                      putExtra.ProgressHandler(stream.Length / 5' stream.Length);                      result = httpManager.PostMultipart(uploadHost' ms.ToArray()' boundary' null);                      putExtra.ProgressHandler(stream.Length' stream.Length);                      if (result.Code == (int)HttpCode.OK)                      {                          result.RefText += string.Format("[{0}] [FormUpload] Uploaded: #STREAM# ==> \"{1}\"\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' key);                      }                      else                      {                          result.RefText += string.Format("[{0}] [FormUpload] Failed: code = {1}' text = {2}\n"'                              DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' result.Code' result.Text);                      }                        //close memory stream                      ms.Close();                      dataMS.Close();                  }                  catch (Exception ex)                  {                      StringBuilder sb = new StringBuilder();                      sb.AppendFormat("[{0}] [FormUpload] Error: "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                      Exception e = ex;                      while (e != null)                      {                          sb.Append(e.Message + " ");                          e = e.InnerException;                      }                      sb.AppendLine();                        if (ex is QiniuException)                      {                          QiniuException qex = (QiniuException)ex;                          result.Code = qex.HttpResult.Code;                          result.RefCode = qex.HttpResult.Code;                          result.Text = qex.HttpResult.Text;                          result.RefText += sb.ToString();                      }                      else                      {                          result.RefCode = (int)HttpCode.USER_UNDEF;                          result.RefText += sb.ToString();                      }                  }              }
Magic Number,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,DefaultUploadProgressHandler,The following statement contains a magic number: if (uploadedBytes < totalBytes)              {                  Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes);              }              else              {                  Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0);              }
Magic Number,Qiniu.Storage,FormUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\FormUploader.cs,DefaultUploadProgressHandler,The following statement contains a magic number: if (uploadedBytes < totalBytes)              {                  Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0 * uploadedBytes / totalBytes);              }              else              {                  Console.WriteLine("[{0}] [FormUpload] Progress: {1'7:0.000}%\n"' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff")' 100.0);              }
Magic Number,Qiniu.Storage,BucketManager,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\BucketManager.cs,ListFiles,The following statement contains a magic number: try              {                  StringBuilder sb = new StringBuilder("/list?bucket=" + bucket);                    if (!string.IsNullOrEmpty(marker))                  {                      sb.Append("&marker=" + marker);                  }                    if (!string.IsNullOrEmpty(prefix))                  {                      sb.Append("&prefix=" + prefix);                  }                    if (!string.IsNullOrEmpty(delimiter))                  {                      sb.Append("&delimiter=" + delimiter);                  }                    if (limit > 1000 || limit < 1)                  {                      sb.Append("&limit=1000");                  }                  else                  {                      sb.Append("&limit=" + limit);                  }                    string listUrl = string.Format("{0}{1}"' this.config.RsfHost(this.mac.AccessKey' bucket)' sb.ToString());                  string token = auth.CreateManageToken(listUrl);                    HttpResult hr = httpManager.Post(listUrl' token);                  result.Shadow(hr);              }              catch (QiniuException ex)              {                  StringBuilder sb = new StringBuilder();                  sb.AppendFormat("[{0}] [listFiles] Error:  "' DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.ffff"));                  Exception e = ex;                  while (e != null)                  {                      sb.Append(e.Message + " ");                      e = e.InnerException;                  }                  sb.AppendLine();                    result.Code = ex.HttpResult.Code;                  result.RefCode = ex.HttpResult.Code;                  result.Text = ex.HttpResult.Text;                  result.RefText += sb.ToString();              }
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ComputeHash,The following statement contains a magic number: var mesLength = (uint)(bMsg.Length * 8) / 32;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ComputeHash,The following statement contains a magic number: var mesLength = (uint)(bMsg.Length * 8) / 32;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ComputeHash,The following statement contains a magic number: for (uint i = 0; i < mesLength / 16; i++)              {                  CopyBlock(bMsg' i);                  Transform(ref dg.A' ref dg.B' ref dg.C' ref dg.D);              }
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 0' 7' 1);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 1' 12' 2);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 1' 12' 2);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 2' 17' 3);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 2' 17' 3);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 2' 17' 3);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 3' 22' 4);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 3' 22' 4);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 3' 22' 4);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 4' 7' 5);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 4' 7' 5);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 4' 7' 5);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 5' 12' 6);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 5' 12' 6);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 5' 12' 6);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 6' 17' 7);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 6' 17' 7);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 6' 17' 7);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 7' 22' 8);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 7' 22' 8);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 7' 22' 8);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 8' 7' 9);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 8' 7' 9);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 8' 7' 9);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 9' 12' 10);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 9' 12' 10);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 9' 12' 10);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 10' 17' 11);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 10' 17' 11);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 10' 17' 11);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 11' 22' 12);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 11' 22' 12);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 11' 22' 12);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 12' 7' 13);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 12' 7' 13);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref A' B' C' D' 12' 7' 13);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 13' 12' 14);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 13' 12' 14);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref D' A' B' C' 13' 12' 14);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 14' 17' 15);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 14' 17' 15);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref C' D' A' B' 14' 17' 15);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 15' 22' 16);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 15' 22' 16);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: F(ref B' C' D' A' 15' 22' 16);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 1' 5' 17);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 1' 5' 17);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 6' 9' 18);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 6' 9' 18);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 6' 9' 18);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 11' 14' 19);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 11' 14' 19);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 11' 14' 19);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 0' 20' 20);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 0' 20' 20);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 5' 5' 21);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 5' 5' 21);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 5' 5' 21);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 10' 9' 22);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 10' 9' 22);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 10' 9' 22);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 15' 14' 23);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 15' 14' 23);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 15' 14' 23);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 4' 20' 24);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 4' 20' 24);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 4' 20' 24);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 9' 5' 25);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 9' 5' 25);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 9' 5' 25);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 14' 9' 26);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 14' 9' 26);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 14' 9' 26);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 3' 14' 27);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 3' 14' 27);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 3' 14' 27);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 8' 20' 28);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 8' 20' 28);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 8' 20' 28);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 13' 5' 29);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 13' 5' 29);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref A' B' C' D' 13' 5' 29);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 2' 9' 30);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 2' 9' 30);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref D' A' B' C' 2' 9' 30);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 7' 14' 31);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 7' 14' 31);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref C' D' A' B' 7' 14' 31);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 12' 20' 32);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 12' 20' 32);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: G(ref B' C' D' A' 12' 20' 32);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 5' 4' 33);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 5' 4' 33);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 5' 4' 33);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 8' 11' 34);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 8' 11' 34);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 8' 11' 34);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 11' 16' 35);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 11' 16' 35);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 11' 16' 35);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 14' 23' 36);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 14' 23' 36);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 14' 23' 36);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 1' 4' 37);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 1' 4' 37);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 4' 11' 38);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 4' 11' 38);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 4' 11' 38);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 7' 16' 39);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 7' 16' 39);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 7' 16' 39);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 10' 23' 40);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 10' 23' 40);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 10' 23' 40);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 13' 4' 41);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 13' 4' 41);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 13' 4' 41);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 0' 11' 42);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 0' 11' 42);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 3' 16' 43);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 3' 16' 43);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 3' 16' 43);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 6' 23' 44);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 6' 23' 44);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 6' 23' 44);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 9' 4' 45);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 9' 4' 45);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref A' B' C' D' 9' 4' 45);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 12' 11' 46);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 12' 11' 46);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref D' A' B' C' 12' 11' 46);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 15' 16' 47);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 15' 16' 47);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref C' D' A' B' 15' 16' 47);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 2' 23' 48);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 2' 23' 48);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: H(ref B' C' D' A' 2' 23' 48);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 0' 6' 49);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 0' 6' 49);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 7' 10' 50);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 7' 10' 50);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 7' 10' 50);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 14' 15' 51);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 14' 15' 51);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 14' 15' 51);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 5' 21' 52);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 5' 21' 52);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 5' 21' 52);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 12' 6' 53);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 12' 6' 53);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 12' 6' 53);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 3' 10' 54);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 3' 10' 54);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 3' 10' 54);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 10' 15' 55);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 10' 15' 55);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 10' 15' 55);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 1' 21' 56);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 1' 21' 56);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 8' 6' 57);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 8' 6' 57);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 8' 6' 57);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 15' 10' 58);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 15' 10' 58);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 15' 10' 58);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 6' 15' 59);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 6' 15' 59);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 6' 15' 59);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 13' 21' 60);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 13' 21' 60);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 13' 21' 60);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 4' 6' 61);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 4' 6' 61);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref A' B' C' D' 4' 6' 61);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 11' 10' 62);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 11' 10' 62);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref D' A' B' C' 11' 10' 62);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 2' 15' 63);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 2' 15' 63);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref C' D' A' B' 2' 15' 63);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 9' 21' 64);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 9' 21' 64);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,Transform,The following statement contains a magic number: I(ref B' C' D' A' 9' 21' 64);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var padSize = 448 - mes.Length * 8 % 512;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var padSize = 448 - mes.Length * 8 % 512;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var padSize = 448 - mes.Length * 8 % 512;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var pad = (uint)((padSize + 512) % 512);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var pad = (uint)((padSize + 512) % 512);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: if (pad == 0) pad = 512;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var sizeMsgBuff = (uint)(mes.Length + pad / 8 + 8);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var sizeMsgBuff = (uint)(mes.Length + pad / 8 + 8);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: var sizeMsg = (ulong)mes.Length * 8;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: for (var i = 8; i > 0; i--)                  bMsg[sizeMsgBuff - i] = (byte)((sizeMsg >> ((8 - i) * 8)) & 0x00000000000000ff);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: for (var i = 8; i > 0; i--)                  bMsg[sizeMsgBuff - i] = (byte)((sizeMsg >> ((8 - i) * 8)) & 0x00000000000000ff);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CreatePaddedBuffer,The following statement contains a magic number: for (var i = 8; i > 0; i--)                  bMsg[sizeMsgBuff - i] = (byte)((sizeMsg >> ((8 - i) * 8)) & 0x00000000000000ff);
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: block = block << 6;
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,LabMD5,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,CopyBlock,The following statement contains a magic number: for (uint j = 0; j < 61; j += 4)                  X[j >> 2] = ((uint)bMsg[block + j + 3] << 24) |                              ((uint)bMsg[block + j + 2] << 16) |                              ((uint)bMsg[block + j + 1] << 8) |                              bMsg[block + j];
Magic Number,Qiniu.Util,BitHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,RotateLeft,The following statement contains a magic number: return (num >> (32 - shift)) | (num << shift);
Magic Number,Qiniu.Util,BitHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ReverseByte,The following statement contains a magic number: return ((num & 0x000000ff) << 24) |                         (num >> 24) |                         ((num & 0x00ff0000) >> 8) |                         ((num & 0x0000ff00) << 8);
Magic Number,Qiniu.Util,BitHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ReverseByte,The following statement contains a magic number: return ((num & 0x000000ff) << 24) |                         (num >> 24) |                         ((num & 0x00ff0000) >> 8) |                         ((num & 0x0000ff00) << 8);
Magic Number,Qiniu.Util,BitHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ReverseByte,The following statement contains a magic number: return ((num & 0x000000ff) << 24) |                         (num >> 24) |                         ((num & 0x00ff0000) >> 8) |                         ((num & 0x0000ff00) << 8);
Magic Number,Qiniu.Util,BitHelper,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\LabMD5.cs,ReverseByte,The following statement contains a magic number: return ((num & 0x000000ff) << 24) |                         (num >> 24) |                         ((num & 0x00ff0000) >> 8) |                         ((num & 0x0000ff00) << 8);
Magic Number,Qiniu.Util,UpToken,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UpToken.cs,GetAccessKeyFromUpToken,The following statement contains a magic number: if (items.Length == 3)              {                  accessKey = items[0];              }
Magic Number,Qiniu.Util,UpToken,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UpToken.cs,GetBucketFromUpToken,The following statement contains a magic number: if (items.Length == 3)              {                  string encodedPolicy = items[2];                  try                  {                      string policyStr = Encoding.UTF8.GetString(Base64.UrlsafeBase64Decode(encodedPolicy));                      PutPolicy putPolicy = JsonConvert.DeserializeObject<PutPolicy>(policyStr);                      string scope = putPolicy.Scope;                      string[] scopeItems = scope.Split(':');                      if (scopeItems.Length >= 1)                      {                          bucket = scopeItems[0];                      }                  }catch(Exception)                  {                    }              }
Magic Number,Qiniu.Util,UpToken,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\UpToken.cs,GetBucketFromUpToken,The following statement contains a magic number: if (items.Length == 3)              {                  string encodedPolicy = items[2];                  try                  {                      string policyStr = Encoding.UTF8.GetString(Base64.UrlsafeBase64Decode(encodedPolicy));                      PutPolicy putPolicy = JsonConvert.DeserializeObject<PutPolicy>(policyStr);                      string scope = putPolicy.Scope;                      string[] scopeItems = scope.Split(':');                      if (scopeItems.Length >= 1)                      {                          bucket = scopeItems[0];                      }                  }catch(Exception)                  {                    }              }
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,makeTable,The following statement contains a magic number: uint[] table = new uint[256];
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,makeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  uint crc = (uint)i;                  for (int j = 0; j < 8; j++)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ poly;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,makeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  uint crc = (uint)i;                  for (int j = 0; j < 8; j++)                  {                      if ((crc & 1) == 1)                          crc = (crc >> 1) ^ poly;                      else                          crc >>= 1;                  }                  table[i] = crc;              }
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,Update,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  crc = table[((byte)crc) ^ p[offset + i]] ^ (crc >> 8);              }
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,checkSumFile,The following statement contains a magic number: int bufferLen = 32 * 1024;
Magic Number,Qiniu.Util,CRC32,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\CRC32.cs,checkSumFile,The following statement contains a magic number: int bufferLen = 32 * 1024;
Magic Number,Qiniu.Util,Hashing,C:\repos\qiniu_csharp-sdk\src\Qiniu\Util\Hashing.cs,CalcMD5,The following statement contains a magic number: StringBuilder sb = new StringBuilder(hashData.Length * 2);
Magic Number,Qiniu.Http,HttpResult,C:\repos\qiniu_csharp-sdk\src\Qiniu\Http\HttpResult.cs,ToString,The following statement contains a magic number: if (Data != null)              {                  sb.AppendLine("data:");                  int n = 1024;                  if (Data.Length <= n)                  {                      sb.AppendLine(Encoding.UTF8.GetString(Data));                  }                  else                  {                                            sb.AppendLine(Encoding.UTF8.GetString(Data' 0' n));                      sb.AppendFormat("<--- TOO-LARGE-TO-DISPLAY --- TOTAL {0} BYTES --->"' Data.Length);                      sb.AppendLine();                  }                              }
Duplicate Code,Qiniu.Storage,ResumableUploader,C:\repos\qiniu_csharp-sdk\src\Qiniu\Storage\ResumableUploader.cs,UploadStream,The method contains a code clone-set at the following line numbers (starting from the method definition): ((119' 138)' (143' 162))
