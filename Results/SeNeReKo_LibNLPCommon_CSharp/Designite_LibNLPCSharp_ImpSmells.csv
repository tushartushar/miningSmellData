Implementation smell,Namespace,Class,File,Method,Description
Long Method,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The method has 111 lines of code.
Complex Method,LibNLPCSharp.bgtask,BackgroundTaskLabel,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\BackgroundTaskLabel.cs,UpdateComponentStates,Cyclomatic complexity of the method is 17
Complex Method,LibNLPCSharp.bgtask,BackgroundTaskLabel,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\BackgroundTaskLabel.cs,button1_Click,Cyclomatic complexity of the method is 15
Complex Method,LibNLPCSharp.io.tcf,TCFFile,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\tcf\TCFFile.cs,LoadFromFile,Cyclomatic complexity of the method is 13
Complex Method,LibNLPCSharp.io.tcf,TCFFile,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\tcf\TCFFile.cs,__ParseSentences,Cyclomatic complexity of the method is 9
Complex Method,LibNLPCSharp.io.tcf,TCFFile,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\tcf\TCFFile.cs,__ParsePoS,Cyclomatic complexity of the method is 12
Complex Method,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,Cyclomatic complexity of the method is 8
Complex Method,LibNLPCSharp.simpletokenizing,Token,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Token.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,__CreateTokenFromBufferDontSkipIfEmpty,Cyclomatic complexity of the method is 11
Complex Method,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,__CreateTokenFromBufferSkipIfEmpty,Cyclomatic complexity of the method is 11
Complex Method,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,Cyclomatic complexity of the method is 27
Complex Method,LibNLPCSharp.simpletokenizing,TokenPattern,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPattern.cs,ToString,Cyclomatic complexity of the method is 23
Complex Method,LibNLPCSharp.simpletokenizing,TokenPattern,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPattern.cs,Match,Cyclomatic complexity of the method is 19
Complex Method,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ParseSingle,Cyclomatic complexity of the method is 10
Complex Method,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Decode,Cyclomatic complexity of the method is 15
Complex Method,LibNLPCSharp.util,SKVP,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SKVP.cs,SKVP,Cyclomatic complexity of the method is 8
Complex Method,LibNLPCSharp.util,SKVPSet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SKVPSet.cs,GetPermutations,Cyclomatic complexity of the method is 11
Long Parameter List,LibNLPCSharp.io.texttokenizing,TextToken,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\TextToken.cs,TextToken,The method has 5 parameters.
Long Parameter List,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,__CreateTokenFromBufferDontSkipIfEmpty,The method has 5 parameters.
Long Parameter List,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,__CreateTokenFromBufferSkipIfEmpty,The method has 5 parameters.
Long Statement,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,ConvertStringToLetters,The length of the statement  "			if (__EqualsAt (letters [i].TextLowerCase' word' pos' letters [i].TextLowerCase.Length) || ((letters [i].TextUpperCase != null) && __EqualsAt (letters [i].TextUpperCase' word' pos' letters [i].TextLowerCase.Length))) { " is 218.
Long Statement,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,ConvertStringToLettersE,The length of the statement  "			if (__EqualsAt (letters [i].TextLowerCase' word' pos' letters [i].TextLowerCase.Length) || ((letters [i].TextUpperCase != null) && __EqualsAt (letters [i].TextUpperCase' word' pos' letters [i].TextLowerCase.Length))) { " is 218.
Long Statement,LibNLPCSharp.gui,GUIToolkit,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\GUIToolkit.cs,ShowErrorMessage,The length of the statement  "	// MessageBox.Show(message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation' MessageBoxDefaultButton.Button1); " is 120.
Long Statement,LibNLPCSharp.gui,GUIToolkit,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\GUIToolkit.cs,ShowInformationMessage,The length of the statement  "	MessageBox.Show (message' "Information"' MessageBoxButtons.OK' MessageBoxIcon.Information' MessageBoxDefaultButton.Button1); " is 124.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ParseSingle,The length of the statement  "			throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ParseSingle,The length of the statement  "			throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ParseSingle,The length of the statement  "		throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,Parse,The length of the statement  "				throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,Parse,The length of the statement  "				throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,Parse,The length of the statement  "			throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__EatTokenPattern0,The length of the statement  "	throw new Exception ("Syntax error at character position: " + ts.CharacterPosition + " (" + ts.Peek ().ToString () + ") [\"" + text + "\"]"); " is 141.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ToIsContent,The length of the statement  "	throw new Exception ("Syntax error at character position: " + token.CharacterPosition + " (" + token.ToString () + ") [\"" + text + "\"]"); " is 139.
Long Statement,LibNLPCSharp.simpletokenizing,TokenPatternBuilder,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\TokenPatternBuilder.cs,__ToDelimChar,The length of the statement  "		throw new Exception ("Syntax error at character position: " + token.CharacterPosition + " (" + token.ToString () + ") [\"" + text + "\"]"); " is 139.
Long Statement,LibNLPCSharp.util,TimeSpanEx,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\TimeSpanEx.cs,ToReadableString,The length of the statement  "	string formatted = string.Format ("{0}{1}{2}{3}"' span.Duration ().Days > 0 ? string.Format ("{0:0} day{1}' "' span.Days' span.Days == 1 ? String.Empty : "s") : string.Empty' span.Duration ().Hours > 0 ? string.Format ("{0:0} hour{1}' "' span.Hours' span.Hours == 1 ? String.Empty : "s") : string.Empty' span.Duration ().Minutes > 0 ? string.Format ("{0:0} minute{1}' "' span.Minutes' span.Minutes == 1 ? String.Empty : "s") : string.Empty' span.Duration ().Seconds > 0 ? string.Format ("{0:0} second{1}"' span.Seconds' span.Seconds == 1 ? String.Empty : "s") : string.Empty); " is 576.
Complex Conditional,LibNLPCSharp.util,SKVP,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SKVP.cs,SKVP,The conditional expression  "(values [0] == null) || (values [0].Trim ().Length != values [0].Length) || (values [0].Length == 0) || (values [0].IndexOf (':') >= 0)"  is complex.
Complex Conditional,LibNLPCSharp.util,SKVP,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SKVP.cs,SKVP,The conditional expression  "(values [i] == null) || (values [i].Trim ().Length != values [i].Length) || (values [i].Length == 0) || (values [i].IndexOf (':') >= 0)"  is complex.
Complex Conditional,LibNLPCSharp.util,Util,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\Util.cs,RemoveSeparatorChar,The conditional expression  "(path.Length == 3) && (path [1] == ':') && ((path [2] == '\\') || (path [2] == '/'))"  is complex.
Virtual Method Call from Constructor,LibNLPCSharp.util,SortedSet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SortedSet.cs,SortedSet,The constructor "SortedSet" calls a virtual method "AddRange".
Empty Catch Block,LibNLPCSharp.alphabet,AlphabetLetterSelectorButton,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\AlphabetLetterSelectorButton.cs,__CloseForm,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.bgtask,AbstractBackgroundTask,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\AbstractBackgroundTask.cs,__FireOnBackgroundTaskStarted,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.bgtask,AbstractBackgroundTask,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\AbstractBackgroundTask.cs,__FireOnBackgroundTaskCompleted,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.io,CSVReader,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\CSVReader.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.io,CSVWriter,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\CSVWriter.cs,Dispose,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.io.texttokenizing,PushbackCharacterReader,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\PushbackCharacterReader.cs,Close,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.util,DelayedEvent,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\DelayedEvent2.cs,__OnTimer,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.util,DelayedEvent,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\DelayedEvent2.cs,__OnImmediate,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.util.model,DelayedEvent,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\model\impl\DelayedEvent.cs,__OnTimer,The method has an empty catch block.
Empty Catch Block,LibNLPCSharp.util.model,DelayedEvent,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\model\impl\DelayedEvent.cs,__OnImmediate,The method has an empty catch block.
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexLE,The following statement contains a magic number: s [i] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i--] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__IntToHexLE,The following statement contains a magic number: s [i] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: s [i++] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: s [i++] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: s [i++] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: n >>= 4;  
Magic Number,LibNLPCSharp.alphabet,Alphabet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\Alphabet.cs,__ShortToHexBE,The following statement contains a magic number: s [i++] = HEXCODES [(n & 15)];  
Magic Number,LibNLPCSharp.alphabet,AlphabetLetterSelectorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\AlphabetLetterSelectorForm.cs,alphabetLetterSelector1_SizeChanged,The following statement contains a magic number: extraSize.Width += extraLeft + extraRight + 4;  
Magic Number,LibNLPCSharp.alphabet,AlphabetLetterSelectorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\alphabet\AlphabetLetterSelectorForm.cs,alphabetLetterSelector1_SizeChanged,The following statement contains a magic number: extraSize.Height += extraTop + extraBottom + 4;  
Magic Number,LibNLPCSharp.bgtask,ArgumentEditorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\ArgumentEditorForm.cs,ArgumentEditorForm,The following statement contains a magic number: foreach (ArgumentDescription ad in argumentDescription) {  	ArgumentEditorControl c = new ArgumentEditorControl (ad);  	c.Location = new Point (0' y);  	c.Size = new Size (panel1.Width' c.Height);  	c.Text = pp.GetAsStr (ppID + ".arg." + ad.ID);  	c.OnChanged += new ArgumentEditorControl.OnTextChanged (c_OnChanged);  	panel1.Controls.Add (c);  	controls.Add (c);  	y += c.Height + 3;  }  
Magic Number,LibNLPCSharp.bgtask,ArgumentEditorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\ArgumentEditorForm.cs,ArgumentEditorForm,The following statement contains a magic number: y += c.Height + 3;  
Magic Number,LibNLPCSharp.dict,SimpleMemoryDictionary,C:\repos\SeNeReKo_LibNLPCommon_CSharp\dict\SimpleMemoryDictionary.cs,SimpleMemoryDictionary,The following statement contains a magic number: nmap = new Record[1024];  
Magic Number,LibNLPCSharp.dict,SimpleMemoryDictionary,C:\repos\SeNeReKo_LibNLPCommon_CSharp\dict\SimpleMemoryDictionary.cs,__EnsureCapacity,The following statement contains a magic number: while (n < capacity)  	n = n * 2;  
Magic Number,LibNLPCSharp.dict,SimpleMemoryDictionary,C:\repos\SeNeReKo_LibNLPCommon_CSharp\dict\SimpleMemoryDictionary.cs,__EnsureCapacity,The following statement contains a magic number: n = n * 2;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: if (ee == null) {  	textBox1.Text = "" + (char)13 + (char)10 + text;  	btnDetails.Visible = false;  }  else {  	this.ee = ee;  	textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text + (char)13 + (char)10 + (char)13 + (char)10 + ee.Message;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,ErrorForm,The following statement contains a magic number: textBox1.Text = "" + (char)13 + (char)10 + text;  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if ((ee != null) || (details != null)) {  	StringBuilder sb = new StringBuilder ();  	if (details != null) {  		sb.Append (details);  	}  	else {  		Exception ex = ee;  		while (ex != null) {  			sb.Append (ex.ToString ());  			sb.Append ((char)13 + (char)10);  			sb.Append ((char)13 + (char)10);  			ex = ex.InnerException;  		}  	}  	textBox1.Text = sb.ToString ();  	textBox1.TextAlign = HorizontalAlignment.Left;  	textBox1.SelectionStart = 0;  	textBox1.SelectionLength = 0;  	Size size = Size;  	size.Height += 300;  	Size = size;  	btnDetails.Visible = false;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if ((ee != null) || (details != null)) {  	StringBuilder sb = new StringBuilder ();  	if (details != null) {  		sb.Append (details);  	}  	else {  		Exception ex = ee;  		while (ex != null) {  			sb.Append (ex.ToString ());  			sb.Append ((char)13 + (char)10);  			sb.Append ((char)13 + (char)10);  			ex = ex.InnerException;  		}  	}  	textBox1.Text = sb.ToString ();  	textBox1.TextAlign = HorizontalAlignment.Left;  	textBox1.SelectionStart = 0;  	textBox1.SelectionLength = 0;  	Size size = Size;  	size.Height += 300;  	Size = size;  	btnDetails.Visible = false;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if ((ee != null) || (details != null)) {  	StringBuilder sb = new StringBuilder ();  	if (details != null) {  		sb.Append (details);  	}  	else {  		Exception ex = ee;  		while (ex != null) {  			sb.Append (ex.ToString ());  			sb.Append ((char)13 + (char)10);  			sb.Append ((char)13 + (char)10);  			ex = ex.InnerException;  		}  	}  	textBox1.Text = sb.ToString ();  	textBox1.TextAlign = HorizontalAlignment.Left;  	textBox1.SelectionStart = 0;  	textBox1.SelectionLength = 0;  	Size size = Size;  	size.Height += 300;  	Size = size;  	btnDetails.Visible = false;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if ((ee != null) || (details != null)) {  	StringBuilder sb = new StringBuilder ();  	if (details != null) {  		sb.Append (details);  	}  	else {  		Exception ex = ee;  		while (ex != null) {  			sb.Append (ex.ToString ());  			sb.Append ((char)13 + (char)10);  			sb.Append ((char)13 + (char)10);  			ex = ex.InnerException;  		}  	}  	textBox1.Text = sb.ToString ();  	textBox1.TextAlign = HorizontalAlignment.Left;  	textBox1.SelectionStart = 0;  	textBox1.SelectionLength = 0;  	Size size = Size;  	size.Height += 300;  	Size = size;  	btnDetails.Visible = false;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if ((ee != null) || (details != null)) {  	StringBuilder sb = new StringBuilder ();  	if (details != null) {  		sb.Append (details);  	}  	else {  		Exception ex = ee;  		while (ex != null) {  			sb.Append (ex.ToString ());  			sb.Append ((char)13 + (char)10);  			sb.Append ((char)13 + (char)10);  			ex = ex.InnerException;  		}  	}  	textBox1.Text = sb.ToString ();  	textBox1.TextAlign = HorizontalAlignment.Left;  	textBox1.SelectionStart = 0;  	textBox1.SelectionLength = 0;  	Size size = Size;  	size.Height += 300;  	Size = size;  	btnDetails.Visible = false;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if (details != null) {  	sb.Append (details);  }  else {  	Exception ex = ee;  	while (ex != null) {  		sb.Append (ex.ToString ());  		sb.Append ((char)13 + (char)10);  		sb.Append ((char)13 + (char)10);  		ex = ex.InnerException;  	}  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if (details != null) {  	sb.Append (details);  }  else {  	Exception ex = ee;  	while (ex != null) {  		sb.Append (ex.ToString ());  		sb.Append ((char)13 + (char)10);  		sb.Append ((char)13 + (char)10);  		ex = ex.InnerException;  	}  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if (details != null) {  	sb.Append (details);  }  else {  	Exception ex = ee;  	while (ex != null) {  		sb.Append (ex.ToString ());  		sb.Append ((char)13 + (char)10);  		sb.Append ((char)13 + (char)10);  		ex = ex.InnerException;  	}  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: if (details != null) {  	sb.Append (details);  }  else {  	Exception ex = ee;  	while (ex != null) {  		sb.Append (ex.ToString ());  		sb.Append ((char)13 + (char)10);  		sb.Append ((char)13 + (char)10);  		ex = ex.InnerException;  	}  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: while (ex != null) {  	sb.Append (ex.ToString ());  	sb.Append ((char)13 + (char)10);  	sb.Append ((char)13 + (char)10);  	ex = ex.InnerException;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: while (ex != null) {  	sb.Append (ex.ToString ());  	sb.Append ((char)13 + (char)10);  	sb.Append ((char)13 + (char)10);  	ex = ex.InnerException;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: while (ex != null) {  	sb.Append (ex.ToString ());  	sb.Append ((char)13 + (char)10);  	sb.Append ((char)13 + (char)10);  	ex = ex.InnerException;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: while (ex != null) {  	sb.Append (ex.ToString ());  	sb.Append ((char)13 + (char)10);  	sb.Append ((char)13 + (char)10);  	ex = ex.InnerException;  }  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: sb.Append ((char)13 + (char)10);  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: sb.Append ((char)13 + (char)10);  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: sb.Append ((char)13 + (char)10);  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: sb.Append ((char)13 + (char)10);  
Magic Number,LibNLPCSharp.gui,ErrorForm,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\ErrorForm.cs,btnDetails_Click,The following statement contains a magic number: size.Height += 300;  
Magic Number,LibNLPCSharp.gui,TextNoticeMgr,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\TextNoticeMgr.cs,TextNoticeMgr,The following statement contains a magic number: foreach (FileInfo fi in dir.GetFiles ()) {  	if (fi.Name.EndsWith (".xml")) {  		files.Add (fi.Name.Substring (0' fi.Name.Length - 4)' fi);  	}  }  
Magic Number,LibNLPCSharp.gui,TextNoticeMgr,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\TextNoticeMgr.cs,TextNoticeMgr,The following statement contains a magic number: if (fi.Name.EndsWith (".xml")) {  	files.Add (fi.Name.Substring (0' fi.Name.Length - 4)' fi);  }  
Magic Number,LibNLPCSharp.gui,TextNoticeMgr,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\TextNoticeMgr.cs,TextNoticeMgr,The following statement contains a magic number: files.Add (fi.Name.Substring (0' fi.Name.Length - 4)' fi);  
Magic Number,LibNLPCSharp.gui,GUIToolkit,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\GUIToolkit.cs,GUIToolkit,The following statement contains a magic number: tempImage = new Bitmap (8' 8' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  
Magic Number,LibNLPCSharp.gui,GUIToolkit,C:\repos\SeNeReKo_LibNLPCommon_CSharp\gui\GUIToolkit.cs,GUIToolkit,The following statement contains a magic number: tempImage = new Bitmap (8' 8' System.Drawing.Imaging.PixelFormat.Format32bppArgb);  
Magic Number,LibNLPCSharp.io.texttokenizing,PushbackCharacterReader,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\PushbackCharacterReader.cs,Read,The following statement contains a magic number: if (characters.Count == 0) {  	StreamChar c = new StreamChar (reader.Read ()' pos' lineNo + 1' colNo + 1);  	if (c.CharI >= 0) {  		pos++;  		if (c.CharI == 13) {  			lineNo++;  			colNo = 0;  		}  		else {  			colNo++;  		}  	}  	return c;  }  else {  	StreamChar c = characters [characters.Count - 1];  	characters.RemoveAt (characters.Count - 1);  	return c;  }  
Magic Number,LibNLPCSharp.io.texttokenizing,PushbackCharacterReader,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\PushbackCharacterReader.cs,Read,The following statement contains a magic number: if (c.CharI >= 0) {  	pos++;  	if (c.CharI == 13) {  		lineNo++;  		colNo = 0;  	}  	else {  		colNo++;  	}  }  
Magic Number,LibNLPCSharp.io.texttokenizing,PushbackCharacterReader,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\PushbackCharacterReader.cs,Read,The following statement contains a magic number: if (c.CharI == 13) {  	lineNo++;  	colNo = 0;  }  else {  	colNo++;  }  
Magic Number,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,The following statement contains a magic number: while (true) {  	StreamChar c = reader.Read ();  	if (bIsFirst) {  		if (c.IsEOS) {  			// EOS  			return new TextToken (EnumTextTokenType.EOS' sb.ToString ()' c.Position' c.LineNo' c.ColumnNo);  		}  		else if (c.IsLetterOrDigit) {  			// start of a word  			sb.Append (c.Char);  			pos = c.Position;  			lineNo = c.LineNo;  			colNo = c.ColumnNo;  			bIsFirst = false;  		}  		else {  			// next token is delimiter  			if (c.CharI == 13) {  				return new TextToken (EnumTextTokenType.LineFeed' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  			}  			else {  				return new TextToken (EnumTextTokenType.Delimiter' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  			}  		}  	}  	else {  		if (c.IsEOS) {  			// EOS  			return new TextToken (EnumTextTokenType.EOS' sb.ToString ()' pos' lineNo' colNo);  		}  		else if (c.IsLetterOrDigit) {  			// within of a word  			sb.Append (c.Char);  		}  		else {  			// within a delimiter  			reader.Unread (c);  			return new TextToken (EnumTextTokenType.Text' sb.ToString ()' pos' lineNo' colNo);  		}  	}  }  
Magic Number,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,The following statement contains a magic number: if (bIsFirst) {  	if (c.IsEOS) {  		// EOS  		return new TextToken (EnumTextTokenType.EOS' sb.ToString ()' c.Position' c.LineNo' c.ColumnNo);  	}  	else if (c.IsLetterOrDigit) {  		// start of a word  		sb.Append (c.Char);  		pos = c.Position;  		lineNo = c.LineNo;  		colNo = c.ColumnNo;  		bIsFirst = false;  	}  	else {  		// next token is delimiter  		if (c.CharI == 13) {  			return new TextToken (EnumTextTokenType.LineFeed' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  		}  		else {  			return new TextToken (EnumTextTokenType.Delimiter' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  		}  	}  }  else {  	if (c.IsEOS) {  		// EOS  		return new TextToken (EnumTextTokenType.EOS' sb.ToString ()' pos' lineNo' colNo);  	}  	else if (c.IsLetterOrDigit) {  		// within of a word  		sb.Append (c.Char);  	}  	else {  		// within a delimiter  		reader.Unread (c);  		return new TextToken (EnumTextTokenType.Text' sb.ToString ()' pos' lineNo' colNo);  	}  }  
Magic Number,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,The following statement contains a magic number: if (c.IsEOS) {  	// EOS  	return new TextToken (EnumTextTokenType.EOS' sb.ToString ()' c.Position' c.LineNo' c.ColumnNo);  }  else if (c.IsLetterOrDigit) {  	// start of a word  	sb.Append (c.Char);  	pos = c.Position;  	lineNo = c.LineNo;  	colNo = c.ColumnNo;  	bIsFirst = false;  }  else {  	// next token is delimiter  	if (c.CharI == 13) {  		return new TextToken (EnumTextTokenType.LineFeed' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  	}  	else {  		return new TextToken (EnumTextTokenType.Delimiter' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  	}  }  
Magic Number,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,The following statement contains a magic number: if (c.IsLetterOrDigit) {  	// start of a word  	sb.Append (c.Char);  	pos = c.Position;  	lineNo = c.LineNo;  	colNo = c.ColumnNo;  	bIsFirst = false;  }  else {  	// next token is delimiter  	if (c.CharI == 13) {  		return new TextToken (EnumTextTokenType.LineFeed' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  	}  	else {  		return new TextToken (EnumTextTokenType.Delimiter' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  	}  }  
Magic Number,LibNLPCSharp.io.texttokenizing,SimpleWordTokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\io\texttokenizing\SimpleWordTokenizer.cs,__ReadNextToken,The following statement contains a magic number: if (c.CharI == 13) {  	return new TextToken (EnumTextTokenType.LineFeed' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  }  else {  	return new TextToken (EnumTextTokenType.Delimiter' "" + c.Char' c.Position' c.LineNo' c.ColumnNo);  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: foreach (char c2 in input) {  	pos++;  	char c = bLowerizeCharacters ? char.ToLower (c2) : c2;  	// ----  	if (bMasked) {  		sb.Append (c);  		bMasked = false;  		continue;  	}  	if (bInSingleQuotes) {  		if (c == '\'') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringSQ' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	if (bInDoubleQuotes) {  		if (c == '\"') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringDQ' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	// ----  	if (bParseStrings) {  		if (c == '\'') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = true;  			continue;  		}  		else if (c == '\"') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = true;  			continue;  		}  	}  	// ----  	if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  		__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  		if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  			if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  				continue;  			}  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  		}  		else {  			throw new ImplementationErrorException ();  		}  		if (c == 13) {  			lineNo++;  		}  		continue;  	}  	// ----  	if (char.IsLetterOrDigit (c) || (extraAlphabetLetters.IndexOf (char.ToLower (c)) >= 0)) {  		if (sb.Length == 0)  			posLastBegin = pos;  		sb.Append (c);  		continue;  	}  	// ----  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	tokens.Add (Token.CreateDelimiterToken (lineNo' pos' c));  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: foreach (char c2 in input) {  	pos++;  	char c = bLowerizeCharacters ? char.ToLower (c2) : c2;  	// ----  	if (bMasked) {  		sb.Append (c);  		bMasked = false;  		continue;  	}  	if (bInSingleQuotes) {  		if (c == '\'') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringSQ' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	if (bInDoubleQuotes) {  		if (c == '\"') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringDQ' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	// ----  	if (bParseStrings) {  		if (c == '\'') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = true;  			continue;  		}  		else if (c == '\"') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = true;  			continue;  		}  	}  	// ----  	if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  		__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  		if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  			if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  				continue;  			}  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  		}  		else {  			throw new ImplementationErrorException ();  		}  		if (c == 13) {  			lineNo++;  		}  		continue;  	}  	// ----  	if (char.IsLetterOrDigit (c) || (extraAlphabetLetters.IndexOf (char.ToLower (c)) >= 0)) {  		if (sb.Length == 0)  			posLastBegin = pos;  		sb.Append (c);  		continue;  	}  	// ----  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	tokens.Add (Token.CreateDelimiterToken (lineNo' pos' c));  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: foreach (char c2 in input) {  	pos++;  	char c = bLowerizeCharacters ? char.ToLower (c2) : c2;  	// ----  	if (bMasked) {  		sb.Append (c);  		bMasked = false;  		continue;  	}  	if (bInSingleQuotes) {  		if (c == '\'') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringSQ' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	if (bInDoubleQuotes) {  		if (c == '\"') {  			__CreateTokenFromBufferDontSkipIfEmpty (EnumGeneralTokenType.StringDQ' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = false;  		}  		else if (c == '\\') {  			if (sb.Length == 0)  				posLastBegin = pos;  			bMasked = true;  		}  		else {  			if (sb.Length == 0)  				posLastBegin = pos;  			sb.Append (c);  		}  		continue;  	}  	// ----  	if (bParseStrings) {  		if (c == '\'') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInSingleQuotes = true;  			continue;  		}  		else if (c == '\"') {  			__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  			bInDoubleQuotes = true;  			continue;  		}  	}  	// ----  	if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  		__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  		if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  			if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  				continue;  			}  			tokens.Add (Token.CreateSpaceToken (lineNo' pos));  		}  		else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  		}  		else {  			throw new ImplementationErrorException ();  		}  		if (c == 13) {  			lineNo++;  		}  		continue;  	}  	// ----  	if (char.IsLetterOrDigit (c) || (extraAlphabetLetters.IndexOf (char.ToLower (c)) >= 0)) {  		if (sb.Length == 0)  			posLastBegin = pos;  		sb.Append (c);  		continue;  	}  	// ----  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	tokens.Add (Token.CreateDelimiterToken (lineNo' pos' c));  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  		if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  			continue;  		}  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  	}  	else {  		throw new ImplementationErrorException ();  	}  	if (c == 13) {  		lineNo++;  	}  	continue;  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  		if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  			continue;  		}  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  	}  	else {  		throw new ImplementationErrorException ();  	}  	if (c == 13) {  		lineNo++;  	}  	continue;  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: if (char.IsWhiteSpace (c) || (c == 13) || (c == 10)) {  	__CreateTokenFromBufferSkipIfEmpty (EnumGeneralTokenType.Word' lineNo' posLastBegin' sb' tokens);  	if (spaceProcessing == EnumSpaceProcessing.OriginalSpaces) {  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.RemoveDuplicateSpaces) {  		if ((tokens.Count > 0) && tokens [tokens.Count - 1].IsSpace) {  			continue;  		}  		tokens.Add (Token.CreateSpaceToken (lineNo' pos));  	}  	else if (spaceProcessing == EnumSpaceProcessing.SkipAllSpaces) {  	}  	else {  		throw new ImplementationErrorException ();  	}  	if (c == 13) {  		lineNo++;  	}  	continue;  }  
Magic Number,LibNLPCSharp.simpletokenizing,Tokenizer,C:\repos\SeNeReKo_LibNLPCommon_CSharp\simpletokenizing\Tokenizer.cs,Tokenize,The following statement contains a magic number: if (c == 13) {  	lineNo++;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,AbstractStack,The following statement contains a magic number: items = new T[8];  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,AbstractStack,The following statement contains a magic number: while (n < initialCapacity)  	n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,AbstractStack,The following statement contains a magic number: n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,AbstractStack,The following statement contains a magic number: items = new T[8];  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (count == items.Length) {  	T[] newElements = new T[items.Length * 2];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + manyElements.Length) {  	int n = items.Length * 2;  	while (n < count + manyElements.Length)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + manyElements.Length) {  	int n = items.Length * 2;  	while (n < count + manyElements.Length)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: while (n < count + manyElements.Length)  	n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + len) {  	int n = items.Length * 2;  	while (n < count + len)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + len) {  	int n = items.Length * 2;  	while (n < count + len)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: while (n < count + len)  	n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + len) {  	int n = items.Length * 2;  	while (n < count + len)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: if (items.Length < count + len) {  	int n = items.Length * 2;  	while (n < count + len)  		n *= 2;  	T[] newElements = new T[n];  	items.CopyTo (newElements' 0);  	items = newElements;  }  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: while (n < count + len)  	n *= 2;  
Magic Number,LibNLPCSharp.util,AbstractStack,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\AbstractStack.cs,Push,The following statement contains a magic number: n *= 2;  
Magic Number,LibNLPCSharp.util,CounterMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\CounterMapT.cs,ToString,The following statement contains a magic number: return ToString (20);  
Magic Number,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Encode,The following statement contains a magic number: foreach (char c in sb.ToString ()) {  	if (c == 10) {  		sb.Append ("\\r");  	}  	else if (c == 13) {  		sb.Append ("\\n");  	}  	else if (c == '=') {  		sb.Append ('\\');  	}  	sb.Append (c);  }  
Magic Number,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Encode,The following statement contains a magic number: foreach (char c in sb.ToString ()) {  	if (c == 10) {  		sb.Append ("\\r");  	}  	else if (c == 13) {  		sb.Append ("\\n");  	}  	else if (c == '=') {  		sb.Append ('\\');  	}  	sb.Append (c);  }  
Magic Number,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Encode,The following statement contains a magic number: if (c == 10) {  	sb.Append ("\\r");  }  else if (c == 13) {  	sb.Append ("\\n");  }  else if (c == '=') {  	sb.Append ('\\');  }  
Magic Number,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Encode,The following statement contains a magic number: if (c == 10) {  	sb.Append ("\\r");  }  else if (c == 13) {  	sb.Append ("\\n");  }  else if (c == '=') {  	sb.Append ('\\');  }  
Magic Number,LibNLPCSharp.util,PersistentStringMap,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentStringMap.cs,__Encode,The following statement contains a magic number: if (c == 13) {  	sb.Append ("\\n");  }  else if (c == '=') {  	sb.Append ('\\');  }  
Magic Number,LibNLPCSharp.util,SortedSet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SortedSet.cs,SortedSet,The following statement contains a magic number: list = new T[16];  
Magic Number,LibNLPCSharp.util,SortedSet,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\SortedSet.cs,SortedSet,The following statement contains a magic number: list = new T[16];  
Magic Number,LibNLPCSharp.util,TimeSpanEx,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\TimeSpanEx.cs,ToReadableString,The following statement contains a magic number: if (formatted.EndsWith ("' "))  	formatted = formatted.Substring (0' formatted.Length - 2);  
Magic Number,LibNLPCSharp.util,TimeSpanEx,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\TimeSpanEx.cs,ToReadableString,The following statement contains a magic number: formatted = formatted.Substring (0' formatted.Length - 2);  
Magic Number,LibNLPCSharp.util,NumberUtils,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\NumberUtils.cs,ToIntA,The following statement contains a magic number: return (int)(v >> 32);  
Magic Number,LibNLPCSharp.util,PersistentProperties,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\PersistentProperties.cs,PersistentProperties,The following statement contains a magic number: evt = new DelayedEvent (null' 1500);  
Magic Number,LibNLPCSharp.util,Util,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\Util.cs,Util,The following statement contains a magic number: NFI_DOUBLE.NumberDecimalDigits = 15;  
Magic Number,LibNLPCSharp.util,Util,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\Util.cs,RemoveSeparatorChar,The following statement contains a magic number: if ((path.Length == 3) && (path [1] == ':') && ((path [2] == '\\') || (path [2] == '/'))) {  	return path.Substring (0' path.Length - 1) + "\\";  }  
Magic Number,LibNLPCSharp.util,Util,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\Util.cs,RemoveSeparatorChar,The following statement contains a magic number: if ((path.Length == 3) && (path [1] == ':') && ((path [2] == '\\') || (path [2] == '/'))) {  	return path.Substring (0' path.Length - 1) + "\\";  }  
Magic Number,LibNLPCSharp.util,Util,C:\repos\SeNeReKo_LibNLPCommon_CSharp\util\Util.cs,RemoveSeparatorChar,The following statement contains a magic number: if ((path.Length == 3) && (path [1] == ':') && ((path [2] == '\\') || (path [2] == '/'))) {  	return path.Substring (0' path.Length - 1) + "\\";  }  
Missing Default,LibNLPCSharp.bgtask,BackgroundTaskLabel,C:\repos\SeNeReKo_LibNLPCommon_CSharp\bgtask\BackgroundTaskLabel.cs,button1_Click,The following switch statement is missing a default case: switch (task.State) {  case EnumBackgroundTaskState.None:  	GUIToolkit.ShowInformationMessage ("Task not yet started.");  	break;  case EnumBackgroundTaskState.Running:  	task.Terminate ();  	bTerminating = true;  	UpdateComponentStates ();  	break;  case EnumBackgroundTaskState.Completed:  	{  		if (task.Output.Length > 0) {  			InfoForm form = new InfoForm (task.Output.ToString ());  			form.Show ();  		}  		else {  			GUIToolkit.ShowInformationMessage ("Task has successfully been completed!");  		}  	}  	break;  case EnumBackgroundTaskState.Failed:  	{  		ErrorForm form = new ErrorForm (task.Error.ToString ()' task.Output);  		form.Show ();  	}  	break;  }  
