Implementation smell,Namespace,Class,File,Method,Description
Long Method,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The method has 295 lines of code.
Long Parameter List,LanguageExt.Parsec,GenLanguageDef,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\GenLanguageDef.cs,GenLanguageDef,The method has 11 parameters. Parameters: commentStart' commentEnd' commentLine' nestedComments' identStart' identLetter' opStart' opLetter' reservedNames' reservedOpNames' caseSensitive
Long Parameter List,LanguageExt.Parsec,GenLanguageDef,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\GenLanguageDef.cs,With,The method has 11 parameters. Parameters: CommentStart' CommentEnd' CommentLine' NestedComments' IdentStart' IdentLetter' OpStart' OpLetter' ReservedNames' ReservedOpNames' CaseSensitive
Long Parameter List,LanguageExt.Parsec,GenTokenParser,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\GenTokenParser.cs,GenTokenParser,The method has 19 parameters. Parameters: indentifier' reserved' op' reservedOp' charLiteral' stringLiteral' natural' integer' floating' naturalOrFloat' dec' hexadecimal' octal' symbol' whiteSpace' semi' comma' colon' dot
Long Parameter List,LanguageExt.Parsec,ParserError,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\ParserError.cs,ParserError,The method has 5 parameters. Parameters: tag' pos' message' expected' inner
Long Parameter List,LanguageExt.Parsec,ParserError,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\ParserError.cs,Compare,The method has 5 parameters. Parameters: lhs' rhs' EQ' GT' LT
Long Parameter List,LanguageExt.Parsec,Pos,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Pos.cs,Compare,The method has 5 parameters. Parameters: lhs' rhs' EQ' GT' LT
Long Parameter List,LanguageExt.Parsec,PString,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\PString.cs,PString,The method has 7 parameters. Parameters: value' index' endIndex' pos' defPos' side' userState
Long Parameter List,LanguageExt.Parsec,PString<T>,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\PStringIO.cs,PString,The method has 7 parameters. Parameters: value' index' endIndex' pos' defPos' side' userState
Complex Conditional,LanguageExt.Parsec,Indent,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Indent.cs,indented,The conditional expression  "newpos.Column < col && newpos.Line > inp.Pos.Line && x != ' ' && x != '\t' && x != '\n' && x != '\r'"  is complex.
Magic Number,LanguageExt.Parsec,Internal,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsec.Internal.cs,newstate,The following statement contains a magic number: var newpos = x == '\n' ? new Pos(inp.Pos.Line + 1' 0)                         : x == '\t' ? new Pos(inp.Pos.Line' ((inp.Pos.Column / 4) + 1) * 4)                         : new Pos(inp.Pos.Line' inp.Pos.Column + 1);
Magic Number,LanguageExt.Parsec,Internal,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsec.Internal.cs,newstate,The following statement contains a magic number: var newpos = x == '\n' ? new Pos(inp.Pos.Line + 1' 0)                         : x == '\t' ? new Pos(inp.Pos.Line' ((inp.Pos.Column / 4) + 1) * 4)                         : new Pos(inp.Pos.Line' inp.Pos.Column + 1);
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var octal = (from _ in ch('o')                           from x in many1(octDigit)                           let v = parseInt(new string(x.ToArray())' 8)                           from n in v.Match(                               Some: d => result(d)'                               None: () => failure<int>("Not a valid octal value"))                           select n)                          .label("octal number");
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var hexadecimal = (from _ in ch('x')                                 from x in many1(hexDigit)                                 let v = parseInt(new string(x.ToArray())' 16)                                 from n in v.Match(                                     Some: d => result(d)'                                     None: () => failure<int>("Not a valid hexadecimal value"))                                 select n)                                .label("hexadecimal number");
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var charControl = from _ in ch('^')                                from c in upper                                select (char)(c - 64);
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var charLetter = satisfy(c => c != '\'' && c != '\\' && c > 26);
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var stringLetter = satisfy(c => c != '"' && c != '\\' && c > 26);
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: power =                  fun((double e) => e < 0                      ? 1.0 / power(-e)                      : Math.Pow(10' e));
Magic Number,LanguageExt.Parsec,Token,D:\research\architectureSmells\repos\louthy_language-ext\LanguageExt.Parsec\Parsers\Token.cs,makeTokenParser,The following statement contains a magic number: var fraction = (from _ in ch('.')                              from f in asInteger(many1(digit).label("fraction"))                              from n in f.Match(                                  Some: d => result(d)'                                  None: () => failure<int>("Not a valid fractional value"))                              select n / 10.0)                             .label("fraction");
