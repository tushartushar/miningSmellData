Implementation smell,Namespace,Class,File,Method,Description
Long Method,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The method has 196 lines of code.
Long Method,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The method has 400 lines of code.
Complex Method,openABAP.Compiler,Compiler,C:\repos\bi-tm_openABAP\Compiler\Compiler.cs,DefineMethod,Cyclomatic complexity of the method is 10
Complex Method,openABAP.Compiler,Compiler,C:\repos\bi-tm_openABAP\Compiler\Compiler.cs,DefineField,Cyclomatic complexity of the method is 10
Complex Method,openABAP.Compiler,ClassBuilder,C:\repos\bi-tm_openABAP\Compiler\ClassBuilder.cs,DefineField,Cyclomatic complexity of the method is 28
Complex Method,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,Cyclomatic complexity of the method is 8
Complex Method,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,Cyclomatic complexity of the method is 189
Complex Method,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,Cyclomatic complexity of the method is 15
Complex Method,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,Cyclomatic complexity of the method is 77
Complex Method,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,Cyclomatic complexity of the method is 150
Long Statement,openABAP.Compiler,ClassBuilder,C:\repos\bi-tm_openABAP\Compiler\ClassBuilder.cs,EmitConstructor,The length of the statement  "	ctor = tb.DefineConstructor (MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' parameterTypes); " is 125.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch == '"' && Comment0 () || ch == 10 && Comment1 ()"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z'"  is complex.
Complex Conditional,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The conditional expression  "ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z'"  is complex.
Empty Catch Block,openABAP.Http,Server,C:\repos\bi-tm_openABAP\Http\Server.cs,WriteForm,The method has an empty catch block.
Magic Number,openABAP.Compiler,ClassBuilder,C:\repos\bi-tm_openABAP\Compiler\ClassBuilder.cs,DefineField,The following statement contains a magic number: switch (type.getInternalType ()) {  case Runtime.InternalType.c:  	il.Emit (OpCodes.Ldc_I4' type.getLength ());  	//push 1st argument = text length  	il.Emit (OpCodes.Ldstr' "");  	//push 2nd argument = inital string  	types = new Type[2];  	types [0] = typeof(int);  	types [1] = typeof(string);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  case Runtime.InternalType.n:  	break;  case Runtime.InternalType.d:  	break;  case Runtime.InternalType.t:  	break;  case Runtime.InternalType.i:  	il.Emit (OpCodes.Ldc_I4' 0);  	//push 1st argument = initial integer value  	types = new Type[1];  	types [0] = typeof(int);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  case Runtime.InternalType.p:  	il.Emit (OpCodes.Ldc_R8' 0.0);  	//push 1st argument = initial integer value  	types = new Type[1];  	types [0] = typeof(int);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  }  
Magic Number,openABAP.Compiler,ClassBuilder,C:\repos\bi-tm_openABAP\Compiler\ClassBuilder.cs,DefineField,The following statement contains a magic number: types = new Type[2];  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,openABAP,The following statement contains a magic number: Expect (10);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,openABAP,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,openABAP,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,openABAP,The following statement contains a magic number: while (la.kind == 11) {  	class_command ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: Expect (11);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: if (la.kind == 12) {  	class_definition (t.val);  }  else if (la.kind == 13) {  	class_implementation (t.val);  }  else  	SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: if (la.kind == 12) {  	class_definition (t.val);  }  else if (la.kind == 13) {  	class_implementation (t.val);  }  else  	SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: if (la.kind == 12) {  	class_definition (t.val);  }  else if (la.kind == 13) {  	class_implementation (t.val);  }  else  	SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: if (la.kind == 13) {  	class_implementation (t.val);  }  else  	SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: if (la.kind == 13) {  	class_implementation (t.val);  }  else  	SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_command,The following statement contains a magic number: SynErr (46);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: Expect (12);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: if (la.kind == 15) {  	public_section ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: if (la.kind == 16) {  	protected_section ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: if (la.kind == 17) {  	private_section ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: Expect (14);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_definition,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_implementation,The following statement contains a magic number: Expect (13);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_implementation,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_implementation,The following statement contains a magic number: while (la.kind == 21) {  	method_command ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_implementation,The following statement contains a magic number: Expect (14);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_implementation,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,public_section,The following statement contains a magic number: Expect (15);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,public_section,The following statement contains a magic number: Expect (18);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,public_section,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,protected_section,The following statement contains a magic number: Expect (16);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,protected_section,The following statement contains a magic number: Expect (18);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,protected_section,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,private_section,The following statement contains a magic number: Expect (17);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,private_section,The following statement contains a magic number: Expect (18);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,private_section,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: Expect (21);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: while (StartOf (2)) {  	command_block ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: Expect (22);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,method_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 19) {  	methods_command ();  }  else if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 19) {  	methods_command ();  }  else if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 19) {  	methods_command ();  }  else if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 19) {  	methods_command ();  }  else if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 19) {  	methods_command ();  }  else if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 20) {  	class_methods_command ();  }  else if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: if (la.kind == 25) {  	class_data_command ();  }  else  	SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,section,The following statement contains a magic number: SynErr (47);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,methods_command,The following statement contains a magic number: Expect (19);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,methods_command,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,methods_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_methods_command,The following statement contains a magic number: Expect (20);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_methods_command,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_methods_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: Expect (24);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (false);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (false);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (false);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (false);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (false);  	if (la.kind == 33) {  		Get ();  		data_parameter (false);  	}  }  else  	SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	data_parameter (false);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: SynErr (48);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: Expect (25);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (true);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (true);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (true);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 3) {  	data_parameter (true);  }  else if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	data_parameter (true);  	if (la.kind == 33) {  		Get ();  		data_parameter (true);  	}  }  else  	SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: if (la.kind == 33) {  	Get ();  	data_parameter (true);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: SynErr (49);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_data_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_parameter,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_parameter,The following statement contains a magic number: if (la.kind == 26) {  	data_type (out type);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: Expect (26);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: if (la.kind == 3) {  	Get ();  	type = new Runtime.NamedType (t.val);  }  else if (StartOf (3)) {  	buildintype (out bt);  	type = bt;  }  else  	SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: if (la.kind == 3) {  	Get ();  	type = new Runtime.NamedType (t.val);  }  else if (StartOf (3)) {  	buildintype (out bt);  	type = bt;  }  else  	SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: if (la.kind == 3) {  	Get ();  	type = new Runtime.NamedType (t.val);  }  else if (StartOf (3)) {  	buildintype (out bt);  	type = bt;  }  else  	SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: if (StartOf (3)) {  	buildintype (out bt);  	type = bt;  }  else  	SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: if (StartOf (3)) {  	buildintype (out bt);  	type = bt;  }  else  	SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,data_type,The following statement contains a magic number: SynErr (50);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 34 || la.kind == 35 || la.kind == 36) {  	fixlentype (out type);  }  else if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 37 || la.kind == 38) {  	varlentype (out type);  }  else if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: if (la.kind == 39) {  	packedtype (out type);  }  else  	SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,buildintype,The following statement contains a magic number: SynErr (51);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 24) {  	data_command ();  }  else if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 23) {  	write_command ();  }  else if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 30) {  	move_command ();  }  else if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	compute_command ();  }  else  	SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,command_block,The following statement contains a magic number: SynErr (52);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: Expect (23);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	write_parameter (cmd);  	while (la.kind == 33) {  		Get ();  		cmd = new Write (t);  		write_parameter (cmd);  	}  }  else if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	write_parameter (cmd);  	while (la.kind == 33) {  		Get ();  		cmd = new Write (t);  		write_parameter (cmd);  	}  }  else if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	write_parameter (cmd);  	while (la.kind == 33) {  		Get ();  		cmd = new Write (t);  		write_parameter (cmd);  	}  }  else if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (la.kind == 32) {  	Get ();  	write_parameter (cmd);  	while (la.kind == 33) {  		Get ();  		cmd = new Write (t);  		write_parameter (cmd);  	}  }  else if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: while (la.kind == 33) {  	Get ();  	cmd = new Write (t);  	write_parameter (cmd);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: if (StartOf (4)) {  	write_parameter (cmd);  }  else  	SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: SynErr (53);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,move_command,The following statement contains a magic number: Expect (30);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,move_command,The following statement contains a magic number: Expect (31);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,move_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,compute_command,The following statement contains a magic number: Expect (44);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,compute_command,The following statement contains a magic number: Expect (5);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.i);  }  else if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.i);  }  else if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.i);  }  else if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 34) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.i);  }  else if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 35) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.d);  }  else if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: if (la.kind == 36) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.t);  }  else  	SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,fixlentype,The following statement contains a magic number: SynErr (54);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 37) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.c);  }  else if (la.kind == 38) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.n);  }  else  	SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 37) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.c);  }  else if (la.kind == 38) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.n);  }  else  	SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 37) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.c);  }  else if (la.kind == 38) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.n);  }  else  	SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 38) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.n);  }  else  	SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 38) {  	Get ();  	aType = new Runtime.BuildinType (Runtime.InternalType.n);  }  else  	SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: SynErr (55);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,varlentype,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	Expect (1);  	aType.setLength (Convert.ToInt32 (t.val));  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,packedtype,The following statement contains a magic number: Expect (39);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,packedtype,The following statement contains a magic number: if (la.kind == 27) {  	Get ();  	Expect (1);  	aType.setLength (Convert.ToInt32 (t.val));  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,packedtype,The following statement contains a magic number: if (la.kind == 28) {  	Get ();  	Expect (1);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,packedtype,The following statement contains a magic number: if (la.kind == 29) {  	Get ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,write_parameter,The following statement contains a magic number: if (la.kind == 9) {  	format (cmd);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,format,The following statement contains a magic number: Expect (9);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 1 || la.kind == 2) {  	literal (out value);  }  else if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 1 || la.kind == 2) {  	literal (out value);  }  else if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 1 || la.kind == 2) {  	literal (out value);  }  else if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 1 || la.kind == 2) {  	literal (out value);  }  else if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: if (la.kind == 3 || la.kind == 4) {  	variable (out var);  	value = var;  }  else  	SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,value,The following statement contains a magic number: SynErr (56);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: if (la.kind == 2) {  	Get ();  	value = new Compiler.StringLiteral (t.val.Substring (1' t.val.Length - 2));  }  else if (la.kind == 1) {  	Get ();  	value = new Compiler.IntegerLiteral (Convert.ToInt32 (t.val));  }  else  	SynErr (57);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: if (la.kind == 2) {  	Get ();  	value = new Compiler.StringLiteral (t.val.Substring (1' t.val.Length - 2));  }  else if (la.kind == 1) {  	Get ();  	value = new Compiler.IntegerLiteral (Convert.ToInt32 (t.val));  }  else  	SynErr (57);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: if (la.kind == 2) {  	Get ();  	value = new Compiler.StringLiteral (t.val.Substring (1' t.val.Length - 2));  }  else if (la.kind == 1) {  	Get ();  	value = new Compiler.IntegerLiteral (Convert.ToInt32 (t.val));  }  else  	SynErr (57);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: value = new Compiler.StringLiteral (t.val.Substring (1' t.val.Length - 2));  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: if (la.kind == 1) {  	Get ();  	value = new Compiler.IntegerLiteral (Convert.ToInt32 (t.val));  }  else  	SynErr (57);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,literal,The following statement contains a magic number: SynErr (57);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 6 || la.kind == 42 || la.kind == 43) {  	if (la.kind == 42) {  		instance_member ();  	}  	else if (la.kind == 43) {  		class_member ();  	}  	else {  		struct_field ();  	}  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 6 || la.kind == 42 || la.kind == 43) {  	if (la.kind == 42) {  		instance_member ();  	}  	else if (la.kind == 43) {  		class_member ();  	}  	else {  		struct_field ();  	}  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 6 || la.kind == 42 || la.kind == 43) {  	if (la.kind == 42) {  		instance_member ();  	}  	else if (la.kind == 43) {  		class_member ();  	}  	else {  		struct_field ();  	}  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 6 || la.kind == 42 || la.kind == 43) {  	if (la.kind == 42) {  		instance_member ();  	}  	else if (la.kind == 43) {  		class_member ();  	}  	else {  		struct_field ();  	}  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 6 || la.kind == 42 || la.kind == 43) {  	if (la.kind == 42) {  		instance_member ();  	}  	else if (la.kind == 43) {  		class_member ();  	}  	else {  		struct_field ();  	}  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 42) {  	instance_member ();  }  else if (la.kind == 43) {  	class_member ();  }  else {  	struct_field ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 42) {  	instance_member ();  }  else if (la.kind == 43) {  	class_member ();  }  else {  	struct_field ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 43) {  	class_member ();  }  else {  	struct_field ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  	Expect (1);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 40) {  	Get ();  	Expect (1);  	Expect (41);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: if (la.kind == 40) {  	Get ();  	Expect (1);  	Expect (41);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: Expect (41);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,variable,The following statement contains a magic number: while (la.kind == 4) {  	Get ();  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,instance_member,The following statement contains a magic number: Expect (42);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,instance_member,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_member,The following statement contains a magic number: Expect (43);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,class_member,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,struct_field,The following statement contains a magic number: Expect (6);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,struct_field,The following statement contains a magic number: Expect (3);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: if (la.kind == 6) {  	Get ();  	term (out e2);  	e = new UnaryExpression ("-"' e2);  }  else if (StartOf (5)) {  	term (out e);  }  else  	SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: if (la.kind == 6) {  	Get ();  	term (out e2);  	e = new UnaryExpression ("-"' e2);  }  else if (StartOf (5)) {  	term (out e);  }  else  	SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: if (la.kind == 6) {  	Get ();  	term (out e2);  	e = new UnaryExpression ("-"' e2);  }  else if (StartOf (5)) {  	term (out e);  }  else  	SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: if (StartOf (5)) {  	term (out e);  }  else  	SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: if (StartOf (5)) {  	term (out e);  }  else  	SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: SynErr (58);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: while (la.kind == 6 || la.kind == 7) {  	addition (out op);  	term (out e2);  	e = new BinaryExpression (e' op' e2);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,expression,The following statement contains a magic number: while (la.kind == 6 || la.kind == 7) {  	addition (out op);  	term (out e2);  	e = new BinaryExpression (e' op' e2);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,term,The following statement contains a magic number: while (la.kind == 8 || la.kind == 9) {  	multiply (out op);  	factor (out e2);  	e = new BinaryExpression (e' op' e2);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,term,The following statement contains a magic number: while (la.kind == 8 || la.kind == 9) {  	multiply (out op);  	factor (out e2);  	e = new BinaryExpression (e' op' e2);  }  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  }  else if (la.kind == 6) {  	Get ();  }  else  	SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  }  else if (la.kind == 6) {  	Get ();  }  else  	SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: if (la.kind == 7) {  	Get ();  }  else if (la.kind == 6) {  	Get ();  }  else  	SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: if (la.kind == 6) {  	Get ();  }  else  	SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: if (la.kind == 6) {  	Get ();  }  else  	SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,addition,The following statement contains a magic number: SynErr (59);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (StartOf (6)) {  	value (out val);  	e = new ExpressionLeaf (val);  }  else if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (StartOf (6)) {  	value (out val);  	e = new ExpressionLeaf (val);  }  else if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (StartOf (6)) {  	value (out val);  	e = new ExpressionLeaf (val);  }  else if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (StartOf (6)) {  	value (out val);  	e = new ExpressionLeaf (val);  }  else if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: if (la.kind == 40) {  	Get ();  	expression (out e);  	Expect (41);  }  else  	SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: Expect (41);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,factor,The following statement contains a magic number: SynErr (60);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  }  else if (la.kind == 9) {  	Get ();  }  else  	SynErr (61);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  }  else if (la.kind == 9) {  	Get ();  }  else  	SynErr (61);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: if (la.kind == 8) {  	Get ();  }  else if (la.kind == 9) {  	Get ();  }  else  	SynErr (61);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  }  else  	SynErr (61);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: if (la.kind == 9) {  	Get ();  }  else  	SynErr (61);  
Magic Number,openABAP.Coco,Parser,C:\repos\bi-tm_openABAP\Coco\Parser.cs,multiply,The following statement contains a magic number: SynErr (61);  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Errors,C:\repos\bi-tm_openABAP\Coco\Parser.cs,SynErr,The following statement contains a magic number: switch (n) {  case 0:  	s = "EOF expected";  	break;  case 1:  	s = "number expected";  	break;  case 2:  	s = "string expected";  	break;  case 3:  	s = "ident expected";  	break;  case 4:  	s = "SPACE expected";  	break;  case 5:  	s = "DOT expected";  	break;  case 6:  	s = "MINUS expected";  	break;  case 7:  	s = "PLUS expected";  	break;  case 8:  	s = "MULTIPLY expected";  	break;  case 9:  	s = "DIVIDE expected";  	break;  case 10:  	s = "PROGRAM expected";  	break;  case 11:  	s = "CLASS expected";  	break;  case 12:  	s = "DEFINITION expected";  	break;  case 13:  	s = "IMPLEMENTATION expected";  	break;  case 14:  	s = "ENDCLASS expected";  	break;  case 15:  	s = "PUBLIC expected";  	break;  case 16:  	s = "PROTECTED expected";  	break;  case 17:  	s = "PRIVATE expected";  	break;  case 18:  	s = "SECTION expected";  	break;  case 19:  	s = "METHODS expected";  	break;  case 20:  	s = "CLASS_METHODS expected";  	break;  case 21:  	s = "METHOD expected";  	break;  case 22:  	s = "ENDMETHOD expected";  	break;  case 23:  	s = "WRITE expected";  	break;  case 24:  	s = "DATA expected";  	break;  case 25:  	s = "CLASS_DATA expected";  	break;  case 26:  	s = "TYPE expected";  	break;  case 27:  	s = "LENGTH expected";  	break;  case 28:  	s = "DECIMALS expected";  	break;  case 29:  	s = "NO_SIGN expected";  	break;  case 30:  	s = "MOVE expected";  	break;  case 31:  	s = "to expected";  	break;  case 32:  	s = "\":\" expected";  	break;  case 33:  	s = "\"'\" expected";  	break;  case 34:  	s = "\"i\" expected";  	break;  case 35:  	s = "\"d\" expected";  	break;  case 36:  	s = "\"t\" expected";  	break;  case 37:  	s = "\"c\" expected";  	break;  case 38:  	s = "\"n\" expected";  	break;  case 39:  	s = "\"p\" expected";  	break;  case 40:  	s = "\"(\" expected";  	break;  case 41:  	s = "\")\" expected";  	break;  case 42:  	s = "\"->\" expected";  	break;  case 43:  	s = "\"=>\" expected";  	break;  case 44:  	s = "\"=\" expected";  	break;  case 45:  	s = "??? expected";  	break;  case 46:  	s = "invalid class_command";  	break;  case 47:  	s = "invalid section";  	break;  case 48:  	s = "invalid data_command";  	break;  case 49:  	s = "invalid class_data_command";  	break;  case 50:  	s = "invalid data_type";  	break;  case 51:  	s = "invalid buildintype";  	break;  case 52:  	s = "invalid command_block";  	break;  case 53:  	s = "invalid write_command";  	break;  case 54:  	s = "invalid fixlentype";  	break;  case 55:  	s = "invalid varlentype";  	break;  case 56:  	s = "invalid value";  	break;  case 57:  	s = "invalid literal";  	break;  case 58:  	s = "invalid expression";  	break;  case 59:  	s = "invalid addition";  	break;  case 60:  	s = "invalid factor";  	break;  case 61:  	s = "invalid multiply";  	break;  default:  	s = "error " + n;  	break;  }  
Magic Number,openABAP.Coco,Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,ReadNextStreamChunk,The following statement contains a magic number: if (free == 0) {  	// in the case of a growing input stream  	// we can neither seek in the stream' nor can we  	// foresee the maximum length' thus we must adapt  	// the buffer size on demand.  	byte[] newBuf = new byte[bufLen * 2];  	Array.Copy (buf' newBuf' bufLen);  	buf = newBuf;  	free = bufLen;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: do {  	ch = base.Read ();  	// until we find a utf8 start (0xxxxxxx or 11xxxxxx)  }  while ((ch >= 128) && ((ch & 0xC0) != 0xC0) && (ch != EOF));  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if (ch < 128 || ch == EOF) {  	// nothing to do' first 127 chars are the same in ascii and utf8  	// 0xxxxxxx or end of file character  }  else if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xF0) == 0xF0) {  	// 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x07;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = base.Read ();  	int c4 = ch & 0x3F;  	ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  }  else if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (((((c1 << 6) | c2) << 6) | c3) << 6) | c4;  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xE0) == 0xE0) {  	// 1110xxxx 10xxxxxx 10xxxxxx  	int c1 = ch & 0x0F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = base.Read ();  	int c3 = ch & 0x3F;  	ch = (((c1 << 6) | c2) << 6) | c3;  }  else if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (((c1 << 6) | c2) << 6) | c3;  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (((c1 << 6) | c2) << 6) | c3;  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: if ((ch & 0xC0) == 0xC0) {  	// 110xxxxx 10xxxxxx  	int c1 = ch & 0x1F;  	ch = base.Read ();  	int c2 = ch & 0x3F;  	ch = (c1 << 6) | c2;  }  
Magic Number,openABAP.Coco,UTF8Buffer,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Read,The following statement contains a magic number: ch = (c1 << 6) | c2;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start = new Hashtable (128);  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 48; i <= 57; ++i)  	start [i] = 1;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 48; i <= 57; ++i)  	start [i] = 1;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 95; i <= 95; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 95; i <= 95; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 95; i <= 95; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 97; i <= 98; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 97; i <= 98; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 97; i <= 98; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 100; i <= 109; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 100; i <= 109; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 100; i <= 109; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 111; i <= 122; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 111; i <= 122; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 111; i <= 122; ++i)  	start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 9; i <= 13; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 9; i <= 13; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 9; i <= 13; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: for (int i = 32; i <= 32; ++i)  	start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [i] = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [39] = 2;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [39] = 2;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [46] = 6;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [46] = 6;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [45] = 40;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [45] = 40;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [43] = 7;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [43] = 7;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [42] = 8;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [42] = 8;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [47] = 9;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [47] = 9;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [99] = 26;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [99] = 26;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [110] = 27;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [110] = 27;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [58] = 34;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [58] = 34;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [44] = 35;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [44] = 35;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [40] = 36;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [40] = 36;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [41] = 37;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [41] = 37;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [61] = 41;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Scanner,The following statement contains a magic number: start [61] = 41;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,AddCh,The following statement contains a magic number: if (tlen >= tval.Length) {  	char[] newBuf = new char[2 * tval.Length];  	Array.Copy (tval' 0' newBuf' 0' tval.Length);  	tval = newBuf;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Comment0,The following statement contains a magic number: for (; ;) {  	if (ch == 10) {  		level--;  		if (level == 0) {  			oldEols = line - line0;  			NextCh ();  			return true;  		}  		NextCh ();  	}  	else if (ch == Buffer.EOF)  		return false;  	else  		NextCh ();  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Comment0,The following statement contains a magic number: if (ch == 10) {  	level--;  	if (level == 0) {  		oldEols = line - line0;  		NextCh ();  		return true;  	}  	NextCh ();  }  else if (ch == Buffer.EOF)  	return false;  else  	NextCh ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Comment1,The following statement contains a magic number: if (ch == '*') {  	NextCh ();  	for (; ;) {  		if (ch == 10) {  			level--;  			if (level == 0) {  				oldEols = line - line0;  				NextCh ();  				return true;  			}  			NextCh ();  		}  		else if (ch == Buffer.EOF)  			return false;  		else  			NextCh ();  	}  }  else {  	buffer.Pos = pos0;  	NextCh ();  	line = line0;  	col = col0;  	charPos = charPos0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Comment1,The following statement contains a magic number: for (; ;) {  	if (ch == 10) {  		level--;  		if (level == 0) {  			oldEols = line - line0;  			NextCh ();  			return true;  		}  		NextCh ();  	}  	else if (ch == Buffer.EOF)  		return false;  	else  		NextCh ();  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,Comment1,The following statement contains a magic number: if (ch == 10) {  	level--;  	if (level == 0) {  		oldEols = line - line0;  		NextCh ();  		return true;  	}  	NextCh ();  }  else if (ch == Buffer.EOF)  	return false;  else  	NextCh ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: switch (t.val.ToLower ()) {  case "program":  	t.kind = 10;  	break;  case "class":  	t.kind = 11;  	break;  case "definition":  	t.kind = 12;  	break;  case "implementation":  	t.kind = 13;  	break;  case "endclass":  	t.kind = 14;  	break;  case "public":  	t.kind = 15;  	break;  case "protected":  	t.kind = 16;  	break;  case "private":  	t.kind = 17;  	break;  case "section":  	t.kind = 18;  	break;  case "methods":  	t.kind = 19;  	break;  case "method":  	t.kind = 21;  	break;  case "endmethod":  	t.kind = 22;  	break;  case "write":  	t.kind = 23;  	break;  case "data":  	t.kind = 24;  	break;  case "type":  	t.kind = 26;  	break;  case "length":  	t.kind = 27;  	break;  case "decimals":  	t.kind = 28;  	break;  case "move":  	t.kind = 30;  	break;  case "to":  	t.kind = 31;  	break;  case "i":  	t.kind = 34;  	break;  case "d":  	t.kind = 35;  	break;  case "t":  	t.kind = 36;  	break;  case "c":  	t.kind = 37;  	break;  case "n":  	t.kind = 38;  	break;  case "p":  	t.kind = 39;  	break;  default:  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 10;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 11;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 12;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 13;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 14;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 15;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 16;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 17;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 18;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 19;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 21;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 22;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 23;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 24;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 26;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 27;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 28;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 30;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 31;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 34;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 35;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 36;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 37;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 38;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,CheckLiteral,The following statement contains a magic number: t.kind = 39;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: while (Scanner.ignore_space && (ch == ' ' || ch >= 9 && ch <= 10 || ch == 13))  	NextCh ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: while (Scanner.ignore_space && (ch == ' ' || ch >= 9 && ch <= 10 || ch == 13))  	NextCh ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: while (Scanner.ignore_space && (ch == ' ' || ch >= 9 && ch <= 10 || ch == 13))  	NextCh ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '"' && Comment0 () || ch == 10 && Comment1 ())  	return NextToken ();  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch <= '&' || ch >= '(' && ch <= 65535) {  	AddCh ();  	goto case 2;  }  else if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch <= '&' || ch >= '(' && ch <= 65535) {  	AddCh ();  	goto case 2;  }  else if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch <= '&' || ch >= '(' && ch <= 65535) {  	AddCh ();  	goto case 2;  }  else if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch <= '&' || ch >= '(' && ch <= 65535) {  	AddCh ();  	goto case 2;  }  else if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 2;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 39) {  	AddCh ();  	goto case 3;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 2;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= 9 && ch <= 13 || ch == ' ') {  	AddCh ();  	goto case 5;  }  else {  	t.kind = 4;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= 9 && ch <= 13 || ch == ' ') {  	AddCh ();  	goto case 5;  }  else {  	t.kind = 4;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= 9 && ch <= 13 || ch == ' ') {  	AddCh ();  	goto case 5;  }  else {  	t.kind = 4;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= 9 && ch <= 13 || ch == ' ') {  	AddCh ();  	goto case 5;  }  else {  	t.kind = 4;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 5;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 7;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 8;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 9;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'e') {  	AddCh ();  	goto case 11;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 11;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 't') {  	AddCh ();  	goto case 12;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 12;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'h') {  	AddCh ();  	goto case 13;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 13;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'o') {  	AddCh ();  	goto case 14;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 14;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'd') {  	AddCh ();  	goto case 15;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 15;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 16;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 16;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 20;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'a') {  	AddCh ();  	goto case 18;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 18;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 't') {  	AddCh ();  	goto case 19;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 19;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'a') {  	AddCh ();  	goto case 20;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 20;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 25;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 22;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 22;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'i') {  	AddCh ();  	goto case 23;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 23;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'g') {  	AddCh ();  	goto case 24;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 24;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'n') {  	AddCh ();  	goto case 25;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 25;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 29;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'l') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'l') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'l') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'l') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'l') {  	AddCh ();  	goto case 28;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 28;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'o') {  	AddCh ();  	goto case 29;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'o') {  	AddCh ();  	goto case 29;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'o') {  	AddCh ();  	goto case 29;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'o') {  	AddCh ();  	goto case 29;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'o') {  	AddCh ();  	goto case 29;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 29;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'a') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'a') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 'a') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'a') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'a') {  	AddCh ();  	goto case 30;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 30;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 21;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 21;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 21;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 21;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 21;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 21;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 31;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 31;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 31;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 31;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 31;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 31;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == 's') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 's') {  	AddCh ();  	goto case 32;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 32;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  	AddCh ();  	goto case 4;  }  else if (ch == '-') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 4;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '-') {  	AddCh ();  	goto case 33;  }  else {  	t.kind = 3;  	t.val = new String (tval' 0' tlen);  	CheckLiteral ();  	return t;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 33;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 3;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'm') {  	AddCh ();  	goto case 10;  }  else if (ch == 'd') {  	AddCh ();  	goto case 17;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'm') {  	AddCh ();  	goto case 10;  }  else if (ch == 'd') {  	AddCh ();  	goto case 17;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 10;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == 'd') {  	AddCh ();  	goto case 17;  }  else {  	goto case 0;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 17;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 32;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 33;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 40;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 41;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 42;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 43;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 6;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 6;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	AddCh ();  	goto case 38;  }  else {  	t.kind = 6;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 38;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 6;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: recKind = 44;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	AddCh ();  	goto case 39;  }  else {  	t.kind = 44;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: if (ch == '>') {  	AddCh ();  	goto case 39;  }  else {  	t.kind = 44;  	break;  }  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: goto case 39;  
Magic Number,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following statement contains a magic number: t.kind = 44;  
Magic Number,Bend.Util,HttpProcessor,C:\repos\bi-tm_openABAP\Http\SimpleHttpServer.cs,parseRequest,The following statement contains a magic number: if (tokens.Length != 3) {  	throw new Exception ("invalid http request line");  }  
Magic Number,Bend.Util,HttpProcessor,C:\repos\bi-tm_openABAP\Http\SimpleHttpServer.cs,parseRequest,The following statement contains a magic number: http_protocol_versionstring = tokens [2];  
Missing Default,openABAP.Compiler,Compiler,C:\repos\bi-tm_openABAP\Compiler\Compiler.cs,DefineMethod,The following switch statement is missing a default case: switch (this.CurrentVisibility) {  case Visibility.publ:  	attr = MethodAttributes.Public;  	break;  case Visibility.prot:  	attr = MethodAttributes.Family;  	break;  case Visibility.priv:  	attr = MethodAttributes.Private;  	break;  }  
Missing Default,openABAP.Compiler,Compiler,C:\repos\bi-tm_openABAP\Compiler\Compiler.cs,DefineField,The following switch statement is missing a default case: switch (this.CurrentVisibility) {  case Visibility.publ:  	attr = FieldAttributes.Public;  	break;  case Visibility.prot:  	attr = FieldAttributes.Family;  	break;  case Visibility.priv:  	attr = FieldAttributes.Private;  	break;  }  
Missing Default,openABAP.Compiler,ClassBuilder,C:\repos\bi-tm_openABAP\Compiler\ClassBuilder.cs,DefineField,The following switch statement is missing a default case: switch (type.getInternalType ()) {  case Runtime.InternalType.c:  	il.Emit (OpCodes.Ldc_I4' type.getLength ());  	//push 1st argument = text length  	il.Emit (OpCodes.Ldstr' "");  	//push 2nd argument = inital string  	types = new Type[2];  	types [0] = typeof(int);  	types [1] = typeof(string);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  case Runtime.InternalType.n:  	break;  case Runtime.InternalType.d:  	break;  case Runtime.InternalType.t:  	break;  case Runtime.InternalType.i:  	il.Emit (OpCodes.Ldc_I4' 0);  	//push 1st argument = initial integer value  	types = new Type[1];  	types [0] = typeof(int);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  case Runtime.InternalType.p:  	il.Emit (OpCodes.Ldc_R8' 0.0);  	//push 1st argument = initial integer value  	types = new Type[1];  	types [0] = typeof(int);  	il.Emit (OpCodes.Newobj' rtc.GetConstructor (types));  	break;  }  
Missing Default,openABAP.Coco,Scanner,C:\repos\bi-tm_openABAP\Coco\Scanner.cs,NextToken,The following switch statement is missing a default case: switch (state) {  case -1: {  	t.kind = eofSym;  	break;  }  // NextCh already done  case 0: {  	if (recKind != noSym) {  		tlen = recEnd - t.pos;  		SetScannerBehindT ();  	}  	t.kind = recKind;  	break;  }  // NextCh already done  case 1:  	recEnd = pos;  	recKind = 1;  	if (ch >= '0' && ch <= '9') {  		AddCh ();  		goto case 1;  	}  	else {  		t.kind = 1;  		break;  	}  case 2:  	if (ch <= '&' || ch >= '(' && ch <= 65535) {  		AddCh ();  		goto case 2;  	}  	else if (ch == 39) {  		AddCh ();  		goto case 3;  	}  	else {  		goto case 0;  	}  case 3: {  	t.kind = 2;  	break;  }  case 4:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 5:  	recEnd = pos;  	recKind = 4;  	if (ch >= 9 && ch <= 13 || ch == ' ') {  		AddCh ();  		goto case 5;  	}  	else {  		t.kind = 4;  		break;  	}  case 6: {  	t.kind = 5;  	break;  }  case 7: {  	t.kind = 7;  	break;  }  case 8: {  	t.kind = 8;  	break;  }  case 9: {  	t.kind = 9;  	break;  }  case 10:  	if (ch == 'e') {  		AddCh ();  		goto case 11;  	}  	else {  		goto case 0;  	}  case 11:  	if (ch == 't') {  		AddCh ();  		goto case 12;  	}  	else {  		goto case 0;  	}  case 12:  	if (ch == 'h') {  		AddCh ();  		goto case 13;  	}  	else {  		goto case 0;  	}  case 13:  	if (ch == 'o') {  		AddCh ();  		goto case 14;  	}  	else {  		goto case 0;  	}  case 14:  	if (ch == 'd') {  		AddCh ();  		goto case 15;  	}  	else {  		goto case 0;  	}  case 15:  	if (ch == 's') {  		AddCh ();  		goto case 16;  	}  	else {  		goto case 0;  	}  case 16: {  	t.kind = 20;  	break;  }  case 17:  	if (ch == 'a') {  		AddCh ();  		goto case 18;  	}  	else {  		goto case 0;  	}  case 18:  	if (ch == 't') {  		AddCh ();  		goto case 19;  	}  	else {  		goto case 0;  	}  case 19:  	if (ch == 'a') {  		AddCh ();  		goto case 20;  	}  	else {  		goto case 0;  	}  case 20: {  	t.kind = 25;  	break;  }  case 21:  	if (ch == 's') {  		AddCh ();  		goto case 22;  	}  	else {  		goto case 0;  	}  case 22:  	if (ch == 'i') {  		AddCh ();  		goto case 23;  	}  	else {  		goto case 0;  	}  case 23:  	if (ch == 'g') {  		AddCh ();  		goto case 24;  	}  	else {  		goto case 0;  	}  case 24:  	if (ch == 'n') {  		AddCh ();  		goto case 25;  	}  	else {  		goto case 0;  	}  case 25: {  	t.kind = 29;  	break;  }  case 26:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'k' || ch >= 'm' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'l') {  		AddCh ();  		goto case 28;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 27:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'n' || ch >= 'p' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'o') {  		AddCh ();  		goto case 29;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 28:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'b' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 'a') {  		AddCh ();  		goto case 30;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 29:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 21;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 30:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 31;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 31:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'r' || ch >= 't' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == 's') {  		AddCh ();  		goto case 32;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 32:  	recEnd = pos;  	recKind = 3;  	if (ch >= '0' && ch <= '9' || ch == '_' || ch >= 'a' && ch <= 'z') {  		AddCh ();  		goto case 4;  	}  	else if (ch == '-') {  		AddCh ();  		goto case 33;  	}  	else {  		t.kind = 3;  		t.val = new String (tval' 0' tlen);  		CheckLiteral ();  		return t;  	}  case 33:  	if (ch == 'm') {  		AddCh ();  		goto case 10;  	}  	else if (ch == 'd') {  		AddCh ();  		goto case 17;  	}  	else {  		goto case 0;  	}  case 34: {  	t.kind = 32;  	break;  }  case 35: {  	t.kind = 33;  	break;  }  case 36: {  	t.kind = 40;  	break;  }  case 37: {  	t.kind = 41;  	break;  }  case 38: {  	t.kind = 42;  	break;  }  case 39: {  	t.kind = 43;  	break;  }  case 40:  	recEnd = pos;  	recKind = 6;  	if (ch == '>') {  		AddCh ();  		goto case 38;  	}  	else {  		t.kind = 6;  		break;  	}  case 41:  	recEnd = pos;  	recKind = 44;  	if (ch == '>') {  		AddCh ();  		goto case 39;  	}  	else {  		t.kind = 44;  		break;  	}  }  
