Implementation smell,Namespace,Class,File,Method,Description
Complex Conditional,GameStateManagement,GameScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\GameScreen.cs,UpdateTransition,The conditional expression  "((direction < 0) && (transitionPosition <= 0)) ||                  ((direction > 0) && (transitionPosition >= 1))"  is complex.
Magic Number,GameStateManagement,BackgroundScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,BackgroundScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(1.5);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,LoadContent,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)                  pauseAlpha = Math.Min(pauseAlpha + 1f / 32' 1);              else                  pauseAlpha = Math.Max(pauseAlpha - 1f / 32' 0);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)                  pauseAlpha = Math.Min(pauseAlpha + 1f / 32' 1);              else                  pauseAlpha = Math.Max(pauseAlpha - 1f / 32' 0);
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(                      ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString("Insert Gameplay Here").X / 2'                       200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,HandleInput,The following statement contains a magic number: if (input.IsPauseGame(ControllingPlayer) || gamePadDisconnected)              {                  ScreenManager.AddScreen(new PauseMenuScreen()' ControllingPlayer);              }              else              {                  // Otherwise move the player position.                  Vector2 movement = Vector2.Zero;                    if (keyboardState.IsKeyDown(Keys.Left))                      movement.X--;                    if (keyboardState.IsKeyDown(Keys.Right))                      movement.X++;                    if (keyboardState.IsKeyDown(Keys.Up))                      movement.Y--;                    if (keyboardState.IsKeyDown(Keys.Down))                      movement.Y++;                    Vector2 thumbstick = gamePadState.ThumbSticks.Left;                    movement.X += thumbstick.X;                  movement.Y -= thumbstick.Y;                    if (movement.Length() > 1)                      movement.Normalize();                    playerPosition += movement * 2;              }
Magic Number,GameStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (TransitionPosition > 0 || pauseAlpha > 0)              {                  float alpha = MathHelper.Lerp(1f - TransitionAlpha' 1f' pauseAlpha / 2);                    ScreenManager.FadeBackBufferToBlack(alpha);              }
Magic Number,GameStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\LoadingScreen.cs,LoadingScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow)              {                  SpriteBatch spriteBatch = ScreenManager.SpriteBatch;                  SpriteFont font = ScreenManager.Font;                    const string message = "Loading...";                    // Center the text in the viewport.                  Viewport viewport = ScreenManager.GraphicsDevice.Viewport;                  Vector2 viewportSize = new Vector2(viewport.Width' viewport.Height);                  Vector2 textSize = font.MeasureString(message);                  Vector2 textPosition = (viewportSize - textSize) / 2;                    Color color = Color.White * TransitionAlpha;                    // Draw the text.                  spriteBatch.Begin();                  spriteBatch.DrawString(font' message' textPosition' color);                  spriteBatch.End();              }
Magic Number,GameStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuEntry.cs,Update,The following statement contains a magic number: float fadeSpeed = (float)gameTime.ElapsedGameTime.TotalSeconds * 4;
Magic Number,GameStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuEntry.cs,Draw,The following statement contains a magic number: float pulsate = (float)Math.Sin(time * 6) + 1;
Magic Number,GameStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuEntry.cs,Draw,The following statement contains a magic number: Vector2 origin = new Vector2(0' font.LineSpacing / 2);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: float transitionOffset = (float)Math.Pow(TransitionPosition' 2);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: float transitionOffset = (float)Math.Pow(TransitionPosition' 2);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2(graphics.Viewport.Width / 2' 80);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2(graphics.Viewport.Width / 2' 80);
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titleOrigin = font.MeasureString(menuTitle) / 2;
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,GameStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: titlePosition.Y -= transitionOffset * 100;
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.2);
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.2);
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack(TransitionAlpha * 2 / 3);
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack(TransitionAlpha * 2 / 3);
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Vector2 textPosition = (viewportSize - textSize) / 2;
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: const int hPad = 32;
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: const int vPad = 16;
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle((int)textPosition.X - hPad'                                                            (int)textPosition.Y - vPad'                                                            (int)textSize.X + hPad * 2'                                                            (int)textSize.Y + vPad * 2);
Magic Number,GameStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle((int)textPosition.X - hPad'                                                            (int)textPosition.Y - vPad'                                                            (int)textSize.X + hPad * 2'                                                            (int)textSize.Y + vPad * 2);
