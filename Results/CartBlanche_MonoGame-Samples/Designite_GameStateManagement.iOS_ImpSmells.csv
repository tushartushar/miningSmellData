Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GameStateManagement,ScreenManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\ScreenManager.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,HandleInput,Cyclomatic complexity of the method is 8
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsNewKeyPress,The length of the statement  "		return (IsNewKeyPress (key' PlayerIndex.One' out playerIndex) || IsNewKeyPress (key' PlayerIndex.Two' out playerIndex) || IsNewKeyPress (key' PlayerIndex.Three' out playerIndex) || IsNewKeyPress (key' PlayerIndex.Four' out playerIndex)); " is 237.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsNewButtonPress,The length of the statement  "		return (IsNewButtonPress (button' PlayerIndex.One' out playerIndex) || IsNewButtonPress (button' PlayerIndex.Two' out playerIndex) || IsNewButtonPress (button' PlayerIndex.Three' out playerIndex) || IsNewButtonPress (button' PlayerIndex.Four' out playerIndex)); " is 261.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsMenuSelect,The length of the statement  "	return IsNewKeyPress (Keys.Space' controllingPlayer' out playerIndex) || IsNewKeyPress (Keys.Enter' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.A' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.Start' controllingPlayer' out playerIndex); " is 276.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsMenuCancel,The length of the statement  "	return IsNewKeyPress (Keys.Escape' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.B' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.Back' controllingPlayer' out playerIndex); " is 210.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsMenuUp,The length of the statement  "	return IsNewKeyPress (Keys.Up' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.DPadUp' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.LeftThumbstickUp' controllingPlayer' out playerIndex); " is 223.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsMenuDown,The length of the statement  "	return IsNewKeyPress (Keys.Down' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.DPadDown' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.LeftThumbstickDown' controllingPlayer' out playerIndex); " is 229.
Long Statement,GameStateManagement,InputState,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\InputState.cs,IsPauseGame,The length of the statement  "	return IsNewKeyPress (Keys.Escape' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.Back' controllingPlayer' out playerIndex) || IsNewButtonPress (Buttons.Start' controllingPlayer' out playerIndex); " is 214.
Long Statement,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The length of the statement  "		Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200); " is 148.
Long Statement,GameStateManagement,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The length of the statement  "	Rectangle backgroundRectangle = new Rectangle ((int)textPosition.X - hPad' (int)textPosition.Y - vPad' (int)textSize.X + hPad * 2' (int)textSize.Y + vPad * 2); " is 159.
Complex Conditional,GameStateManagement,GameScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\ScreenManager\GameScreen.cs,UpdateTransition,The conditional expression  "((direction < 0) && (transitionPosition <= 0)) || ((direction > 0) && (transitionPosition >= 1))"  is complex.
Magic Number,GameStateManagement,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (1.5);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,LoadContent,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)  	pauseAlpha = Math.Min (pauseAlpha + 1f / 32' 1);  else  	pauseAlpha = Math.Max (pauseAlpha - 1f / 32' 0);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)  	pauseAlpha = Math.Min (pauseAlpha + 1f / 32' 1);  else  	pauseAlpha = Math.Max (pauseAlpha - 1f / 32' 0);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: pauseAlpha = Math.Min (pauseAlpha + 1f / 32' 1);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: pauseAlpha = Math.Max (pauseAlpha - 1f / 32' 0);  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive) {  	// Apply some random jitter to make the enemy move around.  	const float randomization = 10;  	enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  	enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  	// Apply a stabilizing force to stop the enemy moving off the screen.  	Vector2 targetPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width / 2 - gameFont.MeasureString ("Insert Gameplay Here").X / 2' 200);  	enemyPosition = Vector2.Lerp (enemyPosition' targetPosition' 0.05f);  	// TODO: this game isn't very fun! You could probably improve  	// it by inserting something more interesting in this space :-)  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: enemyPosition.X += (float)(random.NextDouble () - 0.5) * randomization;  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: enemyPosition.Y += (float)(random.NextDouble () - 0.5) * randomization;  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,HandleInput,The following statement contains a magic number: if (input.IsPauseGame (ControllingPlayer) || gamePadDisconnected) {  	ScreenManager.AddScreen (new PauseMenuScreen ()' ControllingPlayer);  } else {  	// Otherwise move the player position.  	Vector2 movement = Vector2.Zero;  	if (keyboardState.IsKeyDown (Keys.Left))  		movement.X--;  	if (keyboardState.IsKeyDown (Keys.Right))  		movement.X++;  	if (keyboardState.IsKeyDown (Keys.Up))  		movement.Y--;  	if (keyboardState.IsKeyDown (Keys.Down))  		movement.Y++;  	Vector2 thumbstick = gamePadState.ThumbSticks.Left;  	movement.X += thumbstick.X;  	movement.Y -= thumbstick.Y;  	if (movement.Length () > 1)  		movement.Normalize ();  	playerPosition += movement * 2;  }  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,HandleInput,The following statement contains a magic number: playerPosition += movement * 2;  
Magic Number,GameStateManagement,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (TransitionPosition > 0 || pauseAlpha > 0) {  	float alpha = MathHelper.Lerp (1f - TransitionAlpha' 1f' pauseAlpha / 2);  	ScreenManager.FadeBackBufferToBlack (alpha);  }  
Magic Number,GameStateManagement,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\LoadingScreen.cs,LoadingScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  	SpriteBatch spriteBatch = ScreenManager.SpriteBatch;  	SpriteFont font = ScreenManager.Font;  	const string message = "Loading...";  	// Center the text in the viewport.  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 textSize = font.MeasureString (message);  	Vector2 textPosition = (viewportSize - textSize) / 2;  	Color color = Color.White * TransitionAlpha;  	// Draw the text.  	spriteBatch.Begin ();  	spriteBatch.DrawString (font' message' textPosition' color);  	spriteBatch.End ();  }  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.5);  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++) {  	MenuEntry menuEntry = menuEntries [i];  	// each entry is to be centered horizontally  	position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  	if (ScreenState == ScreenState.TransitionOn)  		position.X -= transitionOffset * 256;  	else  		position.X += transitionOffset * 512;  	// set the entry's position  	menuEntry.Position = position;  	// move down for the next entry the size of this entry  	position.Y += menuEntry.GetHeight (this);  }  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++) {  	MenuEntry menuEntry = menuEntries [i];  	// each entry is to be centered horizontally  	position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  	if (ScreenState == ScreenState.TransitionOn)  		position.X -= transitionOffset * 256;  	else  		position.X += transitionOffset * 512;  	// set the entry's position  	menuEntry.Position = position;  	// move down for the next entry the size of this entry  	position.Y += menuEntry.GetHeight (this);  }  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++) {  	MenuEntry menuEntry = menuEntries [i];  	// each entry is to be centered horizontally  	position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  	if (ScreenState == ScreenState.TransitionOn)  		position.X -= transitionOffset * 256;  	else  		position.X += transitionOffset * 512;  	// set the entry's position  	menuEntry.Position = position;  	// move down for the next entry the size of this entry  	position.Y += menuEntry.GetHeight (this);  }  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++) {  	MenuEntry menuEntry = menuEntries [i];  	// each entry is to be centered horizontally  	position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  	if (ScreenState == ScreenState.TransitionOn)  		position.X -= transitionOffset * 256;  	else  		position.X += transitionOffset * 512;  	// set the entry's position  	menuEntry.Position = position;  	// move down for the next entry the size of this entry  	position.Y += menuEntry.GetHeight (this);  }  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth (this) / 2;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.X -= transitionOffset * 256;  else  	position.X += transitionOffset * 512;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.X -= transitionOffset * 256;  else  	position.X += transitionOffset * 512;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: position.X -= transitionOffset * 256;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: position.X += transitionOffset * 512;  
Magic Number,GameStateManagement,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: titlePosition.Y -= transitionOffset * 100;  
Magic Number,GameStateManagement,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.2);  
Magic Number,GameStateManagement,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.2);  
Magic Number,GameStateManagement,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack (TransitionAlpha * 2 / 3);  
Magic Number,GameStateManagement,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\GameStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack (TransitionAlpha * 2 / 3);  
