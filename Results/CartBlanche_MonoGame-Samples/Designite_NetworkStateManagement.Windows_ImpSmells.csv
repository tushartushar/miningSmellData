Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetworkStateManagement,NetworkSessionComponent,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkSessionComponent.cs,ChooseGamers,Cyclomatic complexity of the method is 9
Complex Conditional,NetworkStateManagement,ProfileSignInScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\ProfileSignInScreen.cs,Update,The conditional expression  "(Guide.IsTrialMode) &&                      (NetworkSessionComponent.IsOnlineSessionType(sessionType)) &&                      (Gamer.SignedInGamers[ControllingPlayer.Value] != null) &&                      (!haveShownMarketplace)"  is complex.
Complex Conditional,NetworkStateManagement,GameScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\ScreenManager\GameScreen.cs,UpdateTransition,The conditional expression  "((direction < 0) && (transitionPosition <= 0)) ||   		((direction > 0) && (transitionPosition >= 1))"  is complex.
Magic Number,NetworkStateManagement,NetworkStateManagementGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Game.cs,NetworkStateManagementGame,The following statement contains a magic number: graphics.PreferredBackBufferWidth = 1067;
Magic Number,NetworkStateManagement,NetworkStateManagementGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Game.cs,NetworkStateManagementGame,The following statement contains a magic number: graphics.PreferredBackBufferHeight = 600;
Magic Number,NetworkStateManagement,MessageDisplayComponent,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\MessageDisplayComponent.cs,Update,The following statement contains a magic number: lock (syncObject)              {                  int index = 0;                  float targetPosition = 0;                    // Update each message in turn.                  while (index < messages.Count)                  {                      NotificationMessage message = messages[index];                        // Gradually slide the message toward its desired position.                      float positionDelta = targetPosition - message.Position;                        float velocity = (float)gameTime.ElapsedGameTime.TotalSeconds * 2;                        message.Position += positionDelta * Math.Min(velocity' 1);                        // Update the age of the message.                      message.Age += gameTime.ElapsedGameTime;                        if (message.Age < showTime + fadeOutTime)                      {                          // This message is still alive.                          index++;                            // Any subsequent messages should be positioned below                          // this one' unless it has started to fade out.                          if (message.Age < showTime)                              targetPosition++;                      }                      else                      {                          // This message is old' and should be removed.                          messages.RemoveAt(index);                      }                  }              }
Magic Number,NetworkStateManagement,MessageDisplayComponent,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\MessageDisplayComponent.cs,Draw,The following statement contains a magic number: lock (syncObject)              {                  // Early out if there are no messages to display.                  if (messages.Count == 0)                      return;                    Vector2 position = new Vector2(GraphicsDevice.Viewport.Width - 100' 0);                    spriteBatch.Begin();                    // Draw each message in turn.                  foreach (NotificationMessage message in messages)                  {                      const float scale = 0.75f;                        // Compute the alpha of this message.                      float alpha = 1;                        if (message.Age < fadeInTime)                      {                          // Fading in.                          alpha = (float)(message.Age.TotalSeconds /                                          fadeInTime.TotalSeconds);                      }                      else if (message.Age > showTime)                      {                          // Fading out.                          TimeSpan fadeOut = showTime + fadeOutTime - message.Age;                            alpha = (float)(fadeOut.TotalSeconds /                                          fadeOutTime.TotalSeconds);                      }                        // Compute the message position.                      position.Y = 80 + message.Position * font.LineSpacing * scale;                        // Compute an origin value to right align each message.                      Vector2 origin = font.MeasureString(message.Text);                      origin.Y = 0;                        // Draw the message text' with a drop shadow.                      spriteBatch.DrawString(font' message.Text' position + Vector2.One'                                             Color.Black * alpha' 0'                                             origin' scale' SpriteEffects.None' 0);                        spriteBatch.DrawString(font' message.Text' position'                                             Color.White * alpha' 0'                                             origin' scale' SpriteEffects.None' 0);                  }                    spriteBatch.End();              }
Magic Number,NetworkStateManagement,MessageDisplayComponent,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\MessageDisplayComponent.cs,Draw,The following statement contains a magic number: lock (syncObject)              {                  // Early out if there are no messages to display.                  if (messages.Count == 0)                      return;                    Vector2 position = new Vector2(GraphicsDevice.Viewport.Width - 100' 0);                    spriteBatch.Begin();                    // Draw each message in turn.                  foreach (NotificationMessage message in messages)                  {                      const float scale = 0.75f;                        // Compute the alpha of this message.                      float alpha = 1;                        if (message.Age < fadeInTime)                      {                          // Fading in.                          alpha = (float)(message.Age.TotalSeconds /                                          fadeInTime.TotalSeconds);                      }                      else if (message.Age > showTime)                      {                          // Fading out.                          TimeSpan fadeOut = showTime + fadeOutTime - message.Age;                            alpha = (float)(fadeOut.TotalSeconds /                                          fadeOutTime.TotalSeconds);                      }                        // Compute the message position.                      position.Y = 80 + message.Position * font.LineSpacing * scale;                        // Compute an origin value to right align each message.                      Vector2 origin = font.MeasureString(message.Text);                      origin.Y = 0;                        // Draw the message text' with a drop shadow.                      spriteBatch.DrawString(font' message.Text' position + Vector2.One'                                             Color.Black * alpha' 0'                                             origin' scale' SpriteEffects.None' 0);                        spriteBatch.DrawString(font' message.Text' position'                                             Color.White * alpha' 0'                                             origin' scale' SpriteEffects.None' 0);                  }                    spriteBatch.End();              }
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,LobbyScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,LobbyScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.5);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Vector2 position = new Vector2 (100' 150);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Vector2 position = new Vector2 (100' 150);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: float transitionOffset = (float)Math.Pow (TransitionPosition' 2);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  				position.X -= transitionOffset * 256;  			else  				position.X += transitionOffset * 512;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  				position.X -= transitionOffset * 256;  			else  				position.X += transitionOffset * 512;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: foreach (NetworkGamer gamer in networkSession.AllGamers) {  				DrawGamer (gamer' position);    				// Advance to the next screen position' wrapping into two  				// columns if there are more than 8 gamers in the session.  				if (++gamerCount == 8) {  					position.X += 433;  					position.Y = 150;  				} else  					position.Y += ScreenManager.Font.LineSpacing;  			}
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: foreach (NetworkGamer gamer in networkSession.AllGamers) {  				DrawGamer (gamer' position);    				// Advance to the next screen position' wrapping into two  				// columns if there are more than 8 gamers in the session.  				if (++gamerCount == 8) {  					position.X += 433;  					position.Y = 150;  				} else  					position.Y += ScreenManager.Font.LineSpacing;  			}
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: foreach (NetworkGamer gamer in networkSession.AllGamers) {  				DrawGamer (gamer' position);    				// Advance to the next screen position' wrapping into two  				// columns if there are more than 8 gamers in the session.  				if (++gamerCount == 8) {  					position.X += 433;  					position.Y = 150;  				} else  					position.Y += ScreenManager.Font.LineSpacing;  			}
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2 (533' 80);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2 (533' 80);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Vector2 titleOrigin = font.MeasureString (title) / 2;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color (192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color (192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color (192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,Draw,The following statement contains a magic number: titlePosition.Y -= transitionOffset * 100;
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,DrawGamer,The following statement contains a magic number: Vector2 iconWidth = new Vector2 (34' 0);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,DrawGamer,The following statement contains a magic number: Vector2 iconOffset = new Vector2 (0' 12);
Magic Number,NetworkStateManagement,LobbyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\LobbyScreen.cs,DrawGamer,The following statement contains a magic number: spriteBatch.DrawString (font' text' position + iconWidth * 2'   				color * TransitionAlpha);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,NetworkBusyScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.1);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,NetworkBusyScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.2);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: const int hPad = 32 ;
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: const int vPad = 16 ;
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: Vector2 textPosition = (viewportSize - textSize) / 2;
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle ((int)textPosition.X - hPad'  							(int)textPosition.Y - vPad'  							(int)textSize.X + hPad * 2'  							(int)textSize.Y + vPad * 2);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle ((int)textPosition.X - hPad'  							(int)textPosition.Y - vPad'  							(int)textSize.X + hPad * 2'  							(int)textSize.Y + vPad * 2);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: float catRotation = (float)gameTime.TotalGameTime.TotalSeconds * 3;
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: Vector2 catPosition = new Vector2 (textPosition.X + textSize.X / 2'  						textPosition.Y + textSize.Y -   								catSize.Y / 2);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: Vector2 catPosition = new Vector2 (textPosition.X + textSize.X / 2'  						textPosition.Y + textSize.Y -   								catSize.Y / 2);
Magic Number,NetworkStateManagement,NetworkBusyScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (catTexture' catPosition' null' color' catRotation'   				catSize / 2' 1' SpriteEffects.None' 0);
Magic Number,NetworkStateManagement,BackgroundScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.5);
Magic Number,NetworkStateManagement,BackgroundScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\BackgroundScreen.cs,BackgroundScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(1.5);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,GameplayScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,LoadContent,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)                  pauseAlpha = Math.Min(pauseAlpha + 1f / 32' 1);              else                  pauseAlpha = Math.Max(pauseAlpha - 1f / 32' 0);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (coveredByOtherScreen)                  pauseAlpha = Math.Min(pauseAlpha + 1f / 32' 1);              else                  pauseAlpha = Math.Max(pauseAlpha - 1f / 32' 0);
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(200' 200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(200' 200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(200' 200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(200' 200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (IsActive)              {                  // Apply some random jitter to make the enemy move around.                  const float randomization = 10;                    enemyPosition.X += (float)(random.NextDouble() - 0.5) * randomization;                  enemyPosition.Y += (float)(random.NextDouble() - 0.5) * randomization;                    // Apply a stabilizing force to stop the enemy moving off the screen.                  Vector2 targetPosition = new Vector2(200' 200);                    enemyPosition = Vector2.Lerp(enemyPosition' targetPosition' 0.05f);                    // TODO: this game isn't very fun! You could probably improve                  // it by inserting something more interesting in this space :-)              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,HandlePlayerInput,The following statement contains a magic number: playerPosition += movement * 2;
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null)              {                  string message = "Players: " + networkSession.AllGamers.Count;                  Vector2 messagePosition = new Vector2(100' 480);                  spriteBatch.DrawString(gameFont' message' messagePosition' Color.White);              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null)              {                  string message = "Players: " + networkSession.AllGamers.Count;                  Vector2 messagePosition = new Vector2(100' 480);                  spriteBatch.DrawString(gameFont' message' messagePosition' Color.White);              }
Magic Number,NetworkStateManagement,GameplayScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (TransitionPosition > 0 || pauseAlpha > 0)              {                  float alpha = MathHelper.Lerp(1f - TransitionAlpha' 1f' pauseAlpha / 2);                    ScreenManager.FadeBackBufferToBlack(alpha);              }
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,LoadingScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  				SpriteBatch spriteBatch = ScreenManager.SpriteBatch;  				SpriteFont font = ScreenManager.Font;    				string message = Resources.Loading;    				// Center the text in the viewport.  				Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  				Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  				Vector2 textSize = font.MeasureString (message);  				Vector2 textPosition = (viewportSize - textSize) / 2;    				Color color = Color.White * TransitionAlpha;    				// Animate the number of dots after our "Loading..." message.  				loadAnimationTimer += gameTime.ElapsedGameTime;    				int dotCount = (int)(loadAnimationTimer.TotalSeconds * 5) % 10;    				message += new string ('.'' dotCount);    				// Draw the text.  				spriteBatch.Begin ();  				spriteBatch.DrawString (font' message' textPosition' color);  				spriteBatch.End ();  			}
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  				SpriteBatch spriteBatch = ScreenManager.SpriteBatch;  				SpriteFont font = ScreenManager.Font;    				string message = Resources.Loading;    				// Center the text in the viewport.  				Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  				Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  				Vector2 textSize = font.MeasureString (message);  				Vector2 textPosition = (viewportSize - textSize) / 2;    				Color color = Color.White * TransitionAlpha;    				// Animate the number of dots after our "Loading..." message.  				loadAnimationTimer += gameTime.ElapsedGameTime;    				int dotCount = (int)(loadAnimationTimer.TotalSeconds * 5) % 10;    				message += new string ('.'' dotCount);    				// Draw the text.  				spriteBatch.Begin ();  				spriteBatch.DrawString (font' message' textPosition' color);  				spriteBatch.End ();  			}
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  				SpriteBatch spriteBatch = ScreenManager.SpriteBatch;  				SpriteFont font = ScreenManager.Font;    				string message = Resources.Loading;    				// Center the text in the viewport.  				Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  				Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  				Vector2 textSize = font.MeasureString (message);  				Vector2 textPosition = (viewportSize - textSize) / 2;    				Color color = Color.White * TransitionAlpha;    				// Animate the number of dots after our "Loading..." message.  				loadAnimationTimer += gameTime.ElapsedGameTime;    				int dotCount = (int)(loadAnimationTimer.TotalSeconds * 5) % 10;    				message += new string ('.'' dotCount);    				// Draw the text.  				spriteBatch.Begin ();  				spriteBatch.DrawString (font' message' textPosition' color);  				spriteBatch.End ();  			}
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,BackgroundWorkerThread,The following statement contains a magic number: while (!backgroundThreadExit.WaitOne (1000 / 30)) {  				//GameTime gameTime = GetGameTime (ref lastTime);    				//DrawLoadAnimation (gameTime);    				UpdateNetworkSession ();  			}
Magic Number,NetworkStateManagement,LoadingScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\LoadingScreen.cs,BackgroundWorkerThread,The following statement contains a magic number: while (!backgroundThreadExit.WaitOne (1000 / 30)) {  				//GameTime gameTime = GetGameTime (ref lastTime);    				//DrawLoadAnimation (gameTime);    				UpdateNetworkSession ();  			}
Magic Number,NetworkStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuEntry.cs,Update,The following statement contains a magic number: float fadeSpeed = (float)gameTime.ElapsedGameTime.TotalSeconds * 4;
Magic Number,NetworkStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuEntry.cs,Draw,The following statement contains a magic number: float pulsate = (float)Math.Sin(time * 6) + 1;
Magic Number,NetworkStateManagement,MenuEntry,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuEntry.cs,Draw,The following statement contains a magic number: Vector2 origin = new Vector2(0' font.LineSpacing / 2);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.5);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,MenuScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.5);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: float transitionOffset = (float)Math.Pow(TransitionPosition' 2);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,UpdateMenuEntryLocations,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++)              {                  MenuEntry menuEntry = menuEntries[i];                                    // each entry is to be centered horizontally                  position.X = ScreenManager.GraphicsDevice.Viewport.Width / 2 - menuEntry.GetWidth(this) / 2;                    if (ScreenState == ScreenState.TransitionOn)                      position.X -= transitionOffset * 256;                  else                      position.X += transitionOffset * 512;                    // set the entry's position                  menuEntry.Position = position;                    // move down for the next entry the size of this entry                  position.Y += menuEntry.GetHeight(this);              }
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: float transitionOffset = (float)Math.Pow(TransitionPosition' 2);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2(graphics.Viewport.Width / 2' 80);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titlePosition = new Vector2(graphics.Viewport.Width / 2' 80);
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Vector2 titleOrigin = font.MeasureString(menuTitle) / 2;
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: Color titleColor = new Color(192' 192' 192) * TransitionAlpha;
Magic Number,NetworkStateManagement,MenuScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MenuScreen.cs,Draw,The following statement contains a magic number: titlePosition.Y -= transitionOffset * 100;
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds(0.2);
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds(0.2);
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack(TransitionAlpha * 2 / 3);
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack(TransitionAlpha * 2 / 3);
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Vector2 textPosition = (viewportSize - textSize) / 2;
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: const int hPad = 32;
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: const int vPad = 16;
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle((int)textPosition.X - hPad'                                                            (int)textPosition.Y - vPad'                                                            (int)textSize.X + hPad * 2'                                                            (int)textSize.Y + vPad * 2);
Magic Number,NetworkStateManagement,MessageBoxScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Screens\MessageBoxScreen.cs,Draw,The following statement contains a magic number: Rectangle backgroundRectangle = new Rectangle((int)textPosition.X - hPad'                                                            (int)textPosition.Y - vPad'                                                            (int)textSize.X + hPad * 2'                                                            (int)textSize.Y + vPad * 2);
Missing Default,NetworkStateManagement,NetworkErrorScreen,C:\repos\CartBlanche_MonoGame-Samples\NetworkStateManagement\Networking\NetworkErrorScreen.cs,GetErrorMessage,The following switch statement is missing a default case: switch (joinException.JoinError)                  {                      case NetworkSessionJoinError.SessionFull:                          return Resources.ErrorSessionFull;                        case NetworkSessionJoinError.SessionNotFound:                          return Resources.ErrorSessionNotFound;                        case NetworkSessionJoinError.SessionNotJoinable:                          return Resources.ErrorSessionNotJoinable;                  }
