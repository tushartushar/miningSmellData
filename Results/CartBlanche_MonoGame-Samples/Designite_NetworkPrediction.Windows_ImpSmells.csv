Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,Cyclomatic complexity of the method is 9
Long Parameter List,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,ReadNetworkPacket,The method has 5 parameters. Parameters: packetReader' gameTime' latency' enablePrediction' enableSmoothing
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,ReadIncomingPackets,The following statement contains a magic number: while (gamer.IsDataAvailable)              {                  NetworkGamer sender;                    // Read a single packet from the network.                  gamer.ReceiveData(packetReader' out sender);                    // Discard packets sent by local gamers: we already know their state!                  if (sender.IsLocal)                      continue;                    // Look up the tank associated with whoever sent this packet.                  Tank tank = sender.Tag as Tank;                    // Estimate how long this packet took to arrive.                  TimeSpan latency = networkSession.SimulatedLatency +                                     TimeSpan.FromTicks(sender.RoundtripTime.Ticks / 2);                    // Read the state of this tank from the network packet.                  tank.ReadNetworkPacket(packetReader' gameTime' latency'                                         enablePrediction' enableSmoothing);              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: if (networkSession.IsHost)              {                  // Change the network quality simultation?                  if (IsPressed(Keys.A' Buttons.A))                  {                      networkQuality++;                        if (networkQuality > NetworkQuality.Perfect)                          networkQuality = 0;                  }                    // Change the packet send rate?                  if (IsPressed(Keys.B' Buttons.B))                  {                      if (framesBetweenPackets == 6)                          framesBetweenPackets = 3;                      else if (framesBetweenPackets == 3)                          framesBetweenPackets = 1;                      else                          framesBetweenPackets = 6;                  }                    // Toggle prediction on or off?                  if (IsPressed(Keys.X' Buttons.X))                      enablePrediction = !enablePrediction;                    // Toggle smoothing on or off?                  if (IsPressed(Keys.Y' Buttons.Y))                      enableSmoothing = !enableSmoothing;                    // Stores the latest settings into NetworkSession.SessionProperties.                  networkSession.SessionProperties[0] = (int)networkQuality;                  networkSession.SessionProperties[1] = framesBetweenPackets;                  networkSession.SessionProperties[2] = enablePrediction ? 1 : 0;                  networkSession.SessionProperties[3] = enableSmoothing ? 1 : 0;              }              else              {                  // Client machines read the latest settings from the session properties.                  networkQuality = (NetworkQuality)networkSession.SessionProperties[0];                  framesBetweenPackets = networkSession.SessionProperties[1].Value;                  enablePrediction = networkSession.SessionProperties[2] != 0;                  enableSmoothing = networkSession.SessionProperties[3] != 0;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: switch (networkQuality)              {                  case NetworkQuality.Typical:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(100);                      networkSession.SimulatedPacketLoss = 0.1f;                      break;                    case NetworkQuality.Poor:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(200);                      networkSession.SimulatedPacketLoss = 0.2f;                      break;                    case NetworkQuality.Perfect:                      networkSession.SimulatedLatency = TimeSpan.Zero;                      networkSession.SimulatedPacketLoss = 0;                      break;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following statement contains a magic number: switch (networkQuality)              {                  case NetworkQuality.Typical:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(100);                      networkSession.SimulatedPacketLoss = 0.1f;                      break;                    case NetworkQuality.Poor:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(200);                      networkSession.SimulatedPacketLoss = 0.2f;                      break;                    case NetworkQuality.Perfect:                      networkSession.SimulatedLatency = TimeSpan.Zero;                      networkSession.SimulatedPacketLoss = 0;                      break;              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMenuScreen,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 161)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMenuScreen,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 161)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMenuScreen,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 160)' Color.White);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMenuScreen,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 160)' Color.White);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawNetworkSession,The following statement contains a magic number: foreach (NetworkGamer gamer in networkSession.AllGamers)              {                  // Look up the tank object belonging to this network gamer.                  Tank tank = gamer.Tag as Tank;                    // Draw the tank.                  tank.Draw(spriteBatch);                    // Draw a gamertag label.                  spriteBatch.DrawString(font' gamer.Gamertag' tank.Position'                                         Color.Black' 0' new Vector2(100' 150)'                                         0.6f' SpriteEffects.None' 0);              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawNetworkSession,The following statement contains a magic number: foreach (NetworkGamer gamer in networkSession.AllGamers)              {                  // Look up the tank object belonging to this network gamer.                  Tank tank = gamer.Tag as Tank;                    // Draw the tank.                  tank.Draw(spriteBatch);                    // Draw a gamertag label.                  spriteBatch.DrawString(font' gamer.Gamertag' tank.Position'                                         Color.Black' 0' new Vector2(100' 150)'                                         0.6f' SpriteEffects.None' 0);              }
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: string quality =                  string.Format("Network simulation = {0} ms' {1}% packet loss"'                                networkSession.SimulatedLatency.TotalMilliseconds'                                networkSession.SimulatedPacketLoss * 100);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: string sendRate = string.Format("Packets per second = {0}"'                                              60 / framesBetweenPackets);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 321)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 321)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 320)' Color.White);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawOptions,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 320)' Color.White);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMessage,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 161)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMessage,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(161' 161)' Color.Black);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMessage,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 160)' Color.White);
Magic Number,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,DrawMessage,The following statement contains a magic number: spriteBatch.DrawString(font' message' new Vector2(160' 160)' Color.White);
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float x = screenWidth / 4 + (gamerIndex % 5) * screenWidth / 8;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float x = screenWidth / 4 + (gamerIndex % 5) * screenWidth / 8;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float x = screenWidth / 4 + (gamerIndex % 5) * screenWidth / 8;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float y = screenHeight / 4 + (gamerIndex / 5) * screenHeight / 5;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float y = screenHeight / 4 + (gamerIndex / 5) * screenHeight / 5;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Tank,The following statement contains a magic number: float y = screenHeight / 4 + (gamerIndex / 5) * screenHeight / 5;
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,ApplyPrediction,The following statement contains a magic number: TimeSpan oneFrame = TimeSpan.FromSeconds(1.0 / 60.0);
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Draw,The following statement contains a magic number: Vector2 origin = new Vector2(tankTexture.Width / 2' tankTexture.Height / 2);
Magic Number,NetworkPrediction,Tank,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\Tank.cs,Draw,The following statement contains a magic number: Vector2 origin = new Vector2(tankTexture.Width / 2' tankTexture.Height / 2);
Missing Default,NetworkPrediction,NetworkPredictionGame,C:\repos\CartBlanche_MonoGame-Samples\NetworkPrediction\NetworkPredictionGame.cs,UpdateOptions,The following switch statement is missing a default case: switch (networkQuality)              {                  case NetworkQuality.Typical:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(100);                      networkSession.SimulatedPacketLoss = 0.1f;                      break;                    case NetworkQuality.Poor:                      networkSession.SimulatedLatency = TimeSpan.FromMilliseconds(200);                      networkSession.SimulatedPacketLoss = 0.2f;                      break;                    case NetworkQuality.Perfect:                      networkSession.SimulatedLatency = TimeSpan.Zero;                      networkSession.SimulatedPacketLoss = 0;                      break;              }
