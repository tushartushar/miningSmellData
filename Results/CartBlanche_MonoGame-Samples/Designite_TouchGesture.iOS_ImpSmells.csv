Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TouchGestureSample,Game1,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Game1.cs,HandleTouchInput,Cyclomatic complexity of the method is 27
Long Statement,TouchGestureSample,Game1,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Game1.cs,Initialize,The length of the statement  "	TouchPanel.EnabledGestures = GestureType.Hold | GestureType.Tap | GestureType.DoubleTap | GestureType.FreeDrag | GestureType.Flick | GestureType.Pinch; " is 151.
Long Statement,TouchGestureSample,Sprite,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Sprite.cs,Draw,The length of the statement  "	spriteBatch.Draw (texture' Center' null' Color' 0' new Vector2 (texture.Width / 2' texture.Height / 2)' Scale' SpriteEffects.None' 0); " is 134.
Magic Number,TouchGestureSample,Game1,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Game1.cs,Game1,The following statement contains a magic number: TargetElapsedTime = TimeSpan.FromTicks (333333);  
Magic Number,TouchGestureSample,Sprite,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Sprite.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (texture' Center' null' Color' 0' new Vector2 (texture.Width / 2' texture.Height / 2)' Scale' SpriteEffects.None' 0);  
Magic Number,TouchGestureSample,Sprite,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Sprite.cs,Draw,The following statement contains a magic number: spriteBatch.Draw (texture' Center' null' Color' 0' new Vector2 (texture.Width / 2' texture.Height / 2)' Scale' SpriteEffects.None' 0);  
Missing Default,TouchGestureSample,Game1,F:\newReposMay17\CartBlanche_MonoGame-Samples\TouchGesture\Game1.cs,HandleTouchInput,The following switch statement is missing a default case: switch (gesture.GestureType) {  // on taps' we change the color of the selected sprite  case GestureType.Tap:  case GestureType.DoubleTap:  	if (selectedSprite != null) {  		selectedSprite.ChangeColor ();  	}  	break;  // on holds' if no sprite is selected' we add a new sprite at the  // hold position and make it our selected sprite. otherwise we  // remove our selected sprite.  case GestureType.Hold:  	if (selectedSprite == null) {  		// create the new sprite  		selectedSprite = new Sprite (cat);  		selectedSprite.Center = gesture.Position;  		// add it to our list  		sprites.Add (selectedSprite);  	} else {  		sprites.Remove (selectedSprite);  		selectedSprite = null;  	}  	break;  // on drags' we just want to move the selected sprite with the drag  case GestureType.FreeDrag:  	if (selectedSprite != null) {  		selectedSprite.Center += gesture.Delta;  	}  	break;  // on flicks' we want to update the selected sprite's velocity with  // the flick velocity' which is in pixels per second.  case GestureType.Flick:  	if (selectedSprite != null) {  		selectedSprite.Velocity = gesture.Delta;  	}  	break;  // on pinches' we want to scale the selected sprite  case GestureType.Pinch:  	if (selectedSprite != null) {  		// get the current and previous locations of the two fingers  		Vector2 a = gesture.Position;  		Vector2 aOld = gesture.Position - gesture.Delta;  		Vector2 b = gesture.Position2;  		Vector2 bOld = gesture.Position2 - gesture.Delta2;  		// figure out the distance between the current and previous locations  		float d = Vector2.Distance (a' b);  		float dOld = Vector2.Distance (aOld' bOld);  		// calculate the difference between the two and use that to alter the scale  		float scaleChange = (d - dOld) * .01f;  		selectedSprite.Scale += scaleChange;  	}  	break;  }  
