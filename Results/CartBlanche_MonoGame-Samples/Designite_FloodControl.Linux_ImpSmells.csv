Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,Cyclomatic complexity of the method is 11
Complex Method,Flood_Control,GameBoard,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\GameBoard.cs,GenerateNewPieces,Cyclomatic complexity of the method is 8
Complex Method,Flood_Control,GamePiece,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\GamePiece.cs,RotatePiece,Cyclomatic complexity of the method is 11
Complex Conditional,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,HandleMouseInput,The conditional expression  "(x >= 0) && (x < GameBoard.GameBoardWidth) &&                (y >= 0) && (y < GameBoard.GameBoardHeight)"  is complex.
Complex Conditional,Flood_Control,GameBoard,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\GameBoard.cs,PropagateWater,The conditional expression  "(y >= 0) && (y < GameBoardHeight) &&                  (x >= 0) && (x < GameBoardWidth)"  is complex.
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Initialize,The following statement contains a magic number: graphics.PreferredBackBufferWidth = 800;
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Initialize,The following statement contains a magic number: graphics.PreferredBackBufferHeight = 600;
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DetermineScore,The following statement contains a magic number: return (int)((Math.Pow((SquareCount / 5)' 2) + SquareCount) * 10);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DetermineScore,The following statement contains a magic number: return (int)((Math.Pow((SquareCount / 5)' 2) + SquareCount) * 10);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DetermineScore,The following statement contains a magic number: return (int)((Math.Pow((SquareCount / 5)' 2) + SquareCount) * 10);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,CheckScoringChain,The following statement contains a magic number: floodCount = MathHelper.Clamp(floodCount -                              (DetermineScore(WaterChain.Count) / 10)' 0.0f' 100.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,CheckScoringChain,The following statement contains a magic number: floodCount = MathHelper.Clamp(floodCount -                              (DetermineScore(WaterChain.Count) / 10)' 0.0f' 100.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,CheckScoringChain,The following statement contains a magic number: ScoreZooms.Enqueue(new ScoreZoom("+" +                              DetermineScore(WaterChain.Count).ToString()'                              new Color(1.0f' 0.0f' 0.0f' 0.4f)));
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,CheckScoringChain,The following statement contains a magic number: linesCompletedThisLevel >= 10
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Update,The following statement contains a magic number: switch (gameState)              {                  case GameStates.TitleScreen:                      if (Keyboard.GetState().IsKeyDown(Keys.Space))                      {                          gameBoard.ClearBoard();                          gameBoard.GenerateNewPieces(false);                          playerScore = 0;                          currentLevel = 0;                          floodIncreaseAmount = 0.0f;                          StartNewLevel();                          gameState = GameStates.Playing;                      }                      break;                    case GameStates.Playing:                      timeSinceLastInput +=                          (float)gameTime.ElapsedGameTime.TotalSeconds;                        timeSinceLastFloodIncrease +=                           (float)gameTime.ElapsedGameTime.TotalSeconds;                            if (timeSinceLastFloodIncrease >= timeBetweenFloodIncreases)                          {                              floodCount += floodIncreaseAmount;                              timeSinceLastFloodIncrease = 0.0f;                              if (floodCount >= MaxFloodCounter)                              {                                  gameOverTimer = 8.0f;                                  gameState = GameStates.GameOver;                              }                          }                        if (gameBoard.ArePiecesAnimating())                      {                          gameBoard.UpdateAnimatedPieces();                      }                      else                      {                          gameBoard.ResetWater();                            for (int y = 0; y < GameBoard.GameBoardHeight; y++)                          {                              CheckScoringChain(gameBoard.GetWaterChain(y));                          }                            gameBoard.GenerateNewPieces(true);                            if (timeSinceLastInput >= MinTimeSinceLastInput)                          {                              HandleMouseInput(Mouse.GetState());                          }                      }                      UpdateScoreZooms();                        break;                    case GameStates.GameOver:                      gameOverTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;                      if (gameOverTimer <= 0)                      {                          gameState = GameStates.TitleScreen;                      }                      break;                }
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DrawRotatingPiece,The following statement contains a magic number: spriteBatch.Draw(                playingPieces'                new Rectangle(pixelX + (GamePiece.PieceWidth / 2)'                    pixelY + (GamePiece.PieceHeight / 2)'                    GamePiece.PieceWidth'                    GamePiece.PieceHeight)'                gameBoard.rotatingPieces[positionName].GetSourceRect()'                Color.White'                gameBoard.rotatingPieces[positionName].RotationAmount'                new Vector2(GamePiece.PieceWidth / 2'                    GamePiece.PieceHeight / 2)'                SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DrawRotatingPiece,The following statement contains a magic number: spriteBatch.Draw(                playingPieces'                new Rectangle(pixelX + (GamePiece.PieceWidth / 2)'                    pixelY + (GamePiece.PieceHeight / 2)'                    GamePiece.PieceWidth'                    GamePiece.PieceHeight)'                gameBoard.rotatingPieces[positionName].GetSourceRect()'                Color.White'                gameBoard.rotatingPieces[positionName].RotationAmount'                new Vector2(GamePiece.PieceWidth / 2'                    GamePiece.PieceHeight / 2)'                SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DrawRotatingPiece,The following statement contains a magic number: spriteBatch.Draw(                playingPieces'                new Rectangle(pixelX + (GamePiece.PieceWidth / 2)'                    pixelY + (GamePiece.PieceHeight / 2)'                    GamePiece.PieceWidth'                    GamePiece.PieceHeight)'                gameBoard.rotatingPieces[positionName].GetSourceRect()'                Color.White'                gameBoard.rotatingPieces[positionName].RotationAmount'                new Vector2(GamePiece.PieceWidth / 2'                    GamePiece.PieceHeight / 2)'                SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,DrawRotatingPiece,The following statement contains a magic number: spriteBatch.Draw(                playingPieces'                new Rectangle(pixelX + (GamePiece.PieceWidth / 2)'                    pixelY + (GamePiece.PieceHeight / 2)'                    GamePiece.PieceWidth'                    GamePiece.PieceHeight)'                gameBoard.rotatingPieces[positionName].GetSourceRect()'                Color.White'                gameBoard.rotatingPieces[positionName].RotationAmount'                new Vector2(GamePiece.PieceWidth / 2'                    GamePiece.PieceHeight / 2)'                SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(pericles36Font' zoom.Text'                          new Vector2(this.Window.ClientBounds.Width / 2'                              this.Window.ClientBounds.Height / 2)'                          zoom.DrawColor' 0.0f'                          new Vector2(pericles36Font.MeasureString(zoom.Text).X / 2'                              pericles36Font.MeasureString(zoom.Text).Y / 2)'                          zoom.Scale' SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(pericles36Font' zoom.Text'                          new Vector2(this.Window.ClientBounds.Width / 2'                              this.Window.ClientBounds.Height / 2)'                          zoom.DrawColor' 0.0f'                          new Vector2(pericles36Font.MeasureString(zoom.Text).X / 2'                              pericles36Font.MeasureString(zoom.Text).Y / 2)'                          zoom.Scale' SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(pericles36Font' zoom.Text'                          new Vector2(this.Window.ClientBounds.Width / 2'                              this.Window.ClientBounds.Height / 2)'                          zoom.DrawColor' 0.0f'                          new Vector2(pericles36Font.MeasureString(zoom.Text).X / 2'                              pericles36Font.MeasureString(zoom.Text).Y / 2)'                          zoom.Scale' SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(pericles36Font' zoom.Text'                          new Vector2(this.Window.ClientBounds.Width / 2'                              this.Window.ClientBounds.Height / 2)'                          zoom.DrawColor' 0.0f'                          new Vector2(pericles36Font.MeasureString(zoom.Text).X / 2'                              pericles36Font.MeasureString(zoom.Text).Y / 2)'                          zoom.Scale' SpriteEffects.None' 0.0f);
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: int waterHeight = (int)(MaxWaterHeight * (floodCount / 100));
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(backgroundScreen'                      new Rectangle(                          (int)waterPosition.X'                          (int)waterPosition.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Rectangle(                          (int)waterOverlayStart.X'                          (int)waterOverlayStart.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Color(255' 255' 255' 180));
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(backgroundScreen'                      new Rectangle(                          (int)waterPosition.X'                          (int)waterPosition.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Rectangle(                          (int)waterOverlayStart.X'                          (int)waterOverlayStart.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Color(255' 255' 255' 180));
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(backgroundScreen'                      new Rectangle(                          (int)waterPosition.X'                          (int)waterPosition.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Rectangle(                          (int)waterOverlayStart.X'                          (int)waterOverlayStart.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Color(255' 255' 255' 180));
Magic Number,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(backgroundScreen'                      new Rectangle(                          (int)waterPosition.X'                          (int)waterPosition.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Rectangle(                          (int)waterOverlayStart.X'                          (int)waterOverlayStart.Y + (MaxWaterHeight - waterHeight)'                          WaterWidth'                          waterHeight)'                      new Color(255' 255' 255' 180));
Missing Default,Flood_Control,Game1,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\Game1.cs,Update,The following switch statement is missing a default case: switch (gameState)              {                  case GameStates.TitleScreen:                      if (Keyboard.GetState().IsKeyDown(Keys.Space))                      {                          gameBoard.ClearBoard();                          gameBoard.GenerateNewPieces(false);                          playerScore = 0;                          currentLevel = 0;                          floodIncreaseAmount = 0.0f;                          StartNewLevel();                          gameState = GameStates.Playing;                      }                      break;                    case GameStates.Playing:                      timeSinceLastInput +=                          (float)gameTime.ElapsedGameTime.TotalSeconds;                        timeSinceLastFloodIncrease +=                           (float)gameTime.ElapsedGameTime.TotalSeconds;                            if (timeSinceLastFloodIncrease >= timeBetweenFloodIncreases)                          {                              floodCount += floodIncreaseAmount;                              timeSinceLastFloodIncrease = 0.0f;                              if (floodCount >= MaxFloodCounter)                              {                                  gameOverTimer = 8.0f;                                  gameState = GameStates.GameOver;                              }                          }                        if (gameBoard.ArePiecesAnimating())                      {                          gameBoard.UpdateAnimatedPieces();                      }                      else                      {                          gameBoard.ResetWater();                            for (int y = 0; y < GameBoard.GameBoardHeight; y++)                          {                              CheckScoringChain(gameBoard.GetWaterChain(y));                          }                            gameBoard.GenerateNewPieces(true);                            if (timeSinceLastInput >= MinTimeSinceLastInput)                          {                              HandleMouseInput(Mouse.GetState());                          }                      }                      UpdateScoreZooms();                        break;                    case GameStates.GameOver:                      gameOverTimer -= (float)gameTime.ElapsedGameTime.TotalSeconds;                      if (gameOverTimer <= 0)                      {                          gameState = GameStates.TitleScreen;                      }                      break;                }
Missing Default,Flood_Control,GameBoard,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\GameBoard.cs,PropagateWater,The following switch statement is missing a default case: switch (end)                          {                              case "Left": PropagateWater(x - 1' y' "Right");                                  break;                              case "Right": PropagateWater(x + 1' y' "Left");                                  break;                              case "Top": PropagateWater(x' y - 1' "Bottom");                                  break;                              case "Bottom": PropagateWater(x' y + 1' "Top");                                  break;                          }
Missing Default,Flood_Control,GamePiece,D:\research\architectureSmells\repos\CartBlanche_MonoGame-Samples\BookSourceCode\XNAGameDevelopmentbyExampleCode\FloodControl\GamePiece.cs,RotatePiece,The following switch statement is missing a default case: switch (pieceType)              {                  case "Left'Right":                      pieceType = "Top'Bottom";                      break;                  case "Top'Bottom":                      pieceType = "Left'Right";                      break;                  case "Left'Top":                      if (Clockwise)                          pieceType = "Top'Right";                      else                          pieceType = "Bottom'Left";                      break;                  case "Top'Right":                      if (Clockwise)                          pieceType = "Right'Bottom";                      else                          pieceType = "Left'Top";                      break;                  case "Right'Bottom":                      if (Clockwise)                          pieceType = "Bottom'Left";                      else                          pieceType = "Top'Right";                      break;                  case "Bottom'Left":                      if (Clockwise)                          pieceType = "Left'Top";                      else                          pieceType = "Right'Bottom";                      break;                  case "Empty":                      break;              }
