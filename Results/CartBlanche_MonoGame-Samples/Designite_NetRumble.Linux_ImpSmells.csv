Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The method has 135 lines of code.
Complex Method,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,Cyclomatic complexity of the method is 42
Complex Method,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Update,Cyclomatic complexity of the method is 18
Complex Method,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,Cyclomatic complexity of the method is 11
Complex Method,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,NetRumble,ScreenManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\ScreenManager.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,Cyclomatic complexity of the method is 8
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,Cyclomatic complexity of the method is 14
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,Cyclomatic complexity of the method is 28
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,ProcessPackets,Cyclomatic complexity of the method is 37
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,SpawnPowerup,Cyclomatic complexity of the method is 11
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Draw,Cyclomatic complexity of the method is 9
Complex Method,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,Cyclomatic complexity of the method is 14
Complex Method,NetRumble,ShipInput,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\ShipInput.cs,ShipInput,Cyclomatic complexity of the method is 15
Complex Method,NetRumble,Ship,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Ship.cs,Update,Cyclomatic complexity of the method is 15
Complex Method,NetRumble,Ship,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Ship.cs,Die,Cyclomatic complexity of the method is 9
Complex Method,NetRumble,Ship,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Ship.cs,GetNextUniqueColorIndex,Cyclomatic complexity of the method is 9
Complex Method,NetRumble,Ship,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Ship.cs,GetPreviousUniqueColorIndex,Cyclomatic complexity of the method is 9
Complex Method,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,MoveAndCollide,Cyclomatic complexity of the method is 8
Complex Method,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Collide,Cyclomatic complexity of the method is 11
Complex Method,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,FindSpawnPoint,Cyclomatic complexity of the method is 12
Complex Method,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Explode,Cyclomatic complexity of the method is 10
Complex Method,NetRumble,LaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\LaserWeapon.cs,LaserWeapon,Cyclomatic complexity of the method is 9
Long Parameter List,NetRumble,CollisionMath,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\CollisionMath.cs,LineLineIntersect,The method has 5 parameters.
Long Parameter List,NetRumble,CollisionMath,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\CollisionMath.cs,CircleLineCollide,The method has 5 parameters.
Long Parameter List,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The method has 5 parameters.
Long Parameter List,NetRumble,GameplayObject,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\GameplayObject.cs,Draw,The method has 5 parameters.
Long Parameter List,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Explode,The method has 6 parameters.
Long Parameter List,NetRumble,PowerUp,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\PowerUps\PowerUp.cs,Draw,The method has 5 parameters.
Long Parameter List,NetRumble,BloomSettings,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomSettings.cs,BloomSettings,The method has 7 parameters.
Long Parameter List,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,DrawFullscreenQuad,The method has 5 parameters.
Long Statement,NetRumble,RandomMath,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\RandomMath.cs,RandomDirection,The length of the statement  "	float angle = RandomBetween (MathHelper.ToRadians (minimumAngle)' MathHelper.ToRadians (maximumAngle)) - MathHelper.PiOver2; " is 124.
Long Statement,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Update,The length of the statement  "		if (!signedIntoLive && ((sessionType == NetworkSessionType.PlayerMatch) || (sessionType == NetworkSessionType.Ranked)) && !IsExiting) { " is 135.
Long Statement,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The length of the statement  "		ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' alternateString' position' Color.White' 0' origin' 1.0f' SpriteEffects.None' 0); " is 138.
Long Statement,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,SessionsFound,The length of the statement  "				MenuEntries.Add (availableSession.HostGamertag + " (" + availableSession.CurrentGamerCount.ToString () + "/" + World.MaximumPlayers.ToString () + ")"); " is 151.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	Rectangle backgroundRectangle = new Rectangle ((int)textPosition.X - hPad' (int)textPosition.Y - vPad' (int)textSize.X + hPad * 2' (int)textSize.Y + vPad * 2); " is 159.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	Rectangle backgroundRectangle2 = new Rectangle (backgroundRectangle.X - 1' backgroundRectangle.Y - 1' backgroundRectangle.Width + 2' backgroundRectangle.Height + 2); " is 165.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	ScreenManager.DrawRectangle (backgroundRectangle2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f))); " is 128.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	ScreenManager.DrawRectangle (backgroundRectangle' new Color (0' 0' 0' (byte)(232.0f * (float)TransitionAlpha / 255.0f))); " is 121.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	Vector2 busyTexturePosition = new Vector2 (textPosition.X + textSize.X / 2' textPosition.Y + textSize.Y - busyTextureSize.Y / 2); " is 129.
Long Statement,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The length of the statement  "	spriteBatch.Draw (busyTexture' busyTexturePosition' null' color' busyTextureRotation' busyTextureOrigin' busyTextureScale' SpriteEffects.None' 0); " is 146.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "	columnPositions [0] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f); " is 141.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "	columnPositions [1] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.4f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f); " is 141.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "	columnPositions [2] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.6f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f); " is 141.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "	columnPositions [3] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.8f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f); " is 141.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "			world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true); " is 154.
Long Statement,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The length of the statement  "	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' instructions' new Vector2 (ScreenManager.TitleSafeArea.X' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height - ScreenManager.Font.LineSpacing)' Color.White); " is 231.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The length of the statement  "			if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) { " is 143.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The length of the statement  "				winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2)); " is 309.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The length of the statement  "			Vector2 center = new Vector2 (localShip.Position.X + ScreenManager.GraphicsDevice.Viewport.X - ScreenManager.GraphicsDevice.Viewport.Width / 2' localShip.Position.Y + ScreenManager.GraphicsDevice.Viewport.Y - ScreenManager.GraphicsDevice.Viewport.Height / 2); " is 259.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The length of the statement  "		Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f); " is 137.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The length of the statement  "		position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f); " is 129.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The length of the statement  "		position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f); " is 130.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The length of the statement  "		position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f); " is 129.
Long Statement,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The length of the statement  "			ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f); " is 153.
Long Statement,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,LoadContent,The length of the statement  "	starfield = new Starfield (Vector2.Multiply (new Vector2 ((float)Math.Cos (movement / starsParallaxPeriod)' (float)Math.Sin (movement / starsParallaxPeriod))' starsParallaxAmplitude)' ScreenManager.GraphicsDevice' ScreenManager.Content); " is 237.
Long Statement,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The length of the statement  "		Vector2 position = Vector2.Multiply (new Vector2 ((float)Math.Cos (movement / starsParallaxPeriod)' (float)Math.Sin (movement / starsParallaxPeriod))' starsParallaxAmplitude); " is 175.
Long Statement,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The length of the statement  "		Vector2 titlePosition = new Vector2 (ScreenManager.TitleSafeArea.X + (ScreenManager.TitleSafeArea.Width - titleTexture.Width) / 2f' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height * 0.05f); " is 208.
Long Statement,NetRumble,ScreenManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\ScreenManager.cs,LoadContent,The length of the statement  "	titleSafeArea = new Rectangle ((int)Math.Floor (GraphicsDevice.Viewport.X + GraphicsDevice.Viewport.Width * 0.05f)' (int)Math.Floor (GraphicsDevice.Viewport.Y + GraphicsDevice.Viewport.Height * 0.05f)' (int)Math.Floor (GraphicsDevice.Viewport.Width * 0.9f)' (int)Math.Floor (GraphicsDevice.Viewport.Height * 0.9f)); " is 315.
Long Statement,NetRumble,ScreenManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\ScreenManager.cs,FadeBackBufferToBlack,The length of the statement  "	spriteBatch.Draw (blankTexture' new Rectangle (0' 0' viewport.Width' viewport.Height)' new Color (0' 0' 0' (byte)alpha)); " is 121.
Long Statement,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,HandleInput,The length of the statement  "	} else if (input.MenuCancel || (input.MenuSelect && pauseMenu && (input.CurrentGamePadState.Buttons.A == ButtonState.Released))) { " is 130.
Long Statement,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The length of the statement  "	Rectangle rect = new Rectangle ((int)(Math.Min (usageTextPosition.X' textPosition.X))' (int)(textPosition.Y)' (int)(Math.Max (usageTextSize.X' textSize.X))' (int)(ScreenManager.Font.LineSpacing * 1.1f + usageTextSize.Y)); " is 221.
Long Statement,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The length of the statement  "		ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' menuEntries [i]' position' color' 0' origin' scale' SpriteEffects.None' 0); " is 133.
Long Statement,NetRumble,ParticleSystem,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Rendering\Particles\ParticleSystem.cs,Draw,The length of the statement  "			spriteBatch.Draw (texture' particle.Position' null' new Color (color)' particle.Rotation' textureOrigin' particle.Scale' SpriteEffects.None' 1f); " is 145.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The length of the statement  "					if ((playerData != null) && (playerData.Ship != null) && !playerData.Ship.Active && (playerData.Ship.RespawnTimer <= 0f)) { " is 123.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,ProcessLocalPlayerInput,The length of the statement  "		ShipInput shipInput = new ShipInput (GamePad.GetState (networkSession.LocalGamers [0].SignedInGamer.PlayerIndex)' Keyboard.GetState (networkSession.LocalGamers [0].SignedInGamer.PlayerIndex)); " is 192.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "	spriteBatch.DrawString (playerFont' playerString' playerStringPosition' playerColor' 0f' new Vector2 (playerStringSize.X / 2f' playerStringSize.Y / 2f)' playerStringScale' SpriteEffects.None' 0f); " is 196.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "		Vector2 chatTexturePosition = new Vector2 (playerStringPosition.X - 1.2f * playerStringSize.X / 2f - 1.1f * chatTextureScale * (float)chatTexture.Width / 2f' playerStringPosition.Y); " is 182.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "		spriteBatch.Draw (chatTexture' chatTexturePosition' null' Color.White' 0f' new Vector2 ((float)chatTexture.Width / 2f' (float)chatTexture.Height / 2f)' chatTextureScale' SpriteEffects.None' 0f); " is 194.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "			playerData.Ship.Position = new Vector2 (playerStringPosition.X + 1.2f * playerStringSize.X / 2f + 1.1f * playerData.Ship.Radius' playerStringPosition.Y); " is 153.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "			Vector2 readyTexturePosition = new Vector2 (playerStringPosition.X + 1.2f * playerStringSize.X / 2f + 2.2f * playerData.Ship.Radius + 1.1f * readyTextureScale * (float)readyTexture.Width / 2f' playerStringPosition.Y); " is 217.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "			spriteBatch.Draw (readyTexture' readyTexturePosition' null' Color.White' 0f' new Vector2 ((float)readyTexture.Width / 2f' (float)readyTexture.Height / 2f)' readyTextureScale' SpriteEffects.None' 0f); " is 199.
Long Statement,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,DrawPlayerData,The length of the statement  "			spriteBatch.DrawString (playerFont' scoreString' scoreStringPosition' playerColor' 0f' new Vector2 (scoreStringSize.X / 2f' scoreStringSize.Y / 2f)' 1f' SpriteEffects.None' 0f); " is 177.
Long Statement,NetRumble,Ship,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Ship.cs,Draw,The length of the statement  "		base.Draw (elapsedTime' spriteBatch' shieldTexture' null' new Color (color.R' color.G' color.B' (byte)Math.Floor (shieldAlphaMaximum * shield / shieldMaximum))); " is 161.
Long Statement,NetRumble,GameplayObject,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\GameplayObject.cs,Draw,The length of the statement  "		spriteBatch.Draw (sprite' position' sourceRectangle' color' rotation' new Vector2 (sprite.Width / 2f' sprite.Height / 2f)' 2f * radius / MathHelper.Min (sprite.Width' sprite.Height)' SpriteEffects.None' 0f); " is 207.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Update,The length of the statement  "					CollisionMath.CircleRectangleCollide (collisionManager [i].Position - movement' collisionManager [i].Radius' collisionManager.barriers [b]' ref result); " is 152.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,Update,The length of the statement  "					CollisionMath.CircleRectangleCollide (collisionManager [i].Position' collisionManager [i].Radius' collisionManager.barriers [b]' ref result); " is 141.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,AdjustVelocities,The length of the statement  "	float velocityNormal1New = ((velocityNormal1 * (actor1.Mass - actor2.Mass)) + (2f * actor2.Mass * velocityNormal2)) / (actor1.Mass + actor2.Mass); " is 146.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,AdjustVelocities,The length of the statement  "	float velocityNormal2New = ((velocityNormal2 * (actor2.Mass - actor1.Mass)) + (2f * actor1.Mass * velocityNormal1)) / (actor1.Mass + actor2.Mass); " is 146.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,FindSpawnPoint,The length of the statement  "	Vector2 spawnPoint = new Vector2 (radius + Dimensions.X + RandomMath.Random.Next ((int)Math.Floor (Dimensions.Width - radius))' radius + Dimensions.Y + RandomMath.Random.Next ((int)Math.Floor (Dimensions.Height - radius))); " is 223.
Long Statement,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,FindSpawnPoint,The length of the statement  "		spawnPoint = new Vector2 (radius + Dimensions.X + RandomMath.Random.Next ((int)Math.Floor (Dimensions.Width - radius))' radius + Dimensions.Y + RandomMath.Random.Next ((int)Math.Floor (Dimensions.Height - radius))); " is 215.
Long Statement,NetRumble,Asteroid,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Asteroid.cs,Touch,The length of the statement  "			float rammingSpeed = Vector2.Dot (playerAsteroidVector' player.Velocity) - Vector2.Dot (playerAsteroidVector' Velocity); " is 120.
Long Statement,NetRumble,TripleLaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\TripleLaserWeapon.cs,CreateProjectiles,The length of the statement  "	Vector2 direction2 = new Vector2 ((float)Math.Sin (rotation - laserSpreadRadians)' -(float)Math.Cos (rotation - laserSpreadRadians)); " is 133.
Long Statement,NetRumble,TripleLaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\TripleLaserWeapon.cs,CreateProjectiles,The length of the statement  "	Vector2 direction3 = new Vector2 ((float)Math.Sin (rotation + laserSpreadRadians)' -(float)Math.Cos (rotation + laserSpreadRadians)); " is 133.
Long Statement,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,LoadContent,The length of the statement  "	sceneRenderTarget = new RenderTarget2D (GraphicsDevice' width' height' false' format' pp.DepthStencilFormat' pp.MultiSampleCount' RenderTargetUsage.DiscardContents); " is 165.
Long Statement,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,Draw,The length of the statement  "	DrawFullscreenQuad (renderTarget1' viewport.Width' viewport.Height' bloomCombineEffect' IntermediateBuffer.FinalResult); " is 120.
Long Statement,NetRumble,Starfield,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Rendering\Starfield.cs,Draw,The length of the statement  "		spriteBatch.Draw (starTexture' new Rectangle ((int)stars [i].X' (int)stars [i].Y' starSize' starSize)' null' layerColors [depth]); " is 130.
Complex Conditional,NetRumble,CollisionMath,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\CollisionMath.cs,LineLineIntersect,The conditional expression  "r < 0 || r > 1 || s < 0 || s > 1"  is complex.
Complex Conditional,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Update,The conditional expression  "!signedIntoLive && ((sessionType == NetworkSessionType.PlayerMatch) || (sessionType == NetworkSessionType.Ranked)) && !IsExiting"  is complex.
Complex Conditional,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The conditional expression  "world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)"  is complex.
Complex Conditional,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,HandleInput,The conditional expression  "input.MenuCancel || (input.MenuSelect && pauseMenu && (input.CurrentGamePadState.Buttons.A == ButtonState.Released))"  is complex.
Complex Conditional,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The conditional expression  "(playerData != null) && (playerData.Ship != null) && !playerData.Ship.Active && (playerData.Ship.RespawnTimer <= 0f)"  is complex.
Empty Catch Block,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,JoinInvitedGame,The method has an empty catch block.
Empty Catch Block,NetRumble,AudioManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\AudioManager.cs,AudioManager,The method has an empty catch block.
Empty Catch Block,NetRumble,AudioManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\AudioManager.cs,PlaySoundEffect,The method has an empty catch block.
Magic Number,NetRumble,NetRumbleGame,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\NetRumbleGame.cs,NetRumbleGame,The following statement contains a magic number: graphics.PreferredBackBufferWidth = 1280;  
Magic Number,NetRumble,NetRumbleGame,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\NetRumbleGame.cs,NetRumbleGame,The following statement contains a magic number: graphics.PreferredBackBufferHeight = 720;  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (String.IsNullOrEmpty (alternateString)) {  	base.Draw (gameTime);  } else {  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 position = new Vector2 (0f' viewportSize.Y * 0.65f);  	// Make the menu slide into place during transitions' using a  	// power curve to make things look more interesting (this makes  	// the movement slow down as it nears the end).  	float transitionOffset = (float)Math.Pow (TransitionPosition' 2);  	if (ScreenState == ScreenState.TransitionOn)  		position.Y += transitionOffset * 256;  	else  		position.Y += transitionOffset * 512;  	// Draw each menu entry in turn.  	ScreenManager.SpriteBatch.Begin ();  	Vector2 origin = new Vector2 (0' ScreenManager.Font.LineSpacing / 2);  	Vector2 size = ScreenManager.Font.MeasureString (alternateString);  	position.X = viewportSize.X / 2f - size.X / 2f;  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' alternateString' position' Color.White' 0' origin' 1.0f' SpriteEffects.None' 0);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (String.IsNullOrEmpty (alternateString)) {  	base.Draw (gameTime);  } else {  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 position = new Vector2 (0f' viewportSize.Y * 0.65f);  	// Make the menu slide into place during transitions' using a  	// power curve to make things look more interesting (this makes  	// the movement slow down as it nears the end).  	float transitionOffset = (float)Math.Pow (TransitionPosition' 2);  	if (ScreenState == ScreenState.TransitionOn)  		position.Y += transitionOffset * 256;  	else  		position.Y += transitionOffset * 512;  	// Draw each menu entry in turn.  	ScreenManager.SpriteBatch.Begin ();  	Vector2 origin = new Vector2 (0' ScreenManager.Font.LineSpacing / 2);  	Vector2 size = ScreenManager.Font.MeasureString (alternateString);  	position.X = viewportSize.X / 2f - size.X / 2f;  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' alternateString' position' Color.White' 0' origin' 1.0f' SpriteEffects.None' 0);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (String.IsNullOrEmpty (alternateString)) {  	base.Draw (gameTime);  } else {  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 position = new Vector2 (0f' viewportSize.Y * 0.65f);  	// Make the menu slide into place during transitions' using a  	// power curve to make things look more interesting (this makes  	// the movement slow down as it nears the end).  	float transitionOffset = (float)Math.Pow (TransitionPosition' 2);  	if (ScreenState == ScreenState.TransitionOn)  		position.Y += transitionOffset * 256;  	else  		position.Y += transitionOffset * 512;  	// Draw each menu entry in turn.  	ScreenManager.SpriteBatch.Begin ();  	Vector2 origin = new Vector2 (0' ScreenManager.Font.LineSpacing / 2);  	Vector2 size = ScreenManager.Font.MeasureString (alternateString);  	position.X = viewportSize.X / 2f - size.X / 2f;  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' alternateString' position' Color.White' 0' origin' 1.0f' SpriteEffects.None' 0);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (String.IsNullOrEmpty (alternateString)) {  	base.Draw (gameTime);  } else {  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 position = new Vector2 (0f' viewportSize.Y * 0.65f);  	// Make the menu slide into place during transitions' using a  	// power curve to make things look more interesting (this makes  	// the movement slow down as it nears the end).  	float transitionOffset = (float)Math.Pow (TransitionPosition' 2);  	if (ScreenState == ScreenState.TransitionOn)  		position.Y += transitionOffset * 256;  	else  		position.Y += transitionOffset * 512;  	// Draw each menu entry in turn.  	ScreenManager.SpriteBatch.Begin ();  	Vector2 origin = new Vector2 (0' ScreenManager.Font.LineSpacing / 2);  	Vector2 size = ScreenManager.Font.MeasureString (alternateString);  	position.X = viewportSize.X / 2f - size.X / 2f;  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' alternateString' position' Color.White' 0' origin' 1.0f' SpriteEffects.None' 0);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.Y += transitionOffset * 256;  else  	position.Y += transitionOffset * 512;  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.Y += transitionOffset * 256;  else  	position.Y += transitionOffset * 512;  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: position.Y += transitionOffset * 256;  
Magic Number,NetRumble,SearchResultsScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\SearchResultsScreen.cs,Draw,The following statement contains a magic number: position.Y += transitionOffset * 512;  
Magic Number,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,NetworkBusyScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.1);  
Magic Number,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,NetworkBusyScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.2);  
Magic Number,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (backgroundRectangle2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (backgroundRectangle2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,NetworkBusyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\NetworkBusyScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (backgroundRectangle2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following statement contains a magic number: switch (entryIndex) {  case 0:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 1:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 2:  	// Exit  	OnCancel ();  	break;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if ((networkSession != null) && (networkSession.LocalGamers.Count > 0)) {  	// update the ready state  	if (input.MarkReady) {  		networkSession.LocalGamers [0].IsReady = !networkSession.LocalGamers [0].IsReady;  	}  	// update the player data  	PlayerData playerData = networkSession.LocalGamers [0].Tag as PlayerData;  	if (playerData != null) {  		bool playerDataChanged = false;  		if (input.ShipColorChangeUp) {  			playerData.ShipColor = Ship.GetNextUniqueColorIndex (playerData.ShipColor' networkSession);  			playerDataChanged = true;  		} else if (input.ShipColorChangeDown) {  			playerData.ShipColor = Ship.GetPreviousUniqueColorIndex (playerData.ShipColor' networkSession);  			playerDataChanged = true;  		}  		if (input.ShipModelChangeUp) {  			playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  			playerDataChanged = true;  		} else if (input.ShipModelChangeDown) {  			if (playerData.ShipVariation == 0) {  				playerData.ShipVariation = 3;  			} else {  				playerData.ShipVariation--;  			}  			playerDataChanged = true;  		}  		// if the data changed' send an update to the others  		if (playerDataChanged) {  			packetWriter.Write ((int)World.PacketTypes.PlayerData);  			playerData.Serialize (packetWriter);  			networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  		}  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if ((networkSession != null) && (networkSession.LocalGamers.Count > 0)) {  	// update the ready state  	if (input.MarkReady) {  		networkSession.LocalGamers [0].IsReady = !networkSession.LocalGamers [0].IsReady;  	}  	// update the player data  	PlayerData playerData = networkSession.LocalGamers [0].Tag as PlayerData;  	if (playerData != null) {  		bool playerDataChanged = false;  		if (input.ShipColorChangeUp) {  			playerData.ShipColor = Ship.GetNextUniqueColorIndex (playerData.ShipColor' networkSession);  			playerDataChanged = true;  		} else if (input.ShipColorChangeDown) {  			playerData.ShipColor = Ship.GetPreviousUniqueColorIndex (playerData.ShipColor' networkSession);  			playerDataChanged = true;  		}  		if (input.ShipModelChangeUp) {  			playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  			playerDataChanged = true;  		} else if (input.ShipModelChangeDown) {  			if (playerData.ShipVariation == 0) {  				playerData.ShipVariation = 3;  			} else {  				playerData.ShipVariation--;  			}  			playerDataChanged = true;  		}  		// if the data changed' send an update to the others  		if (playerDataChanged) {  			packetWriter.Write ((int)World.PacketTypes.PlayerData);  			playerData.Serialize (packetWriter);  			networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  		}  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (playerData != null) {  	bool playerDataChanged = false;  	if (input.ShipColorChangeUp) {  		playerData.ShipColor = Ship.GetNextUniqueColorIndex (playerData.ShipColor' networkSession);  		playerDataChanged = true;  	} else if (input.ShipColorChangeDown) {  		playerData.ShipColor = Ship.GetPreviousUniqueColorIndex (playerData.ShipColor' networkSession);  		playerDataChanged = true;  	}  	if (input.ShipModelChangeUp) {  		playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  		playerDataChanged = true;  	} else if (input.ShipModelChangeDown) {  		if (playerData.ShipVariation == 0) {  			playerData.ShipVariation = 3;  		} else {  			playerData.ShipVariation--;  		}  		playerDataChanged = true;  	}  	// if the data changed' send an update to the others  	if (playerDataChanged) {  		packetWriter.Write ((int)World.PacketTypes.PlayerData);  		playerData.Serialize (packetWriter);  		networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (playerData != null) {  	bool playerDataChanged = false;  	if (input.ShipColorChangeUp) {  		playerData.ShipColor = Ship.GetNextUniqueColorIndex (playerData.ShipColor' networkSession);  		playerDataChanged = true;  	} else if (input.ShipColorChangeDown) {  		playerData.ShipColor = Ship.GetPreviousUniqueColorIndex (playerData.ShipColor' networkSession);  		playerDataChanged = true;  	}  	if (input.ShipModelChangeUp) {  		playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  		playerDataChanged = true;  	} else if (input.ShipModelChangeDown) {  		if (playerData.ShipVariation == 0) {  			playerData.ShipVariation = 3;  		} else {  			playerData.ShipVariation--;  		}  		playerDataChanged = true;  	}  	// if the data changed' send an update to the others  	if (playerDataChanged) {  		packetWriter.Write ((int)World.PacketTypes.PlayerData);  		playerData.Serialize (packetWriter);  		networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (input.ShipModelChangeUp) {  	playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  	playerDataChanged = true;  } else if (input.ShipModelChangeDown) {  	if (playerData.ShipVariation == 0) {  		playerData.ShipVariation = 3;  	} else {  		playerData.ShipVariation--;  	}  	playerDataChanged = true;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (input.ShipModelChangeUp) {  	playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  	playerDataChanged = true;  } else if (input.ShipModelChangeDown) {  	if (playerData.ShipVariation == 0) {  		playerData.ShipVariation = 3;  	} else {  		playerData.ShipVariation--;  	}  	playerDataChanged = true;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: playerData.ShipVariation = (byte)((playerData.ShipVariation + 1) % 4);  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (input.ShipModelChangeDown) {  	if (playerData.ShipVariation == 0) {  		playerData.ShipVariation = 3;  	} else {  		playerData.ShipVariation--;  	}  	playerDataChanged = true;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: if (playerData.ShipVariation == 0) {  	playerData.ShipVariation = 3;  } else {  	playerData.ShipVariation--;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,HandleInput,The following statement contains a magic number: playerData.ShipVariation = 3;  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: columnPositions [2] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.6f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f);  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: columnPositions [3] = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.8f' ScreenManager.GraphicsDevice.Viewport.Height * 0.70f);  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null) {  	for (int i = 0; i < networkSession.AllGamers.Count; i++) {  		world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true);  		columnPositions [i % 4].Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.03f;  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null) {  	for (int i = 0; i < networkSession.AllGamers.Count; i++) {  		world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true);  		columnPositions [i % 4].Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.03f;  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < networkSession.AllGamers.Count; i++) {  	world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true);  	columnPositions [i % 4].Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.03f;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < networkSession.AllGamers.Count; i++) {  	world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true);  	columnPositions [i % 4].Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.03f;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: world.DrawPlayerData ((float)gameTime.TotalGameTime.TotalSeconds' networkSession.AllGamers [i]' columnPositions [i % 4]' ScreenManager.SpriteBatch' true);  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,Draw,The following statement contains a magic number: columnPositions [i % 4].Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.03f;  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,networkSession_GamerJoined,The following statement contains a magic number: for (int i = 0; i < networkSession.AllGamers.Count; i++) {  	if (networkSession.AllGamers [i] == e.Gamer) {  		PlayerData playerData = new PlayerData ();  		e.Gamer.Tag = playerData;  		playerData.ShipVariation = (byte)(i % 4);  		playerData.ShipColor = (byte)i;  	}  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,networkSession_GamerJoined,The following statement contains a magic number: if (networkSession.AllGamers [i] == e.Gamer) {  	PlayerData playerData = new PlayerData ();  	e.Gamer.Tag = playerData;  	playerData.ShipVariation = (byte)(i % 4);  	playerData.ShipColor = (byte)i;  }  
Magic Number,NetRumble,LobbyScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\LobbyScreen.cs,networkSession_GamerJoined,The following statement contains a magic number: playerData.ShipVariation = (byte)(i % 4);  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world != null) {  	if (otherScreenHasFocus || coveredByOtherScreen) {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  	} else if (world.GameExited) {  		if (!IsExiting) {  			ExitScreen ();  		}  		networkSession = null;  		base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  		return;  	} else {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  		// if the game was just won' then build the winner string  		if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  			winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  			winnerString += " has won the game!\nPress A to return to the lobby.";  			Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  			winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  		}  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world != null) {  	if (otherScreenHasFocus || coveredByOtherScreen) {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  	} else if (world.GameExited) {  		if (!IsExiting) {  			ExitScreen ();  		}  		networkSession = null;  		base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  		return;  	} else {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  		// if the game was just won' then build the winner string  		if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  			winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  			winnerString += " has won the game!\nPress A to return to the lobby.";  			Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  			winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  		}  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world != null) {  	if (otherScreenHasFocus || coveredByOtherScreen) {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  	} else if (world.GameExited) {  		if (!IsExiting) {  			ExitScreen ();  		}  		networkSession = null;  		base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  		return;  	} else {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  		// if the game was just won' then build the winner string  		if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  			winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  			winnerString += " has won the game!\nPress A to return to the lobby.";  			Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  			winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  		}  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world != null) {  	if (otherScreenHasFocus || coveredByOtherScreen) {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  	} else if (world.GameExited) {  		if (!IsExiting) {  			ExitScreen ();  		}  		networkSession = null;  		base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  		return;  	} else {  		world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  		// if the game was just won' then build the winner string  		if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  			winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  			winnerString += " has won the game!\nPress A to return to the lobby.";  			Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  			winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  		}  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (otherScreenHasFocus || coveredByOtherScreen) {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  } else if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (otherScreenHasFocus || coveredByOtherScreen) {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  } else if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (otherScreenHasFocus || coveredByOtherScreen) {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  } else if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (otherScreenHasFocus || coveredByOtherScreen) {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' true);  } else if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameExited) {  	if (!IsExiting) {  		ExitScreen ();  	}  	networkSession = null;  	base.Update (gameTime' otherScreenHasFocus' coveredByOtherScreen);  	return;  } else {  	world.Update ((float)gameTime.ElapsedGameTime.TotalSeconds' false);  	// if the game was just won' then build the winner string  	if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  		winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  		winnerString += " has won the game!\nPress A to return to the lobby.";  		Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  		winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  	winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  	winnerString += " has won the game!\nPress A to return to the lobby.";  	Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  	winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  	winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  	winnerString += " has won the game!\nPress A to return to the lobby.";  	Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  	winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  	winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  	winnerString += " has won the game!\nPress A to return to the lobby.";  	Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  	winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: if (world.GameWon && String.IsNullOrEmpty (winnerString) && (world.WinnerIndex >= 0) && (world.WinnerIndex < networkSession.AllGamers.Count)) {  	winnerString = networkSession.AllGamers [world.WinnerIndex].Gamertag;  	winnerString += " has won the game!\nPress A to return to the lobby.";  	Vector2 winnerStringSize = world.PlayerFont.MeasureString (winnerString);  	winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Update,The following statement contains a magic number: winnerStringPosition = new Vector2 (ScreenManager.GraphicsDevice.Viewport.X + ScreenManager.GraphicsDevice.Viewport.Width / 2 - (float)Math.Floor (winnerStringSize.X / 2)' ScreenManager.GraphicsDevice.Viewport.Y + ScreenManager.GraphicsDevice.Viewport.Height / 2 - (float)Math.Floor (winnerStringSize.Y / 2));  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null) {  	// make sure we know what the local ship is  	if ((localShip == null) && (networkSession.LocalGamers.Count > 0)) {  		PlayerData playerData = networkSession.LocalGamers [0].Tag as PlayerData;  		if (playerData.Ship != null) {  			localShip = playerData.Ship;  			starfield.Reset (localShip.Position);  		}  	}  	if (bloomComponent != null) {  		bloomComponent.BeginDraw ();  	}  	// draw the world  	if ((world != null) && (localShip != null) && !IsExiting) {  		Vector2 center = new Vector2 (localShip.Position.X + ScreenManager.GraphicsDevice.Viewport.X - ScreenManager.GraphicsDevice.Viewport.Width / 2' localShip.Position.Y + ScreenManager.GraphicsDevice.Viewport.Y - ScreenManager.GraphicsDevice.Viewport.Height / 2);  		starfield.Draw (center);  		world.Draw (elapsedTime' center);  		if (bloomComponent != null) {  			bloomComponent.Draw (gameTime);  		}  	}  	// draw the user-interface elements of the game (scores' etc.)  	DrawHud ((float)gameTime.TotalGameTime.TotalSeconds);  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (networkSession != null) {  	// make sure we know what the local ship is  	if ((localShip == null) && (networkSession.LocalGamers.Count > 0)) {  		PlayerData playerData = networkSession.LocalGamers [0].Tag as PlayerData;  		if (playerData.Ship != null) {  			localShip = playerData.Ship;  			starfield.Reset (localShip.Position);  		}  	}  	if (bloomComponent != null) {  		bloomComponent.BeginDraw ();  	}  	// draw the world  	if ((world != null) && (localShip != null) && !IsExiting) {  		Vector2 center = new Vector2 (localShip.Position.X + ScreenManager.GraphicsDevice.Viewport.X - ScreenManager.GraphicsDevice.Viewport.Width / 2' localShip.Position.Y + ScreenManager.GraphicsDevice.Viewport.Y - ScreenManager.GraphicsDevice.Viewport.Height / 2);  		starfield.Draw (center);  		world.Draw (elapsedTime' center);  		if (bloomComponent != null) {  			bloomComponent.Draw (gameTime);  		}  	}  	// draw the user-interface elements of the game (scores' etc.)  	DrawHud ((float)gameTime.TotalGameTime.TotalSeconds);  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if ((world != null) && (localShip != null) && !IsExiting) {  	Vector2 center = new Vector2 (localShip.Position.X + ScreenManager.GraphicsDevice.Viewport.X - ScreenManager.GraphicsDevice.Viewport.Width / 2' localShip.Position.Y + ScreenManager.GraphicsDevice.Viewport.Y - ScreenManager.GraphicsDevice.Viewport.Height / 2);  	starfield.Draw (center);  	world.Draw (elapsedTime' center);  	if (bloomComponent != null) {  		bloomComponent.Draw (gameTime);  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if ((world != null) && (localShip != null) && !IsExiting) {  	Vector2 center = new Vector2 (localShip.Position.X + ScreenManager.GraphicsDevice.Viewport.X - ScreenManager.GraphicsDevice.Viewport.Width / 2' localShip.Position.Y + ScreenManager.GraphicsDevice.Viewport.Y - ScreenManager.GraphicsDevice.Viewport.Height / 2);  	starfield.Draw (center);  	world.Draw (elapsedTime' center);  	if (bloomComponent != null) {  		bloomComponent.Draw (gameTime);  	}  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn && (TransitionPosition > 0))  	ScreenManager.FadeBackBufferToBlack (255 - TransitionAlpha);  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack (255 - TransitionAlpha);  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: if ((networkSession != null) && (world != null)) {  	ScreenManager.SpriteBatch.Begin ();  	// draw players 0 - 3 at the top of the screen  	Vector2 position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.1f);  	for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 4 - 7 at the bottom of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.2f' ScreenManager.GraphicsDevice.Viewport.Height * 0.9f);  	for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  	}  	// draw players 8 - 11 at the left of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.13f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// draw players 12 - 15 at the right of the screen  	position = new Vector2 (ScreenManager.GraphicsDevice.Viewport.Width * 0.9f' ScreenManager.GraphicsDevice.Viewport.Height * 0.2f);  	for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  		world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  		position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  	}  	// if the game is over' draw the winner text  	if (world.GameWon && !String.IsNullOrEmpty (winnerString)) {  		ScreenManager.SpriteBatch.DrawString (world.PlayerFont' winnerString' winnerStringPosition' Color.White' 0f' Vector2.Zero' 1.3f' SpriteEffects.None' 0f);  	}  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 0; i < Math.Min (4' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 4; i < Math.Min (8' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.X += ScreenManager.GraphicsDevice.Viewport.Width * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 8; i < Math.Min (12' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  }  
Magic Number,NetRumble,GameplayScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\GameplayScreen.cs,DrawHud,The following statement contains a magic number: for (int i = 12; i < Math.Min (16' networkSession.AllGamers.Count); i++) {  	world.DrawPlayerData (totalTime' networkSession.AllGamers [i]' position' ScreenManager.SpriteBatch' false);  	position.Y += ScreenManager.GraphicsDevice.Viewport.Height * 0.2f;  }  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: if (titleTexture != null) {  	Vector2 titlePosition = new Vector2 (ScreenManager.TitleSafeArea.X + (ScreenManager.TitleSafeArea.Width - titleTexture.Width) / 2f' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height * 0.05f);  	titlePosition.Y -= (float)Math.Pow (TransitionPosition' 2) * titlePosition.Y;  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: if (titleTexture != null) {  	Vector2 titlePosition = new Vector2 (ScreenManager.TitleSafeArea.X + (ScreenManager.TitleSafeArea.Width - titleTexture.Width) / 2f' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height * 0.05f);  	titlePosition.Y -= (float)Math.Pow (TransitionPosition' 2) * titlePosition.Y;  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: if (titleTexture != null) {  	Vector2 titlePosition = new Vector2 (ScreenManager.TitleSafeArea.X + (ScreenManager.TitleSafeArea.Width - titleTexture.Width) / 2f' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height * 0.05f);  	titlePosition.Y -= (float)Math.Pow (TransitionPosition' 2) * titlePosition.Y;  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: if (titleTexture != null) {  	Vector2 titlePosition = new Vector2 (ScreenManager.TitleSafeArea.X + (ScreenManager.TitleSafeArea.Width - titleTexture.Width) / 2f' ScreenManager.TitleSafeArea.Y + ScreenManager.TitleSafeArea.Height * 0.05f);  	titlePosition.Y -= (float)Math.Pow (TransitionPosition' 2) * titlePosition.Y;  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: titlePosition.Y -= (float)Math.Pow (TransitionPosition' 2) * titlePosition.Y;  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  
Magic Number,NetRumble,BackgroundScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\BackgroundScreen.cs,Draw,The following statement contains a magic number: ScreenManager.SpriteBatch.Draw (titleTexture' titlePosition' new Color (255' 255' 255' TransitionAlpha));  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.25);  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,MessageBoxScreen,The following statement contains a magic number: TransitionOffTime = TimeSpan.FromSeconds (0.25);  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack (TransitionAlpha * 2 / 3);  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.FadeBackBufferToBlack (TransitionAlpha * 2 / 3);  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (rect2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (rect2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,MessageBoxScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MessageBoxScreen.cs,Draw,The following statement contains a magic number: ScreenManager.DrawRectangle (rect2' new Color (128' 128' 128' (byte)(192.0f * (float)TransitionAlpha / 255.0f)));  
Magic Number,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.Y += transitionOffset * 256;  else  	position.Y += transitionOffset * 512;  
Magic Number,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The following statement contains a magic number: if (ScreenState == ScreenState.TransitionOn)  	position.Y += transitionOffset * 256;  else  	position.Y += transitionOffset * 512;  
Magic Number,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The following statement contains a magic number: position.Y += transitionOffset * 256;  
Magic Number,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The following statement contains a magic number: position.Y += transitionOffset * 512;  
Magic Number,NetRumble,MenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\MenuScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < menuEntries.Count; i++) {  	Color color = Color.White;  	float scale = 1.0f;  	if (IsActive && (i == selectedEntry)) {  		// The selected entry is yellow' and has an animating size.  		double time = gameTime.TotalGameTime.TotalSeconds;  		float pulsate = (float)Math.Sin (time * 6f) + 1f;  		color = Color.Orange;  		scale += pulsate * 0.05f;  	}  	// Modify the alpha to fade text out during transitions.  	color = new Color (color.R' color.G' color.B' TransitionAlpha);  	// Draw text' centered on the middle of each line.  	Vector2 origin = new Vector2 (0' ScreenManager.Font.LineSpacing / 2);  	Vector2 size = ScreenManager.Font.MeasureString (menuEntries [i]);  	position.X = viewportSize.X / 2f - size.X / 2f * scale;  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' menuEntries [i]' position' color' 0' origin' scale' SpriteEffects.None' 0);  	position.Y += ScreenManager.Font.LineSpacing;  }  
Magic Number,NetRumble,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\LoadingScreen.cs,LoadingScreen,The following statement contains a magic number: TransitionOnTime = TimeSpan.FromSeconds (0.5);  
Magic Number,NetRumble,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  	const string message = "Loading...";  	// Center the text in the viewport.  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 textSize = ScreenManager.Font.MeasureString (message);  	Vector2 textPosition = (viewportSize - textSize) / 2;  	Color color = new Color (255' 255' 255' TransitionAlpha);  	// Draw the text.  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' message' textPosition' color);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  	const string message = "Loading...";  	// Center the text in the viewport.  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 textSize = ScreenManager.Font.MeasureString (message);  	Vector2 textPosition = (viewportSize - textSize) / 2;  	Color color = new Color (255' 255' 255' TransitionAlpha);  	// Draw the text.  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' message' textPosition' color);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  	const string message = "Loading...";  	// Center the text in the viewport.  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 textSize = ScreenManager.Font.MeasureString (message);  	Vector2 textPosition = (viewportSize - textSize) / 2;  	Color color = new Color (255' 255' 255' TransitionAlpha);  	// Draw the text.  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' message' textPosition' color);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,LoadingScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\ScreenManager\LoadingScreen.cs,Draw,The following statement contains a magic number: if (loadingIsSlow) {  	const string message = "Loading...";  	// Center the text in the viewport.  	Viewport viewport = ScreenManager.GraphicsDevice.Viewport;  	Vector2 viewportSize = new Vector2 (viewport.Width' viewport.Height);  	Vector2 textSize = ScreenManager.Font.MeasureString (message);  	Vector2 textPosition = (viewportSize - textSize) / 2;  	Color color = new Color (255' 255' 255' TransitionAlpha);  	// Draw the text.  	ScreenManager.SpriteBatch.Begin ();  	ScreenManager.SpriteBatch.DrawString (ScreenManager.Font' message' textPosition' color);  	ScreenManager.SpriteBatch.End ();  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.LaserExplosion' "Particles/laserExplosion.xml"' 40);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.MineExplosion' "Particles/mineExplosion.xml"' 8);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.RocketExplosion' "Particles/rocketExplosion.xml"' 24);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.RocketTrail' "Particles/rocketTrail.xml"' 16);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.ShipExplosion' "Particles/shipExplosion.xml"' 4);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,World,The following statement contains a magic number: particleEffectManager.RegisterParticleEffect (ParticleEffectType.ShipSpawn' "Particles/shipSpawn.xml"' 4);  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: if ((networkSession != null) && (networkSession.LocalGamers.Count > 0)) {  	// write the identification value  	packetWriter.Write ((int)PacketTypes.WorldSetup);  	// place the ships  	// -- we always write the maximum number of players' making the packet  	//    predictable' in case the player count changes on the client before   	//    this packet is received  	for (int i = 0; i < MaximumPlayers; i++) {  		Vector2 position = Vector2.Zero;  		if (i < networkSession.AllGamers.Count) {  			PlayerData playerData = networkSession.AllGamers [i].Tag as PlayerData;  			if ((playerData != null) && (playerData.Ship != null)) {  				playerData.Ship.Initialize ();  				position = playerData.Ship.Position = CollisionManager.FindSpawnPoint (playerData.Ship' playerData.Ship.Radius * 5f);  				playerData.Ship.Score = 0;  			}  		}  		// write the ship position  		packetWriter.Write (position);  	}  	// place the asteroids  	// -- for simplicity' the same number of asteroids is always the same  	for (int i = 0; i < asteroids.Length; i++) {  		// choose one of three radii  		float radius = 32f;  		switch (RandomMath.Random.Next (3)) {  		case 0:  			radius = 32f;  			break;  		case 1:  			radius = 60f;  			break;  		case 2:  			radius = 96f;  			break;  		}  		// create the asteroid  		asteroids [i] = new Asteroid (radius);  		// write the radius  		packetWriter.Write (asteroids [i].Radius);  		// choose a variation  		asteroids [i].Variation = i % Asteroid.Variations;  		// write the variation  		packetWriter.Write (asteroids [i].Variation);  		// initialize the asteroid and it's starting position  		asteroids [i].Initialize ();  		asteroids [i].Position = CollisionManager.FindSpawnPoint (asteroids [i]' asteroids [i].Radius);  		// write the starting position and velocity  		packetWriter.Write (asteroids [i].Position);  		packetWriter.Write (asteroids [i].Velocity);  	}  	// send the packet to everyone  	networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: if ((networkSession != null) && (networkSession.LocalGamers.Count > 0)) {  	// write the identification value  	packetWriter.Write ((int)PacketTypes.WorldSetup);  	// place the ships  	// -- we always write the maximum number of players' making the packet  	//    predictable' in case the player count changes on the client before   	//    this packet is received  	for (int i = 0; i < MaximumPlayers; i++) {  		Vector2 position = Vector2.Zero;  		if (i < networkSession.AllGamers.Count) {  			PlayerData playerData = networkSession.AllGamers [i].Tag as PlayerData;  			if ((playerData != null) && (playerData.Ship != null)) {  				playerData.Ship.Initialize ();  				position = playerData.Ship.Position = CollisionManager.FindSpawnPoint (playerData.Ship' playerData.Ship.Radius * 5f);  				playerData.Ship.Score = 0;  			}  		}  		// write the ship position  		packetWriter.Write (position);  	}  	// place the asteroids  	// -- for simplicity' the same number of asteroids is always the same  	for (int i = 0; i < asteroids.Length; i++) {  		// choose one of three radii  		float radius = 32f;  		switch (RandomMath.Random.Next (3)) {  		case 0:  			radius = 32f;  			break;  		case 1:  			radius = 60f;  			break;  		case 2:  			radius = 96f;  			break;  		}  		// create the asteroid  		asteroids [i] = new Asteroid (radius);  		// write the radius  		packetWriter.Write (asteroids [i].Radius);  		// choose a variation  		asteroids [i].Variation = i % Asteroid.Variations;  		// write the variation  		packetWriter.Write (asteroids [i].Variation);  		// initialize the asteroid and it's starting position  		asteroids [i].Initialize ();  		asteroids [i].Position = CollisionManager.FindSpawnPoint (asteroids [i]' asteroids [i].Radius);  		// write the starting position and velocity  		packetWriter.Write (asteroids [i].Position);  		packetWriter.Write (asteroids [i].Velocity);  	}  	// send the packet to everyone  	networkSession.LocalGamers [0].SendData (packetWriter' SendDataOptions.ReliableInOrder);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: for (int i = 0; i < asteroids.Length; i++) {  	// choose one of three radii  	float radius = 32f;  	switch (RandomMath.Random.Next (3)) {  	case 0:  		radius = 32f;  		break;  	case 1:  		radius = 60f;  		break;  	case 2:  		radius = 96f;  		break;  	}  	// create the asteroid  	asteroids [i] = new Asteroid (radius);  	// write the radius  	packetWriter.Write (asteroids [i].Radius);  	// choose a variation  	asteroids [i].Variation = i % Asteroid.Variations;  	// write the variation  	packetWriter.Write (asteroids [i].Variation);  	// initialize the asteroid and it's starting position  	asteroids [i].Initialize ();  	asteroids [i].Position = CollisionManager.FindSpawnPoint (asteroids [i]' asteroids [i].Radius);  	// write the starting position and velocity  	packetWriter.Write (asteroids [i].Position);  	packetWriter.Write (asteroids [i].Velocity);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: for (int i = 0; i < asteroids.Length; i++) {  	// choose one of three radii  	float radius = 32f;  	switch (RandomMath.Random.Next (3)) {  	case 0:  		radius = 32f;  		break;  	case 1:  		radius = 60f;  		break;  	case 2:  		radius = 96f;  		break;  	}  	// create the asteroid  	asteroids [i] = new Asteroid (radius);  	// write the radius  	packetWriter.Write (asteroids [i].Radius);  	// choose a variation  	asteroids [i].Variation = i % Asteroid.Variations;  	// write the variation  	packetWriter.Write (asteroids [i].Variation);  	// initialize the asteroid and it's starting position  	asteroids [i].Initialize ();  	asteroids [i].Position = CollisionManager.FindSpawnPoint (asteroids [i]' asteroids [i].Radius);  	// write the starting position and velocity  	packetWriter.Write (asteroids [i].Position);  	packetWriter.Write (asteroids [i].Velocity);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: switch (RandomMath.Random.Next (3)) {  case 0:  	radius = 32f;  	break;  case 1:  	radius = 60f;  	break;  case 2:  	radius = 96f;  	break;  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following statement contains a magic number: switch (RandomMath.Random.Next (3)) {  case 0:  	radius = 32f;  	break;  case 1:  	radius = 60f;  	break;  case 2:  	radius = 96f;  	break;  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: if (gameWon) {  	// update the particle-effect manager  	particleEffectManager.Update (elapsedTime);  	// make sure the collision manager is empty  	CollisionManager.Collection.ApplyPendingRemovals ();  	if (CollisionManager.Collection.Count > 0) {  		CollisionManager.Collection.Clear ();  	}  } else {  	// process all incoming packets  	ProcessPackets ();  	// if the game is in progress' update the state of it  	if (initialized && (networkSession != null) && (networkSession.SessionState == NetworkSessionState.Playing)) {  		// presence support  		int highScore = int.MinValue;  		int highScoreIndex = -1;  		for (int i = 0; i < networkSession.AllGamers.Count; i++) {  			NetworkGamer networkGamer = networkSession.AllGamers [i];  			PlayerData playerData = networkGamer.Tag as PlayerData;  			if ((playerData != null) && (playerData.Ship != null)) {  				int playerScore = playerData.Ship.Score;  				if (playerScore == highScore) {  					highScorers.Add (i);  				} else if (playerScore > highScore) {  					highScorers.Clear ();  					highScorers.Add (i);  					highScore = playerScore;  					highScoreIndex = i;  				}  			}  		}  		// the host has singular responsibilities to the game world'   		// that need to be done once' by one authority  		if (networkSession.IsHost) {  			// get the local player' for frequent re-use  			LocalNetworkGamer localGamer = networkSession.Host as LocalNetworkGamer;  			// check for victory  			// if victory has been achieved' send a packet to everyone  			if (highScore >= winningScore) {  				packetWriter.Write ((int)PacketTypes.GameWon);  				packetWriter.Write (highScoreIndex);  				localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  			}  			// respawn each player' if it is time to do so  			for (int i = 0; i < networkSession.AllGamers.Count; i++) {  				NetworkGamer networkGamer = networkSession.AllGamers [i];  				PlayerData playerData = networkGamer.Tag as PlayerData;  				if ((playerData != null) && (playerData.Ship != null) && !playerData.Ship.Active && (playerData.Ship.RespawnTimer <= 0f)) {  					// write the ship-spawn packet  					packetWriter.Write ((int)PacketTypes.ShipSpawn);  					packetWriter.Write (i);  					packetWriter.Write (CollisionManager.FindSpawnPoint (playerData.Ship' playerData.Ship.Radius));  					localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  				}  			}  			// respawn the power-up if it is time to do so  			if (powerUp == null) {  				powerUpTimer -= elapsedTime;  				if (powerUpTimer < 0) {  					// write the power-up-spawn packet  					packetWriter.Write ((int)PacketTypes.PowerUpSpawn);  					packetWriter.Write (RandomMath.Random.Next (3));  					packetWriter.Write (CollisionManager.FindSpawnPoint (null' PowerUp.PowerUpRadius * 3f));  					localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  				}  			} else {  				powerUpTimer = maximumPowerUpTimer;  			}  			// send everyone an update on the state of the world  			if (updatesSinceWorldDataSend >= updatesBetweenWorldDataSend) {  				packetWriter.Write ((int)PacketTypes.WorldData);  				// write each of the asteroids  				for (int i = 0; i < asteroids.Length; i++) {  					packetWriter.Write (asteroids [i].Position);  					packetWriter.Write (asteroids [i].Velocity);  				}  				localGamer.SendData (packetWriter' SendDataOptions.InOrder);  				updatesSinceWorldDataSend = 0;  			} else {  				updatesSinceWorldDataSend++;  			}  		}  		// update each asteroid  		foreach (Asteroid asteroid in asteroids) {  			if (asteroid.Active) {  				asteroid.Update (elapsedTime);  			}  		}  		// update the power-up  		if (powerUp != null) {  			if (powerUp.Active) {  				powerUp.Update (elapsedTime);  			} else {  				powerUp = null;  			}  		}  		// process the local player's input  		if (!paused) {  			ProcessLocalPlayerInput ();  		}  		// update each ship  		foreach (NetworkGamer networkGamer in networkSession.AllGamers) {  			PlayerData playerData = networkGamer.Tag as PlayerData;  			if ((playerData != null) && (playerData.Ship != null)) {  				if (playerData.Ship.Active) {  					playerData.Ship.Update (elapsedTime);  					// check for death   					// -- only check on local machines - the local player is  					//    the authority on the death of their own ship  					if (networkGamer.IsLocal && (playerData.Ship.Life < 0)) {  						SendLocalShipDeath ();  					}  				} else if (playerData.Ship.RespawnTimer > 0f) {  					playerData.Ship.RespawnTimer -= elapsedTime;  					if (playerData.Ship.RespawnTimer < 0f) {  						playerData.Ship.RespawnTimer = 0f;  					}  				}  			}  		}  		// update the other players with the current state of the local ship  		if (updatesSinceStatusPacket >= updatesBetweenStatusPackets) {  			updatesSinceStatusPacket = 0;  			SendLocalShipData ();  		} else {  			updatesSinceStatusPacket++;  		}  		// update the collision manager  		CollisionManager.Update (elapsedTime);  		// update the particle-effect manager  		particleEffectManager.Update (elapsedTime);  	}  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: if (initialized && (networkSession != null) && (networkSession.SessionState == NetworkSessionState.Playing)) {  	// presence support  	int highScore = int.MinValue;  	int highScoreIndex = -1;  	for (int i = 0; i < networkSession.AllGamers.Count; i++) {  		NetworkGamer networkGamer = networkSession.AllGamers [i];  		PlayerData playerData = networkGamer.Tag as PlayerData;  		if ((playerData != null) && (playerData.Ship != null)) {  			int playerScore = playerData.Ship.Score;  			if (playerScore == highScore) {  				highScorers.Add (i);  			} else if (playerScore > highScore) {  				highScorers.Clear ();  				highScorers.Add (i);  				highScore = playerScore;  				highScoreIndex = i;  			}  		}  	}  	// the host has singular responsibilities to the game world'   	// that need to be done once' by one authority  	if (networkSession.IsHost) {  		// get the local player' for frequent re-use  		LocalNetworkGamer localGamer = networkSession.Host as LocalNetworkGamer;  		// check for victory  		// if victory has been achieved' send a packet to everyone  		if (highScore >= winningScore) {  			packetWriter.Write ((int)PacketTypes.GameWon);  			packetWriter.Write (highScoreIndex);  			localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  		}  		// respawn each player' if it is time to do so  		for (int i = 0; i < networkSession.AllGamers.Count; i++) {  			NetworkGamer networkGamer = networkSession.AllGamers [i];  			PlayerData playerData = networkGamer.Tag as PlayerData;  			if ((playerData != null) && (playerData.Ship != null) && !playerData.Ship.Active && (playerData.Ship.RespawnTimer <= 0f)) {  				// write the ship-spawn packet  				packetWriter.Write ((int)PacketTypes.ShipSpawn);  				packetWriter.Write (i);  				packetWriter.Write (CollisionManager.FindSpawnPoint (playerData.Ship' playerData.Ship.Radius));  				localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  			}  		}  		// respawn the power-up if it is time to do so  		if (powerUp == null) {  			powerUpTimer -= elapsedTime;  			if (powerUpTimer < 0) {  				// write the power-up-spawn packet  				packetWriter.Write ((int)PacketTypes.PowerUpSpawn);  				packetWriter.Write (RandomMath.Random.Next (3));  				packetWriter.Write (CollisionManager.FindSpawnPoint (null' PowerUp.PowerUpRadius * 3f));  				localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  			}  		} else {  			powerUpTimer = maximumPowerUpTimer;  		}  		// send everyone an update on the state of the world  		if (updatesSinceWorldDataSend >= updatesBetweenWorldDataSend) {  			packetWriter.Write ((int)PacketTypes.WorldData);  			// write each of the asteroids  			for (int i = 0; i < asteroids.Length; i++) {  				packetWriter.Write (asteroids [i].Position);  				packetWriter.Write (asteroids [i].Velocity);  			}  			localGamer.SendData (packetWriter' SendDataOptions.InOrder);  			updatesSinceWorldDataSend = 0;  		} else {  			updatesSinceWorldDataSend++;  		}  	}  	// update each asteroid  	foreach (Asteroid asteroid in asteroids) {  		if (asteroid.Active) {  			asteroid.Update (elapsedTime);  		}  	}  	// update the power-up  	if (powerUp != null) {  		if (powerUp.Active) {  			powerUp.Update (elapsedTime);  		} else {  			powerUp = null;  		}  	}  	// process the local player's input  	if (!paused) {  		ProcessLocalPlayerInput ();  	}  	// update each ship  	foreach (NetworkGamer networkGamer in networkSession.AllGamers) {  		PlayerData playerData = networkGamer.Tag as PlayerData;  		if ((playerData != null) && (playerData.Ship != null)) {  			if (playerData.Ship.Active) {  				playerData.Ship.Update (elapsedTime);  				// check for death   				// -- only check on local machines - the local player is  				//    the authority on the death of their own ship  				if (networkGamer.IsLocal && (playerData.Ship.Life < 0)) {  					SendLocalShipDeath ();  				}  			} else if (playerData.Ship.RespawnTimer > 0f) {  				playerData.Ship.RespawnTimer -= elapsedTime;  				if (playerData.Ship.RespawnTimer < 0f) {  					playerData.Ship.RespawnTimer = 0f;  				}  			}  		}  	}  	// update the other players with the current state of the local ship  	if (updatesSinceStatusPacket >= updatesBetweenStatusPackets) {  		updatesSinceStatusPacket = 0;  		SendLocalShipData ();  	} else {  		updatesSinceStatusPacket++;  	}  	// update the collision manager  	CollisionManager.Update (elapsedTime);  	// update the particle-effect manager  	particleEffectManager.Update (elapsedTime);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: if (networkSession.IsHost) {  	// get the local player' for frequent re-use  	LocalNetworkGamer localGamer = networkSession.Host as LocalNetworkGamer;  	// check for victory  	// if victory has been achieved' send a packet to everyone  	if (highScore >= winningScore) {  		packetWriter.Write ((int)PacketTypes.GameWon);  		packetWriter.Write (highScoreIndex);  		localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  	}  	// respawn each player' if it is time to do so  	for (int i = 0; i < networkSession.AllGamers.Count; i++) {  		NetworkGamer networkGamer = networkSession.AllGamers [i];  		PlayerData playerData = networkGamer.Tag as PlayerData;  		if ((playerData != null) && (playerData.Ship != null) && !playerData.Ship.Active && (playerData.Ship.RespawnTimer <= 0f)) {  			// write the ship-spawn packet  			packetWriter.Write ((int)PacketTypes.ShipSpawn);  			packetWriter.Write (i);  			packetWriter.Write (CollisionManager.FindSpawnPoint (playerData.Ship' playerData.Ship.Radius));  			localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  		}  	}  	// respawn the power-up if it is time to do so  	if (powerUp == null) {  		powerUpTimer -= elapsedTime;  		if (powerUpTimer < 0) {  			// write the power-up-spawn packet  			packetWriter.Write ((int)PacketTypes.PowerUpSpawn);  			packetWriter.Write (RandomMath.Random.Next (3));  			packetWriter.Write (CollisionManager.FindSpawnPoint (null' PowerUp.PowerUpRadius * 3f));  			localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  		}  	} else {  		powerUpTimer = maximumPowerUpTimer;  	}  	// send everyone an update on the state of the world  	if (updatesSinceWorldDataSend >= updatesBetweenWorldDataSend) {  		packetWriter.Write ((int)PacketTypes.WorldData);  		// write each of the asteroids  		for (int i = 0; i < asteroids.Length; i++) {  			packetWriter.Write (asteroids [i].Position);  			packetWriter.Write (asteroids [i].Velocity);  		}  		localGamer.SendData (packetWriter' SendDataOptions.InOrder);  		updatesSinceWorldDataSend = 0;  	} else {  		updatesSinceWorldDataSend++;  	}  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: if (powerUp == null) {  	powerUpTimer -= elapsedTime;  	if (powerUpTimer < 0) {  		// write the power-up-spawn packet  		packetWriter.Write ((int)PacketTypes.PowerUpSpawn);  		packetWriter.Write (RandomMath.Random.Next (3));  		packetWriter.Write (CollisionManager.FindSpawnPoint (null' PowerUp.PowerUpRadius * 3f));  		localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  	}  } else {  	powerUpTimer = maximumPowerUpTimer;  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: if (powerUpTimer < 0) {  	// write the power-up-spawn packet  	packetWriter.Write ((int)PacketTypes.PowerUpSpawn);  	packetWriter.Write (RandomMath.Random.Next (3));  	packetWriter.Write (CollisionManager.FindSpawnPoint (null' PowerUp.PowerUpRadius * 3f));  	localGamer.SendData (packetWriter' SendDataOptions.ReliableInOrder);  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,Update,The following statement contains a magic number: packetWriter.Write (RandomMath.Random.Next (3));  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,SpawnPowerup,The following statement contains a magic number: if (powerUp == null) {  	switch (whichPowerUp) {  	case 0:  		powerUp = new DoubleLaserPowerUp ();  		break;  	case 1:  		powerUp = new TripleLaserPowerUp ();  		break;  	case 2:  		powerUp = new RocketPowerUp ();  		break;  	}  }  
Magic Number,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,SpawnPowerup,The following statement contains a magic number: switch (whichPowerUp) {  case 0:  	powerUp = new DoubleLaserPowerUp ();  	break;  case 1:  	powerUp = new TripleLaserPowerUp ();  	break;  case 2:  	powerUp = new RocketPowerUp ();  	break;  }  
Magic Number,NetRumble,CollisionManager,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\CollisionManager.cs,FindSpawnPoint,The following statement contains a magic number: if ((radius < 0f) || (radius > Dimensions.Width / 2)) {  	throw new ArgumentOutOfRangeException ("radius");  }  
Magic Number,NetRumble,RocketWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\RocketWeapon.cs,RocketWeapon,The following statement contains a magic number: if (RandomMath.Random.Next (2) == 0)  	fireSoundEffect = "fire_rocket1";  else  	fireSoundEffect = "fire_rocket2";  
Magic Number,NetRumble,LaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\LaserWeapon.cs,LaserWeapon,The following statement contains a magic number: switch (RandomMath.Random.Next (3)) {  case 0:  	fireSoundEffect = "fire_laser1";  	break;  case 1:  	fireSoundEffect = "fire_laser2";  	break;  case 2:  	fireSoundEffect = "fire_laser3";  	break;  }  
Magic Number,NetRumble,LaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\LaserWeapon.cs,LaserWeapon,The following statement contains a magic number: switch (RandomMath.Random.Next (3)) {  case 0:  	fireSoundEffect = "fire_laser1";  	break;  case 1:  	fireSoundEffect = "fire_laser2";  	break;  case 2:  	fireSoundEffect = "fire_laser3";  	break;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,LoadContent,The following statement contains a magic number: width /= 2;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,LoadContent,The following statement contains a magic number: height /= 2;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++) {  	// Store weights for the positive and negative taps.  	float weight = ComputeGaussian (i + 1);  	sampleWeights [i * 2 + 1] = weight;  	sampleWeights [i * 2 + 2] = weight;  	totalWeights += weight * 2;  	// To get the maximum amount of blurring from a limited number of  	// pixel shader samples' we take advantage of the bilinear filtering  	// hardware inside the texture fetch unit. If we position our texture  	// coordinates exactly halfway between two texels' the filtering unit  	// will average them for us' giving two samples for the price of one.  	// This allows us to step in units of two texels per sample' rather  	// than just one at a time. The 1.5 offset kicks things off by  	// positioning us nicely in between two texels.  	float sampleOffset = i * 2 + 1.5f;  	Vector2 delta = new Vector2 (dx' dy) * sampleOffset;  	// Store texture coordinate offsets for the positive and negative taps.  	sampleOffsets [i * 2 + 1] = delta;  	sampleOffsets [i * 2 + 2] = -delta;  }  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleWeights [i * 2 + 1] = weight;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleWeights [i * 2 + 2] = weight;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleWeights [i * 2 + 2] = weight;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: totalWeights += weight * 2;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleOffsets [i * 2 + 1] = delta;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleOffsets [i * 2 + 2] = -delta;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,SetBlurEffectParameters,The following statement contains a magic number: sampleOffsets [i * 2 + 2] = -delta;  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,ComputeGaussian,The following statement contains a magic number: return (float)((1.0 / Math.Sqrt (2 * Math.PI * theta)) * Math.Exp (-(n * n) / (2 * theta * theta)));  
Magic Number,NetRumble,BloomComponent,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\BloomPostprocess\BloomComponent.cs,ComputeGaussian,The following statement contains a magic number: return (float)((1.0 / Math.Sqrt (2 * Math.PI * theta)) * Math.Exp (-(n * n) / (2 * theta * theta)));  
Missing Default,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following switch statement is missing a default case: switch (state) {  case MainMenuState.SignedInLive: {  	switch (entryIndex) {  	case 0:  		// Quick Match  		QuickMatchSession ();  		break;  	case 1:  		// Create Xbox LIVE Session  		CreateSession (NetworkSessionType.PlayerMatch);  		break;  	case 2:  		// Join Xbox LIVE Session  		FindSession (NetworkSessionType.PlayerMatch);  		break;  	case 3:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 4:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 5:  		// Exit or Unlock Full Game (depending on trialMode flag)  		if (trialMode)  			ShowOffer ();  		else if (ScreenManager.invited != null)  			JoinInvitedGame ();  		else  			OnCancel ();  		break;  	case 6:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedInLocal: {  	switch (entryIndex) {  	case 0:  		// Create System Link Session  		CreateSession (NetworkSessionType.SystemLink);  		break;  	case 1:  		// Join System Link Session  		FindSession (NetworkSessionType.SystemLink);  		break;  	case 2:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  case MainMenuState.SignedOut: {  	switch (entryIndex) {  	case 0:  		// Sign In  		if (!Guide.IsVisible) {  			Guide.ShowSignIn (1' false);  		}  		break;  	case 1:  		// Exit  		OnCancel ();  		break;  	}  	break;  }  }  
Missing Default,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following switch statement is missing a default case: switch (entryIndex) {  case 0:  	// Quick Match  	QuickMatchSession ();  	break;  case 1:  	// Create Xbox LIVE Session  	CreateSession (NetworkSessionType.PlayerMatch);  	break;  case 2:  	// Join Xbox LIVE Session  	FindSession (NetworkSessionType.PlayerMatch);  	break;  case 3:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 4:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 5:  	// Exit or Unlock Full Game (depending on trialMode flag)  	if (trialMode)  		ShowOffer ();  	else if (ScreenManager.invited != null)  		JoinInvitedGame ();  	else  		OnCancel ();  	break;  case 6:  	// Exit  	OnCancel ();  	break;  }  
Missing Default,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following switch statement is missing a default case: switch (entryIndex) {  case 0:  	// Create System Link Session  	CreateSession (NetworkSessionType.SystemLink);  	break;  case 1:  	// Join System Link Session  	FindSession (NetworkSessionType.SystemLink);  	break;  case 2:  	// Exit  	OnCancel ();  	break;  }  
Missing Default,NetRumble,MainMenuScreen,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Screens\MainMenuScreen.cs,OnSelectEntry,The following switch statement is missing a default case: switch (entryIndex) {  case 0:  	// Sign In  	if (!Guide.IsVisible) {  		Guide.ShowSignIn (1' false);  	}  	break;  case 1:  	// Exit  	OnCancel ();  	break;  }  
Missing Default,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,GenerateWorld,The following switch statement is missing a default case: switch (RandomMath.Random.Next (3)) {  case 0:  	radius = 32f;  	break;  case 1:  	radius = 60f;  	break;  case 2:  	radius = 96f;  	break;  }  
Missing Default,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,ProcessPackets,The following switch statement is missing a default case: switch (packetType) {  case PacketTypes.PlayerData:  	UpdatePlayerData (sender);  	break;  case PacketTypes.WorldSetup:  	// apply the world setup data' but only once  	if (!Initialized) {  		Initialize ();  	}  	break;  case PacketTypes.ShipData:  	if ((sender != null) && !sender.IsLocal) {  		UpdateShipData (sender);  	}  	break;  case PacketTypes.WorldData:  	if (!networkSession.IsHost && Initialized) {  		UpdateWorldData ();  	}  	break;  case PacketTypes.ShipInput:  	if (sender != null) {  		PlayerData playerData = sender.Tag as PlayerData;  		if ((playerData != null) && (playerData.Ship != null)) {  			playerData.Ship.ShipInput = new ShipInput (packetReader);  		}  	}  	break;  case PacketTypes.ShipSpawn:  	SpawnShip ();  	break;  case PacketTypes.PowerUpSpawn:  	SpawnPowerup ();  	break;  case PacketTypes.ShipDeath:  	KillShip (sender);  	break;  case PacketTypes.GameWon:  	gameWon = true;  	winnerIndex = packetReader.ReadInt32 ();  	if (networkSession.IsHost && (networkSession.SessionState == NetworkSessionState.Playing)) {  		networkSession.EndGame ();  	}  	break;  }  
Missing Default,NetRumble,World,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\World.cs,SpawnPowerup,The following switch statement is missing a default case: switch (whichPowerUp) {  case 0:  	powerUp = new DoubleLaserPowerUp ();  	break;  case 1:  	powerUp = new TripleLaserPowerUp ();  	break;  case 2:  	powerUp = new RocketPowerUp ();  	break;  }  
Missing Default,NetRumble,LaserWeapon,F:\newReposMay17\CartBlanche_MonoGame-Samples\NetRumble\Gameplay\Weapons\LaserWeapon.cs,LaserWeapon,The following switch statement is missing a default case: switch (RandomMath.Random.Next (3)) {  case 0:  	fireSoundEffect = "fire_laser1";  	break;  case 1:  	fireSoundEffect = "fire_laser2";  	break;  case 2:  	fireSoundEffect = "fire_laser3";  	break;  }  
