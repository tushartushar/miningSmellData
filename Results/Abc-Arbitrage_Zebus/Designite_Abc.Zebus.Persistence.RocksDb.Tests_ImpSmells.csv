Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,should_test_replay,The length of the statement  "            Console.WriteLine($"Replayed {count:N0} times ({count*entriesToPersist.Count:N0} messages) in {testDuration.TotalSeconds:N0}s"); " is 128.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,GetEntriesToPersist,The length of the statement  "                entriesToPersist.Add(MatcherEntry.Message(new PeerId("Peer" + (i + offset))' MessageId.NextId()' new MessageTypeId("SomeEvent")' messageBytes)); " is 144.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_write_message_entry_fields_to_cassandra,The length of the statement  "            await _storage.Write(new List<MatcherEntry> { MatcherEntry.Message(peerId' messageId' MessageTypeId.PersistenceStopping' messageBytes) }); " is 138.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_not_overwrite_messages_with_same_time_component_and_different_message_id,The length of the statement  "            var messageId = new MessageId(Guid.Parse("0000c399-1ab0-e511-9706-ae1ea5dcf365"));      // Time component @2016-01-01 00:00:00Z " is 127.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_not_overwrite_messages_with_same_time_component_and_different_message_id,The length of the statement  "            var otherMessageId = new MessageId(Guid.Parse("0000c399-1ab0-e511-9806-f1ef55aac8e9")); // Time component @2016-01-01 00:00:00Z " is 127.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_support_out_of_order_acks_and_messages,The length of the statement  "            await _storage.Write(new List<MatcherEntry> { MatcherEntry.Message(peerId' messageId' MessageTypeId.PersistenceStopping' messageBytes) }); " is 138.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_remove_peer,The length of the statement  "            await _storage.Write(new List<MatcherEntry> { MatcherEntry.Message(peerId' messageId' MessageTypeId.PersistenceStopping' messageBytes) }); " is 138.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_update_non_ack_message_count,The length of the statement  "            _storage.Write(new[] { MatcherEntry.Message(firstPeer' MessageId.NextId()' new MessageTypeId("Abc.Message")' new byte[] { 0x01' 0x02' 0x03 }) }); " is 145.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_update_non_ack_message_count,The length of the statement  "            _storage.Write(new[] { MatcherEntry.Message(secondPeer' MessageId.NextId()' new MessageTypeId("Abc.Message")' new byte[] { 0x04' 0x05' 0x06 }) }); " is 146.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_update_non_ack_message_count,The length of the statement  "            _storage.Write(new[] { MatcherEntry.Message(firstPeer' MessageId.NextId()' new MessageTypeId("Abc.Message")' new byte[] { 0x07' 0x08' 0x09 }) }); " is 145.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_persist_messages_in_order,The length of the statement  "                var expectedTransportMessages = inputMessages.Select(Serialization.Serializer.Serialize).Select(x => x.ToArray()).ToList(); " is 123.
Long Statement,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_report_storage_informations,The length of the statement  "                MatcherEntry.Message(peer' MessageId.NextId()' new MessageTypeId("Abc.Message.Fat")' new byte[] { 0x01' 0x02' 0x03' 0x04 })' " is 124.
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,should_do_this,The following statement contains a magic number: var testDuration = 30.Seconds();
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,should_do_this,The following statement contains a magic number: var writeTask = Task.Run(async () =>              {                  var count = 0;                  while (DateTime.UtcNow - startTime < testDuration)                  {                      var entriesToPersist = GetEntriesToPersist(messageBytes' count);                      await _storage.Write(entriesToPersist);                        // Thread.Sleep(2.Seconds());                        await _storage.Write(ToAckEntries(entriesToPersist));                        count++;                  }                    Console.WriteLine($"Wrote {count * 100:N0} messages");              });
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,should_test_replay,The following statement contains a magic number: MessageId.PauseIdGenerationAtDate(SystemDateTime.UtcNow.Date.AddSeconds(i * 10));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,should_test_replay,The following statement contains a magic number: var testDuration = 30.Seconds();
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,GetEntriesToPersist,The following statement contains a magic number: MessageId.PauseIdGenerationAtDate(SystemDateTime.UtcNow.Date.AddSeconds(i * 10));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,PerformanceTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\PerformanceTests.cs,CreateTestTransportMessage,The following statement contains a magic number: MessageId.PauseIdGenerationAtDate(SystemDateTime.UtcNow.Date.AddSeconds(i * 10));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_not_overwrite_messages_with_same_time_component_and_different_message_id,The following statement contains a magic number: messages.ToList().Count.ShouldEqual(2);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_support_out_of_order_acks_and_messages,The following statement contains a magic number: await Task.Delay(50);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_update_non_ack_message_count,The following statement contains a magic number: nonAckedMessageCounts[firstPeer].ShouldEqual(2);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_persist_messages_in_order,The following statement contains a magic number: var inputMessages = Enumerable.Range(1' 100).Select(CreateTestTransportMessage).ToList();
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_persist_messages_in_order,The following statement contains a magic number: transportMessages.Count.ShouldEqual(100);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_persist_messages_in_order,The following statement contains a magic number: transportMessages.Count.ShouldEqual(100);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_not_get_acked_message,The following statement contains a magic number: var message2 = GetMatcherEntryWithValidTransportMessage(peer' 2);
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_report_storage_informations,The following statement contains a magic number: _reporterMock.Verify(r => r.AddStorageReport(2' 7' 4' "Abc.Message.Fat"));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_report_storage_informations,The following statement contains a magic number: _reporterMock.Verify(r => r.AddStorageReport(2' 7' 4' "Abc.Message.Fat"));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,should_report_storage_informations,The following statement contains a magic number: _reporterMock.Verify(r => r.AddStorageReport(2' 7' 4' "Abc.Message.Fat"));
Magic Number,Abc.Zebus.Persistence.RocksDb.Tests,RocksDbStorageTests,D:\research\architectureSmells\repos\Abc-Arbitrage_Zebus\src\Abc.Zebus.Persistence.RocksDb.Tests\RocksDbStorageTests.cs,CreateTestTransportMessage,The following statement contains a magic number: MessageId.PauseIdGenerationAtDate(SystemDateTime.UtcNow.Date.AddSeconds(i * 10));
