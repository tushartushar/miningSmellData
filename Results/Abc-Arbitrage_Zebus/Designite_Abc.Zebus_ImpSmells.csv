Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,Cyclomatic complexity of the method is 8
Complex Method,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,Cyclomatic complexity of the method is 9
Complex Method,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,Cyclomatic complexity of the method is 10
Complex Method,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,Cyclomatic complexity of the method is 25
Complex Method,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadOriginatorInfo,Cyclomatic complexity of the method is 13
Complex Method,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,SkipUnknown,Cyclomatic complexity of the method is 20
Complex Method,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,Cyclomatic complexity of the method is 9
Long Parameter List,Abc.Zebus.Core,Bus,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\Bus.cs,Bus,The method has 8 parameters.
Long Parameter List,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,InfoFormat,The method has 5 parameters.
Long Parameter List,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,DebugFormat,The method has 5 parameters.
Long Parameter List,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,InfoFormat,The method has 6 parameters.
Long Parameter List,Abc.Zebus.Directory,PeerDescriptor,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDescriptor.cs,PeerDescriptor,The method has 7 parameters.
Long Parameter List,Abc.Zebus.Dispatch,SyncMessageHandlerInvoker,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\SyncMessageHandlerInvoker.cs,SyncMessageHandlerInvoker,The method has 5 parameters.
Long Parameter List,Abc.Zebus.Lotus,MessageProcessingFailed,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Lotus\MessageProcessingFailed.cs,MessageProcessingFailed,The method has 5 parameters.
Long Parameter List,Abc.Zebus.Serialization.Protobuf,ByteArray,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\ByteArray.cs,Copy,The method has 5 parameters.
Long Parameter List,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawTag,The method has 5 parameters.
Long Parameter List,Abc.Zebus.EventSourcing,DomainEventSourcing,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\EventSourcing\DomainEventSourcing.cs,DomainEventSourcing,The method has 5 parameters.
Long Parameter List,ABC.ServiceBus.Contracts,RequestTimeoutCommand,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Timeout\RequestTimeoutCommand.cs,RequestTimeoutCommand,The method has 6 parameters.
Long Parameter List,Abc.Zebus.Transport,ZmqInboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqInboundSocket.cs,ZmqInboundSocket,The method has 5 parameters.
Long Identifier,Abc.Zebus.Util,TypeUtil,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TypeUtil.cs,FindGenericTypeByName,The length of the parameter typeNameWithoutGenericArguments is 31.
Long Statement,Abc.Zebus.Core,Bus,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\Bus.cs,Publish,The length of the statement  "	var targetPeers = shouldBeHandledLocally ? peersHandlingMessage.Where (x => x.Id != PeerId).ToList () : peersHandlingMessage; " is 125.
Long Statement,Abc.Zebus.Core,BusFactory,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusFactory.cs,CreateBus,The length of the statement  "		throw new InvalidOperationException ("The CreateBus() method was called with no configuration (Call .WithConfiguration(...) first)"); " is 133.
Long Statement,Abc.Zebus.Core,BusFactory,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusFactory.cs,CreateBus,The length of the statement  "			var dispatcher = new MessageDispatcher (ctx.GetAllInstances<IMessageHandlerInvokerLoader> ().ToArray ()' ctx.GetInstance<IDispatchQueueFactory> ()); " is 148.
Long Statement,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,InfoFormat,The length of the statement  "	var peerIdText = otherPeersCount > 1 ? peers [0].Id + " and " + otherPeersCount + " other peers" : peers [0].Id + " and " + otherPeersCount + " other peer"; " is 156.
Long Statement,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,InfoFormat,The length of the statement  "	_logger.Logger.Log (_loggerType' logLevel ?? Level.Info' string.Format (format' messageText' messageId' messageSize' peerIdText)' null); " is 136.
Long Statement,Abc.Zebus.Core,BusMessageLogger,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Core\BusMessageLogger.cs,HasToStringOverride,The length of the statement  "	var methodInfo = messageType.GetMethod ("ToString"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.DeclaredOnly); " is 125.
Long Statement,Abc.Zebus,CommandResult,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\CommandResult.cs,GetErrorStatus,The length of the statement  "	return new ErrorStatus (domainException.ErrorCode != 0 ? domainException.ErrorCode : ErrorStatus.UnknownError.Code' domainException.Message); " is 141.
Long Statement,Abc.Zebus,BusExtensions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\BusExtensions.cs,Send,The length of the statement  "	var sendTasks = commands.Select (command => bus.Send (command).ContinueWith (task => onCommandExecuted (command' task.Result.ErrorCode)' TaskContinuationOptions.ExecuteSynchronously)); " is 184.
Long Statement,Abc.Zebus,DomainException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\DomainException.cs,ReadDescriptionFromAttribute,The length of the statement  "	var attr = (DescriptionAttribute)memberExpr.Member.GetCustomAttributes (typeof(DescriptionAttribute)).FirstOrDefault (); " is 120.
Long Statement,Abc.Zebus,MessageContext,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageContext.cs,CreateTest,The length of the statement  "	return CreateTest (new OriginatorInfo (new PeerId ("Abc.Testing.999")' "tcp://abctest:1234"' "abctest"' initiatorUserName)); " is 124.
Long Statement,Abc.Zebus,Subscription,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Subscription.cs,GetExpressionValue,The length of the statement  "	if (methodCallExpression.Method.IsGenericMethod && methodCallExpression.Method.GetGenericMethodDefinition () == _wildCardTokenMethod) " is 133.
Long Statement,Abc.Zebus,Subscription,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Subscription.cs,AddFieldValueFromBinaryExpression,The length of the statement  "	var valueAsText = memberExpression.Type.IsEnum ? Enum.GetName (memberExpression.Type' memberValue) : memberValue.ToString (); " is 125.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,ProcessMessagesReceivedDuringRegister,The length of the statement  "			_logger.WarnFormat ("Unable to process message {0} {{{1}}}' Exception: {2}"' message.GetType ()' message.ToString ()' ex); " is 122.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,CreateSelfDescriptor,The length of the statement  "	return new PeerDescriptor (_self.Id' _self.EndPoint' _configuration.IsPersistent' true' true' _timestampProvider.NextUtcTimestamp ()' subscriptions.ToArray ()) { " is 161.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,TryRegisterOnDirectory,The length of the statement  "		_logger.InfoFormat ("Register rejected for {0}' the peer already exists in the directory"' new RegisterPeerCommand (self).Peer.PeerId); " is 135.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,UpdateSubscriptions,The length of the statement  "	var command = new UpdatePeerSubscriptionsForTypesCommand (_self.Id' _timestampProvider.NextUtcTimestamp ()' subscriptions); " is 123.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,Unregister,The length of the statement  "	// using a cache of the directory peers in case of the underlying configuration proxy values changed before stopping (Abc.gestion...) " is 133.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,AddOrUpdatePeerEntry,The length of the statement  "	var peerEntry = _peers.AddOrUpdate (peerDescriptor.PeerId' key => new PeerEntry (peerDescriptor' _globalSubscriptionsIndex)' (key' entry) => { " is 142.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,Handle,The length of the statement  "	peer.Value.SetSubscriptions (message.PeerDescriptor.Subscriptions ?? Enumerable.Empty<Subscription> ()' message.PeerDescriptor.TimestampUtc); " is 141.
Long Statement,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,Handle,The length of the statement  "	peer.Value.SetSubscriptionsForType (message.SubscriptionsForType ?? Enumerable.Empty<SubscriptionsForType> ()' message.TimestampUtc); " is 133.
Long Statement,Abc.Zebus.Directory,SubscriptionsForType,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\SubscriptionsForType.cs,CreateDictionary,The length of the statement  "	return subscriptions.GroupBy (sub => sub.MessageTypeId).ToDictionary (grp => grp.Key' grp => new SubscriptionsForType (grp.Key' grp.Select (sub => sub.BindingKey).ToArray ())); " is 176.
Long Statement,Abc.Zebus.Dispatch,DispatchQueue,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\DispatchQueue.cs,RunBatch,The length of the statement  "			var invocation = _pipeManager.BuildPipeInvocation (batch.FirstEntry.Invoker' batch.Messages' batch.FirstEntry.Dispatch.Context); " is 128.
Long Statement,Abc.Zebus.Dispatch,DispatchQueue,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\DispatchQueue.cs,RunBatch,The length of the statement  "			var invocation = _pipeManager.BuildPipeInvocation (asyncBatch.FirstEntry.Invoker' asyncBatch.Messages' asyncBatch.FirstEntry.Dispatch.Context); " is 143.
Long Statement,Abc.Zebus.Dispatch,DispatchQueue,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\DispatchQueue.cs,RunBatch,The length of the statement  "			invocation.RunAsync ().ContinueWith (task => OnAsyncBatchCompleted (task' asyncBatch)' TaskContinuationOptions.ExecuteSynchronously); " is 133.
Long Statement,Abc.Zebus.Dispatch,DispatchQueue,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\DispatchQueue.cs,OnAsyncBatchCompleted,The length of the statement  "		var exception = task.IsFaulted ? task.Exception != null ? task.Exception.InnerException : new Exception ("Task failed") : null; " is 127.
Long Statement,Abc.Zebus.Dispatch,BatchedMessageHandlerInvoker,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\BatchedMessageHandlerInvoker.cs,CanMergeWith,The length of the statement  "	return otherBatchedInvoker != null && otherBatchedInvoker.MessageHandlerType == MessageHandlerType && otherBatchedInvoker.MessageType == MessageType; " is 149.
Long Statement,Abc.Zebus.Dispatch,MessageHandlerInvoker,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageHandlerInvoker.cs,GetExplicitSubscriptionMode,The length of the statement  "	var subscriptionModeAttribute = (SubscriptionModeAttribute)Attribute.GetCustomAttribute (handlerType' typeof(SubscriptionModeAttribute)); " is 137.
Long Statement,Abc.Zebus.Dispatch,MessageHandlerInvoker,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageHandlerInvoker.cs,CreateConstructorInstance,The length of the statement  "	inst.Dependencies.Add<MessageContext> (new LambdaInstance<MessageContext> ("Dispatch MessageContext"' () => _dispatchBus.MessageContext)); " is 138.
Long Statement,Abc.Zebus.Dispatch,MessageDispatcher,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageDispatcher.cs,LoadMessageHandlerInvokers,The length of the statement  "			var messageTypeInvokers = invokers.GetOrAdd (new MessageTypeId (invoker.MessageType)' x => new List<IMessageHandlerInvoker> ()); " is 128.
Long Statement,Abc.Zebus.Dispatch,MessageDispatcher,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageDispatcher.cs,Dispatch,The length of the statement  "	var invokers = _invokers.GetValueOrDefault (dispatch.Message.TypeId ()' _emptyInvokers).Where (x => handlerFilter (x.MessageHandlerType)).ToList (); " is 148.
Long Statement,Abc.Zebus.Dispatch,MessageDispatcher,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageDispatcher.cs,AddInvoker,The length of the statement  "		var existingMessageTypeInvokers = _invokers.GetValueOrDefault (newEventHandlerInvoker.MessageTypeId) ?? new List<IMessageHandlerInvoker> (); " is 140.
Long Statement,Abc.Zebus.Dispatch,MessageDispatcher,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\MessageDispatcher.cs,RemoveInvoker,The length of the statement  "		var newMessageTypeInvokers = new List<IMessageHandlerInvoker> (messageTypeInvokers.Where (x => x != eventHandlerInvoker)); " is 122.
Long Statement,Abc.Zebus.Hosting,HostInitializerHelper,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\HostInitializerHelper.cs,CallActionOnInitializers,The length of the statement  "	var orderedInitializers = invertPriority ? initializers.OrderBy (x => x.Priority) : initializers.OrderByDescending (x => x.Priority); " is 133.
Long Statement,Abc.Zebus.Hosting,HostInitializerHelper,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\HostInitializerHelper.cs,CallActionOnInitializers,The length of the statement  "		var hostMethodInfo = hostInitializer.GetType ().GetMethod (methodInfo.Name' BindingFlags.Instance | BindingFlags.Public); " is 121.
Long Statement,Abc.Zebus.Scan,DispatchQueueNameScanner,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\DispatchQueueNameScanner.cs,LoadQueueName,The length of the statement  "	var queueNameAttribute = (DispatchQueueNameAttribute)Attribute.GetCustomAttribute (type' typeof(DispatchQueueNameAttribute)' true); " is 131.
Long Statement,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,LoadMessageHandlerInvokers,The length of the statement  "		if (!handlerType.IsClass || handlerType.IsAbstract || !handlerType.IsVisible || !_handlerType.IsAssignableFrom (handlerType)) " is 125.
Long Statement,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,LoadMessageHandlerInvokers,The length of the statement  "		var excludedMessageTypes = interfaces.Where (IsCustomInvokerMessageHandlerInterface).Select (handleInterface => handleInterface.GetGenericArguments () [0]).ToHashSet (); " is 169.
Long Statement,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,LoadMessageHandlerInvokers,The length of the statement  "			var shouldBeSubscribedOnStartup = MessageHandlerInvoker.MessageShouldBeSubscribedOnStartup (messageType' subscriptionMode); " is 123.
Long Statement,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,IsCustomInvokerMessageHandlerInterface,The length of the statement  "	return interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition () == typeof(ICustomInvokerMessageHandler<>) && !interfaceType.GetGenericArguments () [0].IsGenericParameter; " is 186.
Long Statement,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,IsMessageHandlerInterface,The length of the statement  "	return interfaceType.IsGenericType && interfaceType.GetGenericTypeDefinition () == _genericHandlerType && !interfaceType.GetGenericArguments () [0].IsGenericParameter; " is 167.
Long Statement,Abc.Zebus.Scan,TypeSource,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\TypeSource.cs,GetTypes,The length of the statement  "	return AppDomain.CurrentDomain.GetAssemblies ().Where (AssemblyFilter).SelectMany (x => x.GetTypes ()).Where (TypeFilter); " is 122.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,TruncatedMessage,The length of the statement  "	return new InvalidProtocolBufferException ("While parsing a protocol message' the input ended unexpectedly " + "in the middle of a field.  This could mean either than the " + "input has been truncated or that an embedded message " + "misreported its own length."); " is 264.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,NegativeSize,The length of the statement  "	return new InvalidProtocolBufferException ("CodedInputStream encountered an embedded string or message " + "which claimed to have negative size."); " is 147.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,RecursionLimitExceeded,The length of the statement  "	return new InvalidProtocolBufferException ("Protocol message had too many levels of nesting.  May be malicious.  " + "Use CodedInputStream.SetRecursionLimit() to increase the depth limit."); " is 190.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,JsonRecursionLimitExceeded,The length of the statement  "	return new InvalidProtocolBufferException ("Protocol message had too many levels of nesting.  May be malicious.  " + "Use JsonParser.Settings to increase the depth limit."); " is 173.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,SizeLimitExceeded,The length of the statement  "	return new InvalidProtocolBufferException ("Protocol message was too large.  May be malicious.  " + "Use CodedInputStream.SetSizeLimit() to increase the size limit."); " is 167.
Long Statement,Abc.Zebus.Serialization.Protobuf,InvalidProtocolBufferException,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\InvalidProtocolBufferException.cs,InvalidMessageStreamTag,The length of the statement  "	return new InvalidProtocolBufferException ("Stream of protocol messages had invalid tag. Expected tag is length-delimited field 1."); " is 133.
Long Statement,Abc.Zebus.Routing,BindingKeyPredicateBuilder,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKeyPredicateBuilder.cs,GetPredicate,The length of the statement  "	var finalExpression = subPredicates.Aggregate ((Expression)null' (final' exp) => final == null ? exp : Expression.AndAlso (final' exp)); " is 136.
Long Statement,Abc.Zebus.Routing,BindingKeyPredicateBuilder,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKeyPredicateBuilder.cs,GetOrCreateCacheItem,The length of the statement  "		var routingMembers = type.GetMembers (BindingFlags.Public | BindingFlags.Instance).Select (x => new MemberExtendedInfo { " is 120.
Long Statement,Abc.Zebus.Routing,BindingKeyPredicateBuilder,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKeyPredicateBuilder.cs,GenerateMemberToStringExpression,The length of the statement  "	var getMemberValue = typeof(IConvertible).IsAssignableFrom (memberType) && memberType != typeof(string) ? Expression.Call (memberAccessor (parameterExpression)' _toStringWithFormatMethod' Expression.Constant (CultureInfo.InvariantCulture)) : Expression.Call (memberAccessor (parameterExpression)' _toStringMethod); " is 314.
Long Statement,Abc.Zebus.Routing,BindingKeyToken,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKeyToken.cs,GenerateValueAccessor,The length of the statement  "	var body = typeof(IConvertible).IsAssignableFrom (memberType) && memberType != typeof(string) ? Expression.Call (valueAccessor (castedMessage)' _toStringWithFormatMethod' Expression.Constant (CultureInfo.InvariantCulture)) : Expression.Call (valueAccessor (castedMessage)' _toStringMethod); " is 290.
Long Statement,Abc.Zebus.Serialization,Serializer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Serializer.cs,ComputeHasParameterLessConstructor,The length of the statement  "	return type.GetConstructor (BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic' null' new Type[0]' null) != null; " is 131.
Long Statement,Abc.Zebus.Persistence,PersistentTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Persistence\PersistentTransport.cs,OnTransportMessageReceived,The length of the statement  "		var ackMessage = new TransportMessage (MessageTypeId.PersistenceStoppingAck' new MemoryStream ()' _innerTransport.PeerId' _innerTransport.InboundEndPoint); " is 155.
Long Statement,Abc.Zebus.Persistence,PersistentTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Persistence\PersistentTransport.cs,AckMessage,The length of the statement  "	if (transportMessage.WasPersisted == true || transportMessage.WasPersisted == null && _isPersistent && _messageSendingStrategy.IsMessagePersistent (transportMessage)) { " is 168.
Long Statement,Abc.Zebus.Dispatch.Pipes,PipeInvocation,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Dispatch\Pipes\PipeInvocation.cs,RunAsync,The length of the statement  "	runTask.ContinueWith (task => AfterInvoke (pipeStates' task.IsFaulted' task.Exception)' TaskContinuationOptions.ExecuteSynchronously); " is 134.
Long Statement,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,Send,The length of the statement  "	_logger.ErrorFormat ("Unable to send message' destination peer: {0}' MessageTypeId: {1}' MessageId: {2}"' PeerId' message.MessageTypeId' message.Id); " is 149.
Long Statement,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,CanSendOrConnect,The length of the statement  "			_logger.DebugFormat ("Send or connect ignored in closed state' Peer: {0}' MessageTypeId: {1}' MessageId: {2}"' PeerId' message.MessageTypeId' message.Id); " is 154.
Long Statement,Abc.Zebus.Transport,ZmqEndPoint,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqEndPoint.cs,SelectRandomPort,The length of the statement  "	var forbiddenPorts = directory.GetFiles ("*.inboundport.*").Select (ReadPort).Where (port => port.HasValue).ToHashSet (); " is 121.
Long Statement,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,Disconnect,The length of the statement  "		SafeAdd (_pendingDisconnects' new PendingDisconnect (peerId' SystemDateTime.UtcNow.Add (_configuration.WaitForEndOfStreamAckTimeout))); " is 135.
Long Statement,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,OnEndOfStreamAck,The length of the statement  "		_logger.ErrorFormat ("Received EndOfStreamAck for an unknown socket ({0}) PeerId: {1} (Known peers: {2})"' senderEndPoint' senderId' string.Join ("' "' _outboundSockets.Keys)); " is 176.
Long Statement,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,SendEndOfStreamAck,The length of the statement  "	SafeAdd (_pendingDisconnects' new PendingDisconnect (closingPeer.Id' SystemDateTime.UtcNow.Add (_configuration.WaitForEndOfStreamAckTimeout))); " is 143.
Long Statement,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,IsFromCurrentEnvironment,The length of the statement  "		_logger.ErrorFormat ("Receiving messages from wrong environment: {0} from {1}' discarding message type {2}"' transportMessage.Environment' transportMessage.Originator.SenderEndPoint' transportMessage.MessageTypeId); " is 215.
Long Statement,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,SendEndOfStreamMessages,The length of the statement  "		var endOfStreamMessage = new TransportMessage (MessageTypeId.EndOfStream' new MemoryStream ()' PeerId' InboundEndPoint) { " is 121.
Long Statement,Abc.Zebus.Transport,TransportMessage,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessage.cs,CreateOriginator,The length of the statement  "	return new OriginatorInfo (peerId' peerEndPoint' MessageContext.CurrentMachineName' MessageContext.GetInitiatorUserName ()); " is 124.
Long Statement,Abc.Zebus.Util,TypeUtil,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TypeUtil.cs,FindGenericTypeByName,The length of the statement  "	var genericArguments = typeName.Substring (typeName.IndexOf ("<"' StringComparison.Ordinal)).Trim ('<'' '>').Split (new[] { " is 123.
Long Statement,Abc.Zebus.Util,TypeUtil,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TypeUtil.cs,FindGenericTypeByName,The length of the statement  "	var typeNameWithoutGenericArguments = typeName.Substring (0' typeName.IndexOf ("<"' StringComparison.Ordinal)) + '`' + genericArguments.Length; " is 143.
Long Statement,Abc.Zebus.Util.Extensions,ExtendDictionary,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Extensions\ExtendDictionary.cs,TryRemove,The length of the statement  "	return ((ICollection<KeyValuePair<TKey' TValue>>)dictionary).Remove (new KeyValuePair<TKey' TValue> (key' comparisonValue)); " is 124.
Complex Conditional,Abc.Zebus.Scan,MessageHandlerInvokerLoader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Scan\MessageHandlerInvokerLoader.cs,LoadMessageHandlerInvokers,The conditional expression  "!handlerType.IsClass || handlerType.IsAbstract || !handlerType.IsVisible || !_handlerType.IsAssignableFrom (handlerType)"  is complex.
Complex Conditional,Abc.Zebus.Persistence,PersistentTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Persistence\PersistentTransport.cs,AckMessage,The conditional expression  "transportMessage.WasPersisted == true || transportMessage.WasPersisted == null && _isPersistent && _messageSendingStrategy.IsMessagePersistent (transportMessage)"  is complex.
Empty Catch Block,Abc.Zebus.Util,TypeUtil,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TypeUtil.cs,FindTypeByName,The method has an empty catch block.
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (_randomBytes' 0' newId' 10' _randomBytes.Length);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (offsetBytes' 0' newId' 8' offsetBytes.Length);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 4' newId' 0' 4);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 4' newId' 0' 4);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 2' newId' 4' 2);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 2' newId' 4' 2);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 2' newId' 4' 2);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 0' newId' 6' 2);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: Array.Copy (timestampBytes' 0' newId' 6' 2);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [8] &= 0x3f;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [8] |= 0x80;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [6] &= 0x0f;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [6] |= 0x01 << 4;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [6] |= 0x01 << 4;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,CreateNewSequentialId,The following statement contains a magic number: newId [10] |= 0x80;  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,ConvertEndian,The following statement contains a magic number: for (var index = 0; index < value.Length / 2; ++index) {  	var tmp = value [index];  	value [index] = value [value.Length - index - 1];  	value [value.Length - index - 1] = tmp;  }  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: for (var i = 0; i < 8; i++) {  	mostSigBits = (mostSigBits << 8) | (bytes [i] & 0xff);  }  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: for (var i = 0; i < 8; i++) {  	mostSigBits = (mostSigBits << 8) | (bytes [i] & 0xff);  }  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: mostSigBits = (mostSigBits << 8) | (bytes [i] & 0xff);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: return (mostSigBits & 0x0FFFL) << 48 | ((mostSigBits >> 16) & 0x0FFFFL) << 32 | (long)((ulong)mostSigBits >> 32);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: return (mostSigBits & 0x0FFFL) << 48 | ((mostSigBits >> 16) & 0x0FFFFL) << 32 | (long)((ulong)mostSigBits >> 32);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: return (mostSigBits & 0x0FFFL) << 48 | ((mostSigBits >> 16) & 0x0FFFFL) << 32 | (long)((ulong)mostSigBits >> 32);  
Magic Number,Abc.Zebus,MessageId,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\MessageId.cs,GetJavaTicks,The following statement contains a magic number: return (mostSigBits & 0x0FFFL) << 48 | ((mostSigBits >> 16) & 0x0FFFFL) << 32 | (long)((ulong)mostSigBits >> 32);  
Magic Number,Abc.Zebus,Subscription,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Subscription.cs,GetHashCode,The following statement contains a magic number: unchecked {  	if (_computedHashCode == 0)  		_computedHashCode = (MessageTypeId.GetHashCode () * 397) ^ BindingKey.GetHashCode ();  	return _computedHashCode;  }  
Magic Number,Abc.Zebus,Subscription,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Subscription.cs,GetHashCode,The following statement contains a magic number: if (_computedHashCode == 0)  	_computedHashCode = (MessageTypeId.GetHashCode () * 397) ^ BindingKey.GetHashCode ();  
Magic Number,Abc.Zebus,Subscription,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Subscription.cs,GetHashCode,The following statement contains a magic number: _computedHashCode = (MessageTypeId.GetHashCode () * 397) ^ BindingKey.GetHashCode ();  
Magic Number,Abc.Zebus.Directory,MessageBinding,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\MessageBinding.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (MessageTypeId.GetHashCode () * 397) ^ RoutingKey.GetHashCode ();  }  
Magic Number,Abc.Zebus.Directory,MessageBinding,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\MessageBinding.cs,GetHashCode,The following statement contains a magic number: return (MessageTypeId.GetHashCode () * 397) ^ RoutingKey.GetHashCode ();  
Magic Number,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,UpdateSubscriptions,The following statement contains a magic number: if (!directoryPeers.Any (peer => bus.Send (command' peer).Wait (5.Seconds ())))  	throw new TimeoutException ("Unable to update peer subscriptions on directory");  
Magic Number,Abc.Zebus.Directory,PeerDirectoryClient,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\PeerDirectoryClient.PeerEntry.cs,Unregister,The following statement contains a magic number: if (!_directoryPeers.Any (peer => bus.Send (command' peer).Wait (5.Seconds ())))  	throw new TimeoutException ("Unable to unregister peer on directory");  
Magic Number,Abc.Zebus.Directory,SubscriptionsForType,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\SubscriptionsForType.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (MessageTypeId.GetHashCode () * 397) ^ (BindingKeys.GetHashCode () ?? 0);  }  
Magic Number,Abc.Zebus.Directory,SubscriptionsForType,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Directory\SubscriptionsForType.cs,GetHashCode,The following statement contains a magic number: return (MessageTypeId.GetHashCode () * 397) ^ (BindingKeys.GetHashCode () ?? 0);  
Magic Number,Abc.Zebus.Hosting,PeriodicActionHostInitializer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\PeriodicActionHostInitializer.cs,PeriodicActionHostInitializer,The following statement contains a magic number: ErrorCountBeforePause = 10;  
Magic Number,Abc.Zebus.Hosting,PeriodicActionHostInitializer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\PeriodicActionHostInitializer.cs,PeriodicActionHostInitializer,The following statement contains a magic number: ErrorPauseDuration = 2.Minutes ();  
Magic Number,Abc.Zebus.Hosting,PeriodicActionHostInitializer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\PeriodicActionHostInitializer.cs,BeforeStop,The following statement contains a magic number: if (!_thread.Join (2000))  	_logger.Warn ("Unable to terminate periodic action");  
Magic Number,Abc.Zebus.Hosting,PeriodicActionHostInitializer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Hosting\PeriodicActionHostInitializer.cs,MainLoop,The following statement contains a magic number: if (startWaitingPeriod > 5.Minutes ())  	throw new InvalidOperationException ("Start offset is too large' please review your offset function");  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,TryReadTag,The following statement contains a magic number: number = tag >> 3;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,TryReadTag,The following statement contains a magic number: wireType = (WireType)(tag & 7);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadTag,The following statement contains a magic number: if (bufferPos + 1 <= bufferSize) {  	uint tag = buffer [bufferPos];  	if (tag < 128) {  		bufferPos++;  		if (tag == 0) {  			// If we actually read zero' that's not a valid tag.  			throw InvalidProtocolBufferException.InvalidTag ();  		}  		return tag;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadTag,The following statement contains a magic number: if (tag < 128) {  	bufferPos++;  	if (tag == 0) {  		// If we actually read zero' that's not a valid tag.  		throw InvalidProtocolBufferException.InvalidTag ();  	}  	return tag;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadFloat,The following statement contains a magic number: if (BitConverter.IsLittleEndian && 4 <= bufferSize - bufferPos) {  	float ret = BitConverter.ToSingle (buffer' bufferPos);  	bufferPos += 4;  	return ret;  } else {  	byte[] rawBytes = ReadRawBytes (4);  	if (!BitConverter.IsLittleEndian) {  		ByteArray.Reverse (rawBytes);  	}  	return BitConverter.ToSingle (rawBytes' 0);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadFloat,The following statement contains a magic number: if (BitConverter.IsLittleEndian && 4 <= bufferSize - bufferPos) {  	float ret = BitConverter.ToSingle (buffer' bufferPos);  	bufferPos += 4;  	return ret;  } else {  	byte[] rawBytes = ReadRawBytes (4);  	if (!BitConverter.IsLittleEndian) {  		ByteArray.Reverse (rawBytes);  	}  	return BitConverter.ToSingle (rawBytes' 0);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadFloat,The following statement contains a magic number: if (BitConverter.IsLittleEndian && 4 <= bufferSize - bufferPos) {  	float ret = BitConverter.ToSingle (buffer' bufferPos);  	bufferPos += 4;  	return ret;  } else {  	byte[] rawBytes = ReadRawBytes (4);  	if (!BitConverter.IsLittleEndian) {  		ByteArray.Reverse (rawBytes);  	}  	return BitConverter.ToSingle (rawBytes' 0);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadFloat,The following statement contains a magic number: bufferPos += 4;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: if (bufferSize - bufferPos >= CodedOutputStream.GuidSize) {  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  	bufferPos += 8;  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  	bufferPos += 8;  	return new Guid (guidBuffer);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: if (bufferSize - bufferPos >= CodedOutputStream.GuidSize) {  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  	bufferPos += 8;  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  	bufferPos += 8;  	return new Guid (guidBuffer);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: if (bufferSize - bufferPos >= CodedOutputStream.GuidSize) {  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  	bufferPos += 8;  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  	bufferPos += 8;  	return new Guid (guidBuffer);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: if (bufferSize - bufferPos >= CodedOutputStream.GuidSize) {  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  	bufferPos += 8;  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  	bufferPos += 8;  	return new Guid (guidBuffer);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: if (bufferSize - bufferPos >= CodedOutputStream.GuidSize) {  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  	bufferPos += 8;  	ReadTag ();  	ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  	bufferPos += 8;  	return new Guid (guidBuffer);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: ByteArray.Copy (buffer' bufferPos' guidBuffer' 0' 8);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: bufferPos += 8;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: ByteArray.Copy (buffer' bufferPos' guidBuffer' 8' 8);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadGuid,The following statement contains a magic number: bufferPos += 8;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if (tmp < 128) {  	return (uint)tmp;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = ReadRawByte ()) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = ReadRawByte ()) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= tmp << 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = ReadRawByte ()) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = ReadRawByte ()) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= tmp << 14;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 14;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if ((tmp = ReadRawByte ()) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = ReadRawByte ()) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= tmp << 21;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 21;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: result |= (tmp = ReadRawByte ()) << 28;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (ReadRawByte () < 128) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (ReadRawByte () < 128) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,SlowReadRawVarint32,The following statement contains a magic number: if (ReadRawByte () < 128) {  	return (uint)result;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (bufferPos + 5 > bufferSize) {  	return SlowReadRawVarint32 ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (tmp < 128) {  	return (uint)tmp;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 7;  } else {  	result |= (tmp & 0x7f) << 7;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 14;  	} else {  		result |= (tmp & 0x7f) << 14;  		if ((tmp = buffer [bufferPos++]) < 128) {  			result |= tmp << 21;  		} else {  			result |= (tmp & 0x7f) << 21;  			result |= (tmp = buffer [bufferPos++]) << 28;  			if (tmp >= 128) {  				// Discard upper 32 bits.  				// Note that this has to use ReadRawByte() as we only ensure we've  				// got at least 5 bytes at the start of the method. This lets us  				// use the fast path in more cases' and we rarely hit this section of code.  				for (int i = 0; i < 5; i++) {  					if (ReadRawByte () < 128) {  						return (uint)result;  					}  				}  				throw InvalidProtocolBufferException.MalformedVarint ();  			}  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= tmp << 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 14;  } else {  	result |= (tmp & 0x7f) << 14;  	if ((tmp = buffer [bufferPos++]) < 128) {  		result |= tmp << 21;  	} else {  		result |= (tmp & 0x7f) << 21;  		result |= (tmp = buffer [bufferPos++]) << 28;  		if (tmp >= 128) {  			// Discard upper 32 bits.  			// Note that this has to use ReadRawByte() as we only ensure we've  			// got at least 5 bytes at the start of the method. This lets us  			// use the fast path in more cases' and we rarely hit this section of code.  			for (int i = 0; i < 5; i++) {  				if (ReadRawByte () < 128) {  					return (uint)result;  				}  			}  			throw InvalidProtocolBufferException.MalformedVarint ();  		}  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= tmp << 14;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 14;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if ((tmp = buffer [bufferPos++]) < 128) {  	result |= tmp << 21;  } else {  	result |= (tmp & 0x7f) << 21;  	result |= (tmp = buffer [bufferPos++]) << 28;  	if (tmp >= 128) {  		// Discard upper 32 bits.  		// Note that this has to use ReadRawByte() as we only ensure we've  		// got at least 5 bytes at the start of the method. This lets us  		// use the fast path in more cases' and we rarely hit this section of code.  		for (int i = 0; i < 5; i++) {  			if (ReadRawByte () < 128) {  				return (uint)result;  			}  		}  		throw InvalidProtocolBufferException.MalformedVarint ();  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= tmp << 21;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= (tmp & 0x7f) << 21;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: result |= (tmp = buffer [bufferPos++]) << 28;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	// Note that this has to use ReadRawByte() as we only ensure we've  	// got at least 5 bytes at the start of the method. This lets us  	// use the fast path in more cases' and we rarely hit this section of code.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	// Note that this has to use ReadRawByte() as we only ensure we've  	// got at least 5 bytes at the start of the method. This lets us  	// use the fast path in more cases' and we rarely hit this section of code.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (tmp >= 128) {  	// Discard upper 32 bits.  	// Note that this has to use ReadRawByte() as we only ensure we've  	// got at least 5 bytes at the start of the method. This lets us  	// use the fast path in more cases' and we rarely hit this section of code.  	for (int i = 0; i < 5; i++) {  		if (ReadRawByte () < 128) {  			return (uint)result;  		}  	}  	throw InvalidProtocolBufferException.MalformedVarint ();  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (ReadRawByte () < 128) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	if (ReadRawByte () < 128) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: if (ReadRawByte () < 128) {  	return (uint)result;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (; offset < 32; offset += 7) {  	int b = input.ReadByte ();  	if (b == -1) {  		throw InvalidProtocolBufferException.TruncatedMessage ();  	}  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (; offset < 32; offset += 7) {  	int b = input.ReadByte ();  	if (b == -1) {  		throw InvalidProtocolBufferException.TruncatedMessage ();  	}  	result |= (b & 0x7f) << offset;  	if ((b & 0x80) == 0) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: offset += 7
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (; offset < 64; offset += 7) {  	int b = input.ReadByte ();  	if (b == -1) {  		throw InvalidProtocolBufferException.TruncatedMessage ();  	}  	if ((b & 0x80) == 0) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: for (; offset < 64; offset += 7) {  	int b = input.ReadByte ();  	if (b == -1) {  		throw InvalidProtocolBufferException.TruncatedMessage ();  	}  	if ((b & 0x80) == 0) {  		return (uint)result;  	}  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint32,The following statement contains a magic number: offset += 7
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint64,The following statement contains a magic number: while (shift < 64) {  	byte b = ReadRawByte ();  	result |= (ulong)(b & 0x7F) << shift;  	if ((b & 0x80) == 0) {  		return result;  	}  	shift += 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint64,The following statement contains a magic number: while (shift < 64) {  	byte b = ReadRawByte ();  	result |= (ulong)(b & 0x7F) << shift;  	if ((b & 0x80) == 0) {  		return result;  	}  	shift += 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawVarint64,The following statement contains a magic number: shift += 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian32,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedInputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedInputStream.cs,ReadRawLittleEndian64,The following statement contains a magic number: return b1 | (b2 << 8) | (b3 << 16) | (b4 << 24) | (b5 << 32) | (b6 << 40) | (b7 << 48) | (b8 << 56);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeInt32Size,The following statement contains a magic number: if (value >= 0) {  	return ComputeRawVarint32Size ((uint)value);  } else {  	// Must sign-extend.  	return 10;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeInt32Size,The following statement contains a magic number: return 10;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 7)) == 0) {  	return 1;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 14)) == 0) {  	return 2;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 14)) == 0) {  	return 2;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: return 2;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 21)) == 0) {  	return 3;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 21)) == 0) {  	return 3;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: return 3;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 28)) == 0) {  	return 4;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: if ((value & (0xffffffff << 28)) == 0) {  	return 4;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: return 4;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint32Size,The following statement contains a magic number: return 5;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 7)) == 0) {  	return 1;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 14)) == 0) {  	return 2;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 14)) == 0) {  	return 2;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 2;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 21)) == 0) {  	return 3;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 21)) == 0) {  	return 3;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 3;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 28)) == 0) {  	return 4;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 28)) == 0) {  	return 4;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 4;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 35)) == 0) {  	return 5;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 35)) == 0) {  	return 5;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 5;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 42)) == 0) {  	return 6;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 42)) == 0) {  	return 6;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 6;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 49)) == 0) {  	return 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 49)) == 0) {  	return 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 56)) == 0) {  	return 8;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 56)) == 0) {  	return 8;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 8;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 63)) == 0) {  	return 9;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: if ((value & (0xffffffffffffffffL << 63)) == 0) {  	return 9;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 9;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,ComputeRawVarint64Size,The following statement contains a magic number: return 10;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: if (buffer.Length - position >= 4) {  	buffer [position++] = rawBytes [0];  	buffer [position++] = rawBytes [1];  	buffer [position++] = rawBytes [2];  	buffer [position++] = rawBytes [3];  } else {  	WriteRawBytes (rawBytes' 0' 4);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: if (buffer.Length - position >= 4) {  	buffer [position++] = rawBytes [0];  	buffer [position++] = rawBytes [1];  	buffer [position++] = rawBytes [2];  	buffer [position++] = rawBytes [3];  } else {  	WriteRawBytes (rawBytes' 0' 4);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: if (buffer.Length - position >= 4) {  	buffer [position++] = rawBytes [0];  	buffer [position++] = rawBytes [1];  	buffer [position++] = rawBytes [2];  	buffer [position++] = rawBytes [3];  } else {  	WriteRawBytes (rawBytes' 0' 4);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: if (buffer.Length - position >= 4) {  	buffer [position++] = rawBytes [0];  	buffer [position++] = rawBytes [1];  	buffer [position++] = rawBytes [2];  	buffer [position++] = rawBytes [3];  } else {  	WriteRawBytes (rawBytes' 0' 4);  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: buffer [position++] = rawBytes [2];  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: buffer [position++] = rawBytes [3];  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteFloat,The following statement contains a magic number: WriteRawBytes (rawBytes' 0' 4);  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: if (value < 128 && position < buffer.Length) {  	buffer [position++] = (byte)value;  	return;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: while (value > 127 && position < buffer.Length) {  	buffer [position++] = (byte)((value & 0x7F) | 0x80);  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: while (value > 127 && position < buffer.Length) {  	buffer [position++] = (byte)((value & 0x7F) | 0x80);  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: value >>= 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: while (value > 127) {  	WriteRawByte ((byte)((value & 0x7F) | 0x80));  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: while (value > 127) {  	WriteRawByte ((byte)((value & 0x7F) | 0x80));  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint32,The following statement contains a magic number: value >>= 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: while (value > 127 && position < buffer.Length) {  	buffer [position++] = (byte)((value & 0x7F) | 0x80);  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: while (value > 127 && position < buffer.Length) {  	buffer [position++] = (byte)((value & 0x7F) | 0x80);  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: value >>= 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: while (value > 127) {  	WriteRawByte ((byte)((value & 0x7F) | 0x80));  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: while (value > 127) {  	WriteRawByte ((byte)((value & 0x7F) | 0x80));  	value >>= 7;  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawVarint64,The following statement contains a magic number: value >>= 7;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: if (position + 4 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: WriteRawByte ((byte)(value >> 8));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: WriteRawByte ((byte)(value >> 16));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: WriteRawByte ((byte)(value >> 24));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 8));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 16));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian32,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 24));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: if (position + 8 > buffer.Length) {  	WriteRawByte ((byte)value);  	WriteRawByte ((byte)(value >> 8));  	WriteRawByte ((byte)(value >> 16));  	WriteRawByte ((byte)(value >> 24));  	WriteRawByte ((byte)(value >> 32));  	WriteRawByte ((byte)(value >> 40));  	WriteRawByte ((byte)(value >> 48));  	WriteRawByte ((byte)(value >> 56));  } else {  	buffer [position++] = ((byte)value);  	buffer [position++] = ((byte)(value >> 8));  	buffer [position++] = ((byte)(value >> 16));  	buffer [position++] = ((byte)(value >> 24));  	buffer [position++] = ((byte)(value >> 32));  	buffer [position++] = ((byte)(value >> 40));  	buffer [position++] = ((byte)(value >> 48));  	buffer [position++] = ((byte)(value >> 56));  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 8));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 16));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 24));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 32));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 40));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 48));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: WriteRawByte ((byte)(value >> 56));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 8));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 16));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 24));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 32));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 40));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 48));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteRawLittleEndian64,The following statement contains a magic number: buffer [position++] = ((byte)(value >> 56));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: buffer [position++] = 1 << 3 | 1;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: for (var i = 0; i < 8; i++) {  	buffer [position++] = blob [i];  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: buffer [position++] = 2 << 3 | 1;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: buffer [position++] = 2 << 3 | 1;  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: for (var i = 8; i < 16; i++) {  	buffer [position++] = blob [i];  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,WriteGuid,The following statement contains a magic number: for (var i = 8; i < 16; i++) {  	buffer [position++] = blob [i];  }  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,EncodeZigZag32,The following statement contains a magic number: return (uint)((n << 1) ^ (n >> 31));  
Magic Number,Abc.Zebus.Serialization.Protobuf,CodedOutputStream,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Serialization\Protobuf\CodedOutputStream.ComputeSize.cs,EncodeZigZag64,The following statement contains a magic number: return (ulong)((n << 1) ^ (n >> 63));  
Magic Number,Abc.Zebus.Routing,BindingKey,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKey.cs,GetHashCode,The following statement contains a magic number: for (var partIndex = 1; partIndex < _parts.Length; ++partIndex) {  	hashCode = (hashCode * 397) ^ _parts [partIndex].GetHashCode ();  }  
Magic Number,Abc.Zebus.Routing,BindingKey,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Routing\BindingKey.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ _parts [partIndex].GetHashCode ();  
Magic Number,Abc.Zebus.Persistence,PersistentTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Persistence\PersistentTransport.cs,Stop,The following statement contains a magic number: if (_receptionThread != null && !_receptionThread.Join (30.Second ()))  	_logger.WarnFormat ("Unable to stop reception thread");  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: while (!input.IsAtEnd && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		transportMessage.Id = ReadMessageId (input);  		break;  	case 2:  		transportMessage.MessageTypeId = ReadMessageTypeId (input);  		break;  	case 3:  		transportMessage.Content = ReadStream (input);  		break;  	case 4:  		transportMessage.Originator = ReadOriginatorInfo (input);  		break;  	case 5:  		transportMessage.Environment = input.ReadString ();  		break;  	case 6:  		transportMessage.WasPersisted = input.ReadBool ();  		break;  	case 7:  		transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadTransportMessage,The following statement contains a magic number: switch (number) {  case 1:  	transportMessage.Id = ReadMessageId (input);  	break;  case 2:  	transportMessage.MessageTypeId = ReadMessageTypeId (input);  	break;  case 3:  	transportMessage.Content = ReadStream (input);  	break;  case 4:  	transportMessage.Originator = ReadOriginatorInfo (input);  	break;  case 5:  	transportMessage.Environment = input.ReadString ();  	break;  case 6:  	transportMessage.WasPersisted = input.ReadBool ();  	break;  case 7:  	transportMessage.PersistentPeerIds = ReadPeerIds (input' transportMessage.PersistentPeerIds);  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadOriginatorInfo,The following statement contains a magic number: while (input.Position < endPosition && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		senderId = ReadPeerId (input);  		break;  	case 2:  		senderEndPoint = input.ReadString ();  		break;  	case 5:  		initiatorUserName = input.ReadString ();  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadOriginatorInfo,The following statement contains a magic number: while (input.Position < endPosition && input.TryReadTag (out number' out wireType)) {  	switch (number) {  	case 1:  		senderId = ReadPeerId (input);  		break;  	case 2:  		senderEndPoint = input.ReadString ();  		break;  	case 5:  		initiatorUserName = input.ReadString ();  		break;  	default:  		SkipUnknown (input' wireType);  		break;  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadOriginatorInfo,The following statement contains a magic number: switch (number) {  case 1:  	senderId = ReadPeerId (input);  	break;  case 2:  	senderEndPoint = input.ReadString ();  	break;  case 5:  	initiatorUserName = input.ReadString ();  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageReader,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageReader.cs,ReadOriginatorInfo,The following statement contains a magic number: switch (number) {  case 1:  	senderId = ReadPeerId (input);  	break;  case 2:  	senderEndPoint = input.ReadString ();  	break;  case 5:  	initiatorUserName = input.ReadString ();  	break;  default:  	SkipUnknown (input' wireType);  	break;  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (4 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (4 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (4 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: if (environment != null) {  	output.WriteRawTag (5 << 3 | 2);  	var environmentLength = GetUtf8ByteCount (environment);  	output.WriteString (environment' environmentLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: if (environment != null) {  	output.WriteRawTag (5 << 3 | 2);  	var environmentLength = GetUtf8ByteCount (environment);  	output.WriteString (environment' environmentLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: if (environment != null) {  	output.WriteRawTag (5 << 3 | 2);  	var environmentLength = GetUtf8ByteCount (environment);  	output.WriteString (environment' environmentLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteTransportMessage,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: for (var index = 0; index < peerIds.Count; index++) {  	var peerIdString = peerIds [index].ToString ();  	if (string.IsNullOrEmpty (peerIdString))  		continue;  	output.WriteRawTag (7 << 3 | 2);  	var peerIdStringLength = GetUtf8ByteCount (peerIdString);  	var peerIdLength = 1 + CodedOutputStream.ComputeStringSize (peerIdStringLength);  	output.WriteLength (peerIdLength);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (peerIdString' peerIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: for (var index = 0; index < peerIds.Count; index++) {  	var peerIdString = peerIds [index].ToString ();  	if (string.IsNullOrEmpty (peerIdString))  		continue;  	output.WriteRawTag (7 << 3 | 2);  	var peerIdStringLength = GetUtf8ByteCount (peerIdString);  	var peerIdLength = 1 + CodedOutputStream.ComputeStringSize (peerIdStringLength);  	output.WriteLength (peerIdLength);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (peerIdString' peerIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: for (var index = 0; index < peerIds.Count; index++) {  	var peerIdString = peerIds [index].ToString ();  	if (string.IsNullOrEmpty (peerIdString))  		continue;  	output.WriteRawTag (7 << 3 | 2);  	var peerIdStringLength = GetUtf8ByteCount (peerIdString);  	var peerIdLength = 1 + CodedOutputStream.ComputeStringSize (peerIdStringLength);  	output.WriteLength (peerIdLength);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (peerIdString' peerIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: for (var index = 0; index < peerIds.Count; index++) {  	var peerIdString = peerIds [index].ToString ();  	if (string.IsNullOrEmpty (peerIdString))  		continue;  	output.WriteRawTag (7 << 3 | 2);  	var peerIdStringLength = GetUtf8ByteCount (peerIdString);  	var peerIdLength = 1 + CodedOutputStream.ComputeStringSize (peerIdStringLength);  	output.WriteLength (peerIdLength);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (peerIdString' peerIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: for (var index = 0; index < peerIds.Count; index++) {  	var peerIdString = peerIds [index].ToString ();  	if (string.IsNullOrEmpty (peerIdString))  		continue;  	output.WriteRawTag (7 << 3 | 2);  	var peerIdStringLength = GetUtf8ByteCount (peerIdString);  	var peerIdLength = 1 + CodedOutputStream.ComputeStringSize (peerIdStringLength);  	output.WriteLength (peerIdLength);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (peerIdString' peerIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: output.WriteRawTag (7 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: output.WriteRawTag (7 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: output.WriteRawTag (7 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WritePersistentPeerIds,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (messageTypeId.FullName == null) {  	output.WriteLength (0);  } else {  	var fullNameLength = GetUtf8ByteCount (messageTypeId.FullName);  	var size = 1 + CodedOutputStream.ComputeStringSize (fullNameLength);  	output.WriteLength (size);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (messageTypeId.FullName' fullNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (messageTypeId.FullName == null) {  	output.WriteLength (0);  } else {  	var fullNameLength = GetUtf8ByteCount (messageTypeId.FullName);  	var size = 1 + CodedOutputStream.ComputeStringSize (fullNameLength);  	output.WriteLength (size);  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (messageTypeId.FullName' fullNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (!string.IsNullOrEmpty (senderIdString)) {  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (senderIdString' senderIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (!string.IsNullOrEmpty (senderIdString)) {  	output.WriteRawTag (1 << 3 | 2);  	output.WriteString (senderIdString' senderIdStringLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (1 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderEndPoint != null) {  	output.WriteRawTag (2 << 3 | 2);  	output.WriteString (originatorInfo.SenderEndPoint' senderEndPointLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderEndPoint != null) {  	output.WriteRawTag (2 << 3 | 2);  	output.WriteString (originatorInfo.SenderEndPoint' senderEndPointLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderEndPoint != null) {  	output.WriteRawTag (2 << 3 | 2);  	output.WriteString (originatorInfo.SenderEndPoint' senderEndPointLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (2 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderMachineName != null) {  	output.WriteRawTag (3 << 3 | 2);  	output.WriteString (originatorInfo.SenderMachineName' senderMachineNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderMachineName != null) {  	output.WriteRawTag (3 << 3 | 2);  	output.WriteString (originatorInfo.SenderMachineName' senderMachineNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.SenderMachineName != null) {  	output.WriteRawTag (3 << 3 | 2);  	output.WriteString (originatorInfo.SenderMachineName' senderMachineNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (3 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.InitiatorUserName != null) {  	output.WriteRawTag (5 << 3 | 2);  	output.WriteString (originatorInfo.InitiatorUserName' initiatorUserNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.InitiatorUserName != null) {  	output.WriteRawTag (5 << 3 | 2);  	output.WriteString (originatorInfo.InitiatorUserName' initiatorUserNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: if (originatorInfo.InitiatorUserName != null) {  	output.WriteRawTag (5 << 3 | 2);  	output.WriteString (originatorInfo.InitiatorUserName' initiatorUserNameLength);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,Write,The following statement contains a magic number: output.WriteRawTag (5 << 3 | 2);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,GetUtf8ByteCount,The following statement contains a magic number: fixed (char* c = s) {  	for (var index = 0; index < s.Length; index++) {  		if (c [index] >= 128)  			return CodedOutputStream.Utf8Encoding.GetByteCount (c' s.Length);  	}  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,GetUtf8ByteCount,The following statement contains a magic number: for (var index = 0; index < s.Length; index++) {  	if (c [index] >= 128)  		return CodedOutputStream.Utf8Encoding.GetByteCount (c' s.Length);  }  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,GetUtf8ByteCount,The following statement contains a magic number: if (c [index] >= 128)  	return CodedOutputStream.Utf8Encoding.GetByteCount (c' s.Length);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteWasPersisted,The following statement contains a magic number: output.WriteRawTag (6 << 3 | 0);  
Magic Number,Abc.Zebus.Transport,TransportMessageWriter,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\TransportMessageWriter.cs,WriteWasPersisted,The following statement contains a magic number: output.WriteRawTag (6 << 3 | 0);  
Magic Number,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,ConnectFor,The following statement contains a magic number: try {  	_socket = _context.CreateSocket (SocketType.PUSH);  	_socket.SendHighWatermark = _options.SendHighWaterMark;  	_socket.TcpKeepalive = TcpKeepaliveBehaviour.Enable;  	_socket.TcpKeepaliveIdle = 30;  	_socket.TcpKeepaliveIntvl = 3;  	_socket.SetPeerId (PeerId);  	_socket.Connect (EndPoint);  	IsConnected = true;  	_logger.InfoFormat ("Socket connected' Peer: {0}' EndPoint: {1}"' PeerId' EndPoint);  } catch (Exception ex) {  	_socket.Dispose ();  	_socket = null;  	IsConnected = false;  	_logger.ErrorFormat ("Unable to connect socket' Peer: {0}' EndPoint: {1}' Exception: {2}"' PeerId' EndPoint' ex);  	SwitchToClosedState (_options.ClosedStateDurationAfterConnectFailure);  }  
Magic Number,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,ConnectFor,The following statement contains a magic number: try {  	_socket = _context.CreateSocket (SocketType.PUSH);  	_socket.SendHighWatermark = _options.SendHighWaterMark;  	_socket.TcpKeepalive = TcpKeepaliveBehaviour.Enable;  	_socket.TcpKeepaliveIdle = 30;  	_socket.TcpKeepaliveIntvl = 3;  	_socket.SetPeerId (PeerId);  	_socket.Connect (EndPoint);  	IsConnected = true;  	_logger.InfoFormat ("Socket connected' Peer: {0}' EndPoint: {1}"' PeerId' EndPoint);  } catch (Exception ex) {  	_socket.Dispose ();  	_socket = null;  	IsConnected = false;  	_logger.ErrorFormat ("Unable to connect socket' Peer: {0}' EndPoint: {1}' Exception: {2}"' PeerId' EndPoint' ex);  	SwitchToClosedState (_options.ClosedStateDurationAfterConnectFailure);  }  
Magic Number,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,ConnectFor,The following statement contains a magic number: _socket.TcpKeepaliveIdle = 30;  
Magic Number,Abc.Zebus.Transport,ZmqOutboundSocket,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqOutboundSocket.cs,ConnectFor,The following statement contains a magic number: _socket.TcpKeepaliveIntvl = 3;  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,Stop,The following statement contains a magic number: if (!_disconnectThread.Join (30.Seconds ()))  	_logger.Error ("Unable to terminate disconnect thread");  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,Stop,The following statement contains a magic number: if (!_outboundThread.Join (30.Seconds ()))  	_logger.Error ("Unable to terminate outbound thread");  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,Stop,The following statement contains a magic number: if (!_inboundThread.Join (30.Seconds ()))  	_logger.Error ("Unable to terminate inbound thread");  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,GracefullyDisconnectInboundSocket,The following statement contains a magic number: while ((inputStream = inboundSocket.Receive (100.Milliseconds ())) != null)  	DeserializeAndForwardTransportMessage (inputStream);  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,DisconnectProc,The following statement contains a magic number: foreach (var pendingDisconnect in _pendingDisconnects.GetConsumingEnumerable ()) {  	while (pendingDisconnect.DisconnectTimeUtc > SystemDateTime.UtcNow) {  		if (_pendingDisconnects.IsAddingCompleted)  			return;  		Thread.Sleep (500);  	}  	SafeAdd (_outboundSocketActions' OutboundSocketAction.Disconnect (pendingDisconnect.PeerId));  }  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,DisconnectProc,The following statement contains a magic number: while (pendingDisconnect.DisconnectTimeUtc > SystemDateTime.UtcNow) {  	if (_pendingDisconnects.IsAddingCompleted)  		return;  	Thread.Sleep (500);  }  
Magic Number,Abc.Zebus.Transport,ZmqTransport,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqTransport.cs,DisconnectProc,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: ReadTimeout = 300.Milliseconds ();  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: SendHighWaterMark = 20000;  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: SendTimeout = 100.Milliseconds ();  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: SendRetriesBeforeSwitchingToClosedState = 2;  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: ClosedStateDurationAfterSendFailure = 15.Seconds ();  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: ClosedStateDurationAfterConnectFailure = 2.Minutes ();  
Magic Number,Abc.Zebus.Transport,ZmqSocketOptions,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Transport\ZmqSocketOptions.cs,ZmqSocketOptions,The following statement contains a magic number: ReceiveHighWaterMark = 20000;  
Magic Number,Abc.Zebus.Util,TimeSpanCreation,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TimeSpanCreation.cs,Weeks,The following statement contains a magic number: return TimeSpan.FromDays (i * 7);  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: unchecked {  	const int p = 16777619;  	int hash = (int)2166136261;  	for (int i = 0; i < _length; i++)  		hash = (hash ^ _data [i]) * p;  	hash += hash << 13;  	hash ^= hash >> 7;  	hash += hash << 3;  	hash ^= hash >> 17;  	hash += hash << 5;  	return hash;  }  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: hash += hash << 13;  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: hash ^= hash >> 7;  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: hash += hash << 3;  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: hash ^= hash >> 17;  
Magic Number,Abc.Zebus.Util,Buffer,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Buffer.cs,GetHashCode,The following statement contains a magic number: hash += hash << 5;  
Magic Number,Abc.Zebus.Util,TypeUtil,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\TypeUtil.cs,GetFullnameWithNoAssemblyOrVersion,The following statement contains a magic number: builder.Length -= 2;  
Magic Number,Abc.Zebus.Util.Collections,FlushableBlockingCollection,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Collections\FlushableBlockingCollection.cs,GetConsumingEnumerable,The following statement contains a magic number: while (!IsAddingCompletedAndEmpty) {  	T item;  	if (_queue.TryDequeue (out item)) {  		items.Clear ();  		items.Add (item);  		while (items.Count < maxSize && _queue.TryDequeue (out item)) {  			items.Add (item);  		}  		yield return items;  	} else {  		if (_addSignal.Wait (200))  			_addSignal.Reset ();  	}  }  
Magic Number,Abc.Zebus.Util.Collections,FlushableBlockingCollection,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Collections\FlushableBlockingCollection.cs,GetConsumingEnumerable,The following statement contains a magic number: if (_queue.TryDequeue (out item)) {  	items.Clear ();  	items.Add (item);  	while (items.Count < maxSize && _queue.TryDequeue (out item)) {  		items.Add (item);  	}  	yield return items;  } else {  	if (_addSignal.Wait (200))  		_addSignal.Reset ();  }  
Magic Number,Abc.Zebus.Util.Collections,FlushableBlockingCollection,F:\newReposMay17\Abc-Arbitrage_Zebus\src\Abc.Zebus\Util\Collections\FlushableBlockingCollection.cs,GetConsumingEnumerable,The following statement contains a magic number: if (_addSignal.Wait (200))  	_addSignal.Reset ();  
