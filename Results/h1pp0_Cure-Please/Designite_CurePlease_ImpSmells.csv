Implementation smell,Namespace,Class,File,Method,Description
Long Method,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The method has 222 lines of code.
Long Method,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The method has 967 lines of code.
Long Method,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The method has 173 lines of code.
Long Method,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The method has 175 lines of code.
Long Method,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,plDebuffEnabled_CheckedChanged,The method has 178 lines of code.
Long Method,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,monitoredDebuffEnabled_CheckedChanged,The method has 190 lines of code.
Long Method,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The method has 173 lines of code.
Complex Method,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,Cyclomatic complexity of the method is 22
Complex Method,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,Cyclomatic complexity of the method is 22
Complex Method,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,Cyclomatic complexity of the method is 232
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,setinstance_Click,The length of the statement  "		MessageBox.Show ("Unable to locate FFACE.dll or FFACETools.dll\nMake sure both files are in the same directory as the application"' "Error"); " is 141.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,setinstance2_Click,The length of the statement  "		MessageBox.Show ("Unable to locate FFACE.dll or FFACETools.dll\nMake sure both files are in the same directory as the application"' "Error"); " is 141.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus == LoginStatus.Loading || _FFACEMonitored.Player.GetLoginStatus == LoginStatus.Loading) { " is 124.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,plPosition_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) { " is 351.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) { " is 355.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) { " is 355.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) { " is 356.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) { " is 355.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The length of the statement  "	else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) { " is 351.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingPossible,The length of the statement  "	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) > 0) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0) || (_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [partyMemberId].ID) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0)) { " is 364.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus == LoginStatus.Loading || _FFACEMonitored.Player.GetLoginStatus == LoginStatus.Loading) { " is 124.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "	&& _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) { " is 135.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "	&& _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) { " is 131.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "	if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) { " is 277.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) { " is 173.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) { " is 131.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) { " is 244.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) { " is 226.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 131.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) { " is 143.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) { " is 136.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 143.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 130.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 134.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 130.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 133.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 135.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 131.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) { " is 135.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 130.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 130.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 128.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 128.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 147.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 145.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 145.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 148.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 148.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 136.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 138.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "		if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) { " is 164.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 140.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) { " is 127.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) { " is 129.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) { " is 162.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) { " is 157.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) { " is 150.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 157.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) { " is 156.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 144.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 148.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 144.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 147.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 149.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) { " is 145.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) { " is 149.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 144.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 144.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 142.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 156.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 156.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 161.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 159.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 159.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 162.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 162.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 156.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 150.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 146.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) { " is 152.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) { " is 140.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) { " is 148.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) { " is 149.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) { " is 149.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "			if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 197.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) { " is 131.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "				if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 203.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) { " is 134.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "					if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 199.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) { " is 132.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 205.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) { " is 135.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 203.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) { " is 137.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 201.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) { " is 135.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 207.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) { " is 141.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 205.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) { " is 139.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 207.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) { " is 140.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 203.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) { " is 276.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 201.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) { " is 272.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 201.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) { " is 274.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) { " is 207.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "							else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) { " is 284.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) { " is 163.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) { " is 168.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) { " is 151.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) { " is 203.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) { " is 156.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) { " is 223.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The length of the statement  "						else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) { " is 253.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingLockTimer_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingStatusCheck_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingUnlockTimer_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionUnlockTimer_Tick,The length of the statement  "	if (_FFACEPL.Player.GetLoginStatus != LoginStatus.LoggedIn || _FFACEMonitored.Player.GetLoginStatus != LoginStatus.LoggedIn) { " is 126.
Long Statement,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,button1_Click,The length of the statement  "		MessageBox.Show (id.ToString () + ": " + _FFACEMonitored.PartyMember [id].Name + ": " + _FFACEMonitored.PartyMember [id].HPPCurrent.ToString () + ": " + _FFACEMonitored.PartyMember [id].Active.ToString ()); " is 206.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The conditional expression  "(Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingPossible,The conditional expression  "(_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) > 0) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0) || (_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [partyMemberId].ID) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "Settings.Default.divineSealBox && _FFACEPL.Player.MPPCurrent <= 11 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)"  is complex.
Complex Conditional,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The conditional expression  "(Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)"  is complex.
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (_FFACEPL.Player.GetLoginStatus == LoginStatus.Loading || _FFACEMonitored.Player.GetLoginStatus == LoginStatus.Loading) {  	// We zoned out so wait 15 seconds before continuing any type of action  	Thread.Sleep (15000);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: Thread.Sleep (15000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (2)) {  	player2.Text = _FFACEMonitored.PartyMember [2].Name;  	player2.Enabled = true;  	player2optionsButton.Enabled = true;  	player2buffsButton.Enabled = true;  }  else {  	player2.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player2.Enabled = false;  	player2HP.Value = 0;  	player2optionsButton.Enabled = false;  	player2buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (2)) {  	player2.Text = _FFACEMonitored.PartyMember [2].Name;  	player2.Enabled = true;  	player2optionsButton.Enabled = true;  	player2buffsButton.Enabled = true;  }  else {  	player2.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player2.Enabled = false;  	player2HP.Value = 0;  	player2optionsButton.Enabled = false;  	player2buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player2.Text = _FFACEMonitored.PartyMember [2].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (3)) {  	player3.Text = _FFACEMonitored.PartyMember [3].Name;  	player3.Enabled = true;  	player3optionsButton.Enabled = true;  	player3buffsButton.Enabled = true;  }  else {  	player3.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player3.Enabled = false;  	player3HP.Value = 0;  	player3optionsButton.Enabled = false;  	player3buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (3)) {  	player3.Text = _FFACEMonitored.PartyMember [3].Name;  	player3.Enabled = true;  	player3optionsButton.Enabled = true;  	player3buffsButton.Enabled = true;  }  else {  	player3.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player3.Enabled = false;  	player3HP.Value = 0;  	player3optionsButton.Enabled = false;  	player3buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player3.Text = _FFACEMonitored.PartyMember [3].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (4)) {  	player4.Text = _FFACEMonitored.PartyMember [4].Name;  	player4.Enabled = true;  	player4optionsButton.Enabled = true;  	player4buffsButton.Enabled = true;  }  else {  	player4.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player4.Enabled = false;  	player4HP.Value = 0;  	player4optionsButton.Enabled = false;  	player4buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (4)) {  	player4.Text = _FFACEMonitored.PartyMember [4].Name;  	player4.Enabled = true;  	player4optionsButton.Enabled = true;  	player4buffsButton.Enabled = true;  }  else {  	player4.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player4.Enabled = false;  	player4HP.Value = 0;  	player4optionsButton.Enabled = false;  	player4buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player4.Text = _FFACEMonitored.PartyMember [4].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (5)) {  	player5.Text = _FFACEMonitored.PartyMember [5].Name;  	player5.Enabled = true;  	player5optionsButton.Enabled = true;  	player5buffsButton.Enabled = true;  }  else {  	player5.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player5.Enabled = false;  	player5HP.Value = 0;  	player5optionsButton.Enabled = false;  	player5buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (5)) {  	player5.Text = _FFACEMonitored.PartyMember [5].Name;  	player5.Enabled = true;  	player5optionsButton.Enabled = true;  	player5buffsButton.Enabled = true;  }  else {  	player5.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player5.Enabled = false;  	player5HP.Value = 0;  	player5optionsButton.Enabled = false;  	player5buffsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player5.Text = _FFACEMonitored.PartyMember [5].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (6)) {  	player6.Text = _FFACEMonitored.PartyMember [6].Name;  	player6.Enabled = true;  	player6optionsButton.Enabled = true;  }  else {  	player6.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player6.Enabled = false;  	player6HP.Value = 0;  	player6optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (6)) {  	player6.Text = _FFACEMonitored.PartyMember [6].Name;  	player6.Enabled = true;  	player6optionsButton.Enabled = true;  }  else {  	player6.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player6.Enabled = false;  	player6HP.Value = 0;  	player6optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player6.Text = _FFACEMonitored.PartyMember [6].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (7)) {  	player7.Text = _FFACEMonitored.PartyMember [7].Name;  	player7.Enabled = true;  	player7optionsButton.Enabled = true;  }  else {  	player7.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player7.Enabled = false;  	player7HP.Value = 0;  	player7optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (7)) {  	player7.Text = _FFACEMonitored.PartyMember [7].Name;  	player7.Enabled = true;  	player7optionsButton.Enabled = true;  }  else {  	player7.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player7.Enabled = false;  	player7HP.Value = 0;  	player7optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player7.Text = _FFACEMonitored.PartyMember [7].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (8)) {  	player8.Text = _FFACEMonitored.PartyMember [8].Name;  	player8.Enabled = true;  	player8optionsButton.Enabled = true;  }  else {  	player8.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player8.Enabled = false;  	player8HP.Value = 0;  	player8optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (8)) {  	player8.Text = _FFACEMonitored.PartyMember [8].Name;  	player8.Enabled = true;  	player8optionsButton.Enabled = true;  }  else {  	player8.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player8.Enabled = false;  	player8HP.Value = 0;  	player8optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player8.Text = _FFACEMonitored.PartyMember [8].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (9)) {  	player9.Text = _FFACEMonitored.PartyMember [9].Name;  	player9.Enabled = true;  	player9optionsButton.Enabled = true;  }  else {  	player9.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player9.Enabled = false;  	player9HP.Value = 0;  	player9optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (9)) {  	player9.Text = _FFACEMonitored.PartyMember [9].Name;  	player9.Enabled = true;  	player9optionsButton.Enabled = true;  }  else {  	player9.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player9.Enabled = false;  	player9HP.Value = 0;  	player9optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player9.Text = _FFACEMonitored.PartyMember [9].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (10)) {  	player10.Text = _FFACEMonitored.PartyMember [10].Name;  	player10.Enabled = true;  	player10optionsButton.Enabled = true;  }  else {  	player10.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player10.Enabled = false;  	player10HP.Value = 0;  	player10optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (10)) {  	player10.Text = _FFACEMonitored.PartyMember [10].Name;  	player10.Enabled = true;  	player10optionsButton.Enabled = true;  }  else {  	player10.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player10.Enabled = false;  	player10HP.Value = 0;  	player10optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player10.Text = _FFACEMonitored.PartyMember [10].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (11)) {  	player11.Text = _FFACEMonitored.PartyMember [11].Name;  	player11.Enabled = true;  	player11optionsButton.Enabled = true;  }  else {  	player11.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player11.Enabled = false;  	player11HP.Value = 0;  	player11optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (11)) {  	player11.Text = _FFACEMonitored.PartyMember [11].Name;  	player11.Enabled = true;  	player11optionsButton.Enabled = true;  }  else {  	player11.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player11.Enabled = false;  	player11HP.Value = 0;  	player11optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player11.Text = _FFACEMonitored.PartyMember [11].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (12)) {  	player12.Text = _FFACEMonitored.PartyMember [12].Name;  	player12.Enabled = true;  	player12optionsButton.Enabled = true;  }  else {  	player12.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player12.Enabled = false;  	player12HP.Value = 0;  	player12optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (12)) {  	player12.Text = _FFACEMonitored.PartyMember [12].Name;  	player12.Enabled = true;  	player12optionsButton.Enabled = true;  }  else {  	player12.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player12.Enabled = false;  	player12HP.Value = 0;  	player12optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player12.Text = _FFACEMonitored.PartyMember [12].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (13)) {  	player13.Text = _FFACEMonitored.PartyMember [13].Name;  	player13.Enabled = true;  	player13optionsButton.Enabled = true;  }  else {  	player13.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player13.Enabled = false;  	player13HP.Value = 0;  	player13optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (13)) {  	player13.Text = _FFACEMonitored.PartyMember [13].Name;  	player13.Enabled = true;  	player13optionsButton.Enabled = true;  }  else {  	player13.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player13.Enabled = false;  	player13HP.Value = 0;  	player13optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player13.Text = _FFACEMonitored.PartyMember [13].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (14)) {  	player14.Text = _FFACEMonitored.PartyMember [14].Name;  	player14.Enabled = true;  	player14optionsButton.Enabled = true;  }  else {  	player14.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player14.Enabled = false;  	player14HP.Value = 0;  	player14optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (14)) {  	player14.Text = _FFACEMonitored.PartyMember [14].Name;  	player14.Enabled = true;  	player14optionsButton.Enabled = true;  }  else {  	player14.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player14.Enabled = false;  	player14HP.Value = 0;  	player14optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player14.Text = _FFACEMonitored.PartyMember [14].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (15)) {  	player15.Text = _FFACEMonitored.PartyMember [15].Name;  	player15.Enabled = true;  	player15optionsButton.Enabled = true;  }  else {  	player15.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player15.Enabled = false;  	player15HP.Value = 0;  	player15optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (15)) {  	player15.Text = _FFACEMonitored.PartyMember [15].Name;  	player15.Enabled = true;  	player15optionsButton.Enabled = true;  }  else {  	player15.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player15.Enabled = false;  	player15HP.Value = 0;  	player15optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player15.Text = _FFACEMonitored.PartyMember [15].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (16)) {  	player16.Text = _FFACEMonitored.PartyMember [16].Name;  	player16.Enabled = true;  	player16optionsButton.Enabled = true;  }  else {  	player16.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player16.Enabled = false;  	player16HP.Value = 0;  	player16optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (16)) {  	player16.Text = _FFACEMonitored.PartyMember [16].Name;  	player16.Enabled = true;  	player16optionsButton.Enabled = true;  }  else {  	player16.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player16.Enabled = false;  	player16HP.Value = 0;  	player16optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player16.Text = _FFACEMonitored.PartyMember [16].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (17)) {  	player17.Text = _FFACEMonitored.PartyMember [17].Name;  	player17.Enabled = true;  	player17optionsButton.Enabled = true;  }  else {  	player17.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player17.Enabled = false;  	player17HP.Value = 0;  	player17optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: if (partyMemberUpdateMethod (17)) {  	player17.Text = _FFACEMonitored.PartyMember [17].Name;  	player17.Enabled = true;  	player17optionsButton.Enabled = true;  }  else {  	player17.Text = Resources.Form1_partyMembersUpdate_Tick_Inactive;  	player17.Enabled = false;  	player17HP.Value = 0;  	player17optionsButton.Enabled = false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,partyMembersUpdate_Tick,The following statement contains a magic number: player17.Text = _FFACEMonitored.PartyMember [17].Name;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player2.Enabled)  	UpdateHPProgressBar (player2HP' _FFACEMonitored.PartyMember [2].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player2HP' _FFACEMonitored.PartyMember [2].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player3.Enabled)  	UpdateHPProgressBar (player3HP' _FFACEMonitored.PartyMember [3].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player3HP' _FFACEMonitored.PartyMember [3].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player4.Enabled)  	UpdateHPProgressBar (player4HP' _FFACEMonitored.PartyMember [4].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player4HP' _FFACEMonitored.PartyMember [4].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player5.Enabled)  	UpdateHPProgressBar (player5HP' _FFACEMonitored.PartyMember [5].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player5HP' _FFACEMonitored.PartyMember [5].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player6.Enabled)  	UpdateHPProgressBar (player6HP' _FFACEMonitored.PartyMember [6].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player6HP' _FFACEMonitored.PartyMember [6].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player7.Enabled)  	UpdateHPProgressBar (player7HP' _FFACEMonitored.PartyMember [7].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player7HP' _FFACEMonitored.PartyMember [7].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player8.Enabled)  	UpdateHPProgressBar (player8HP' _FFACEMonitored.PartyMember [8].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player8HP' _FFACEMonitored.PartyMember [8].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player9.Enabled)  	UpdateHPProgressBar (player9HP' _FFACEMonitored.PartyMember [9].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player9HP' _FFACEMonitored.PartyMember [9].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player10.Enabled)  	UpdateHPProgressBar (player10HP' _FFACEMonitored.PartyMember [10].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player10HP' _FFACEMonitored.PartyMember [10].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player11.Enabled)  	UpdateHPProgressBar (player11HP' _FFACEMonitored.PartyMember [11].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player11HP' _FFACEMonitored.PartyMember [11].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player12.Enabled)  	UpdateHPProgressBar (player12HP' _FFACEMonitored.PartyMember [12].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player12HP' _FFACEMonitored.PartyMember [12].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player13.Enabled)  	UpdateHPProgressBar (player13HP' _FFACEMonitored.PartyMember [13].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player13HP' _FFACEMonitored.PartyMember [13].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player14.Enabled)  	UpdateHPProgressBar (player14HP' _FFACEMonitored.PartyMember [14].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player14HP' _FFACEMonitored.PartyMember [14].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player15.Enabled)  	UpdateHPProgressBar (player15HP' _FFACEMonitored.PartyMember [15].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player15HP' _FFACEMonitored.PartyMember [15].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player16.Enabled)  	UpdateHPProgressBar (player16HP' _FFACEMonitored.PartyMember [16].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player16HP' _FFACEMonitored.PartyMember [16].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: if (player17.Enabled)  	UpdateHPProgressBar (player17HP' _FFACEMonitored.PartyMember [17].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,hpUpdates_Tick,The following statement contains a magic number: UpdateHPProgressBar (player17HP' _FFACEMonitored.PartyMember [17].HPPCurrent);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent >= 75)  	playerHP.ForeColor = Color.Green;  else if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 50 && hppCurrent < 75)  	playerHP.ForeColor = Color.Yellow;  else if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent > 25 && hppCurrent < 50)  	playerHP.ForeColor = Color.Orange;  else if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,UpdateHPProgressBar,The following statement contains a magic number: if (hppCurrent < 25)  	playerHP.ForeColor = Color.Red;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure6enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure6amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_VI) == 0) && (_FFACEPL.Player.MPCurrent > 227)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure VI\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure5enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure5amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_V) == 0) && (_FFACEPL.Player.MPCurrent > 125)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure V\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure4enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure4amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_IV) == 0) && (_FFACEPL.Player.MPCurrent > 88)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure IV\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure3enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure3amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_III) == 0) && (_FFACEPL.Player.MPCurrent > 46)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure III\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure2enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure2amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure_II) == 0) && (_FFACEPL.Player.MPCurrent > 24)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure II\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  else if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CureCalculator,The following statement contains a magic number: if ((Settings.Default.cure1enabled) && ((((_FFACEMonitored.PartyMember [partyMemberId].HPCurrent * 100) / _FFACEMonitored.PartyMember [partyMemberId].HPPCurrent) - _FFACEMonitored.PartyMember [partyMemberId].HPCurrent) >= Settings.Default.cure1amount) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cure) == 0) && (_FFACEPL.Player.MPCurrent > 8)) {  	_FFACEPL.Windower.SendString ("/ma \"Cure\" " + _FFACEMonitored.PartyMember [partyMemberId].Name);  	CastLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingPossible,The following statement contains a magic number: if ((_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.PartyMember [partyMemberId].ID) > 0) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0) || (_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [partyMemberId].ID) && (_FFACEMonitored.PartyMember [partyMemberId].HPCurrent > 0)) {  	return true;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (_FFACEPL.Player.GetLoginStatus == LoginStatus.Loading || _FFACEMonitored.Player.GetLoginStatus == LoginStatus.Loading) {  	// We zoned out so wait 15 seconds before continuing any type of action                  	Thread.Sleep (15000);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: Thread.Sleep (15000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [2] = currentTime.Subtract (playerHaste [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [2] = currentTime.Subtract (playerHaste [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [3] = currentTime.Subtract (playerHaste [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [3] = currentTime.Subtract (playerHaste [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [4] = currentTime.Subtract (playerHaste [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [4] = currentTime.Subtract (playerHaste [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [5] = currentTime.Subtract (playerHaste [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [5] = currentTime.Subtract (playerHaste [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [6] = currentTime.Subtract (playerHaste [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [6] = currentTime.Subtract (playerHaste [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [7] = currentTime.Subtract (playerHaste [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [7] = currentTime.Subtract (playerHaste [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [8] = currentTime.Subtract (playerHaste [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [8] = currentTime.Subtract (playerHaste [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [9] = currentTime.Subtract (playerHaste [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [9] = currentTime.Subtract (playerHaste [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [10] = currentTime.Subtract (playerHaste [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [10] = currentTime.Subtract (playerHaste [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [11] = currentTime.Subtract (playerHaste [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [11] = currentTime.Subtract (playerHaste [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [12] = currentTime.Subtract (playerHaste [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [12] = currentTime.Subtract (playerHaste [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [13] = currentTime.Subtract (playerHaste [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [13] = currentTime.Subtract (playerHaste [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [14] = currentTime.Subtract (playerHaste [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [14] = currentTime.Subtract (playerHaste [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [15] = currentTime.Subtract (playerHaste [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [15] = currentTime.Subtract (playerHaste [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [16] = currentTime.Subtract (playerHaste [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [16] = currentTime.Subtract (playerHaste [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [17] = currentTime.Subtract (playerHaste [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHasteSpan [17] = currentTime.Subtract (playerHaste [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [2] = currentTime.Subtract (playerHaste_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [2] = currentTime.Subtract (playerHaste_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [3] = currentTime.Subtract (playerHaste_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [3] = currentTime.Subtract (playerHaste_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [4] = currentTime.Subtract (playerHaste_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [4] = currentTime.Subtract (playerHaste_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [5] = currentTime.Subtract (playerHaste_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [5] = currentTime.Subtract (playerHaste_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [6] = currentTime.Subtract (playerHaste_II [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [6] = currentTime.Subtract (playerHaste_II [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [7] = currentTime.Subtract (playerHaste_II [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [7] = currentTime.Subtract (playerHaste_II [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [8] = currentTime.Subtract (playerHaste_II [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [8] = currentTime.Subtract (playerHaste_II [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [9] = currentTime.Subtract (playerHaste_II [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [9] = currentTime.Subtract (playerHaste_II [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [10] = currentTime.Subtract (playerHaste_II [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [10] = currentTime.Subtract (playerHaste_II [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [11] = currentTime.Subtract (playerHaste_II [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [11] = currentTime.Subtract (playerHaste_II [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [12] = currentTime.Subtract (playerHaste_II [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [12] = currentTime.Subtract (playerHaste_II [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [13] = currentTime.Subtract (playerHaste_II [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [13] = currentTime.Subtract (playerHaste_II [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [14] = currentTime.Subtract (playerHaste_II [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [14] = currentTime.Subtract (playerHaste_II [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [15] = currentTime.Subtract (playerHaste_II [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [15] = currentTime.Subtract (playerHaste_II [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [16] = currentTime.Subtract (playerHaste_II [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [16] = currentTime.Subtract (playerHaste_II [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [17] = currentTime.Subtract (playerHaste_II [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerHaste_IISpan [17] = currentTime.Subtract (playerHaste_II [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [2] = currentTime.Subtract (playerFlurry [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [2] = currentTime.Subtract (playerFlurry [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [3] = currentTime.Subtract (playerFlurry [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [3] = currentTime.Subtract (playerFlurry [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [4] = currentTime.Subtract (playerFlurry [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [4] = currentTime.Subtract (playerFlurry [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [5] = currentTime.Subtract (playerFlurry [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [5] = currentTime.Subtract (playerFlurry [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [6] = currentTime.Subtract (playerFlurry [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [6] = currentTime.Subtract (playerFlurry [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [7] = currentTime.Subtract (playerFlurry [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [7] = currentTime.Subtract (playerFlurry [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [8] = currentTime.Subtract (playerFlurry [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [8] = currentTime.Subtract (playerFlurry [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [9] = currentTime.Subtract (playerFlurry [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [9] = currentTime.Subtract (playerFlurry [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [10] = currentTime.Subtract (playerFlurry [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [10] = currentTime.Subtract (playerFlurry [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [11] = currentTime.Subtract (playerFlurry [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [11] = currentTime.Subtract (playerFlurry [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [12] = currentTime.Subtract (playerFlurry [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [12] = currentTime.Subtract (playerFlurry [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [13] = currentTime.Subtract (playerFlurry [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [13] = currentTime.Subtract (playerFlurry [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [14] = currentTime.Subtract (playerFlurry [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [14] = currentTime.Subtract (playerFlurry [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [15] = currentTime.Subtract (playerFlurry [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [15] = currentTime.Subtract (playerFlurry [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [16] = currentTime.Subtract (playerFlurry [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [16] = currentTime.Subtract (playerFlurry [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [17] = currentTime.Subtract (playerFlurry [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurrySpan [17] = currentTime.Subtract (playerFlurry [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [2] = currentTime.Subtract (playerFlurry_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [2] = currentTime.Subtract (playerFlurry_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [3] = currentTime.Subtract (playerFlurry_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [3] = currentTime.Subtract (playerFlurry_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [4] = currentTime.Subtract (playerFlurry_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [4] = currentTime.Subtract (playerFlurry_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [5] = currentTime.Subtract (playerFlurry_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [5] = currentTime.Subtract (playerFlurry_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [6] = currentTime.Subtract (playerFlurry_II [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [6] = currentTime.Subtract (playerFlurry_II [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [7] = currentTime.Subtract (playerFlurry_II [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [7] = currentTime.Subtract (playerFlurry_II [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [8] = currentTime.Subtract (playerFlurry_II [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [8] = currentTime.Subtract (playerFlurry_II [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [9] = currentTime.Subtract (playerFlurry_II [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [9] = currentTime.Subtract (playerFlurry_II [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [10] = currentTime.Subtract (playerFlurry_II [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [10] = currentTime.Subtract (playerFlurry_II [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [11] = currentTime.Subtract (playerFlurry_II [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [11] = currentTime.Subtract (playerFlurry_II [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [12] = currentTime.Subtract (playerFlurry_II [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [12] = currentTime.Subtract (playerFlurry_II [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [13] = currentTime.Subtract (playerFlurry_II [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [13] = currentTime.Subtract (playerFlurry_II [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [14] = currentTime.Subtract (playerFlurry_II [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [14] = currentTime.Subtract (playerFlurry_II [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [15] = currentTime.Subtract (playerFlurry_II [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [15] = currentTime.Subtract (playerFlurry_II [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [16] = currentTime.Subtract (playerFlurry_II [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [16] = currentTime.Subtract (playerFlurry_II [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [17] = currentTime.Subtract (playerFlurry_II [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerFlurry_IISpan [17] = currentTime.Subtract (playerFlurry_II [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [2] = currentTime.Subtract (playerProtect_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [2] = currentTime.Subtract (playerProtect_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [3] = currentTime.Subtract (playerProtect_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [3] = currentTime.Subtract (playerProtect_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [4] = currentTime.Subtract (playerProtect_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [4] = currentTime.Subtract (playerProtect_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [5] = currentTime.Subtract (playerProtect_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [5] = currentTime.Subtract (playerProtect_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [6] = currentTime.Subtract (playerProtect_IV [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [6] = currentTime.Subtract (playerProtect_IV [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [7] = currentTime.Subtract (playerProtect_IV [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [7] = currentTime.Subtract (playerProtect_IV [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [8] = currentTime.Subtract (playerProtect_IV [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [8] = currentTime.Subtract (playerProtect_IV [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [9] = currentTime.Subtract (playerProtect_IV [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [9] = currentTime.Subtract (playerProtect_IV [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [10] = currentTime.Subtract (playerProtect_IV [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [10] = currentTime.Subtract (playerProtect_IV [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [11] = currentTime.Subtract (playerProtect_IV [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [11] = currentTime.Subtract (playerProtect_IV [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [12] = currentTime.Subtract (playerProtect_IV [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [12] = currentTime.Subtract (playerProtect_IV [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [13] = currentTime.Subtract (playerProtect_IV [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [13] = currentTime.Subtract (playerProtect_IV [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [14] = currentTime.Subtract (playerProtect_IV [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [14] = currentTime.Subtract (playerProtect_IV [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [15] = currentTime.Subtract (playerProtect_IV [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [15] = currentTime.Subtract (playerProtect_IV [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [16] = currentTime.Subtract (playerProtect_IV [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [16] = currentTime.Subtract (playerProtect_IV [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [17] = currentTime.Subtract (playerProtect_IV [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_IVSpan [17] = currentTime.Subtract (playerProtect_IV [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [2] = currentTime.Subtract (playerProtect_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [2] = currentTime.Subtract (playerProtect_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [3] = currentTime.Subtract (playerProtect_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [3] = currentTime.Subtract (playerProtect_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [4] = currentTime.Subtract (playerProtect_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [4] = currentTime.Subtract (playerProtect_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [5] = currentTime.Subtract (playerProtect_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [5] = currentTime.Subtract (playerProtect_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [6] = currentTime.Subtract (playerProtect_V [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [6] = currentTime.Subtract (playerProtect_V [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [7] = currentTime.Subtract (playerProtect_V [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [7] = currentTime.Subtract (playerProtect_V [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [8] = currentTime.Subtract (playerProtect_V [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [8] = currentTime.Subtract (playerProtect_V [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [9] = currentTime.Subtract (playerProtect_V [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [9] = currentTime.Subtract (playerProtect_V [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [10] = currentTime.Subtract (playerProtect_V [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [10] = currentTime.Subtract (playerProtect_V [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [11] = currentTime.Subtract (playerProtect_V [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [11] = currentTime.Subtract (playerProtect_V [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [12] = currentTime.Subtract (playerProtect_V [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [12] = currentTime.Subtract (playerProtect_V [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [13] = currentTime.Subtract (playerProtect_V [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [13] = currentTime.Subtract (playerProtect_V [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [14] = currentTime.Subtract (playerProtect_V [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [14] = currentTime.Subtract (playerProtect_V [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [15] = currentTime.Subtract (playerProtect_V [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [15] = currentTime.Subtract (playerProtect_V [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [16] = currentTime.Subtract (playerProtect_V [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [16] = currentTime.Subtract (playerProtect_V [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [17] = currentTime.Subtract (playerProtect_V [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerProtect_VSpan [17] = currentTime.Subtract (playerProtect_V [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [2] = currentTime.Subtract (playerShell_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [2] = currentTime.Subtract (playerShell_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [3] = currentTime.Subtract (playerShell_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [3] = currentTime.Subtract (playerShell_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [4] = currentTime.Subtract (playerShell_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [4] = currentTime.Subtract (playerShell_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [5] = currentTime.Subtract (playerShell_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [5] = currentTime.Subtract (playerShell_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [6] = currentTime.Subtract (playerShell_IV [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [6] = currentTime.Subtract (playerShell_IV [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [7] = currentTime.Subtract (playerShell_IV [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [7] = currentTime.Subtract (playerShell_IV [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [8] = currentTime.Subtract (playerShell_IV [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [8] = currentTime.Subtract (playerShell_IV [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [9] = currentTime.Subtract (playerShell_IV [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [9] = currentTime.Subtract (playerShell_IV [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [10] = currentTime.Subtract (playerShell_IV [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [10] = currentTime.Subtract (playerShell_IV [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [11] = currentTime.Subtract (playerShell_IV [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [11] = currentTime.Subtract (playerShell_IV [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [12] = currentTime.Subtract (playerShell_IV [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [12] = currentTime.Subtract (playerShell_IV [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [13] = currentTime.Subtract (playerShell_IV [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [13] = currentTime.Subtract (playerShell_IV [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [14] = currentTime.Subtract (playerShell_IV [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [14] = currentTime.Subtract (playerShell_IV [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [15] = currentTime.Subtract (playerShell_IV [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [15] = currentTime.Subtract (playerShell_IV [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [16] = currentTime.Subtract (playerShell_IV [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [16] = currentTime.Subtract (playerShell_IV [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [17] = currentTime.Subtract (playerShell_IV [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_IVSpan [17] = currentTime.Subtract (playerShell_IV [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [2] = currentTime.Subtract (playerShell_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [2] = currentTime.Subtract (playerShell_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [3] = currentTime.Subtract (playerShell_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [3] = currentTime.Subtract (playerShell_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [4] = currentTime.Subtract (playerShell_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [4] = currentTime.Subtract (playerShell_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [5] = currentTime.Subtract (playerShell_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [5] = currentTime.Subtract (playerShell_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [6] = currentTime.Subtract (playerShell_V [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [6] = currentTime.Subtract (playerShell_V [6]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [7] = currentTime.Subtract (playerShell_V [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [7] = currentTime.Subtract (playerShell_V [7]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [8] = currentTime.Subtract (playerShell_V [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [8] = currentTime.Subtract (playerShell_V [8]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [9] = currentTime.Subtract (playerShell_V [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [9] = currentTime.Subtract (playerShell_V [9]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [10] = currentTime.Subtract (playerShell_V [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [10] = currentTime.Subtract (playerShell_V [10]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [11] = currentTime.Subtract (playerShell_V [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [11] = currentTime.Subtract (playerShell_V [11]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [12] = currentTime.Subtract (playerShell_V [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [12] = currentTime.Subtract (playerShell_V [12]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [13] = currentTime.Subtract (playerShell_V [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [13] = currentTime.Subtract (playerShell_V [13]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [14] = currentTime.Subtract (playerShell_V [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [14] = currentTime.Subtract (playerShell_V [14]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [15] = currentTime.Subtract (playerShell_V [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [15] = currentTime.Subtract (playerShell_V [15]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [16] = currentTime.Subtract (playerShell_V [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [16] = currentTime.Subtract (playerShell_V [16]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [17] = currentTime.Subtract (playerShell_V [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerShell_VSpan [17] = currentTime.Subtract (playerShell_V [17]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [2] = currentTime.Subtract (playerPhalanx_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [2] = currentTime.Subtract (playerPhalanx_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [3] = currentTime.Subtract (playerPhalanx_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [3] = currentTime.Subtract (playerPhalanx_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [4] = currentTime.Subtract (playerPhalanx_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [4] = currentTime.Subtract (playerPhalanx_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [5] = currentTime.Subtract (playerPhalanx_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerPhalanx_IISpan [5] = currentTime.Subtract (playerPhalanx_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [2] = currentTime.Subtract (playerRegen_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [2] = currentTime.Subtract (playerRegen_IV [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [3] = currentTime.Subtract (playerRegen_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [3] = currentTime.Subtract (playerRegen_IV [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [4] = currentTime.Subtract (playerRegen_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [4] = currentTime.Subtract (playerRegen_IV [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [5] = currentTime.Subtract (playerRegen_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_IVSpan [5] = currentTime.Subtract (playerRegen_IV [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [2] = currentTime.Subtract (playerRegen_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [2] = currentTime.Subtract (playerRegen_V [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [3] = currentTime.Subtract (playerRegen_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [3] = currentTime.Subtract (playerRegen_V [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [4] = currentTime.Subtract (playerRegen_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [4] = currentTime.Subtract (playerRegen_V [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [5] = currentTime.Subtract (playerRegen_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRegen_VSpan [5] = currentTime.Subtract (playerRegen_V [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [2] = currentTime.Subtract (playerRefresh [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [2] = currentTime.Subtract (playerRefresh [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [3] = currentTime.Subtract (playerRefresh [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [3] = currentTime.Subtract (playerRefresh [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [4] = currentTime.Subtract (playerRefresh [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [4] = currentTime.Subtract (playerRefresh [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [5] = currentTime.Subtract (playerRefresh [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefreshSpan [5] = currentTime.Subtract (playerRefresh [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [2] = currentTime.Subtract (playerRefresh_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [2] = currentTime.Subtract (playerRefresh_II [2]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [3] = currentTime.Subtract (playerRefresh_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [3] = currentTime.Subtract (playerRefresh_II [3]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [4] = currentTime.Subtract (playerRefresh_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [4] = currentTime.Subtract (playerRefresh_II [4]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [5] = currentTime.Subtract (playerRefresh_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: playerRefresh_IISpan [5] = currentTime.Subtract (playerRefresh_II [5]);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [2] = player2enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [3] = player3enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [4] = player4enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [5] = player5enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [6] = player6enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [7] = player7enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [8] = player8enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [9] = player9enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [10] = player10enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [11] = player11enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [12] = player12enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [13] = player13enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [14] = player14enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [15] = player15enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [16] = player16enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: enabledBoxes [17] = player17enabled;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [2] = player2priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [3] = player3priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [4] = player4priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [5] = player5priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [6] = player6priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [7] = player7priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [8] = player8priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [9] = player9priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [10] = player10priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [11] = player11priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [12] = player12priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [13] = player13priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [14] = player14priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [15] = player15priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [16] = player16priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: highPriorityBoxes [17] = player17priority;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.divineSealBox && _FFACEPL.Player.MPPCurrent <= 11 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (3000);  	_FFACEPL.Windower.SendString ("/ja \"Divine Seal\" <me>");  	ActionLockMethod ();  }  else if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.divineSealBox && _FFACEPL.Player.MPPCurrent <= 11 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (3000);  	_FFACEPL.Windower.SendString ("/ja \"Divine Seal\" <me>");  	ActionLockMethod ();  }  else if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.divineSealBox && _FFACEPL.Player.MPPCurrent <= 11 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (3000);  	_FFACEPL.Windower.SendString ("/ja \"Divine Seal\" <me>");  	ActionLockMethod ();  }  else if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.divineSealBox && _FFACEPL.Player.MPPCurrent <= 11 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Divine_Seal) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (3000);  	_FFACEPL.Windower.SendString ("/ja \"Divine Seal\" <me>");  	ActionLockMethod ();  }  else if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: Thread.Sleep (3000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (Settings.Default.Convert && _FFACEPL.Player.MPPCurrent <= 10 //   && _FFACEPL.Timer.GetAbilityRecast (AbilityList.Convert) == 0 && !_FFACEPL.Player.StatusEffects.Contains (StatusEffect.Weakness)) {  	Thread.Sleep (1000);  	_FFACEPL.Windower.SendString ("/ja \"Convert\" <me>");  	return;  	//ActionLockMethod();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.PosX == plX) && (_FFACEPL.Player.PosY == plY) && (_FFACEPL.Player.PosZ == plZ) && (_FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) && (!pauseActions) && ((_FFACEPL.Player.Status == Status.Standing) || (_FFACEPL.Player.Status == Status.Fighting))) {  	var playerHpOrder = _FFACEMonitored.PartyMember.Keys.OrderBy (k => _FFACEMonitored.PartyMember [k].HPPCurrent);  	// Loop through keys in order of lowest HP to highest HP  	foreach (byte id in playerHpOrder) {  		// Cures  		// First' is casting possible' and enabled?  		if (castingPossible (id) && (_FFACEMonitored.PartyMember [id].Active) && (enabledBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (!castingLock)) {  			if ((highPriorityBoxes [id].Checked) && (_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.priorityCurePercentage)) {  				CureCalculator (id);  				break;  			}  			if ((_FFACEMonitored.PartyMember [id].HPPCurrent <= Settings.Default.curePercentage) && (castingPossible (id))) {  				CureCalculator (id);  				break;  			}  		}  	}  	#endregion  	#region "== PL Debuff Removal with Spells or Items"  	// PL and Monitored Player Debuff Removal  	// Starting with PL  	foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  		if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  			// Check to make sure we have echo drops  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  				Thread.Sleep (2000);  			}  		}  		if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  			// Check to make sure we have holy water  			if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  				_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  				Thread.Sleep (2000);  			}  		}  		else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Paralyna");  		}  		else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Poisona");  		}  		else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Blindna");  		}  		else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Cursna");  		}  		else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Viruna");  		}  		else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  		else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEPL.Player.Name' "Erase");  		}  	}  	#endregion  	#region "== Monitored Player Debuff Removal"  	// Next' we check monitored player  	if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  		foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  			if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  				castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  			}  			else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Silena");  			}  			else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Stona");  			}  			else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Paralyna");  			}  			else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Poisona");  			}  			else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  				castSpell (_FFACEMonitored.Player.Name' "Blindna");  			}  			else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Cursna");  			}  			else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Viruna");  			}  			else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  			else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  				castSpell (_FFACEMonitored.Player.Name' "Erase");  			}  		}  	}  	// End Debuff Removal  	#endregion  	#region "== PL Auto Buffs"  	// PL Auto Buffs  	if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  		if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  			castSpell ("<me>"' "Blink");  		}  		else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  			if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise");  			}  			else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise II");  			}  			else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  				castSpell ("<me>"' "Reraise III");  			}  		}  		else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  			if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  				castSpell ("<me>"' "Refresh");  			}  			else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  				castSpell ("<me>"' "Refresh II");  			}  		}  		else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  			castSpell ("<me>"' "Stoneskin");  		}  		else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  			castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  		}  		else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  			castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  		}  	}  	// End PL Auto Buffs  	#endregion  	// Auto Casting  	#region "== Auto Haste"  	foreach (byte id in playerHpOrder) {  		if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					hastePlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste player  							hastePlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						hastePlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				hastePlayer (id);  			}  		}  		#endregion  		#region "== Auto Haste II"  		{  			if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck (StatusEffect.Haste)) {  						haste_IIPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck (StatusEffect.Haste)) {  						// Check if we are hasting only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before hasting  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Haste II player  								haste_IIPlayer (id);  							}  						}  						// If we are not hasting only during fighting' cast haste  						else {  							haste_IIPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					haste_IIPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry "  			{  				if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							FlurryPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry player  									FlurryPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								FlurryPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						FlurryPlayer (id);  					}  				}  				#endregion  				#region "== Auto Flurry II"  				{  					if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck ((StatusEffect)581)) {  								Flurry_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck ((StatusEffect)581)) {  								// Check if we are flurring only if fighting  								if (Settings.Default.AutoCastEngageCheckBox) {  									// if we are' check to make sure we are fighting before flurring  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										// Flurry II player  										Flurry_IIPlayer (id);  									}  								}  								// If we are not flurring only during fighting' cast flurry  								else {  									Flurry_IIPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  							Flurry_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Shell IV & V"  					if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_IVPlayer (id);  									}  								}  								else {  									shell_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  							shell_IVPlayer (id);  						}  					}  					if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Shell)) {  								shell_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Shell)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										shell_VPlayer (id);  									}  								}  								else {  									shell_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  							shell_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Protect IV & V"  					if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_IVPlayer (id);  									}  								}  								else {  									protect_IVPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  							protect_IVPlayer (id);  						}  					}  					if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Protect)) {  								protect_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Protect)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										protect_VPlayer (id);  									}  								}  								else {  									protect_VPlayer (id);  								}  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  							protect_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Phalanx II"  					if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  								Phalanx_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  							Phalanx_IIPlayer (id);  						}  					}  					#endregion  					#region "== Auto Regen IV & V"  					if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_IVPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_IVPlayer (id);  									}  								}  								else {  									Regen_IVPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  							Regen_IVPlayer (id);  						}  					}  					if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Regen)) {  								Regen_VPlayer (id);  							}  						}  						else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  							if (!monitoredStatusCheck (StatusEffect.Regen)) {  								if (Settings.Default.AutoCastEngageCheckBox) {  									if (_FFACEMonitored.Player.Status == Status.Fighting) {  										Regen_VPlayer (id);  									}  								}  								else {  									Regen_VPlayer (id);  								}  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  							Regen_VPlayer (id);  						}  					}  					#endregion  					#region "== Auto Refresh & II"  					if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								RefreshPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  							RefreshPlayer (id);  						}  					}  					if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  						if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!plStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  							if (!monitoredStatusCheck (StatusEffect.Refresh)) {  								Refresh_IIPlayer (id);  							}  						}  						else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  							Refresh_IIPlayer (id);  						}  					}  				#endregion  				// so PL job abilities are in order  				#region "== All other Job Abilities"  				}  				if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  					if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  					else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  						_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  						ActionLockMethod ();  					}  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  	if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  		// Check to make sure we have echo drops  		if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  			_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  			Thread.Sleep (2000);  		}  	}  	if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  		// Check to make sure we have holy water  		if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  			_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  			Thread.Sleep (2000);  		}  	}  	else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Paralyna");  	}  	else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Poisona");  	}  	else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Blindna");  	}  	else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Viruna");  	}  	else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Viruna");  	}  	else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (StatusEffect plEffect in _FFACEPL.Player.StatusEffects) {  	if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  		// Check to make sure we have echo drops  		if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  			_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  			Thread.Sleep (2000);  		}  	}  	if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  		// Check to make sure we have holy water  		if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  			_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  			Thread.Sleep (2000);  		}  	}  	else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Paralyna");  	}  	else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Poisona");  	}  	else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Blindna");  	}  	else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Cursna");  	}  	else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Viruna");  	}  	else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Viruna");  	}  	else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  	else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  		castSpell (_FFACEPL.Player.Name' "Erase");  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((plEffect == StatusEffect.Silence) && (Settings.Default.plSilenceItemEnabled)) {  	// Check to make sure we have echo drops  	if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  		_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  		Thread.Sleep (2000);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.plSilenceItemString)) > 0) {  	_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.plSilenceItemString));  	Thread.Sleep (2000);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((plEffect == StatusEffect.Doom && Settings.Default.plDoomEnabled)/* Add more options from UI HERE*/) {  	// Check to make sure we have holy water  	if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  		_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  		Thread.Sleep (2000);  	}  }  else if ((plEffect == StatusEffect.Doom) && (Settings.Default.plDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Cursna");  }  else if ((plEffect == StatusEffect.Paralysis) && (Settings.Default.plParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Paralyna");  }  else if ((plEffect == StatusEffect.Poison) && (Settings.Default.plPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Poisona");  }  else if ((plEffect == StatusEffect.Attack_Down) && (Settings.Default.plAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Blindness) && (Settings.Default.plBlindness) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Blindna");  }  else if ((plEffect == StatusEffect.Bind) && (Settings.Default.plBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Weight) && (Settings.Default.plWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Slow) && (Settings.Default.plSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Curse) && (Settings.Default.plCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Cursna");  }  else if ((plEffect == StatusEffect.Curse2) && (Settings.Default.plCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Cursna");  }  else if ((plEffect == StatusEffect.Addle) && (Settings.Default.plAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Bane) && (Settings.Default.plBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Cursna");  }  else if ((plEffect == StatusEffect.Plague) && (Settings.Default.plPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Viruna");  }  else if ((plEffect == StatusEffect.Disease) && (Settings.Default.plDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Viruna");  }  else if ((plEffect == StatusEffect.Burn) && (Settings.Default.plBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Frost) && (Settings.Default.plFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Choke) && (Settings.Default.plChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Rasp) && (Settings.Default.plRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Shock) && (Settings.Default.plShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Drown) && (Settings.Default.plDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Dia) && (Settings.Default.plDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Bio) && (Settings.Default.plBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.STR_Down) && (Settings.Default.plStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.DEX_Down) && (Settings.Default.plDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.VIT_Down) && (Settings.Default.plVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.AGI_Down) && (Settings.Default.plAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.INT_Down) && (Settings.Default.plIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.MND_Down) && (Settings.Default.plMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.CHR_Down) && (Settings.Default.plChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Max_HP_Down) && (Settings.Default.plMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Max_MP_Down) && (Settings.Default.plMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Accuracy_Down) && (Settings.Default.plAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Evasion_Down) && (Settings.Default.plEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Defense_Down) && (Settings.Default.plDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Flash) && (Settings.Default.plFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.plMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.plMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Helix) && (Settings.Default.plHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Max_TP_Down) && (Settings.Default.plMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Requiem) && (Settings.Default.plRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Elegy) && (Settings.Default.plElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  else if ((plEffect == StatusEffect.Threnody) && (Settings.Default.plThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  	castSpell (_FFACEPL.Player.Name' "Erase");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (_FFACEPL.Item.GetInventoryItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0 || _FFACEPL.Item.GetTempItemCount ((ushort)FFACE.ParseResources.GetItemId (Settings.Default.PLDoomitem)) > 0) {  	_FFACEPL.Windower.SendString (string.Format ("/item \"{0}\" <me>"' Settings.Default.PLDoomitem));  	Thread.Sleep (2000);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: Thread.Sleep (2000);  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) < 21) && (_FFACEPL.NPC.Distance (_FFACEMonitored.Player.ID) > 0) && (_FFACEMonitored.Player.HPCurrent > 0)) {  	foreach (StatusEffect monitoredEffect in _FFACEMonitored.Player.StatusEffects) {  		if ((monitoredEffect == StatusEffect.Doom) && (Settings.Default.monitoredDoom) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Cursna");  		}  		else if ((monitoredEffect == StatusEffect.Sleep) && (Settings.Default.monitoredSleep) && (Settings.Default.wakeSleepEnabled)) {  			castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  		}  		else if ((monitoredEffect == StatusEffect.Sleep2) && (Settings.Default.monitoredSleep2) && (Settings.Default.wakeSleepEnabled)) {  			castSpell (_FFACEMonitored.Player.Name' Settings.Default.wakeSleepSpellString);  		}  		else if ((monitoredEffect == StatusEffect.Silence) && (Settings.Default.monitoredSilence) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Silena) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Silena");  		}  		else if ((monitoredEffect == StatusEffect.Petrification) && (Settings.Default.monitoredPetrification) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stona) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Stona");  		}  		else if ((monitoredEffect == StatusEffect.Paralysis) && (Settings.Default.monitoredParalysis) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Paralyna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Paralyna");  		}  		else if ((monitoredEffect == StatusEffect.Poison) && (Settings.Default.monitoredPoison) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Poisona) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Poisona");  		}  		else if ((monitoredEffect == StatusEffect.Attack_Down) && (Settings.Default.monitoredAttackDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Blindness) && (Settings.Default.monitoredBlindness && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blindna) == 0))) {  			castSpell (_FFACEMonitored.Player.Name' "Blindna");  		}  		else if ((monitoredEffect == StatusEffect.Bind) && (Settings.Default.monitoredBind) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Weight) && (Settings.Default.monitoredWeight) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Slow) && (Settings.Default.monitoredSlow) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Curse) && (Settings.Default.monitoredCurse) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Cursna");  		}  		else if ((monitoredEffect == StatusEffect.Curse2) && (Settings.Default.monitoredCurse2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Cursna");  		}  		else if ((monitoredEffect == StatusEffect.Addle) && (Settings.Default.monitoredAddle) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Bane) && (Settings.Default.monitoredBane) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Cursna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Cursna");  		}  		else if ((monitoredEffect == StatusEffect.Plague) && (Settings.Default.monitoredPlague) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Viruna");  		}  		else if ((monitoredEffect == StatusEffect.Disease) && (Settings.Default.monitoredDisease) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Viruna) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Viruna");  		}  		else if ((monitoredEffect == StatusEffect.Burn) && (Settings.Default.monitoredBurn) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Frost) && (Settings.Default.monitoredFrost) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Choke) && (Settings.Default.monitoredChoke) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Rasp) && (Settings.Default.monitoredRasp) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Shock) && (Settings.Default.monitoredShock) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Drown) && (Settings.Default.monitoredDrown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Dia) && (Settings.Default.monitoredDia) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Bio) && (Settings.Default.monitoredBio) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.STR_Down) && (Settings.Default.monitoredStrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.DEX_Down) && (Settings.Default.monitoredDexDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.VIT_Down) && (Settings.Default.monitoredVitDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.AGI_Down) && (Settings.Default.monitoredAgiDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.INT_Down) && (Settings.Default.monitoredIntDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.MND_Down) && (Settings.Default.monitoredMndDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.CHR_Down) && (Settings.Default.monitoredChrDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Max_HP_Down) && (Settings.Default.monitoredMaxHpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Max_MP_Down) && (Settings.Default.monitoredMaxMpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Accuracy_Down) && (Settings.Default.monitoredAccuracyDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Evasion_Down) && (Settings.Default.monitoredEvasionDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Defense_Down) && (Settings.Default.monitoredDefenseDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Flash) && (Settings.Default.monitoredFlash) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Magic_Acc_Down) && (Settings.Default.monitoredMagicAccDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Magic_Atk_Down) && (Settings.Default.monitoredMagicAtkDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Helix) && (Settings.Default.monitoredHelix) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Max_TP_Down) && (Settings.Default.monitoredMaxTpDown) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Requiem) && (Settings.Default.monitoredRequiem) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Elegy) && (Settings.Default.monitoredElegy) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  		else if ((monitoredEffect == StatusEffect.Threnody) && (Settings.Default.monitoredThrenody) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Erase) == 0)) {  			castSpell (_FFACEMonitored.Player.Name' "Erase");  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && _FFACEPL.Player.GetLoginStatus == LoginStatus.LoggedIn) {  	if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  		castSpell ("<me>"' "Blink");  	}  	else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  		if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise");  		}  		else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise II");  		}  		else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  			castSpell ("<me>"' "Reraise III");  		}  	}  	else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  		if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  			castSpell ("<me>"' "Refresh");  		}  		else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  			castSpell ("<me>"' "Refresh II");  		}  	}  	else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  		castSpell ("<me>"' "Stoneskin");  	}  	else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  		castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  	}  	else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  		castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plBlink) && (!plStatusCheck (StatusEffect.Blink)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Blink) == 0)) {  	castSpell ("<me>"' "Blink");  }  else if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraise) && (!plStatusCheck (StatusEffect.Reraise))) {  	if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise");  	}  	else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise II");  	}  	else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  		castSpell ("<me>"' "Reraise III");  	}  }  else if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise");  }  else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise");  }  else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise");  }  else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise");  }  else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise");  }  else if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_II) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise II");  }  else if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plReraiseLevel == 3) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Reraise_III) == 0) && _FFACEPL.Player.MPCurrent > 150) {  	castSpell ("<me>"' "Reraise III");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plRefresh) && (!plStatusCheck (StatusEffect.Refresh))) {  	if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  		castSpell ("<me>"' "Refresh");  	}  	else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  		castSpell ("<me>"' "Refresh II");  	}  }  else if ((Settings.Default.plStoneskin) && (!plStatusCheck (StatusEffect.Stoneskin)) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Stoneskin) == 0)) {  	castSpell ("<me>"' "Stoneskin");  }  else if ((Settings.Default.plShellra) && (!plStatusCheck (StatusEffect.Shell)) && CheckShellraLevelRecast ()) {  	castSpell ("<me>"' GetShellraLevel (Settings.Default.plShellralevel));  }  else if ((Settings.Default.plProtectra) && (!plStatusCheck (StatusEffect.Protect)) && CheckProtectraLevelRecast ()) {  	castSpell ("<me>"' GetProtectraLevel (Settings.Default.plProtectralevel));  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plRefreshLevel == 1) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0)) {  	castSpell ("<me>"' "Refresh");  }  else if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  	castSpell ("<me>"' "Refresh II");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.plRefreshLevel == 2) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0)) {  	castSpell ("<me>"' "Refresh II");  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (byte id in playerHpOrder) {  	if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  		if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  			if (!plStatusCheck (StatusEffect.Haste)) {  				hastePlayer (id);  			}  		}  		else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  			if (!monitoredStatusCheck (StatusEffect.Haste)) {  				// Check if we are hasting only if fighting  				if (Settings.Default.AutoCastEngageCheckBox) {  					// if we are' check to make sure we are fighting before hasting  					if (_FFACEMonitored.Player.Status == Status.Fighting) {  						// Haste player  						hastePlayer (id);  					}  				}  				// If we are not hasting only during fighting' cast haste  				else {  					hastePlayer (id);  				}  			}  		}  		else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  			hastePlayer (id);  		}  	}  	#endregion  	#region "== Auto Haste II"  	{  		if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					haste_IIPlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste II player  							haste_IIPlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						haste_IIPlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				haste_IIPlayer (id);  			}  		}  		#endregion  		#region "== Auto Flurry "  		{  			if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck ((StatusEffect)581)) {  						FlurryPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck ((StatusEffect)581)) {  						// Check if we are flurring only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before flurring  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Flurry player  								FlurryPlayer (id);  							}  						}  						// If we are not flurring only during fighting' cast flurry  						else {  							FlurryPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					FlurryPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry II"  			{  				if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							Flurry_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry II player  									Flurry_IIPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								Flurry_IIPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						Flurry_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Shell IV & V"  				if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_IVPlayer (id);  								}  							}  							else {  								shell_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  						shell_IVPlayer (id);  					}  				}  				if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_VPlayer (id);  								}  							}  							else {  								shell_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  						shell_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Protect IV & V"  				if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_IVPlayer (id);  								}  							}  							else {  								protect_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  						protect_IVPlayer (id);  					}  				}  				if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_VPlayer (id);  								}  							}  							else {  								protect_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  						protect_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Phalanx II"  				if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  						Phalanx_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Regen IV & V"  				if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_IVPlayer (id);  								}  							}  							else {  								Regen_IVPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  						Regen_IVPlayer (id);  					}  				}  				if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_VPlayer (id);  								}  							}  							else {  								Regen_VPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  						Regen_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Refresh & II"  				if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  						RefreshPlayer (id);  					}  				}  				if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  						Refresh_IIPlayer (id);  					}  				}  			#endregion  			// so PL job abilities are in order  			#region "== All other Job Abilities"  			}  			if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  				if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (byte id in playerHpOrder) {  	if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  		if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  			if (!plStatusCheck (StatusEffect.Haste)) {  				hastePlayer (id);  			}  		}  		else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  			if (!monitoredStatusCheck (StatusEffect.Haste)) {  				// Check if we are hasting only if fighting  				if (Settings.Default.AutoCastEngageCheckBox) {  					// if we are' check to make sure we are fighting before hasting  					if (_FFACEMonitored.Player.Status == Status.Fighting) {  						// Haste player  						hastePlayer (id);  					}  				}  				// If we are not hasting only during fighting' cast haste  				else {  					hastePlayer (id);  				}  			}  		}  		else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  			hastePlayer (id);  		}  	}  	#endregion  	#region "== Auto Haste II"  	{  		if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					haste_IIPlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste II player  							haste_IIPlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						haste_IIPlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				haste_IIPlayer (id);  			}  		}  		#endregion  		#region "== Auto Flurry "  		{  			if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck ((StatusEffect)581)) {  						FlurryPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck ((StatusEffect)581)) {  						// Check if we are flurring only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before flurring  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Flurry player  								FlurryPlayer (id);  							}  						}  						// If we are not flurring only during fighting' cast flurry  						else {  							FlurryPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					FlurryPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry II"  			{  				if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							Flurry_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry II player  									Flurry_IIPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								Flurry_IIPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						Flurry_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Shell IV & V"  				if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_IVPlayer (id);  								}  							}  							else {  								shell_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  						shell_IVPlayer (id);  					}  				}  				if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_VPlayer (id);  								}  							}  							else {  								shell_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  						shell_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Protect IV & V"  				if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_IVPlayer (id);  								}  							}  							else {  								protect_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  						protect_IVPlayer (id);  					}  				}  				if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_VPlayer (id);  								}  							}  							else {  								protect_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  						protect_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Phalanx II"  				if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  						Phalanx_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Regen IV & V"  				if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_IVPlayer (id);  								}  							}  							else {  								Regen_IVPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  						Regen_IVPlayer (id);  					}  				}  				if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_VPlayer (id);  								}  							}  							else {  								Regen_VPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  						Regen_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Refresh & II"  				if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  						RefreshPlayer (id);  					}  				}  				if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  						Refresh_IIPlayer (id);  					}  				}  			#endregion  			// so PL job abilities are in order  			#region "== All other Job Abilities"  			}  			if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  				if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (byte id in playerHpOrder) {  	if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  		if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  			if (!plStatusCheck (StatusEffect.Haste)) {  				hastePlayer (id);  			}  		}  		else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  			if (!monitoredStatusCheck (StatusEffect.Haste)) {  				// Check if we are hasting only if fighting  				if (Settings.Default.AutoCastEngageCheckBox) {  					// if we are' check to make sure we are fighting before hasting  					if (_FFACEMonitored.Player.Status == Status.Fighting) {  						// Haste player  						hastePlayer (id);  					}  				}  				// If we are not hasting only during fighting' cast haste  				else {  					hastePlayer (id);  				}  			}  		}  		else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  			hastePlayer (id);  		}  	}  	#endregion  	#region "== Auto Haste II"  	{  		if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					haste_IIPlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste II player  							haste_IIPlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						haste_IIPlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				haste_IIPlayer (id);  			}  		}  		#endregion  		#region "== Auto Flurry "  		{  			if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck ((StatusEffect)581)) {  						FlurryPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck ((StatusEffect)581)) {  						// Check if we are flurring only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before flurring  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Flurry player  								FlurryPlayer (id);  							}  						}  						// If we are not flurring only during fighting' cast flurry  						else {  							FlurryPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					FlurryPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry II"  			{  				if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							Flurry_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry II player  									Flurry_IIPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								Flurry_IIPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						Flurry_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Shell IV & V"  				if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_IVPlayer (id);  								}  							}  							else {  								shell_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  						shell_IVPlayer (id);  					}  				}  				if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_VPlayer (id);  								}  							}  							else {  								shell_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  						shell_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Protect IV & V"  				if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_IVPlayer (id);  								}  							}  							else {  								protect_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  						protect_IVPlayer (id);  					}  				}  				if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_VPlayer (id);  								}  							}  							else {  								protect_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  						protect_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Phalanx II"  				if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  						Phalanx_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Regen IV & V"  				if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_IVPlayer (id);  								}  							}  							else {  								Regen_IVPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  						Regen_IVPlayer (id);  					}  				}  				if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_VPlayer (id);  								}  							}  							else {  								Regen_VPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  						Regen_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Refresh & II"  				if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  						RefreshPlayer (id);  					}  				}  				if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  						Refresh_IIPlayer (id);  					}  				}  			#endregion  			// so PL job abilities are in order  			#region "== All other Job Abilities"  			}  			if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  				if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (byte id in playerHpOrder) {  	if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  		if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  			if (!plStatusCheck (StatusEffect.Haste)) {  				hastePlayer (id);  			}  		}  		else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  			if (!monitoredStatusCheck (StatusEffect.Haste)) {  				// Check if we are hasting only if fighting  				if (Settings.Default.AutoCastEngageCheckBox) {  					// if we are' check to make sure we are fighting before hasting  					if (_FFACEMonitored.Player.Status == Status.Fighting) {  						// Haste player  						hastePlayer (id);  					}  				}  				// If we are not hasting only during fighting' cast haste  				else {  					hastePlayer (id);  				}  			}  		}  		else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  			hastePlayer (id);  		}  	}  	#endregion  	#region "== Auto Haste II"  	{  		if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					haste_IIPlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste II player  							haste_IIPlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						haste_IIPlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				haste_IIPlayer (id);  			}  		}  		#endregion  		#region "== Auto Flurry "  		{  			if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck ((StatusEffect)581)) {  						FlurryPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck ((StatusEffect)581)) {  						// Check if we are flurring only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before flurring  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Flurry player  								FlurryPlayer (id);  							}  						}  						// If we are not flurring only during fighting' cast flurry  						else {  							FlurryPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					FlurryPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry II"  			{  				if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							Flurry_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry II player  									Flurry_IIPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								Flurry_IIPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						Flurry_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Shell IV & V"  				if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_IVPlayer (id);  								}  							}  							else {  								shell_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  						shell_IVPlayer (id);  					}  				}  				if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_VPlayer (id);  								}  							}  							else {  								shell_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  						shell_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Protect IV & V"  				if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_IVPlayer (id);  								}  							}  							else {  								protect_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  						protect_IVPlayer (id);  					}  				}  				if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_VPlayer (id);  								}  							}  							else {  								protect_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  						protect_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Phalanx II"  				if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  						Phalanx_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Regen IV & V"  				if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_IVPlayer (id);  								}  							}  							else {  								Regen_IVPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  						Regen_IVPlayer (id);  					}  				}  				if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_VPlayer (id);  								}  							}  							else {  								Regen_VPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  						Regen_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Refresh & II"  				if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  						RefreshPlayer (id);  					}  				}  				if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  						Refresh_IIPlayer (id);  					}  				}  			#endregion  			// so PL job abilities are in order  			#region "== All other Job Abilities"  			}  			if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  				if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: foreach (byte id in playerHpOrder) {  	if ((autoHasteEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  		if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  			if (!plStatusCheck (StatusEffect.Haste)) {  				hastePlayer (id);  			}  		}  		else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  			if (!monitoredStatusCheck (StatusEffect.Haste)) {  				// Check if we are hasting only if fighting  				if (Settings.Default.AutoCastEngageCheckBox) {  					// if we are' check to make sure we are fighting before hasting  					if (_FFACEMonitored.Player.Status == Status.Fighting) {  						// Haste player  						hastePlayer (id);  					}  				}  				// If we are not hasting only during fighting' cast haste  				else {  					hastePlayer (id);  				}  			}  		}  		else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHasteSpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  			hastePlayer (id);  		}  	}  	#endregion  	#region "== Auto Haste II"  	{  		if ((autoHaste_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Haste_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  			if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  				if (!plStatusCheck (StatusEffect.Haste)) {  					haste_IIPlayer (id);  				}  			}  			else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  				if (!monitoredStatusCheck (StatusEffect.Haste)) {  					// Check if we are hasting only if fighting  					if (Settings.Default.AutoCastEngageCheckBox) {  						// if we are' check to make sure we are fighting before hasting  						if (_FFACEMonitored.Player.Status == Status.Fighting) {  							// Haste II player  							haste_IIPlayer (id);  						}  					}  					// If we are not hasting only during fighting' cast haste  					else {  						haste_IIPlayer (id);  					}  				}  			}  			else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerHaste_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  				haste_IIPlayer (id);  			}  		}  		#endregion  		#region "== Auto Flurry "  		{  			if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  				if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  					if (!plStatusCheck ((StatusEffect)581)) {  						FlurryPlayer (id);  					}  				}  				else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  					if (!monitoredStatusCheck ((StatusEffect)581)) {  						// Check if we are flurring only if fighting  						if (Settings.Default.AutoCastEngageCheckBox) {  							// if we are' check to make sure we are fighting before flurring  							if (_FFACEMonitored.Player.Status == Status.Fighting) {  								// Flurry player  								FlurryPlayer (id);  							}  						}  						// If we are not flurring only during fighting' cast flurry  						else {  							FlurryPlayer (id);  						}  					}  				}  				else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  					FlurryPlayer (id);  				}  			}  			#endregion  			#region "== Auto Flurry II"  			{  				if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck ((StatusEffect)581)) {  							Flurry_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck ((StatusEffect)581)) {  							// Check if we are flurring only if fighting  							if (Settings.Default.AutoCastEngageCheckBox) {  								// if we are' check to make sure we are fighting before flurring  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									// Flurry II player  									Flurry_IIPlayer (id);  								}  							}  							// If we are not flurring only during fighting' cast flurry  							else {  								Flurry_IIPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  						Flurry_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Shell IV & V"  				if ((autoShell_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_IVPlayer (id);  								}  							}  							else {  								shell_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_IVSpan [id].Minutes >= Settings.Default.autoShell_IVMinutes)) {  						shell_IVPlayer (id);  					}  				}  				if ((autoShell_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Shell_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Shell)) {  							shell_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Shell)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									shell_VPlayer (id);  								}  							}  							else {  								shell_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerShell_VSpan [id].Minutes >= Settings.Default.autoShell_VMinutes)) {  						shell_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Protect IV & V"  				if ((autoProtect_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_IVPlayer (id);  								}  							}  							else {  								protect_IVPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_IVSpan [id].Minutes >= Settings.Default.autoProtect_IVMinutes)) {  						protect_IVPlayer (id);  					}  				}  				if ((autoProtect_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Protect_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Protect)) {  							protect_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Protect)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									protect_VPlayer (id);  								}  							}  							else {  								protect_VPlayer (id);  							}  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerProtect_VSpan [id].Minutes >= Settings.Default.autoProtect_VMinutes)) {  						protect_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Phalanx II"  				if ((autoPhalanx_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Phalanx_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Phalanx)) {  							Phalanx_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerPhalanx_IISpan [id].Minutes >= Settings.Default.autoPhalanxIIMinutes)) {  						Phalanx_IIPlayer (id);  					}  				}  				#endregion  				#region "== Auto Regen IV & V"  				if ((autoRegen_IVEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_IV) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_IVPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_IVPlayer (id);  								}  							}  							else {  								Regen_IVPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_IVSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) || (playerRegen_IVSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenIVMinutes)) == 1))) {  						Regen_IVPlayer (id);  					}  				}  				if ((autoRegen_VEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Regen_V) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Regen)) {  							Regen_VPlayer (id);  						}  					}  					else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  						if (!monitoredStatusCheck (StatusEffect.Regen)) {  							if (Settings.Default.AutoCastEngageCheckBox) {  								if (_FFACEMonitored.Player.Status == Status.Fighting) {  									Regen_VPlayer (id);  								}  							}  							else {  								Regen_VPlayer (id);  							}  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRegen_VSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) || (playerRegen_VSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRegenVMinutes)) == 1))) {  						Regen_VPlayer (id);  					}  				}  				#endregion  				#region "== Auto Refresh & II"  				if ((autoRefreshEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							RefreshPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefreshSpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) || (playerRefreshSpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshMinutes)) == 1))) {  						RefreshPlayer (id);  					}  				}  				if ((autoRefresh_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Refresh_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  					if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!plStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if ((_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  						if (!monitoredStatusCheck (StatusEffect.Refresh)) {  							Refresh_IIPlayer (id);  						}  					}  					else if (_FFACEMonitored.PartyMember [id].HPCurrent > 0 && (playerRefresh_IISpan [id].Equals (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) || (playerRefresh_IISpan [id].CompareTo (TimeSpan.FromMinutes ((double)Settings.Default.autoRefreshIIMinutes)) == 1))) {  						Refresh_IIPlayer (id);  					}  				}  			#endregion  			// so PL job abilities are in order  			#region "== All other Job Abilities"  			}  			if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  				if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  				else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  					_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  					ActionLockMethod ();  				}  			}  		}  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  	if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  		if (!plStatusCheck ((StatusEffect)581)) {  			FlurryPlayer (id);  		}  	}  	else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  		if (!monitoredStatusCheck ((StatusEffect)581)) {  			// Check if we are flurring only if fighting  			if (Settings.Default.AutoCastEngageCheckBox) {  				// if we are' check to make sure we are fighting before flurring  				if (_FFACEMonitored.Player.Status == Status.Fighting) {  					// Flurry player  					FlurryPlayer (id);  				}  			}  			// If we are not flurring only during fighting' cast flurry  			else {  				FlurryPlayer (id);  			}  		}  	}  	else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  		FlurryPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((autoFlurryEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  	if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  		if (!plStatusCheck ((StatusEffect)581)) {  			FlurryPlayer (id);  		}  	}  	else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  		if (!monitoredStatusCheck ((StatusEffect)581)) {  			// Check if we are flurring only if fighting  			if (Settings.Default.AutoCastEngageCheckBox) {  				// if we are' check to make sure we are fighting before flurring  				if (_FFACEMonitored.Player.Status == Status.Fighting) {  					// Flurry player  					FlurryPlayer (id);  				}  			}  			// If we are not flurring only during fighting' cast flurry  			else {  				FlurryPlayer (id);  			}  		}  	}  	else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  		FlurryPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  	if (!plStatusCheck ((StatusEffect)581)) {  		FlurryPlayer (id);  	}  }  else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry player  				FlurryPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			FlurryPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	FlurryPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  	if (!plStatusCheck ((StatusEffect)581)) {  		FlurryPlayer (id);  	}  }  else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry player  				FlurryPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			FlurryPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	FlurryPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!plStatusCheck ((StatusEffect)581)) {  	FlurryPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry player  				FlurryPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			FlurryPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurrySpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	FlurryPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!monitoredStatusCheck ((StatusEffect)581)) {  	// Check if we are flurring only if fighting  	if (Settings.Default.AutoCastEngageCheckBox) {  		// if we are' check to make sure we are fighting before flurring  		if (_FFACEMonitored.Player.Status == Status.Fighting) {  			// Flurry player  			FlurryPlayer (id);  		}  	}  	// If we are not flurring only during fighting' cast flurry  	else {  		FlurryPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  	if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  		if (!plStatusCheck ((StatusEffect)581)) {  			Flurry_IIPlayer (id);  		}  	}  	else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  		if (!monitoredStatusCheck ((StatusEffect)581)) {  			// Check if we are flurring only if fighting  			if (Settings.Default.AutoCastEngageCheckBox) {  				// if we are' check to make sure we are fighting before flurring  				if (_FFACEMonitored.Player.Status == Status.Fighting) {  					// Flurry II player  					Flurry_IIPlayer (id);  				}  			}  			// If we are not flurring only during fighting' cast flurry  			else {  				Flurry_IIPlayer (id);  			}  		}  	}  	else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  		Flurry_IIPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((autoFlurry_IIEnabled [id]) && (_FFACEPL.Timer.GetSpellRecast (SpellList.Flurry_II) == 0) && (_FFACEPL.Player.MPCurrent > Settings.Default.mpMinCastValue) && (!castingLock) && (castingPossible (id))) {  	if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  		if (!plStatusCheck ((StatusEffect)581)) {  			Flurry_IIPlayer (id);  		}  	}  	else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  		if (!monitoredStatusCheck ((StatusEffect)581)) {  			// Check if we are flurring only if fighting  			if (Settings.Default.AutoCastEngageCheckBox) {  				// if we are' check to make sure we are fighting before flurring  				if (_FFACEMonitored.Player.Status == Status.Fighting) {  					// Flurry II player  					Flurry_IIPlayer (id);  				}  			}  			// If we are not flurring only during fighting' cast flurry  			else {  				Flurry_IIPlayer (id);  			}  		}  	}  	else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  		Flurry_IIPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  	if (!plStatusCheck ((StatusEffect)581)) {  		Flurry_IIPlayer (id);  	}  }  else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry II player  				Flurry_IIPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			Flurry_IIPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	Flurry_IIPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((_FFACEPL.Player.ID == _FFACEMonitored.PartyMember [id].ID)) {  	if (!plStatusCheck ((StatusEffect)581)) {  		Flurry_IIPlayer (id);  	}  }  else if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry II player  				Flurry_IIPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			Flurry_IIPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	Flurry_IIPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!plStatusCheck ((StatusEffect)581)) {  	Flurry_IIPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (_FFACEMonitored.Player.ID == _FFACEMonitored.PartyMember [id].ID) {  	if (!monitoredStatusCheck ((StatusEffect)581)) {  		// Check if we are flurring only if fighting  		if (Settings.Default.AutoCastEngageCheckBox) {  			// if we are' check to make sure we are fighting before flurring  			if (_FFACEMonitored.Player.Status == Status.Fighting) {  				// Flurry II player  				Flurry_IIPlayer (id);  			}  		}  		// If we are not flurring only during fighting' cast flurry  		else {  			Flurry_IIPlayer (id);  		}  	}  }  else if ((_FFACEMonitored.PartyMember [id].HPCurrent > 0) && (playerFlurry_IISpan [id].Minutes >= Settings.Default.autoHasteMinutes)) {  	Flurry_IIPlayer (id);  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!monitoredStatusCheck ((StatusEffect)581)) {  	// Check if we are flurring only if fighting  	if (Settings.Default.AutoCastEngageCheckBox) {  		// if we are' check to make sure we are fighting before flurring  		if (_FFACEMonitored.Player.Status == Status.Fighting) {  			// Flurry II player  			Flurry_IIPlayer (id);  		}  	}  	// If we are not flurring only during fighting' cast flurry  	else {  		Flurry_IIPlayer (id);  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if (!castingLock && !plStatusCheck (StatusEffect.Amnesia)) {  	if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  		ActionLockMethod ();  	}  	else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  		_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  		ActionLockMethod ();  	}  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.afflatusSolice) && (!plStatusCheck (StatusEffect.Afflatus_Solace)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Solace) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Afflatus Solace\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.afflatusMisery) && (!plStatusCheck (StatusEffect.Afflatus_Misery)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Afflatus_Misery) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Afflatus Misery\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.Composure) && (!plStatusCheck (StatusEffect.Composure)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Composure) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Composure\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.lightArts) && (!plStatusCheck (StatusEffect.Light_Arts)) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Light_Arts) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Light Arts\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.addWhite) && (!plStatusCheck (StatusEffect.Addendum_White)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Stratagems) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Addendum: White\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.sublimation) && (!plStatusCheck (StatusEffect.Sublimation_Activated)) && (!plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  else if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,actionTimer_Tick,The following statement contains a magic number: if ((Settings.Default.sublimation) && ((_FFACEPL.Player.MPMax - _FFACEPL.Player.MPCurrent) > (_FFACEPL.Player.HPMax * .4)) && (plStatusCheck (StatusEffect.Sublimation_Complete)) && (_FFACEPL.Timer.GetAbilityRecast (AbilityList.Sublimation) == 0)) {  	_FFACEPL.Windower.SendString ("/ja \"Sublimation\" <me>");  	ActionLockMethod ();  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetShellraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Shellra";  case 2:  	return "Shellra II";  case 3:  	return "Shellra III";  case 4:  	return "Shellra IV";  case 5:  	return "Shellra V";  default:  	return "Shellra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetShellraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Shellra";  case 2:  	return "Shellra II";  case 3:  	return "Shellra III";  case 4:  	return "Shellra IV";  case 5:  	return "Shellra V";  default:  	return "Shellra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetShellraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Shellra";  case 2:  	return "Shellra II";  case 3:  	return "Shellra III";  case 4:  	return "Shellra IV";  case 5:  	return "Shellra V";  default:  	return "Shellra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetShellraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Shellra";  case 2:  	return "Shellra II";  case 3:  	return "Shellra III";  case 4:  	return "Shellra IV";  case 5:  	return "Shellra V";  default:  	return "Shellra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetProtectraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Protectra";  case 2:  	return "Protectra II";  case 3:  	return "Protectra III";  case 4:  	return "Protectra IV";  case 5:  	return "Protectra V";  default:  	return "Protectra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetProtectraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Protectra";  case 2:  	return "Protectra II";  case 3:  	return "Protectra III";  case 4:  	return "Protectra IV";  case 5:  	return "Protectra V";  default:  	return "Protectra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetProtectraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Protectra";  case 2:  	return "Protectra II";  case 3:  	return "Protectra III";  case 4:  	return "Protectra IV";  case 5:  	return "Protectra V";  default:  	return "Protectra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,GetProtectraLevel,The following statement contains a magic number: switch ((int)p) {  case 1:  	return "Protectra";  case 2:  	return "Protectra II";  case 3:  	return "Protectra III";  case 4:  	return "Protectra IV";  case 5:  	return "Protectra V";  default:  	return "Protectra";  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 2;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 3;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 4;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 5;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 6;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [6];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 7;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [7];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 8;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [8];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 9;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [9];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 10;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [10];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 11;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [11];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 12;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [12];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 13;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [13];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 14;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [14];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 15;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [15];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 16;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [16];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: playerOptionsSelected = 17;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoHasteToolStripMenuItem.Checked = autoHasteEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoHasteIIToolStripMenuItem.Checked = autoHaste_IIEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoFlurryToolStripMenuItem.Checked = autoFlurryEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoFlurryIIToolStripMenuItem.Checked = autoFlurry_IIEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoProtectIVToolStripMenuItem1.Checked = autoProtect_IVEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoProtectVToolStripMenuItem1.Checked = autoProtect_VEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoShellIVToolStripMenuItem.Checked = autoShell_IVEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17optionsButton_Click,The following statement contains a magic number: autoShellVToolStripMenuItem.Checked = autoShell_VEnabled [17];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 2;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoPhalanxIIToolStripMenuItem1.Checked = autoPhalanx_IIEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoRegenIVToolStripMenuItem1.Checked = autoRegen_IVEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoRefreshToolStripMenuItem1.Checked = autoRefreshEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoRegenVToolStripMenuItem.Checked = autoRegen_VEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player2buffsButton_Click,The following statement contains a magic number: autoRefreshIIToolStripMenuItem.Checked = autoRefresh_IIEnabled [2];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 3;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoPhalanxIIToolStripMenuItem1.Checked = autoPhalanx_IIEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoRegenIVToolStripMenuItem1.Checked = autoRegen_IVEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoRefreshToolStripMenuItem1.Checked = autoRefreshEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoRegenVToolStripMenuItem.Checked = autoRegen_VEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player3buffsButton_Click,The following statement contains a magic number: autoRefreshIIToolStripMenuItem.Checked = autoRefresh_IIEnabled [3];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 4;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoPhalanxIIToolStripMenuItem1.Checked = autoPhalanx_IIEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoRegenIVToolStripMenuItem1.Checked = autoRegen_IVEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoRefreshToolStripMenuItem1.Checked = autoRefreshEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoRegenVToolStripMenuItem.Checked = autoRegen_VEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player4buffsButton_Click,The following statement contains a magic number: autoRefreshIIToolStripMenuItem.Checked = autoRefresh_IIEnabled [4];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 5;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoPhalanxIIToolStripMenuItem1.Checked = autoPhalanx_IIEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoRegenIVToolStripMenuItem1.Checked = autoRegen_IVEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoRefreshToolStripMenuItem1.Checked = autoRefreshEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoRegenVToolStripMenuItem.Checked = autoRegen_VEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player5buffsButton_Click,The following statement contains a magic number: autoRefreshIIToolStripMenuItem.Checked = autoRefresh_IIEnabled [5];  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player6buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 6;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player7buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 7;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player8buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 8;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player9buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 9;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player10buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 10;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player11buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 11;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player12buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 12;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player13buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 13;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player14buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 14;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player15buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 15;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player16buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 16;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,player17buffsButton_Click,The following statement contains a magic number: autoOptionsSelected = 17;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,castingStatusCheck_Tick,The following statement contains a magic number: if (_FFACEPL.Player.CastPercentEx >= 75) {  	castingLockLabel.Text = "Casting is soon to be UNLOCKED!";  	castingStatusCheck.Enabled = false;  	castingUnlockTimer.Enabled = true;  }  else if (castingSafetyPercentage == _FFACEPL.Player.CastPercentEx) {  	castingLockLabel.Text = "Casting is INTERRUPTED!";  	castingStatusCheck.Enabled = false;  	castingUnlockTimer.Enabled = true;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,trackBar1_Scroll,The following statement contains a magic number: Opacity = trackBar1.Value * 0.01;  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckShellraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plShellralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckShellraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plShellralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckShellraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plShellralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckShellraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plShellralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Shellra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckProtectraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plProtectralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckProtectraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plProtectralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckProtectraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plProtectralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form1,C:\repos\h1pp0_Cure-Please\Form1.cs,CheckProtectraLevelRecast,The following statement contains a magic number: switch ((int)Settings.Default.plProtectralevel) {  case 1:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra) == 0;  case 2:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_II) == 0;  case 3:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_III) == 0;  case 4:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_IV) == 0;  case 5:  	return _FFACEPL.Timer.GetSpellRecast (SpellList.Protectra_V) == 0;  default:  	return false;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plReraiseLevel == 1) {  	plReraiseLevel1.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 2) {  	plReraiseLevel2.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 3) {  	plReraiseLevel3.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plReraiseLevel == 1) {  	plReraiseLevel1.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 2) {  	plReraiseLevel2.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 3) {  	plReraiseLevel3.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plReraiseLevel == 2) {  	plReraiseLevel2.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 3) {  	plReraiseLevel3.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plReraiseLevel == 2) {  	plReraiseLevel2.Checked = true;  }  else if (Properties.Settings.Default.plReraiseLevel == 3) {  	plReraiseLevel3.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plReraiseLevel == 3) {  	plReraiseLevel3.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plRefreshLevel == 1) {  	plRefreshLevel1.Checked = true;  }  else if (Properties.Settings.Default.plRefreshLevel == 2) {  	plRefreshLevel2.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2,The following statement contains a magic number: if (Properties.Settings.Default.plRefreshLevel == 2) {  	plRefreshLevel2.Checked = true;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plReraiseLevel1.Checked) {  	Properties.Settings.Default.plReraiseLevel = 1;  }  else if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plReraiseLevel1.Checked) {  	Properties.Settings.Default.plReraiseLevel = 1;  }  else if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: Properties.Settings.Default.plReraiseLevel = 2;  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: Properties.Settings.Default.plReraiseLevel = 3;  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plRefreshLevel1.Checked) {  	Properties.Settings.Default.plRefreshLevel = 1;  }  else if (plRefreshLevel2.Checked) {  	Properties.Settings.Default.plRefreshLevel = 2;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: if (plRefreshLevel2.Checked) {  	Properties.Settings.Default.plRefreshLevel = 2;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,button4_Click,The following statement contains a magic number: Properties.Settings.Default.plRefreshLevel = 2;  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plReraiseLevel1.Checked) {  	Properties.Settings.Default.plReraiseLevel = 1;  }  else if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plReraiseLevel1.Checked) {  	Properties.Settings.Default.plReraiseLevel = 1;  }  else if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plReraiseLevel2.Checked) {  	Properties.Settings.Default.plReraiseLevel = 2;  }  else if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: Properties.Settings.Default.plReraiseLevel = 2;  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plReraiseLevel3.Checked) {  	Properties.Settings.Default.plReraiseLevel = 3;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: Properties.Settings.Default.plReraiseLevel = 3;  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plRefreshLevel1.Checked) {  	Properties.Settings.Default.plRefreshLevel = 1;  }  else if (plRefreshLevel2.Checked) {  	Properties.Settings.Default.plRefreshLevel = 2;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: if (plRefreshLevel2.Checked) {  	Properties.Settings.Default.plRefreshLevel = 2;  }  
Magic Number,CurePlease,Form2,C:\repos\h1pp0_Cure-Please\Form2.cs,Form2_FormClosing,The following statement contains a magic number: Properties.Settings.Default.plRefreshLevel = 2;  
