Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,MqttLib,IMqttConnectDisconnect,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\IMqttConnectDisconnect.cs,Connect,The method has 5 parameters. Parameters: willTopic' willQoS' willMsg' willRetain' cleanStart
Long Parameter List,MqttLib,Mqtt,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Mqtt.cs,Mqtt,The method has 5 parameters. Parameters: connString' clientID' username' password' store
Long Parameter List,MqttLib,Mqtt,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Mqtt.cs,Connect,The method has 5 parameters. Parameters: willTopic' willQoS' willMsg' willRetain' cleanStart
Long Parameter List,MqttLib,MqttClientFactory,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\MqttClientFactory.cs,CreateClient,The method has 5 parameters. Parameters: connString' clientId' username' password' persistence
Long Parameter List,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,MqttConnectMessage,The method has 5 parameters. Parameters: clientID' username' password' keepAlive' cleanStart
Long Parameter List,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,MqttConnectMessage,The method has 9 parameters. Parameters: clientID' username' password' keepAlive' willTopic' willPayload' willQos' willRetained' cleanStart
Long Parameter List,MqttLib.Core.Messages,MqttPublishMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttPublishMessage.cs,MqttPublishMessage,The method has 5 parameters. Parameters: id' topic' payload' qos' retained
Long Statement,MqttLib.Core,StreamFactory,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\StreamFactory.cs,CreateStream,The length of the statement  "            if( locScheme < 0 ) throw new MalformedConnectionStringException("Could not find " + DIV_SCHEME + " in the connection string"); " is 127.
Virtual Method Call from Constructor,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,MqttMessage,The constructor "MqttMessage" calls a virtual method "ConstructFromStream".
Magic Number,MqttLib,Mqtt,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Mqtt.cs,DoConnect,The following statement contains a magic number: try              {                  manager.Connect();                  manager.SendMessage(conmsg);                  manager.WaitForResponse();                  TimerCallback callback = new TimerCallback(tmrCallback);                  // TODO: Set Keep Alive interval and keepAlive time as property of client                  int keepAliveInterval = 1000 * _keepAlive;                  keepAliveTimer = new Timer(callback' null' keepAliveInterval' keepAliveInterval);              }              catch (Exception e)              {                  throw new MqttBrokerUnavailableException("Unable to connect to the broker"' e);              }
Magic Number,MqttLib,Mqtt,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Mqtt.cs,Publish,The following statement contains a magic number: if (manager.IsConnected)              {                  // Reset the PINGREQ timer as this publish will reset the server's counter                  if (keepAliveTimer != null)                  {                      int kmillis = 1000 * _keepAlive;                      keepAliveTimer.Change(kmillis' kmillis);                  }                  ushort messID = MessageID;                  manager.SendMessage(new MqttPublishMessage(messID' topic' payload.TrimmedBuffer' qos' retained));                  return messID;              }              else              {                  throw new MqttNotConnectedException("You need to connect to a broker before trying to Publish");              }
Magic Number,MqttLib.Core.Messages,MessageFactory,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MessageFactory.cs,CreateMessage,The following statement contains a magic number: MessageType messageType = (MessageType)((header & 0xf0) >> 4);
Magic Number,MqttLib.Core.Messages,MqttConnackMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnackMessage.cs,ConstructFromStream,The following statement contains a magic number: byte[] buffer = new byte[2];
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,SetConnectVariableHeaderCommon,The following statement contains a magic number: base.variableHeaderLength = (                protocolDesc.Length + //Length of the protocol description                3 +                   //Connect Flags + Keep alive                _clientID.Length +    // Length of the client ID string                2                     // The length of the length of the clientID              );
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,SetConnectVariableHeaderCommon,The following statement contains a magic number: base.variableHeaderLength = (                protocolDesc.Length + //Length of the protocol description                3 +                   //Connect Flags + Keep alive                _clientID.Length +    // Length of the client ID string                2                     // The length of the length of the clientID              );
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,SetConnectVariableHeaderCommon,The following statement contains a magic number: if (_containsUsername)                  base.variableHeaderLength += _username.Length + 2;
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,SetConnectVariableHeaderCommon,The following statement contains a magic number: if (_containsPassword)                  base.variableHeaderLength += _password.Length + 2;
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,MqttConnectMessage,The following statement contains a magic number: _connectFlags = (byte)(                0x04 | // LWT enabled                (willRetained ? 0x20 : 0) | // LWT is retained?                (cleanStart ? 0x02 : 0) | // Clean Start                (_containsPassword ? 0x40 : 0) |                  (_containsUsername ? 0x80 : 0) |                ((byte)willQos) << 3        // LWT QoS              );
Magic Number,MqttLib.Core.Messages,MqttConnectMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttConnectMessage.cs,MqttConnectMessage,The following statement contains a magic number: base.variableHeaderLength += (                _willTopic.Length +                _willPayload.Length +                4              );
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,ConstructHeader,The following statement contains a magic number: msgType = (MessageType)((header & 0xf0) >> 4);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,DecodeVariableHeaderLength,The following statement contains a magic number: do               {                  digit = str.ReadByte();                  if (digit == -1)                  {                      return 0;                  }                  value += (digit & 127) * multiplier;                   multiplier *= 128;              }              while ((digit & 128) != 0);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,DecodeVariableHeaderLength,The following statement contains a magic number: do               {                  digit = str.ReadByte();                  if (digit == -1)                  {                      return 0;                  }                  value += (digit & 127) * multiplier;                   multiplier *= 128;              }              while ((digit & 128) != 0);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,DecodeVariableHeaderLength,The following statement contains a magic number: do               {                  digit = str.ReadByte();                  if (digit == -1)                  {                      return 0;                  }                  value += (digit & 127) * multiplier;                   multiplier *= 128;              }              while ((digit & 128) != 0);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,EncodeVariableHeaderLength,The following statement contains a magic number: do              {                  digit = (byte)(length % 128);                  length /= 128;                  if (length > 0)                  {                      digit |= 0x80;                  }                  str.WriteByte(digit);              }              while ( length > 0);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,EncodeVariableHeaderLength,The following statement contains a magic number: do              {                  digit = (byte)(length % 128);                  length /= 128;                  if (length > 0)                  {                      digit |= 0x80;                  }                  str.WriteByte(digit);              }              while ( length > 0);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,Serialise,The following statement contains a magic number: byte header = (byte)((byte)msgType << 4);
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,Serialise,The following statement contains a magic number: if (isDuplicate)              {                  header |= 8;              }
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,WriteToStream,The following statement contains a magic number: str.WriteByte((byte)(val >> 8));
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,ReadUshortFromStream,The following statement contains a magic number: byte[] data = new byte[2];
Magic Number,MqttLib.Core.Messages,MqttMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttMessage.cs,ReadUshortFromStream,The following statement contains a magic number: return (ushort)((data[0] << 8) + data[1]);
Magic Number,MqttLib.Core.Messages,MqttPublishMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttPublishMessage.cs,MqttPublishMessage,The following statement contains a magic number: base.variableHeaderLength =            2 + GetUTF8StringLength(topic) +    // Topic + length            (qos == QoS.BestEfforts ? 0 : 2) +  // Message ID for QoS > 0            payload.Length;
Magic Number,MqttLib.Core.Messages,MqttPublishMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttPublishMessage.cs,MqttPublishMessage,The following statement contains a magic number: base.variableHeaderLength =            2 + GetUTF8StringLength(topic) +    // Topic + length            (qos == QoS.BestEfforts ? 0 : 2) +  // Message ID for QoS > 0            payload.Length;
Magic Number,MqttLib.Core.Messages,MqttPublishMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttPublishMessage.cs,ConstructFromStream,The following statement contains a magic number: payloadLen -= (GetUTF8StringLength(_topic) + 2);
Magic Number,MqttLib.Core.Messages,MqttPublishMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttPublishMessage.cs,ConstructFromStream,The following statement contains a magic number: if (msgQos != QoS.BestEfforts) {            _messageID = ReadUshortFromStream(str);            payloadLen -= 2;          }
Magic Number,MqttLib.Core.Messages,MqttSubackMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttSubackMessage.cs,ConstructFromStream,The following statement contains a magic number: int qosCount = variableHeaderLength - 2;
Magic Number,MqttLib.Core.Messages,MqttSubscribeMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttSubscribeMessage.cs,MqttSubscribeMessage,The following statement contains a magic number: foreach (Subscription s in _subscriptions)              {                payloadLength += (2 + GetUTF8StringLength(s.Topic) + 1);              }
Magic Number,MqttLib.Core.Messages,MqttSubscribeMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttSubscribeMessage.cs,MqttSubscribeMessage,The following statement contains a magic number: this.variableHeaderLength = (                                              2 + // Length of message ID                                              payloadLength // Length of the payload                                          );
Magic Number,MqttLib.Core.Messages,MqttUnsubscribeMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttUnsubscribeMessage.cs,MqttUnsubscribeMessage,The following statement contains a magic number: foreach (string topic in _topics)              {                  payloadLength += (2 + GetUTF8StringLength(topic));              }
Magic Number,MqttLib.Core.Messages,MqttUnsubscribeMessage,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\Messages\MqttUnsubscribeMessage.cs,MqttUnsubscribeMessage,The following statement contains a magic number: variableHeaderLength = 2 + payloadLength;
Magic Number,MqttLib.Core,QoSManager,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Core\QoSManager.cs,MessageDaemon,The following statement contains a magic number: while (_running)              {                  // Check if we should re-send some messages                  lock (_messages)                  {                      DateTime now = DateTime.Now;                        foreach (MqttMessage mess in _messages.Values)                      {                          TimeSpan ts = now - new DateTime(mess.Timestamp);                          if( ts.TotalMilliseconds >= _resendInterval )                          {                              mess.Timestamp = now.Ticks;                              mess.Duplicate = true;                              try                              {                                Log.Write( LogLevel.DEBUG' "Re-Sending - " + mess.MessageID);                                _strManager.SendMessage(mess);                              }                              catch (Exception e) {                                Log.Write(LogLevel.ERROR' e.ToString());                                // If we fail for some reason' we will try again another time automatically                              }                          }                      }                  }                  Thread.Sleep(2000);              }
Magic Number,MqttLib.Logger,FileLog,C:\repos\stevenlovegrove_MqttDotNet\MqttLib\Logger\FileLog.cs,OpenFile,The following statement contains a magic number: try              {                  if (File.Exists(_filename))                  {                      FileInfo tempLogFile = new FileInfo(_filename);                      // Check whether this log file is too large                      if (tempLogFile.Length / 1024 >= MaxSize)                      {                          switch (Mode)                          {                              case LogFileModes.ROTATE:                                  append = false;                                  break;                              case LogFileModes.SEPARATE:                                  //change the filename                                  _filename = tempLogFile.Directory.FullName +                                              "\\" + Name + "_" + DateTime.Now.Ticks +                                              ".log";                                  break;                              default:                              // Do nothing                                  break;                          }                      }                  }                  // Attempt to open the file                  FileInfo logFile = new FileInfo(_filename);                  FileMode m;                  if (append)                   {                       m = FileMode.Append;                   }                  else                  {                       m = FileMode.OpenOrCreate;                  }                                    stm = (Stream)logFile.Open(m' FileAccess.Write);                                                  }              catch (Exception e)              {                  Console.Error.WriteLine("Failed to open log file: " + e.Message);                  stm = null;              }
