Implementation smell,Namespace,Class,File,Method,Description
Long Method,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combineCategorical,The method has 100 lines of code.
Complex Method,BigML,Arguments,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\Arguments.cs,ToJson,Cyclomatic complexity of the method is 12
Complex Method,BigML,LocalCluster,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCluster.cs,LocalCluster,Cyclomatic complexity of the method is 8
Complex Method,BigML,LocalCluster,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCluster.cs,getUniqueTerms,Cyclomatic complexity of the method is 11
Complex Method,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combineCategorical,Cyclomatic complexity of the method is 12
Complex Method,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,weightedConfidence,Cyclomatic complexity of the method is 10
Complex Method,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,classificationBoostingCombiner,Cyclomatic complexity of the method is 11
Complex Method,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combine,Cyclomatic complexity of the method is 8
Long Parameter List,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,Client,The method has 6 parameters. Parameters: userName' apiKey' devMode' vpcDomain' useContextInAwaits' debug
Long Parameter List,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,Create,The method has 5 parameters. Parameters: dataset' name' inputFields' objectiveField' arguments
Long Parameter List,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,CreateModel,The method has 5 parameters. Parameters: dataset' name' inputFields' objectiveField' arguments
Long Parameter List,BigML,LocalEnsemble,C:\repos\bigmlcom_bigml-csharp\BigML\Ensemble\LocalEnsemble.cs,predict,The method has 5 parameters. Parameters: inputData' byName' combiner' missing_strategy' addDistribution
Long Parameter List,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,avg,The method has 5 parameters. Parameters: withConfidence' addConfidence' addDistribution' addCount' addMedian
Long Parameter List,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,errorWeighted,The method has 5 parameters. Parameters: withConfidence' addConfidence' addDistribution' addCount' addMedian
Long Parameter List,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combine,The method has 9 parameters. Parameters: method' withConfidence' addConfidence' addDistribution' addCount' addMedian' addMin' addMax' options
Long Statement,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,Delete,The length of the statement  "                    return new Response { Object = JValue.Parse(await response.Content.ReadAsStringAsync().ConfigureAwait(_useContextInAwaits)) }; " is 126.
Long Statement,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,errorWeighted,The length of the statement  "            double? combinedError = 0.0d' topRange = 10.0d' result = 0.0d' medianResult = 0.0d' normalization_factor = this.normalizeError(topRange); " is 137.
Long Statement,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,probabilityWeight,The length of the statement  "                    throw new Exception("Probability weighting is not available because distribution seems to have " + total + " as number of instances in a node"); " is 144.
Long Statement,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,classificationBoostingCombiner,The length of the statement  "            List<Dictionary<string' Dictionary<object' object>>> sortedPredictions = new List<Dictionary<string' Dictionary<object' object>>>(); " is 132.
Long Statement,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,singleOutCategory,The length of the statement  "                throw new System.ArgumentException("No category and threshold information was found. Add threshold and category info." + " is 120.
Long Statement,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,appendRow,The length of the statement  "                            "The row must have label 'prediction' at least. And the number" + " of headers must much with the number of elements in the row."); " is 131.
Long Statement,BigML,Reflection,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Reflection.cs,CompileToAssembly,The length of the statement  "            var methodBuilder = typeBuilder.DefineMethod("Predict"' MethodAttributes.Public | MethodAttributes.Static' typeof(T)' new[] { typeof(S) }); " is 139.
Long Statement,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,printDistribution,The length of the statement  "                distributionStr.Append(string.Format("    {0}: {1:F2}% ({2:D} instance{3})\n"' binInfoArr[0]' Utils.roundOff((float)(((int)binInfoArr[1]) * 1.0 / total)' 4) * 100' binInfoArr[1]' (((int)binInfoArr[1]) == 1 ? "" : "s"))); " is 220.
Long Statement,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,mergeBins,The length of the statement  "            newBin.Add((JValue) (((((double)left[0]) * ((double)left[1])) + (((double)right[0]) * ((double)right[1]))) / (((double)left[1]) + ((double)right[1])))); //  position 0 " is 167.
Long Statement,BigML,Filtered<F;O;S>,C:\repos\bigmlcom_bigml-csharp\BigML\Query\Filtered.cs,Orderings,The length of the statement  "            if (_keySelector != null) orderings.Add(string.Format("order_by={1}{0}"' GetProperty(_keySelector.Body)' _descending ? "-" : "")); " is 130.
Long Statement,BigML,Ordered<F;O;S>,C:\repos\bigmlcom_bigml-csharp\BigML\Query\Ordered.cs,Orderings,The length of the statement  "            if(_keySelector != null) orderings.Add(string.Format("order_by={1}{0}"'GetProperty(_keySelector.Body)' _descending ? "-":"")); " is 126.
Magic Number,BigML,Arguments,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\Arguments.cs,Arguments,The following statement contains a magic number: NumberOfCluster = 8;
Magic Number,BigML,Arguments,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\Arguments.cs,Arguments,The following statement contains a magic number: Range = new List<int>(2);
Magic Number,BigML,Arguments,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\Arguments.cs,ToJson,The following statement contains a magic number: if(Range.Count >= 2)                      json.range = new JArray(Range.Take(2).Select(index => (JValue)index));
Magic Number,BigML,Arguments,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\Arguments.cs,ToJson,The following statement contains a magic number: if(Range.Count >= 2)                      json.range = new JArray(Range.Take(2).Select(index => (JValue)index));
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following statement contains a magic number: do              {                  ds = await this.Get<DataSet>(datasetID);                  downloadStatus = (int)ds.Object["download"]["code"];                  switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }              } while (downloadStatus != 5);
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following statement contains a magic number: do              {                  ds = await this.Get<DataSet>(datasetID);                  downloadStatus = (int)ds.Object["download"]["code"];                  switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }              } while (downloadStatus != 5);
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following statement contains a magic number: do              {                  ds = await this.Get<DataSet>(datasetID);                  downloadStatus = (int)ds.Object["download"]["code"];                  switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }              } while (downloadStatus != 5);
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following statement contains a magic number: do              {                  ds = await this.Get<DataSet>(datasetID);                  downloadStatus = (int)ds.Object["download"]["code"];                  switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }              } while (downloadStatus != 5);
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following statement contains a magic number: do              {                  ds = await this.Get<DataSet>(datasetID);                  downloadStatus = (int)ds.Object["download"]["code"];                  switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }              } while (downloadStatus != 5);
Magic Number,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,Wait,The following statement contains a magic number: while (resourceStatusCode != Code.Finished && resourceStatusCode != Code.Faulty)              {                  await Task.Delay(1000).ConfigureAwait(_useContextInAwaits);                  resource = await this.Get<T>(resourceId).ConfigureAwait(_useContextInAwaits);                  resourceStatusCode = (Code)(int)resource.Object.status.code;              }
Magic Number,BigML,LocalCentroid,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCentroid.cs,distance2,The following statement contains a magic number: foreach (KeyValuePair<string' dynamic> fieldData in _center)                  {                      string fieldId = fieldData.Key;                      dynamic value = fieldData.Value;                      string[] terms;                      string typeName = value.GetType().Name;                        double fScale = scales[fieldId];                      if (typeName == "JArray"){                          // text field                          value = value.ToObject<string[]>();                          if (!termSets.ContainsKey(fieldId))                          {                              terms = new string[] { };                          }                          else                          {                              terms = termSets[fieldId];                          }                          distance2 += cosineDistance2(terms' value' fScale);                          //System.Console.WriteLine("with field " + fieldId + "(Ar) d2 is " + distance2);                      }                      else if(typeName == "String")                      {                          // categorical field                          value = (string) value;                          if (!inputData.ContainsKey(fieldId) || inputData[fieldId] != value)                          {                              distance2 += 1 * Math.Pow(fScale' 2);                          }                          //System.Console.WriteLine("with field " + fieldId + "(st) d2 is " + distance2);                      }                      else {                          // numeric field                          distance2 += Math.Pow(((inputData[fieldId] - value) * fScale)' 2);                          //System.Console.WriteLine("with field " + fieldId + "(nu) d2 is " + distance2);                      }                        // if this centroid is farer than previous one => stop                      if (stopDistance2 != null && distance2 >= stopDistance2)                      {                          return null;                      }                  }
Magic Number,BigML,LocalCentroid,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCentroid.cs,distance2,The following statement contains a magic number: foreach (KeyValuePair<string' dynamic> fieldData in _center)                  {                      string fieldId = fieldData.Key;                      dynamic value = fieldData.Value;                      string[] terms;                      string typeName = value.GetType().Name;                        double fScale = scales[fieldId];                      if (typeName == "JArray"){                          // text field                          value = value.ToObject<string[]>();                          if (!termSets.ContainsKey(fieldId))                          {                              terms = new string[] { };                          }                          else                          {                              terms = termSets[fieldId];                          }                          distance2 += cosineDistance2(terms' value' fScale);                          //System.Console.WriteLine("with field " + fieldId + "(Ar) d2 is " + distance2);                      }                      else if(typeName == "String")                      {                          // categorical field                          value = (string) value;                          if (!inputData.ContainsKey(fieldId) || inputData[fieldId] != value)                          {                              distance2 += 1 * Math.Pow(fScale' 2);                          }                          //System.Console.WriteLine("with field " + fieldId + "(st) d2 is " + distance2);                      }                      else {                          // numeric field                          distance2 += Math.Pow(((inputData[fieldId] - value) * fScale)' 2);                          //System.Console.WriteLine("with field " + fieldId + "(nu) d2 is " + distance2);                      }                        // if this centroid is farer than previous one => stop                      if (stopDistance2 != null && distance2 >= stopDistance2)                      {                          return null;                      }                  }
Magic Number,BigML,LocalCentroid,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCentroid.cs,cosineDistance2,The following statement contains a magic number: if (termsLen == 0 || cenTermsL == 0)                      return Math.Pow(scale' 2.0);
Magic Number,BigML,LocalCentroid,C:\repos\bigmlcom_bigml-csharp\BigML\Cluster\LocalCentroid.cs,cosineDistance2,The following statement contains a magic number: return Math.Pow(similarityDistance' 2.0);
Magic Number,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,wsConfidence,The following statement contains a magic number: ws_sqrt = Math.Sqrt(((double)ws_p * (1 - (double)ws_p) + ws_factor / 4) / (double)ws_n);
Magic Number,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,wsConfidence,The following statement contains a magic number: return ((double)ws_p + ws_factor / 2 - ws_z * ws_sqrt) / (1 + ws_factor);
Magic Number,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combineCategorical,The following statement contains a magic number: foreach (string categoryStr in mode.Keys)              {                  dynamic[] oneTuple;                  if (mode[categoryStr] != null)                  {                      oneTuple = new dynamic[2];                      oneTuple[0] = categoryStr;                      oneTuple[1] = (Dictionary<string' object>) mode[categoryStr];                      tuples.Add(oneTuple);                  }              }
Magic Number,BigML,MultiVote,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\MultiVote.cs,combineDistribution,The following statement contains a magic number: object[] combinedDistribution = new object[2];
Magic Number,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,printDistribution,The following statement contains a magic number: foreach (object binInfo in distribution)              {                  JArray binInfoArr = (JArray)binInfo;                  distributionStr.Append(string.Format("    {0}: {1:F2}% ({2:D} instance{3})\n"' binInfoArr[0]' Utils.roundOff((float)(((int)binInfoArr[1]) * 1.0 / total)' 4) * 100' binInfoArr[1]' (((int)binInfoArr[1]) == 1 ? "" : "s")));              }
Magic Number,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,printDistribution,The following statement contains a magic number: foreach (object binInfo in distribution)              {                  JArray binInfoArr = (JArray)binInfo;                  distributionStr.Append(string.Format("    {0}: {1:F2}% ({2:D} instance{3})\n"' binInfoArr[0]' Utils.roundOff((float)(((int)binInfoArr[1]) * 1.0 / total)' 4) * 100' binInfoArr[1]' (((int)binInfoArr[1]) == 1 ? "" : "s")));              }
Magic Number,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,mergeBins,The following statement contains a magic number: if (limit < 1 || length <= limit || length < 2)              {                  return distribution;              }
Magic Number,BigML,Utils,C:\repos\bigmlcom_bigml-csharp\BigML\Helpers\Utils.cs,mergeBins,The following statement contains a magic number: int indexToMerge = 2;
Missing Default,BigML,Client,C:\repos\bigmlcom_bigml-csharp\BigML\Anomaly\BigMLClientAnomaly.cs,DownloadDataset,The following switch statement is missing a default case: switch (downloadStatus)                  {                      case 0:                      case 1:                      case 2:                      case 3:                          // not started or in progress => request                          Download(ds' null);                          await Task.Delay(5000);                          break;                      case 5:                          // finished => save                          fs = new FileStream(path' System.IO.FileMode.Create);                          await Download(ds' fs);                          fs.Flush();                          fs.Close();                          break;                      case -1:                          new System.Exception("An error occurred downloading the dataset export");                          break;                  }
Missing Default,BigML,Filtered<F;O;S>,C:\repos\bigmlcom_bigml-csharp\BigML\Query\Filtered.cs,GetPredicates,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.NotEqual:                      filters.Add(string.Format("{0}__={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.Equal:                      filters.Add(string.Format("{0}={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.GreaterThan:                      filters.Add(string.Format("{0}__gt={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.LessThan:                      filters.Add(string.Format("{0}__lt={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.LessThanOrEqual:                      filters.Add(string.Format("{0}__lte={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.GreaterThanOrEqual:                      filters.Add(string.Format("{0}__gte={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.AndAlso:                      filters.AddRange(GetPredicates(expression.Left as BinaryExpression));                      filters.AddRange(GetPredicates(expression.Right as BinaryExpression));                      break;              }
Missing Default,BigML,Ordered<F;O;S>,C:\repos\bigmlcom_bigml-csharp\BigML\Query\Ordered.cs,GetPredicates,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.NotEqual:                      filters.Add(string.Format("{0}__={1}"' GetProperty(expression.Left)'                                      isDate? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.Equal:                      filters.Add(string.Format("{0}={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.GreaterThan:                      filters.Add(string.Format("{0}__gt={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.LessThan:                      filters.Add(string.Format("{0}__lt={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.LessThanOrEqual:                      filters.Add(string.Format("{0}__lte={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.GreaterThanOrEqual:                      filters.Add(string.Format("{0}__gte={1}"' GetProperty(expression.Left)'                                      isDate ? DateToBigML(leftValue) : NoQuotes(expression.Right)));                      break;                  case ExpressionType.AndAlso:                      filters.AddRange(GetPredicates(expression.Left as BinaryExpression));                      filters.AddRange(GetPredicates(expression.Right as BinaryExpression));                      break;              }
