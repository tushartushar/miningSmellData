Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,Cyclomatic complexity of the method is 8
Complex Method,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,GetOutputSize,Cyclomatic complexity of the method is 12
Long Statement,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,GetOutputSize,The length of the statement  "	return PolygonMath.RoundPoints (PolygonMath.ScaleInside (new SizeF ((float)boundingWidth' (float)boundingHeight)' new SizeF ((float)width' (float)height))); " is 156.
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (string.IsNullOrEmpty (optionalPath)) {  	if (s.CanSeek) {  		//Check the header instead if no filename is present.  		byte[] header = new byte[4];  		s.Read (header' 0' 4);  		bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  		s.Seek (-4' SeekOrigin.Current);  		//Restore position.  		if (!isPdf)  			return null;  	} else {  		return null;  		//It's not seekable' we can't check the header.   	}  } else if (!SupportedExtensions.Contains (Path.GetExtension (optionalPath)' StringComparer.OrdinalIgnoreCase)) {  	// Not a supported format  	return null;  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (string.IsNullOrEmpty (optionalPath)) {  	if (s.CanSeek) {  		//Check the header instead if no filename is present.  		byte[] header = new byte[4];  		s.Read (header' 0' 4);  		bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  		s.Seek (-4' SeekOrigin.Current);  		//Restore position.  		if (!isPdf)  			return null;  	} else {  		return null;  		//It's not seekable' we can't check the header.   	}  } else if (!SupportedExtensions.Contains (Path.GetExtension (optionalPath)' StringComparer.OrdinalIgnoreCase)) {  	// Not a supported format  	return null;  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (string.IsNullOrEmpty (optionalPath)) {  	if (s.CanSeek) {  		//Check the header instead if no filename is present.  		byte[] header = new byte[4];  		s.Read (header' 0' 4);  		bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  		s.Seek (-4' SeekOrigin.Current);  		//Restore position.  		if (!isPdf)  			return null;  	} else {  		return null;  		//It's not seekable' we can't check the header.   	}  } else if (!SupportedExtensions.Contains (Path.GetExtension (optionalPath)' StringComparer.OrdinalIgnoreCase)) {  	// Not a supported format  	return null;  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (string.IsNullOrEmpty (optionalPath)) {  	if (s.CanSeek) {  		//Check the header instead if no filename is present.  		byte[] header = new byte[4];  		s.Read (header' 0' 4);  		bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  		s.Seek (-4' SeekOrigin.Current);  		//Restore position.  		if (!isPdf)  			return null;  	} else {  		return null;  		//It's not seekable' we can't check the header.   	}  } else if (!SupportedExtensions.Contains (Path.GetExtension (optionalPath)' StringComparer.OrdinalIgnoreCase)) {  	// Not a supported format  	return null;  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (string.IsNullOrEmpty (optionalPath)) {  	if (s.CanSeek) {  		//Check the header instead if no filename is present.  		byte[] header = new byte[4];  		s.Read (header' 0' 4);  		bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  		s.Seek (-4' SeekOrigin.Current);  		//Restore position.  		if (!isPdf)  			return null;  	} else {  		return null;  		//It's not seekable' we can't check the header.   	}  } else if (!SupportedExtensions.Contains (Path.GetExtension (optionalPath)' StringComparer.OrdinalIgnoreCase)) {  	// Not a supported format  	return null;  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (s.CanSeek) {  	//Check the header instead if no filename is present.  	byte[] header = new byte[4];  	s.Read (header' 0' 4);  	bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  	s.Seek (-4' SeekOrigin.Current);  	//Restore position.  	if (!isPdf)  		return null;  } else {  	return null;  	//It's not seekable' we can't check the header.   }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (s.CanSeek) {  	//Check the header instead if no filename is present.  	byte[] header = new byte[4];  	s.Read (header' 0' 4);  	bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  	s.Seek (-4' SeekOrigin.Current);  	//Restore position.  	if (!isPdf)  		return null;  } else {  	return null;  	//It's not seekable' we can't check the header.   }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (s.CanSeek) {  	//Check the header instead if no filename is present.  	byte[] header = new byte[4];  	s.Read (header' 0' 4);  	bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  	s.Seek (-4' SeekOrigin.Current);  	//Restore position.  	if (!isPdf)  		return null;  } else {  	return null;  	//It's not seekable' we can't check the header.   }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (s.CanSeek) {  	//Check the header instead if no filename is present.  	byte[] header = new byte[4];  	s.Read (header' 0' 4);  	bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  	s.Seek (-4' SeekOrigin.Current);  	//Restore position.  	if (!isPdf)  		return null;  } else {  	return null;  	//It's not seekable' we can't check the header.   }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: if (s.CanSeek) {  	//Check the header instead if no filename is present.  	byte[] header = new byte[4];  	s.Read (header' 0' 4);  	bool isPdf = (header [0] == '%' && header [1] == 'P' && header [2] == 'D' && header [3] == 'F');  	s.Seek (-4' SeekOrigin.Current);  	//Restore position.  	if (!isPdf)  		return null;  } else {  	return null;  	//It's not seekable' we can't check the header.   }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: s.Read (header' 0' 4);  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: s.Seek (-4' SeekOrigin.Current);  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: using (var pdf = PdfDocument.Load (s)) {  	// Extract the requested page number from resize settings' or default to first page  	int pageNumber = settings.GetValueOrDefault ("page"' 1);  	// Try to get the page number from PDF info. If not available' abort. This is caused by  	// requesting a page that does not exist.  	if (pageNumber < 1 || pageNumber > pdf.PageCount) {  		return null;  	}  	// Calculate the output size based on the actual size of the page.  	var pageSize = pdf.PageSizes [pageNumber - 1];  	var outputSize = GetOutputSize (settings' pageSize.Width' pageSize.Height);  	// Build the render flags from the provided settings.  	var flags = BuildFlags (settings);  	// Generate the PDF page.  	return (Bitmap)pdf.Render (pageNumber - 1' outputSize.Width' outputSize.Height' 96' 96' flags);  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: using (var pdf = PdfDocument.Load (s)) {  	// Extract the requested page number from resize settings' or default to first page  	int pageNumber = settings.GetValueOrDefault ("page"' 1);  	// Try to get the page number from PDF info. If not available' abort. This is caused by  	// requesting a page that does not exist.  	if (pageNumber < 1 || pageNumber > pdf.PageCount) {  		return null;  	}  	// Calculate the output size based on the actual size of the page.  	var pageSize = pdf.PageSizes [pageNumber - 1];  	var outputSize = GetOutputSize (settings' pageSize.Width' pageSize.Height);  	// Build the render flags from the provided settings.  	var flags = BuildFlags (settings);  	// Generate the PDF page.  	return (Bitmap)pdf.Render (pageNumber - 1' outputSize.Width' outputSize.Height' 96' 96' flags);  }  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: return (Bitmap)pdf.Render (pageNumber - 1' outputSize.Width' outputSize.Height' 96' 96' flags);  
Magic Number,ImageResizer.Plugins.PdfiumRenderer,PdfiumRendererPlugin,F:\newReposMay17\imazen_resizer\Contrib\PdfiumRenderer\PdfiumRenderer\PdfiumRendererPlugin.cs,DecodeStream,The following statement contains a magic number: return (Bitmap)pdf.Render (pageNumber - 1' outputSize.Width' outputSize.Height' 96' 96' flags);  
