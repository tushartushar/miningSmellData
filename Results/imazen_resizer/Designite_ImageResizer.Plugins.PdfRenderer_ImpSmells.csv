Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The method has 126 lines of code.
Complex Method,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,Cyclomatic complexity of the method is 10
Complex Method,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,GetOutputSize,Cyclomatic complexity of the method is 10
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The length of the statement  "                                                              {GhostscriptArgument.AlignToPixels' 0}' //Subpixel rendering depends on output device... perhaps testing would help determine if 1 would be better?" is 147.
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The length of the statement  "                    // NOTE: If the Bitmap class is used for decoding' read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath'stream);" is 135.
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,GetOutputSize,The length of the statement  "            return PolygonMath.RoundPoints(PolygonMath.ScaleInside(new SizeF((float)boundingWidth' (float)boundingHeight)' new SizeF((float)width' (float)height)));" is 152.
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,GetPathInfoResource,The length of the statement  "            string resourceName = assembly.GetManifestResourceNames().Single(x => x.EndsWith("pdfInfo.ps"' StringComparison.OrdinalIgnoreCase));" is 132.
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,ApplyResizeSettings,The length of the statement  "            ghostscriptSettings[GhostscriptArgument.GridFitTT] = (settings.Get<bool>("gridfit") == true ? 2 : 0).ToString(NumberFormatInfo.InvariantInfo);" is 142.
Long Statement,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,ApplyResizeSettings,The length of the statement  "            ghostscriptSettings[GhostscriptArgument.AlignToPixels] = (settings.Get<bool>("subpixels") == true ? 1 : 0).ToString(NumberFormatInfo.InvariantInfo);" is 148.
Complex Conditional,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The conditional expression  "data[0] == 0xFF && data[1] == 0xFE && data[2] == 0x00 && data[3] == 0x00"  is complex.
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,GhostscriptEngine,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\GhostscriptEngine.cs,IsAvailable,The following statement contains a magic number: return version != null && version.Major >= 9;
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,GhostscriptEngine,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\GhostscriptEngine.cs,Execute,The following statement contains a magic number: if(result != 0 && result != -101)             {                 // Use error as message if output is empty                 string error = errorBuilder.ToString();                 if(string.IsNullOrEmpty(output))                 {                     output = error;                 }                  GhostscriptException exception = new GhostscriptException(output);                 exception.Data["args"] = arguments;                 exception.Data["stderr"] = error;                 throw exception;             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,GhostscriptEngine,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\GhostscriptEngine.cs,GetNativeVersion,The following statement contains a magic number: string versionText = ((double)ghostscriptVersion.Revision / 100).ToString(CultureInfo.InvariantCulture);
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,GhostscriptEngine,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\GhostscriptEngine.cs,HandleOutputMessage,The following statement contains a magic number: if(length > 0)             {                 // Marshal unmanaged output to local buffer                 byte[] buffer = new byte[length];                 Marshal.Copy(source' buffer' 0' buffer.Length);                  // Determine encoding style                 System.Text.Encoding encoding = System.Text.Encoding.ASCII;                 if(length > 2)                 {                     // Try to detect if UNICODE by looking for byte order mark and assigning appropriate encoder                     if(buffer[0] == 0xFE && buffer[1] == 0xFF)                     {                         encoding = System.Text.Encoding.BigEndianUnicode;                     }                     else if(buffer[0] == 0xFF && buffer[1] == 0xFE)                     {                         encoding = System.Text.Encoding.Unicode;                     }                 }                  // Perform decode                 text = encoding.GetString(buffer' 0' buffer.Length);                 builder.Append(text);             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 4 == 0)             {                 if(data[0] == 0xFF && data[1] == 0xFE && data[2] == 0x00 && data[3] == 0x00)                 {                     // UTF-32 (Little Endian)                     return System.Text.Encoding.UTF32.GetString(data.Skip(4).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 4 == 0)             {                 if(data[0] == 0xFF && data[1] == 0xFE && data[2] == 0x00 && data[3] == 0x00)                 {                     // UTF-32 (Little Endian)                     return System.Text.Encoding.UTF32.GetString(data.Skip(4).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 4 == 0)             {                 if(data[0] == 0xFF && data[1] == 0xFE && data[2] == 0x00 && data[3] == 0x00)                 {                     // UTF-32 (Little Endian)                     return System.Text.Encoding.UTF32.GetString(data.Skip(4).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 4 == 0)             {                 if(data[0] == 0xFF && data[1] == 0xFE && data[2] == 0x00 && data[3] == 0x00)                 {                     // UTF-32 (Little Endian)                     return System.Text.Encoding.UTF32.GetString(data.Skip(4).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 2 == 0)             {                 if(data[0] == 0xFE && data[1] == 0xFF)                 {                     // UTF-16 (Big Endian)                     return System.Text.Encoding.BigEndianUnicode.GetString(data.Skip(2).ToArray());                 }                 if(data[0] == 0xFF && data[1] == 0xFE)                 {                     // UTF-16 (Little Endian)                     return System.Text.Encoding.Unicode.GetString(data.Skip(2).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 2 == 0)             {                 if(data[0] == 0xFE && data[1] == 0xFF)                 {                     // UTF-16 (Big Endian)                     return System.Text.Encoding.BigEndianUnicode.GetString(data.Skip(2).ToArray());                 }                 if(data[0] == 0xFF && data[1] == 0xFE)                 {                     // UTF-16 (Little Endian)                     return System.Text.Encoding.Unicode.GetString(data.Skip(2).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length % 2 == 0)             {                 if(data[0] == 0xFE && data[1] == 0xFF)                 {                     // UTF-16 (Big Endian)                     return System.Text.Encoding.BigEndianUnicode.GetString(data.Skip(2).ToArray());                 }                 if(data[0] == 0xFF && data[1] == 0xFE)                 {                     // UTF-16 (Little Endian)                     return System.Text.Encoding.Unicode.GetString(data.Skip(2).ToArray());                 }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length >= 3)             {                 if(data[0] == 0xEF && data[1] == 0xBB && data[2] == 0xBF)                 {                     return System.Text.Encoding.UTF8.GetString(data.Skip(3).ToArray());                                     }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length >= 3)             {                 if(data[0] == 0xEF && data[1] == 0xBB && data[2] == 0xBF)                 {                     return System.Text.Encoding.UTF8.GetString(data.Skip(3).ToArray());                                     }             }
Magic Number,ImageResizer.Plugins.PdfRenderer.Ghostscript,PdfInfo,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\Ghostscript\PdfInfo.cs,Decode,The following statement contains a magic number: if(data.Length >= 3)             {                 if(data[0] == 0xEF && data[1] == 0xBB && data[2] == 0xBF)                 {                     return System.Text.Encoding.UTF8.GetString(data.Skip(3).ToArray());                                     }             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: if(string.IsNullOrEmpty(optionalPath))             {                 if (s.CanSeek) {                     //Check the header instead if no filename is present.                     byte[] header = new byte[4];                     s.Read(header' 0' 4);                     bool isPdf = (header[0] == '%' && header[1] == 'P' && header[2] == 'D' && header[3] == 'F');                     s.Seek(-4' SeekOrigin.Current); //Restore position.                      if (!isPdf) return null;                 } else {                     return null; //It's not seekable' we can't check the header.                  }             } else if(!_supportedExtensions.Contains(Path.GetExtension(optionalPath)' StringComparer.OrdinalIgnoreCase))             {                 // Not a supported format                 return null;             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: if(string.IsNullOrEmpty(optionalPath))             {                 if (s.CanSeek) {                     //Check the header instead if no filename is present.                     byte[] header = new byte[4];                     s.Read(header' 0' 4);                     bool isPdf = (header[0] == '%' && header[1] == 'P' && header[2] == 'D' && header[3] == 'F');                     s.Seek(-4' SeekOrigin.Current); //Restore position.                      if (!isPdf) return null;                 } else {                     return null; //It's not seekable' we can't check the header.                  }             } else if(!_supportedExtensions.Contains(Path.GetExtension(optionalPath)' StringComparer.OrdinalIgnoreCase))             {                 // Not a supported format                 return null;             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: if(string.IsNullOrEmpty(optionalPath))             {                 if (s.CanSeek) {                     //Check the header instead if no filename is present.                     byte[] header = new byte[4];                     s.Read(header' 0' 4);                     bool isPdf = (header[0] == '%' && header[1] == 'P' && header[2] == 'D' && header[3] == 'F');                     s.Seek(-4' SeekOrigin.Current); //Restore position.                      if (!isPdf) return null;                 } else {                     return null; //It's not seekable' we can't check the header.                  }             } else if(!_supportedExtensions.Contains(Path.GetExtension(optionalPath)' StringComparer.OrdinalIgnoreCase))             {                 // Not a supported format                 return null;             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: if(string.IsNullOrEmpty(optionalPath))             {                 if (s.CanSeek) {                     //Check the header instead if no filename is present.                     byte[] header = new byte[4];                     s.Read(header' 0' 4);                     bool isPdf = (header[0] == '%' && header[1] == 'P' && header[2] == 'D' && header[3] == 'F');                     s.Seek(-4' SeekOrigin.Current); //Restore position.                      if (!isPdf) return null;                 } else {                     return null; //It's not seekable' we can't check the header.                  }             } else if(!_supportedExtensions.Contains(Path.GetExtension(optionalPath)' StringComparer.OrdinalIgnoreCase))             {                 // Not a supported format                 return null;             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: if(string.IsNullOrEmpty(optionalPath))             {                 if (s.CanSeek) {                     //Check the header instead if no filename is present.                     byte[] header = new byte[4];                     s.Read(header' 0' 4);                     bool isPdf = (header[0] == '%' && header[1] == 'P' && header[2] == 'D' && header[3] == 'F');                     s.Seek(-4' SeekOrigin.Current); //Restore position.                      if (!isPdf) return null;                 } else {                     return null; //It's not seekable' we can't check the header.                  }             } else if(!_supportedExtensions.Contains(Path.GetExtension(optionalPath)' StringComparer.OrdinalIgnoreCase))             {                 // Not a supported format                 return null;             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: try             {                 using(FileStream tempInputStream = tempInputPathInfo.Create())                 {                     StreamExtensions.CopyToStream(s' tempInputStream);                 }                  // Get information about the PDF such as page count and media boxes                 // Although this creates a second trip to Ghostscript engine' it's not possible to generate a rendered image in exact                   // dimensions requested. Skipping this step will cause a rendered image' of some size' to be resized further.                 PdfInfo pdfInfo = GetPdfInfo(tempInputPathInfo.FullName);                  // Extract the requested page number from resize settings' or default to first page                 int pageNumber = settings.GetValueOrDefault("page"' 1);                  // Try to get the page number from PDF info. If not available' abort. This is caused by                 // requesting a page that does not exist.                 PageInfo pageInfo = pdfInfo.Pages.SingleOrDefault(x => x.Number == pageNumber);                 if(pageInfo == null)                 {                     return null;                 }                  // We only support media box (as opposed to clip' bleed' art' etc.) If this is not available' abort.                 if(pageInfo.MediaBox == null)                 {                     return null;                 }                  // Get the output size of the generated bitmap by applying the resize settings and media box.                 Size outputSize = (pageInfo.Rotate == -90 || pageInfo.Rotate == 90) ?                      GetOutputSize(settings' pageInfo.MediaBox.Height'pageInfo.MediaBox.Width)                      : GetOutputSize(settings' pageInfo.MediaBox.Width' pageInfo.MediaBox.Height) ;                                     // Create default Ghostscript settings and apply the resize settings.                 GhostscriptSettings ghostscriptSettings = new GhostscriptSettings                                                           {                                                               GhostscriptArgument.NoPause'                                                               GhostscriptArgument.Quiet'                                                               GhostscriptArgument.Safer'                                                               GhostscriptArgument.Batch'                                                               {GhostscriptArgument.OutputDevice' "pngalpha"}'                                                               {GhostscriptArgument.MaxBitmap' 24000000}'                                                               {GhostscriptArgument.RenderingThreads' 4}'                                                               {GhostscriptArgument.GridFitTT' 0}'                                                               {GhostscriptArgument.AlignToPixels' 0}' //Subpixel rendering depends on output device... perhaps testing would help determine if 1 would be better?                                                               {GhostscriptArgument.FirstPage' pageNumber}'                                                               {GhostscriptArgument.LastPage' pageNumber}'                                                               GhostscriptArgument.Printed'                                                               GhostscriptArgument.PdfFitPage'                                                                GhostscriptArgument.FixedMedia'                                                               {GhostscriptArgument.Height' outputSize.Height}'                                                               {GhostscriptArgument.Width' outputSize.Width}                                                           };                 ApplyResizeSettings(settings' ghostscriptSettings);                  // Have Ghostscript process the input to a PNG file with transparency.                 // The PNG will be reloaded and further processed by the resizer pipeline.                 FileInfo tempOutputPathInfo = new FileInfo(Path.GetTempFileName());                 try                 {                     // Add output file and input file. The input file must be the very last argument.                     ghostscriptSettings.Add(GhostscriptArgument.OutputFile' tempOutputPathInfo.FullName);                     ghostscriptSettings.Add(tempInputPathInfo.FullName);                     _engine.Execute(ghostscriptSettings);                      // NOTE: Do not dispose of memory stream because it is used as the backing source for the loaded bitmap.                     MemoryStream memoryStream = new MemoryStream((int)tempOutputPathInfo.Length);                     using(FileStream fileStream = tempOutputPathInfo.Open(FileMode.Open))                     {                         StreamExtensions.CopyToStream(fileStream' memoryStream);                     }                      // Per ImagerResizer plugin example source code:                     // NOTE: If the Bitmap class is used for decoding' read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath'stream);                     BitmapTag bitmapTag = new BitmapTag("ghostscript.png"' memoryStream);                     return new Bitmap(memoryStream) { Tag = bitmapTag };                 }                 //catch(GhostscriptException)                 //{                 //    // Conversion failed                 //    return null; //or maybe we should show details? If it's a valid PDF?                 //}                 finally                 {                     tempOutputPathInfo.Delete();                 }             }             finally             {                 tempInputPathInfo.Delete();             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: try             {                 using(FileStream tempInputStream = tempInputPathInfo.Create())                 {                     StreamExtensions.CopyToStream(s' tempInputStream);                 }                  // Get information about the PDF such as page count and media boxes                 // Although this creates a second trip to Ghostscript engine' it's not possible to generate a rendered image in exact                   // dimensions requested. Skipping this step will cause a rendered image' of some size' to be resized further.                 PdfInfo pdfInfo = GetPdfInfo(tempInputPathInfo.FullName);                  // Extract the requested page number from resize settings' or default to first page                 int pageNumber = settings.GetValueOrDefault("page"' 1);                  // Try to get the page number from PDF info. If not available' abort. This is caused by                 // requesting a page that does not exist.                 PageInfo pageInfo = pdfInfo.Pages.SingleOrDefault(x => x.Number == pageNumber);                 if(pageInfo == null)                 {                     return null;                 }                  // We only support media box (as opposed to clip' bleed' art' etc.) If this is not available' abort.                 if(pageInfo.MediaBox == null)                 {                     return null;                 }                  // Get the output size of the generated bitmap by applying the resize settings and media box.                 Size outputSize = (pageInfo.Rotate == -90 || pageInfo.Rotate == 90) ?                      GetOutputSize(settings' pageInfo.MediaBox.Height'pageInfo.MediaBox.Width)                      : GetOutputSize(settings' pageInfo.MediaBox.Width' pageInfo.MediaBox.Height) ;                                     // Create default Ghostscript settings and apply the resize settings.                 GhostscriptSettings ghostscriptSettings = new GhostscriptSettings                                                           {                                                               GhostscriptArgument.NoPause'                                                               GhostscriptArgument.Quiet'                                                               GhostscriptArgument.Safer'                                                               GhostscriptArgument.Batch'                                                               {GhostscriptArgument.OutputDevice' "pngalpha"}'                                                               {GhostscriptArgument.MaxBitmap' 24000000}'                                                               {GhostscriptArgument.RenderingThreads' 4}'                                                               {GhostscriptArgument.GridFitTT' 0}'                                                               {GhostscriptArgument.AlignToPixels' 0}' //Subpixel rendering depends on output device... perhaps testing would help determine if 1 would be better?                                                               {GhostscriptArgument.FirstPage' pageNumber}'                                                               {GhostscriptArgument.LastPage' pageNumber}'                                                               GhostscriptArgument.Printed'                                                               GhostscriptArgument.PdfFitPage'                                                                GhostscriptArgument.FixedMedia'                                                               {GhostscriptArgument.Height' outputSize.Height}'                                                               {GhostscriptArgument.Width' outputSize.Width}                                                           };                 ApplyResizeSettings(settings' ghostscriptSettings);                  // Have Ghostscript process the input to a PNG file with transparency.                 // The PNG will be reloaded and further processed by the resizer pipeline.                 FileInfo tempOutputPathInfo = new FileInfo(Path.GetTempFileName());                 try                 {                     // Add output file and input file. The input file must be the very last argument.                     ghostscriptSettings.Add(GhostscriptArgument.OutputFile' tempOutputPathInfo.FullName);                     ghostscriptSettings.Add(tempInputPathInfo.FullName);                     _engine.Execute(ghostscriptSettings);                      // NOTE: Do not dispose of memory stream because it is used as the backing source for the loaded bitmap.                     MemoryStream memoryStream = new MemoryStream((int)tempOutputPathInfo.Length);                     using(FileStream fileStream = tempOutputPathInfo.Open(FileMode.Open))                     {                         StreamExtensions.CopyToStream(fileStream' memoryStream);                     }                      // Per ImagerResizer plugin example source code:                     // NOTE: If the Bitmap class is used for decoding' read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath'stream);                     BitmapTag bitmapTag = new BitmapTag("ghostscript.png"' memoryStream);                     return new Bitmap(memoryStream) { Tag = bitmapTag };                 }                 //catch(GhostscriptException)                 //{                 //    // Conversion failed                 //    return null; //or maybe we should show details? If it's a valid PDF?                 //}                 finally                 {                     tempOutputPathInfo.Delete();                 }             }             finally             {                 tempInputPathInfo.Delete();             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: try             {                 using(FileStream tempInputStream = tempInputPathInfo.Create())                 {                     StreamExtensions.CopyToStream(s' tempInputStream);                 }                  // Get information about the PDF such as page count and media boxes                 // Although this creates a second trip to Ghostscript engine' it's not possible to generate a rendered image in exact                   // dimensions requested. Skipping this step will cause a rendered image' of some size' to be resized further.                 PdfInfo pdfInfo = GetPdfInfo(tempInputPathInfo.FullName);                  // Extract the requested page number from resize settings' or default to first page                 int pageNumber = settings.GetValueOrDefault("page"' 1);                  // Try to get the page number from PDF info. If not available' abort. This is caused by                 // requesting a page that does not exist.                 PageInfo pageInfo = pdfInfo.Pages.SingleOrDefault(x => x.Number == pageNumber);                 if(pageInfo == null)                 {                     return null;                 }                  // We only support media box (as opposed to clip' bleed' art' etc.) If this is not available' abort.                 if(pageInfo.MediaBox == null)                 {                     return null;                 }                  // Get the output size of the generated bitmap by applying the resize settings and media box.                 Size outputSize = (pageInfo.Rotate == -90 || pageInfo.Rotate == 90) ?                      GetOutputSize(settings' pageInfo.MediaBox.Height'pageInfo.MediaBox.Width)                      : GetOutputSize(settings' pageInfo.MediaBox.Width' pageInfo.MediaBox.Height) ;                                     // Create default Ghostscript settings and apply the resize settings.                 GhostscriptSettings ghostscriptSettings = new GhostscriptSettings                                                           {                                                               GhostscriptArgument.NoPause'                                                               GhostscriptArgument.Quiet'                                                               GhostscriptArgument.Safer'                                                               GhostscriptArgument.Batch'                                                               {GhostscriptArgument.OutputDevice' "pngalpha"}'                                                               {GhostscriptArgument.MaxBitmap' 24000000}'                                                               {GhostscriptArgument.RenderingThreads' 4}'                                                               {GhostscriptArgument.GridFitTT' 0}'                                                               {GhostscriptArgument.AlignToPixels' 0}' //Subpixel rendering depends on output device... perhaps testing would help determine if 1 would be better?                                                               {GhostscriptArgument.FirstPage' pageNumber}'                                                               {GhostscriptArgument.LastPage' pageNumber}'                                                               GhostscriptArgument.Printed'                                                               GhostscriptArgument.PdfFitPage'                                                                GhostscriptArgument.FixedMedia'                                                               {GhostscriptArgument.Height' outputSize.Height}'                                                               {GhostscriptArgument.Width' outputSize.Width}                                                           };                 ApplyResizeSettings(settings' ghostscriptSettings);                  // Have Ghostscript process the input to a PNG file with transparency.                 // The PNG will be reloaded and further processed by the resizer pipeline.                 FileInfo tempOutputPathInfo = new FileInfo(Path.GetTempFileName());                 try                 {                     // Add output file and input file. The input file must be the very last argument.                     ghostscriptSettings.Add(GhostscriptArgument.OutputFile' tempOutputPathInfo.FullName);                     ghostscriptSettings.Add(tempInputPathInfo.FullName);                     _engine.Execute(ghostscriptSettings);                      // NOTE: Do not dispose of memory stream because it is used as the backing source for the loaded bitmap.                     MemoryStream memoryStream = new MemoryStream((int)tempOutputPathInfo.Length);                     using(FileStream fileStream = tempOutputPathInfo.Open(FileMode.Open))                     {                         StreamExtensions.CopyToStream(fileStream' memoryStream);                     }                      // Per ImagerResizer plugin example source code:                     // NOTE: If the Bitmap class is used for decoding' read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath'stream);                     BitmapTag bitmapTag = new BitmapTag("ghostscript.png"' memoryStream);                     return new Bitmap(memoryStream) { Tag = bitmapTag };                 }                 //catch(GhostscriptException)                 //{                 //    // Conversion failed                 //    return null; //or maybe we should show details? If it's a valid PDF?                 //}                 finally                 {                     tempOutputPathInfo.Delete();                 }             }             finally             {                 tempInputPathInfo.Delete();             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,DecodeStream,The following statement contains a magic number: try             {                 using(FileStream tempInputStream = tempInputPathInfo.Create())                 {                     StreamExtensions.CopyToStream(s' tempInputStream);                 }                  // Get information about the PDF such as page count and media boxes                 // Although this creates a second trip to Ghostscript engine' it's not possible to generate a rendered image in exact                   // dimensions requested. Skipping this step will cause a rendered image' of some size' to be resized further.                 PdfInfo pdfInfo = GetPdfInfo(tempInputPathInfo.FullName);                  // Extract the requested page number from resize settings' or default to first page                 int pageNumber = settings.GetValueOrDefault("page"' 1);                  // Try to get the page number from PDF info. If not available' abort. This is caused by                 // requesting a page that does not exist.                 PageInfo pageInfo = pdfInfo.Pages.SingleOrDefault(x => x.Number == pageNumber);                 if(pageInfo == null)                 {                     return null;                 }                  // We only support media box (as opposed to clip' bleed' art' etc.) If this is not available' abort.                 if(pageInfo.MediaBox == null)                 {                     return null;                 }                  // Get the output size of the generated bitmap by applying the resize settings and media box.                 Size outputSize = (pageInfo.Rotate == -90 || pageInfo.Rotate == 90) ?                      GetOutputSize(settings' pageInfo.MediaBox.Height'pageInfo.MediaBox.Width)                      : GetOutputSize(settings' pageInfo.MediaBox.Width' pageInfo.MediaBox.Height) ;                                     // Create default Ghostscript settings and apply the resize settings.                 GhostscriptSettings ghostscriptSettings = new GhostscriptSettings                                                           {                                                               GhostscriptArgument.NoPause'                                                               GhostscriptArgument.Quiet'                                                               GhostscriptArgument.Safer'                                                               GhostscriptArgument.Batch'                                                               {GhostscriptArgument.OutputDevice' "pngalpha"}'                                                               {GhostscriptArgument.MaxBitmap' 24000000}'                                                               {GhostscriptArgument.RenderingThreads' 4}'                                                               {GhostscriptArgument.GridFitTT' 0}'                                                               {GhostscriptArgument.AlignToPixels' 0}' //Subpixel rendering depends on output device... perhaps testing would help determine if 1 would be better?                                                               {GhostscriptArgument.FirstPage' pageNumber}'                                                               {GhostscriptArgument.LastPage' pageNumber}'                                                               GhostscriptArgument.Printed'                                                               GhostscriptArgument.PdfFitPage'                                                                GhostscriptArgument.FixedMedia'                                                               {GhostscriptArgument.Height' outputSize.Height}'                                                               {GhostscriptArgument.Width' outputSize.Width}                                                           };                 ApplyResizeSettings(settings' ghostscriptSettings);                  // Have Ghostscript process the input to a PNG file with transparency.                 // The PNG will be reloaded and further processed by the resizer pipeline.                 FileInfo tempOutputPathInfo = new FileInfo(Path.GetTempFileName());                 try                 {                     // Add output file and input file. The input file must be the very last argument.                     ghostscriptSettings.Add(GhostscriptArgument.OutputFile' tempOutputPathInfo.FullName);                     ghostscriptSettings.Add(tempInputPathInfo.FullName);                     _engine.Execute(ghostscriptSettings);                      // NOTE: Do not dispose of memory stream because it is used as the backing source for the loaded bitmap.                     MemoryStream memoryStream = new MemoryStream((int)tempOutputPathInfo.Length);                     using(FileStream fileStream = tempOutputPathInfo.Open(FileMode.Open))                     {                         StreamExtensions.CopyToStream(fileStream' memoryStream);                     }                      // Per ImagerResizer plugin example source code:                     // NOTE: If the Bitmap class is used for decoding' read gdi-bugs.txt and make sure you set b.Tag to new BitmapTag(optionalPath'stream);                     BitmapTag bitmapTag = new BitmapTag("ghostscript.png"' memoryStream);                     return new Bitmap(memoryStream) { Tag = bitmapTag };                 }                 //catch(GhostscriptException)                 //{                 //    // Conversion failed                 //    return null; //or maybe we should show details? If it's a valid PDF?                 //}                 finally                 {                     tempOutputPathInfo.Delete();                 }             }             finally             {                 tempInputPathInfo.Delete();             }
Magic Number,ImageResizer.Plugins.PdfRenderer,PdfRendererPlugin,C:\repos\imazen_resizer\Contrib\PdfRenderer\PdfRenderer\PdfRenderer.cs,ApplyResizeSettings,The following statement contains a magic number: ghostscriptSettings[GhostscriptArgument.GridFitTT] = (settings.Get<bool>("gridfit") == true ? 2 : 0).ToString(NumberFormatInfo.InvariantInfo);
