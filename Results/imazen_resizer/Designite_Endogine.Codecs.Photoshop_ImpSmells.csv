Implementation smell,Namespace,Class,File,Method,Description
Long Method,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Document,The method has 146 lines of code.
Complex Method,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Document,Cyclomatic complexity of the method is 15
Complex Method,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadValue,Cyclomatic complexity of the method is 17
Complex Method,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadTdtaItem,Cyclomatic complexity of the method is 16
Complex Method,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,Cyclomatic complexity of the method is 11
Complex Method,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,Write,Cyclomatic complexity of the method is 8
Complex Method,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,ReadPixels,Cyclomatic complexity of the method is 8
Complex Method,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,Cyclomatic complexity of the method is 9
Complex Method,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,Cyclomatic complexity of the method is 8
Complex Method,Endogine.Codecs.Photoshop.LayerResources,Item,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Read,Cyclomatic complexity of the method is 10
Long Parameter List,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,PixelData,The method has 5 parameters. Parameters: width' height' bitsPerPixel' numChannels' isMerged
Long Statement,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The length of the statement  "                return (float)(((int)this._data[x + y * this.Layer.Width * 2]) << 8 + this._data[x + y * this.Layer.Width * 2 + 1]) / 65535;" is 124.
Long Statement,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,AddResource,The length of the statement  "            //TODO: check if we already have one of same type! Except for f*cking paths (stupid Adobe)' gotta get special treatment..." is 122.
Long Statement,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,Prepare,The length of the statement  "                    Type actualType = type; // type.ReflectedType; //Because strangely' when type has internal classes' it wraps both of them somehow? e.g. GridGuidesInfo+GridGuide" is 160.
Long Statement,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Write,The length of the statement  "            if (this._mask != null || (this._blendRanges != null && this._blendRanges.Count > 0) || !string.IsNullOrEmpty(this.Name))" is 121.
Long Statement,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,WritePixels,The length of the statement  "                        rleRowLenghs[row] = Endogine.Serialization.RleCodec.EncodeChunk(writer.BaseStream' data' (long)row * this._width' (long)this._width);" is 133.
Long Statement,Endogine.Codecs.Photoshop,Tools,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Tools.cs,SplitImage,The length of the statement  "            ImageResources.GridGuidesInfo guidesInfo = (ImageResources.GridGuidesInfo)psd.GetResource(typeof(ImageResources.GridGuidesInfo));" is 129.
Complex Conditional,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Write,The conditional expression  "this._mask != null || (this._blendRanges != null && this._blendRanges.Count > 0) || !string.IsNullOrEmpty(this.Name)"  is complex.
Empty Catch Block,Endogine.Codecs.Photoshop.LayerResources,Txt2,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,Txt2,The method has an empty catch block.
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDColor,The following statement contains a magic number: a = 255;
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDColor,The following statement contains a magic number: bits == 8
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDDouble,The following statement contains a magic number: SwapBytes((byte*)&val' 8);
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDSingle,The following statement contains a magic number: SwapBytes((byte*)&val' 4);
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDUnicodeString,The following statement contains a magic number: i % 2 == 1 && c != 0
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDReader,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDReader.cs,ReadPSDUnicodeString,The following statement contains a magic number: i < nLength * 2
Magic Number,Endogine.Codecs.Photoshop,BinaryPSDWriter,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\BinaryPSDWriter.cs,WritePSDDouble,The following statement contains a magic number: BinaryReverseReader.SwapBytes((byte*)&value' 2);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The following statement contains a magic number: return (float)(((int)this._data[x + y * this.Layer.Width * 2]) << 8 + this._data[x + y * this.Layer.Width * 2 + 1]) / 65535;
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The following statement contains a magic number: return (float)(((int)this._data[x + y * this.Layer.Width * 2]) << 8 + this._data[x + y * this.Layer.Width * 2 + 1]) / 65535;
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The following statement contains a magic number: return (float)(((int)this._data[x + y * this.Layer.Width * 2]) << 8 + this._data[x + y * this.Layer.Width * 2 + 1]) / 65535;
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The following statement contains a magic number: return (float)(((int)this._data[x + y * this.Layer.Width * 2]) << 8 + this._data[x + y * this.Layer.Width * 2 + 1]) / 65535;
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,GetPixel,The following statement contains a magic number: this.Layer.BitsPerPixel == 16
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: ushort val = (ushort)(value * 65535);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: this._data[x + y * this.Layer.Width * 2] = (byte)(val >> 8);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: this._data[x + y * this.Layer.Width * 2] = (byte)(val >> 8);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: this._data[x + y * this.Layer.Width * 2 + 1] = (byte)(val & 255);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: this._data[x + y * this.Layer.Width * 2 + 1] = (byte)(val & 255);
Magic Number,Endogine.Codecs.Photoshop,Channel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Channel.cs,SetPixel,The following statement contains a magic number: this.Layer.BitsPerPixel == 16
Magic Number,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,SaveXml,The following statement contains a magic number: bool useRgbPng = (this._header.ColorMode == ColorModes.RGB && this._header.BitsPerPixel == 8);
Magic Number,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Save,The following statement contains a magic number: writer.StartLengthBlock(typeof(uint)' 4);
Magic Number,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Save,The following statement contains a magic number: writer.PadToNextMultiple(4);
Magic Number,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Document,The following statement contains a magic number: string signature = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Document,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Document.cs,Document,The following statement contains a magic number: nTotalLayersBytes == 8
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,DynVal,The following statement contains a magic number: string unknown = Endogine.Serialization.ReadableBinary.CreateHexEditorString(r.ReadBytes(6));
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadSpecialString,The following statement contains a magic number: length = 4;
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadValue,The following statement contains a magic number: string type = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadValue,The following statement contains a magic number: switch (type)             {                 case "tdta":                     vt.Value = Endogine.Serialization.ReadableBinary.CreateHexEditorString(r.ReadBytes(9));                     vt.Children = new List<DynVal>();                     while (true)                     {                         DynVal child = new DynVal();                         vt.Children.Add(child);                         if (child.ReadTdtaItem(r) == false)                             break;                     }                      //r.BaseStream.Position += 9;                     break;                 case "Objc": //Decriptor                 case "GlbO": //GlobalObject (same)                     string uniName = r.ReadPSDUnicodeString();                     //uint numSub = r.ReadUInt32();                     //if (numSub > 1)                     //{                     //    //A unicode text here!? What does this have to do with numSub??                     //    r.BaseStream.Position -= 4;                     //    r.ReadPSDUnicodeString();                     //    r.BaseStream.Position -= 2; //Ehh... What?!                     //}                     ////TODO: ah: 1 = 1 short = unknown...                     //ushort unknown = r.ReadUInt16();                     //vt.Children = ReadValues(r);                     vt = new DynVal(r' false);                     if (uniName.Length > 0)                         vt.UnicodeName = uniName;                     break;                 case "VlLs": //List                     vt.Children = new List<DynVal>();                     int numValues = (int)r.ReadUInt32();                     for (int i = 0; i < numValues; i++)                     {                         DynVal ob = ReadValue(r' true);                         if (ob != null)                             vt.Children.Add(ob);                     }                     break;                 case "doub":                     vt.Value = r.ReadPSDDouble();                     break;                 case "UntF": //Unif float                     //TODO: need a specific type for this' with a double and a type (percent/pixel)?                     string tst = GetMeaningOfFourCC(new string(r.ReadPSDChars(4))); //#Prc #Pxl #Ang = percent / pixels / angle?                     double d = r.ReadPSDDouble();                     tst += ": " + d;                     vt.Value = tst;                     break;                 case "enum":                     string namesp = ReadSpecialString(r);                     string item = ReadSpecialString(r);                     //vt.Value = namesp + "." + item; //TODO: cast to real enum                     vt.Value = GetMeaningOfFourCC(namesp) + "." + GetMeaningOfFourCC(item);                     break;                 case "long":                     vt.Value = r.ReadInt32(); //64?                     break;                 case "bool":                     vt.Value = r.ReadBoolean();                     break;                 //case "obj ": //reference                 //    break;                 case "TEXT":                     vt.Value = r.ReadPSDUnicodeString();                     break;                 //case "Enmr": //Enumerated                 //    break;                 //case "Clss": //Class                 //    break;                 //case "GlbC": //GlobalClass                 //    break;                 //case "alis": //Alias                 //    break;                 default:                     throw new Exception("Unknown type: " + type);             }
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadValue,The following statement contains a magic number: switch (type)             {                 case "tdta":                     vt.Value = Endogine.Serialization.ReadableBinary.CreateHexEditorString(r.ReadBytes(9));                     vt.Children = new List<DynVal>();                     while (true)                     {                         DynVal child = new DynVal();                         vt.Children.Add(child);                         if (child.ReadTdtaItem(r) == false)                             break;                     }                      //r.BaseStream.Position += 9;                     break;                 case "Objc": //Decriptor                 case "GlbO": //GlobalObject (same)                     string uniName = r.ReadPSDUnicodeString();                     //uint numSub = r.ReadUInt32();                     //if (numSub > 1)                     //{                     //    //A unicode text here!? What does this have to do with numSub??                     //    r.BaseStream.Position -= 4;                     //    r.ReadPSDUnicodeString();                     //    r.BaseStream.Position -= 2; //Ehh... What?!                     //}                     ////TODO: ah: 1 = 1 short = unknown...                     //ushort unknown = r.ReadUInt16();                     //vt.Children = ReadValues(r);                     vt = new DynVal(r' false);                     if (uniName.Length > 0)                         vt.UnicodeName = uniName;                     break;                 case "VlLs": //List                     vt.Children = new List<DynVal>();                     int numValues = (int)r.ReadUInt32();                     for (int i = 0; i < numValues; i++)                     {                         DynVal ob = ReadValue(r' true);                         if (ob != null)                             vt.Children.Add(ob);                     }                     break;                 case "doub":                     vt.Value = r.ReadPSDDouble();                     break;                 case "UntF": //Unif float                     //TODO: need a specific type for this' with a double and a type (percent/pixel)?                     string tst = GetMeaningOfFourCC(new string(r.ReadPSDChars(4))); //#Prc #Pxl #Ang = percent / pixels / angle?                     double d = r.ReadPSDDouble();                     tst += ": " + d;                     vt.Value = tst;                     break;                 case "enum":                     string namesp = ReadSpecialString(r);                     string item = ReadSpecialString(r);                     //vt.Value = namesp + "." + item; //TODO: cast to real enum                     vt.Value = GetMeaningOfFourCC(namesp) + "." + GetMeaningOfFourCC(item);                     break;                 case "long":                     vt.Value = r.ReadInt32(); //64?                     break;                 case "bool":                     vt.Value = r.ReadBoolean();                     break;                 //case "obj ": //reference                 //    break;                 case "TEXT":                     vt.Value = r.ReadPSDUnicodeString();                     break;                 //case "Enmr": //Enumerated                 //    break;                 //case "Clss": //Class                 //    break;                 //case "GlbC": //GlobalClass                 //    break;                 //case "alis": //Alias                 //    break;                 default:                     throw new Exception("Unknown type: " + type);             }
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadTdtaItem,The following statement contains a magic number: byte[] buffer = new byte[255];
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,ReadTdtaItem,The following statement contains a magic number: nearEndCnt == 12
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,GetMeaningOfFourCC,The following statement contains a magic number: fourCC.Length != 4
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,LoadFourCC,The following statement contains a magic number: string name = items[0].Substring(2);
Magic Number,Endogine.Codecs.Photoshop,DynVal,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\DynVal.cs,LoadFourCC,The following statement contains a magic number: FourCCs.Add(items[1].PadRight(4' ' ')' name);
Magic Number,Endogine.Codecs.Photoshop,EffectBase,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\EffectBase.cs,ReadBlendKey,The following statement contains a magic number: string blendModeSignature = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,EffectBase,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\EffectBase.cs,ReadBlendKey,The following statement contains a magic number: return new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Header,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Header.cs,Header,The following statement contains a magic number: byte[] buf = new byte[256];
Magic Number,Endogine.Codecs.Photoshop,Header,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Header.cs,Header,The following statement contains a magic number: reader.Read(buf' (int)reader.BaseStream.Position' 6);
Magic Number,Endogine.Codecs.Photoshop,Header,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Header.cs,Write,The following statement contains a magic number: i < 6
Magic Number,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,ImageResource,The following statement contains a magic number: reader.BaseStream.Position % 2 == 1
Magic Number,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,Write,The following statement contains a magic number: writer.PadToNextMultiple(2);
Magic Number,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,ReadImageResources,The following statement contains a magic number: string settingSignature = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,ReadImageResources,The following statement contains a magic number: imgRes.ID > 2000 && imgRes.ID <= 2999
Magic Number,Endogine.Codecs.Photoshop,ImageResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResource.cs,ReadImageResources,The following statement contains a magic number: imgRes.ID > 2000 && imgRes.ID <= 2999
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: string sHeader = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: this.BlendKey = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: i < nLength/8
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: sHeader = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: reader.BaseStream.Position-=2;
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Layer,The following statement contains a magic number: sHeader = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,ReadPixels,The following statement contains a magic number: this._channels.ContainsKey(-2)
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,ReadPixels,The following statement contains a magic number: ch.Usage != -2
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Write,The following statement contains a magic number: writer.Write((uint)this._blendRanges.Count * 4);
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,Write,The following statement contains a magic number: int paddingBytes = (int)((writer.BaseStream.Position - namePosition) % 4);
Magic Number,Endogine.Codecs.Photoshop,Layer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Layer.cs,WritePixels,The following statement contains a magic number: ch.Usage != -2
Magic Number,Endogine.Codecs.Photoshop,LayerResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResource.cs,LayerResource,The following statement contains a magic number: reader.JumpToEvenNthByte(2);
Magic Number,Endogine.Codecs.Photoshop,LayerResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResource.cs,Write,The following statement contains a magic number: writer.PadToNextMultiple(2);
Magic Number,Endogine.Codecs.Photoshop,LayerResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResource.cs,ReadLayerResource,The following statement contains a magic number: string sHeader = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,LayerResource,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResource.cs,ReadLayerResource,The following statement contains a magic number: string tag = new string(reader.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop,Mask,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\Mask.cs,Mask,The following statement contains a magic number: nLength == 20
Magic Number,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,PreReadPixels,The following statement contains a magic number: switch (compression)             {                 case Compression.Rle:                     //ignore rle "header" with bytes per row...                     reader.BaseStream.Position += this._height * 2;                     //ushort[] rowLenghtList = new ushort[height];                     //for (int i = 0; i < height; i++)                     //    rowLenghtList[i] = reader.ReadUInt16();                     break;             }
Magic Number,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,ReadPixels,The following statement contains a magic number: int bytesPerPixelPerChannel = this._bitsPerPixel / 8;
Magic Number,Endogine.Codecs.Photoshop.ImageResources,ColorTransferFunctions,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\ColorTransferFunctions.cs,ColorTransferFunctions,The following statement contains a magic number: i < 4
Magic Number,Endogine.Codecs.Photoshop.ImageResources,ColorTransferFunction,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\ColorTransferFunctions.cs,ColorTransferFunction,The following statement contains a magic number: i < 13
Magic Number,Endogine.Codecs.Photoshop.ImageResources,ColorTransferFunction,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\ColorTransferFunctions.cs,ColorTransferFunction,The following statement contains a magic number: this.Curve[0] == -1 || this.Curve[12] == -1
Magic Number,Endogine.Codecs.Photoshop.ImageResources,DisplayInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\DisplayInfo.cs,DisplayInfo,The following statement contains a magic number: i < 4
Magic Number,Endogine.Codecs.Photoshop.ImageResources,DisplayInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\DisplayInfo.cs,DisplayInfo,The following statement contains a magic number: this.Opacity = (short)Math.Max(0'Math.Min(100'(int)reader.ReadInt16()));
Magic Number,Endogine.Codecs.Photoshop.ImageResources,DisplayInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\DisplayInfo.cs,SubWrite,The following statement contains a magic number: i < 4
Magic Number,Endogine.Codecs.Photoshop.ImageResources,ColorHalftoneInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Halftone.cs,ColorHalftoneInfo,The following statement contains a magic number: i < 4
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Screen,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Halftone.cs,Screen,The following statement contains a magic number: reader.BaseStream.Position += 4;
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: this.PathNum = this.ID - 2000;
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: this.ID = 2000;
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following statement contains a magic number: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Slice,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Slices.cs,Slice,The following statement contains a magic number: this.Color = reader.ReadPSDColor(8' true);
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Thumbnail,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Thumbnail.cs,Thumbnail,The following statement contains a magic number: byte tmp = buffer[n + 2];
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Thumbnail,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Thumbnail.cs,Thumbnail,The following statement contains a magic number: buffer[n + 2] = buffer[n];
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Thumbnail,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Thumbnail.cs,Thumbnail,The following statement contains a magic number: n < numBytes - 2
Magic Number,Endogine.Codecs.Photoshop.ImageResources,Thumbnail,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\Thumbnail.cs,Thumbnail,The following statement contains a magic number: this.ID == 1033
Magic Number,Endogine.Codecs.Photoshop.LayerResources,ColorBalance,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,ColorBalance,The following statement contains a magic number: i < 3
Magic Number,Endogine.Codecs.Photoshop.LayerResources,RangeSettings,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,RangeSettings,The following statement contains a magic number: i < 3
Magic Number,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,The following statement contains a magic number: this.Colorize.Hue = (short)((int)r.ReadInt16() * 180 / 100);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,The following statement contains a magic number: this.Colorize.Hue = (short)((int)r.ReadInt16() * 180 / 100);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,The following statement contains a magic number: i < 7
Magic Number,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,The following statement contains a magic number: i < 7
Magic Number,Endogine.Codecs.Photoshop.LayerResources,HueSaturation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,HueSaturation,The following statement contains a magic number: i < 7
Magic Number,Endogine.Codecs.Photoshop.LayerResources,SelectiveColor,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,SelectiveColor,The following statement contains a magic number: i < 10
Magic Number,Endogine.Codecs.Photoshop.LayerResources,ChannelMixer,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,ChannelMixer,The following statement contains a magic number: int numChannels = 3;
Magic Number,Endogine.Codecs.Photoshop.LayerResources,GradientMap,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,GradientMap,The following statement contains a magic number: r.JumpToEvenNthByte(2);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,GradientMap,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,GradientMap,The following statement contains a magic number: this.MinChannelValues = r.ReadPSDChannelValues(4);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,GradientMap,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,GradientMap,The following statement contains a magic number: this.MaxChannelValues = r.ReadPSDChannelValues(4);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,ColorStop,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,ColorStop,The following statement contains a magic number: this.Channels = r.ReadPSDChannelValues(4);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,PhotoFilter,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Adjustments.cs,PhotoFilter,The following statement contains a magic number: r.BaseStream.Position += 16;
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Curves,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Curves.cs,Curves,The following statement contains a magic number: string head = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,SectionDivider,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,SectionDivider,The following statement contains a magic number: string header = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,SectionDivider,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,SectionDivider,The following statement contains a magic number: this.BlendKey = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Pattern,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,Pattern,The following statement contains a magic number: j < 3
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Pattern,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,Pattern,The following statement contains a magic number: i < 256
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Pattern,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,Pattern,The following statement contains a magic number: r.BytesToEnd < 20
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Txt2,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\DivResources.cs,Txt2,The following statement contains a magic number: r.BaseStream.Position += 2;
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Effects,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Effects,The following statement contains a magic number: r.BaseStream.Position += 2;
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Glow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Glow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                     ushort something = r.ReadUInt16();                     this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO!                     if (this.Inner)                         this.Unknown = r.ReadByte();                     this.UnknownColor = r.ReadPSDColor(16' true);                     this.Data = r.ReadBytes((int)r.BytesToEnd);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Glow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Glow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                     ushort something = r.ReadUInt16();                     this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO!                     if (this.Inner)                         this.Unknown = r.ReadByte();                     this.UnknownColor = r.ReadPSDColor(16' true);                     this.Data = r.ReadBytes((int)r.BytesToEnd);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Glow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Glow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                     ushort something = r.ReadUInt16();                     this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO!                     if (this.Inner)                         this.Unknown = r.ReadByte();                     this.UnknownColor = r.ReadPSDColor(16' true);                     this.Data = r.ReadBytes((int)r.BytesToEnd);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Shadow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Shadow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     //this.BlendModeSignature = r.ReadUInt32();                     //this.BlendModeKey = r.ReadUInt32();                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     break;                  case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      ushort something = r.ReadUInt16();//TODO:?                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO: 10 unknown bytes!                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Shadow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Shadow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     //this.BlendModeSignature = r.ReadUInt32();                     //this.BlendModeKey = r.ReadUInt32();                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     break;                  case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      ushort something = r.ReadUInt16();//TODO:?                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO: 10 unknown bytes!                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Shadow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Shadow,The following statement contains a magic number: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     //this.BlendModeSignature = r.ReadUInt32();                     //this.BlendModeKey = r.ReadUInt32();                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     break;                  case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      ushort something = r.ReadUInt16();//TODO:?                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO: 10 unknown bytes!                     break;             }
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Levels,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Levels.cs,Levels,The following statement contains a magic number: int endPos = (int)Math.Min(r.BytesToEnd' 292);
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Levels,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Levels.cs,Levels,The following statement contains a magic number: string head = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,TypeTool,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeTool.cs,TypeTool,The following statement contains a magic number: i < 6
Magic Number,Endogine.Codecs.Photoshop.LayerResources,TypeTool,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeTool.cs,TypeTool,The following statement contains a magic number: Version <= 5
Magic Number,Endogine.Codecs.Photoshop.LayerResources,TypeTool,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeTool.cs,TypeTool,The following statement contains a magic number: i < 4
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Descriptor,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Descriptor,The following statement contains a magic number: r.BaseStream.Position += 6;
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Descriptor,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Descriptor,The following statement contains a magic number: string type = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Descriptor,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Descriptor,The following statement contains a magic number: string resType1 = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Descriptor,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Descriptor,The following statement contains a magic number: string resType2 = new string(r.ReadPSDChars(4));
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Item,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Read,The following statement contains a magic number: byte[] buffer = new byte[255];
Magic Number,Endogine.Codecs.Photoshop.LayerResources,Item,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\TypeToolObject.cs,Read,The following statement contains a magic number: nearEndCnt == 12
Missing Default,Endogine.Codecs.Photoshop,PixelData,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\PixelData.cs,PreReadPixels,The following switch statement is missing a default case: switch (compression)             {                 case Compression.Rle:                     //ignore rle "header" with bytes per row...                     reader.BaseStream.Position += this._height * 2;                     //ushort[] rowLenghtList = new ushort[height];                     //for (int i = 0; i < height; i++)                     //    rowLenghtList[i] = reader.ReadUInt16();                     break;             }
Missing Default,Endogine.Codecs.Photoshop.ImageResources,PathInfo,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\ImageResources\PathInfo.cs,PathInfo,The following switch statement is missing a default case: switch (rtype)                 {                     case RecordType.InitialFill:                         reader.BaseStream.Position += 1;                         bool allPixelStart = reader.ReadBoolean();                         reader.BaseStream.Position += 22;                         break;                      case RecordType.PathFill:                         if (cnt != 0)                             throw new Exception("Path fill?!?");                         reader.BaseStream.Position += 24;                         break;                      case RecordType.Clipboard:                         ERectangleF rct = new ERectangleF();                         rct.Top = reader.ReadPSDSingle();                         rct.Left = reader.ReadPSDSingle();                         rct.Bottom = reader.ReadPSDSingle();                         rct.Right = reader.ReadPSDSingle();                         Clipboard clp = new Clipboard();                         clp.Rectangle = rct;                         clp.Scale = reader.ReadPSDSingle();                         reader.BaseStream.Position += 4;                         this.Commands.Add(clp);                         break;                      case RecordType.ClosedPathLength:                     case RecordType.OpenPathLength:                         numKnots = reader.ReadUInt16();                         reader.BaseStream.Position += 22;                         NewPath np = new NewPath();                         np.Open = (rtype == RecordType.OpenPathLength);                         this.Commands.Add(np);                         break;                      case RecordType.ClosedPathBezierKnotLinked:                     case RecordType.ClosedPathBezierKnotUnlinked:                     case RecordType.OpenPathBezierKnotLinked:                     case RecordType.OpenPathBezierKnotUnlinked:                         BezierKnot bz = new BezierKnot();                                                  EPointF[] pts = new EPointF[3];                         for (int i = 0; i < 3; i++)                         {                             float y = reader.ReadPSDFixedSingle(); //y comes first...                             pts[i] = new EPointF(reader.ReadPSDFixedSingle()' y) / 256;                         }                         bz.Control1 = pts[0];                         bz.Anchor = pts[1];                         bz.Control2 = pts[2];                         bz.Linked = (rtype == RecordType.ClosedPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotLinked);                         //bz.Open = (rtype == RecordType.OpenPathBezierKnotLinked || rtype == RecordType.OpenPathBezierKnotUnlinked);                          this.Commands.Add(bz);                         numKnots--;                         break;                 }
Missing Default,Endogine.Codecs.Photoshop.LayerResources,Glow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Glow,The following switch statement is missing a default case: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                     ushort something = r.ReadUInt16();                     this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO!                     if (this.Inner)                         this.Unknown = r.ReadByte();                     this.UnknownColor = r.ReadPSDColor(16' true);                     this.Data = r.ReadBytes((int)r.BytesToEnd);                     break;             }
Missing Default,Endogine.Codecs.Photoshop.LayerResources,Bevel,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Bevel,The following switch statement is missing a default case: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Data = null;                     break;                 case 2:                     this.Angle = (uint)r.ReadUInt16();                     this.Strength = (uint)r.ReadUInt16();                     this.Blur = (uint)r.ReadUInt16();                      this.Unknown1 = r.ReadByte();                     this.Unknown2 = r.ReadByte();                     this.Unknown3 = r.ReadUInt16();                     this.Unknown4 = r.ReadUInt16();                      this.BlendModeKey = this.ReadBlendKey(r);                     this.ShadowBlendModeKey = this.ReadBlendKey(r);                      this.Color = r.ReadPSDColor(16' true);                     this.ShadowColor = r.ReadPSDColor(16' true);                      this.BevelStyle = r.ReadByte();                     this.Opacity = r.ReadByte();                     this.ShadowOpacity = r.ReadByte();                      this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Inverted = r.ReadBoolean();                      System.Drawing.Color someColor = r.ReadPSDColor(16' true);                     System.Drawing.Color someColor2 = r.ReadPSDColor(16' true);                     break;             }
Missing Default,Endogine.Codecs.Photoshop.LayerResources,Shadow,D:\research\architectureSmells\repos\imazen_resizer\Plugins\Libs\Endogine\Endogine.Codecs.Photoshop\LayerResources\Effects.cs,Shadow,The following switch statement is missing a default case: switch (version)             {                 case 0:                     this.Blur = r.ReadUInt32();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     //this.BlendModeSignature = r.ReadUInt32();                     //this.BlendModeKey = r.ReadUInt32();                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     break;                  case 2:                     this.Blur = (uint)r.ReadUInt16();                     this.Intensity = r.ReadUInt32();                      this.Angle = r.ReadUInt32();                     this.Distance = r.ReadUInt32();                      ushort something = r.ReadUInt16();//TODO:?                      this.Color = r.ReadPSDColor(16' true);                      this.BlendModeKey = this.ReadBlendKey(r);                     this.Enabled = r.ReadBoolean();                     this.UseGlobalAngle = r.ReadBoolean();                     this.Opacity = r.ReadByte();                     //TODO: 10 unknown bytes!                     break;             }
