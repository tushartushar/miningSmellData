Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,Cyclomatic complexity of the method is 8
Complex Method,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_BrowseButton_Click,Cyclomatic complexity of the method is 9
Complex Method,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,comboBox_exportAction_SelectionChanged,Cyclomatic complexity of the method is 15
Complex Method,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_addFiles_Click,Cyclomatic complexity of the method is 8
Complex Method,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_resize_Click,Cyclomatic complexity of the method is 10
Complex Method,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,CheckFileSettings,Cyclomatic complexity of the method is 8
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,batchBackgroundWorking_RunWorkerCompletedEvent,The length of the statement  "	if (!string.IsNullOrEmpty (Properties.Settings.Default.saveFolderPath) && Directory.Exists (Properties.Settings.Default.saveFolderPath) && saveMode != SaveMode.ModifyExisting) " is 175.
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,zipBackgroundWorking_RunWorkerCompletedEvent,The length of the statement  "	if (!string.IsNullOrEmpty (Properties.Settings.Default.saveZipPath) && File.Exists (Properties.Settings.Default.saveZipPath)) " is 125.
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,MainWindow_Closing,The length of the statement  "		if (System.Windows.MessageBox.Show ("Do you want to interrupt the current work?"' "Program Close"' MessageBoxButton.YesNo) == MessageBoxResult.Yes) { " is 149.
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_BrowseButton_Click,The length of the statement  "			dialog.SelectedPath = Properties.Settings.Default.saveFolderPath ?? Environment.GetFolderPath (Environment.SpecialFolder.MyComputer); " is 133.
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_BrowseButton_Click,The length of the statement  "			dialog.InitialDirectory = Properties.Settings.Default.saveFolderPath ?? Environment.GetFolderPath (Environment.SpecialFolder.MyComputer); " is 137.
Long Statement,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_viewResults_Click,The length of the statement  "		//string path = (string.IsNullOrEmpty(Properties.Settings.Default.saveFolderPath)) ? @"c:\" : Properties.Settings.Default.saveFolderPath; " is 137.
Empty Catch Block,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The method has an empty catch block.
Empty Catch Block,ImageResizerGUI.Code,ZipBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\ZipBackgroundWorking.cs,bwResizeBatch_DoWork,The method has an empty catch block.
Empty Catch Block,ImageResizerGUI.Code,FileTools,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\Tools.cs,GetFilesRecursive,The method has an empty catch block.
Empty Catch Block,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,MainWindow_AfterSettingChangedOnMainWindows,The method has an empty catch block.
Empty Catch Block,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_addFiles_Click,The method has an empty catch block.
Empty Catch Block,ImageResizerGUI,AdvancedOptions,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\AdvancedOptions.xaml.cs,btn_cancel_Click,The method has an empty catch block.
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	Dictionary<string' object> UserInputs = e.Argument as Dictionary<string' object>;  	if (UserInputs != null) {  		ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  		var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  		int count = 0;  		foreach (var item in batchItems) {  			count++;  			try {  				if (saveMode == SaveMode.ModifyExisting)  					// if the savepath have the default value' replace the existing image.  					ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  				else  					ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  				item.StatusText = "Done";  				item.Status = 100;  			} catch (Exception ex) {  				if (ex is ImageMissingException) {  					item.StatusText = "Error: Image missing.";  					item.Status = 50;  				} else if (ex is ImageCorruptedException) {  					item.StatusText = "Error: Image corrupted";  					item.Status = 50;  				} else {  					item.StatusText = "Error: " + ex.Message;  					item.Status = 50;  				}  			}  			bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  			if (bwResizeBatch.CancellationPending) {  				e.Cancel = true;  				return;  			}  		}  		e.Result = batchItems;  		// Pass the results to the completed events to process them accordingly.  	}  } catch (Exception ex) {  	// handle the exception.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	Dictionary<string' object> UserInputs = e.Argument as Dictionary<string' object>;  	if (UserInputs != null) {  		ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  		var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  		int count = 0;  		foreach (var item in batchItems) {  			count++;  			try {  				if (saveMode == SaveMode.ModifyExisting)  					// if the savepath have the default value' replace the existing image.  					ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  				else  					ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  				item.StatusText = "Done";  				item.Status = 100;  			} catch (Exception ex) {  				if (ex is ImageMissingException) {  					item.StatusText = "Error: Image missing.";  					item.Status = 50;  				} else if (ex is ImageCorruptedException) {  					item.StatusText = "Error: Image corrupted";  					item.Status = 50;  				} else {  					item.StatusText = "Error: " + ex.Message;  					item.Status = 50;  				}  			}  			bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  			if (bwResizeBatch.CancellationPending) {  				e.Cancel = true;  				return;  			}  		}  		e.Result = batchItems;  		// Pass the results to the completed events to process them accordingly.  	}  } catch (Exception ex) {  	// handle the exception.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	Dictionary<string' object> UserInputs = e.Argument as Dictionary<string' object>;  	if (UserInputs != null) {  		ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  		var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  		int count = 0;  		foreach (var item in batchItems) {  			count++;  			try {  				if (saveMode == SaveMode.ModifyExisting)  					// if the savepath have the default value' replace the existing image.  					ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  				else  					ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  				item.StatusText = "Done";  				item.Status = 100;  			} catch (Exception ex) {  				if (ex is ImageMissingException) {  					item.StatusText = "Error: Image missing.";  					item.Status = 50;  				} else if (ex is ImageCorruptedException) {  					item.StatusText = "Error: Image corrupted";  					item.Status = 50;  				} else {  					item.StatusText = "Error: " + ex.Message;  					item.Status = 50;  				}  			}  			bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  			if (bwResizeBatch.CancellationPending) {  				e.Cancel = true;  				return;  			}  		}  		e.Result = batchItems;  		// Pass the results to the completed events to process them accordingly.  	}  } catch (Exception ex) {  	// handle the exception.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	Dictionary<string' object> UserInputs = e.Argument as Dictionary<string' object>;  	if (UserInputs != null) {  		ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  		var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  		int count = 0;  		foreach (var item in batchItems) {  			count++;  			try {  				if (saveMode == SaveMode.ModifyExisting)  					// if the savepath have the default value' replace the existing image.  					ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  				else  					ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  				item.StatusText = "Done";  				item.Status = 100;  			} catch (Exception ex) {  				if (ex is ImageMissingException) {  					item.StatusText = "Error: Image missing.";  					item.Status = 50;  				} else if (ex is ImageCorruptedException) {  					item.StatusText = "Error: Image corrupted";  					item.Status = 50;  				} else {  					item.StatusText = "Error: " + ex.Message;  					item.Status = 50;  				}  			}  			bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  			if (bwResizeBatch.CancellationPending) {  				e.Cancel = true;  				return;  			}  		}  		e.Result = batchItems;  		// Pass the results to the completed events to process them accordingly.  	}  } catch (Exception ex) {  	// handle the exception.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	Dictionary<string' object> UserInputs = e.Argument as Dictionary<string' object>;  	if (UserInputs != null) {  		ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  		var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  		int count = 0;  		foreach (var item in batchItems) {  			count++;  			try {  				if (saveMode == SaveMode.ModifyExisting)  					// if the savepath have the default value' replace the existing image.  					ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  				else  					ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  				item.StatusText = "Done";  				item.Status = 100;  			} catch (Exception ex) {  				if (ex is ImageMissingException) {  					item.StatusText = "Error: Image missing.";  					item.Status = 50;  				} else if (ex is ImageCorruptedException) {  					item.StatusText = "Error: Image corrupted";  					item.Status = 50;  				} else {  					item.StatusText = "Error: " + ex.Message;  					item.Status = 50;  				}  			}  			bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  			if (bwResizeBatch.CancellationPending) {  				e.Cancel = true;  				return;  			}  		}  		e.Result = batchItems;  		// Pass the results to the completed events to process them accordingly.  	}  } catch (Exception ex) {  	// handle the exception.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (UserInputs != null) {  	ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  	var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  	int count = 0;  	foreach (var item in batchItems) {  		count++;  		try {  			if (saveMode == SaveMode.ModifyExisting)  				// if the savepath have the default value' replace the existing image.  				ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  			else  				ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  			item.StatusText = "Done";  			item.Status = 100;  		} catch (Exception ex) {  			if (ex is ImageMissingException) {  				item.StatusText = "Error: Image missing.";  				item.Status = 50;  			} else if (ex is ImageCorruptedException) {  				item.StatusText = "Error: Image corrupted";  				item.Status = 50;  			} else {  				item.StatusText = "Error: " + ex.Message;  				item.Status = 50;  			}  		}  		bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  		if (bwResizeBatch.CancellationPending) {  			e.Cancel = true;  			return;  		}  	}  	e.Result = batchItems;  	// Pass the results to the completed events to process them accordingly.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (UserInputs != null) {  	ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  	var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  	int count = 0;  	foreach (var item in batchItems) {  		count++;  		try {  			if (saveMode == SaveMode.ModifyExisting)  				// if the savepath have the default value' replace the existing image.  				ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  			else  				ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  			item.StatusText = "Done";  			item.Status = 100;  		} catch (Exception ex) {  			if (ex is ImageMissingException) {  				item.StatusText = "Error: Image missing.";  				item.Status = 50;  			} else if (ex is ImageCorruptedException) {  				item.StatusText = "Error: Image corrupted";  				item.Status = 50;  			} else {  				item.StatusText = "Error: " + ex.Message;  				item.Status = 50;  			}  		}  		bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  		if (bwResizeBatch.CancellationPending) {  			e.Cancel = true;  			return;  		}  	}  	e.Result = batchItems;  	// Pass the results to the completed events to process them accordingly.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (UserInputs != null) {  	ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  	var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  	int count = 0;  	foreach (var item in batchItems) {  		count++;  		try {  			if (saveMode == SaveMode.ModifyExisting)  				// if the savepath have the default value' replace the existing image.  				ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  			else  				ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  			item.StatusText = "Done";  			item.Status = 100;  		} catch (Exception ex) {  			if (ex is ImageMissingException) {  				item.StatusText = "Error: Image missing.";  				item.Status = 50;  			} else if (ex is ImageCorruptedException) {  				item.StatusText = "Error: Image corrupted";  				item.Status = 50;  			} else {  				item.StatusText = "Error: " + ex.Message;  				item.Status = 50;  			}  		}  		bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  		if (bwResizeBatch.CancellationPending) {  			e.Cancel = true;  			return;  		}  	}  	e.Result = batchItems;  	// Pass the results to the completed events to process them accordingly.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (UserInputs != null) {  	ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  	var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  	int count = 0;  	foreach (var item in batchItems) {  		count++;  		try {  			if (saveMode == SaveMode.ModifyExisting)  				// if the savepath have the default value' replace the existing image.  				ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  			else  				ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  			item.StatusText = "Done";  			item.Status = 100;  		} catch (Exception ex) {  			if (ex is ImageMissingException) {  				item.StatusText = "Error: Image missing.";  				item.Status = 50;  			} else if (ex is ImageCorruptedException) {  				item.StatusText = "Error: Image corrupted";  				item.Status = 50;  			} else {  				item.StatusText = "Error: " + ex.Message;  				item.Status = 50;  			}  		}  		bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  		if (bwResizeBatch.CancellationPending) {  			e.Cancel = true;  			return;  		}  	}  	e.Result = batchItems;  	// Pass the results to the completed events to process them accordingly.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (UserInputs != null) {  	ResizeSettings rs = new ResizeSettings ((string)UserInputs ["querystring"]);  	var batchItems = (List<BatchInfo>)UserInputs ["batchItems"];  	int count = 0;  	foreach (var item in batchItems) {  		count++;  		try {  			if (saveMode == SaveMode.ModifyExisting)  				// if the savepath have the default value' replace the existing image.  				ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  			else  				ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  			item.StatusText = "Done";  			item.Status = 100;  		} catch (Exception ex) {  			if (ex is ImageMissingException) {  				item.StatusText = "Error: Image missing.";  				item.Status = 50;  			} else if (ex is ImageCorruptedException) {  				item.StatusText = "Error: Image corrupted";  				item.Status = 50;  			} else {  				item.StatusText = "Error: " + ex.Message;  				item.Status = 50;  			}  		}  		bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  		if (bwResizeBatch.CancellationPending) {  			e.Cancel = true;  			return;  		}  	}  	e.Result = batchItems;  	// Pass the results to the completed events to process them accordingly.  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: foreach (var item in batchItems) {  	count++;  	try {  		if (saveMode == SaveMode.ModifyExisting)  			// if the savepath have the default value' replace the existing image.  			ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  		else  			ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  		item.StatusText = "Done";  		item.Status = 100;  	} catch (Exception ex) {  		if (ex is ImageMissingException) {  			item.StatusText = "Error: Image missing.";  			item.Status = 50;  		} else if (ex is ImageCorruptedException) {  			item.StatusText = "Error: Image corrupted";  			item.Status = 50;  		} else {  			item.StatusText = "Error: " + ex.Message;  			item.Status = 50;  		}  	}  	bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  	if (bwResizeBatch.CancellationPending) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: foreach (var item in batchItems) {  	count++;  	try {  		if (saveMode == SaveMode.ModifyExisting)  			// if the savepath have the default value' replace the existing image.  			ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  		else  			ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  		item.StatusText = "Done";  		item.Status = 100;  	} catch (Exception ex) {  		if (ex is ImageMissingException) {  			item.StatusText = "Error: Image missing.";  			item.Status = 50;  		} else if (ex is ImageCorruptedException) {  			item.StatusText = "Error: Image corrupted";  			item.Status = 50;  		} else {  			item.StatusText = "Error: " + ex.Message;  			item.Status = 50;  		}  	}  	bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  	if (bwResizeBatch.CancellationPending) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: foreach (var item in batchItems) {  	count++;  	try {  		if (saveMode == SaveMode.ModifyExisting)  			// if the savepath have the default value' replace the existing image.  			ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  		else  			ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  		item.StatusText = "Done";  		item.Status = 100;  	} catch (Exception ex) {  		if (ex is ImageMissingException) {  			item.StatusText = "Error: Image missing.";  			item.Status = 50;  		} else if (ex is ImageCorruptedException) {  			item.StatusText = "Error: Image corrupted";  			item.Status = 50;  		} else {  			item.StatusText = "Error: " + ex.Message;  			item.Status = 50;  		}  	}  	bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  	if (bwResizeBatch.CancellationPending) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: foreach (var item in batchItems) {  	count++;  	try {  		if (saveMode == SaveMode.ModifyExisting)  			// if the savepath have the default value' replace the existing image.  			ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  		else  			ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  		item.StatusText = "Done";  		item.Status = 100;  	} catch (Exception ex) {  		if (ex is ImageMissingException) {  			item.StatusText = "Error: Image missing.";  			item.Status = 50;  		} else if (ex is ImageCorruptedException) {  			item.StatusText = "Error: Image corrupted";  			item.Status = 50;  		} else {  			item.StatusText = "Error: " + ex.Message;  			item.Status = 50;  		}  	}  	bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  	if (bwResizeBatch.CancellationPending) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: foreach (var item in batchItems) {  	count++;  	try {  		if (saveMode == SaveMode.ModifyExisting)  			// if the savepath have the default value' replace the existing image.  			ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  		else  			ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  		item.StatusText = "Done";  		item.Status = 100;  	} catch (Exception ex) {  		if (ex is ImageMissingException) {  			item.StatusText = "Error: Image missing.";  			item.Status = 50;  		} else if (ex is ImageCorruptedException) {  			item.StatusText = "Error: Image corrupted";  			item.Status = 50;  		} else {  			item.StatusText = "Error: " + ex.Message;  			item.Status = 50;  		}  	}  	bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  	if (bwResizeBatch.CancellationPending) {  		e.Cancel = true;  		return;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	if (saveMode == SaveMode.ModifyExisting)  		// if the savepath have the default value' replace the existing image.  		ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  	else  		ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  	item.StatusText = "Done";  	item.Status = 100;  } catch (Exception ex) {  	if (ex is ImageMissingException) {  		item.StatusText = "Error: Image missing.";  		item.Status = 50;  	} else if (ex is ImageCorruptedException) {  		item.StatusText = "Error: Image corrupted";  		item.Status = 50;  	} else {  		item.StatusText = "Error: " + ex.Message;  		item.Status = 50;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	if (saveMode == SaveMode.ModifyExisting)  		// if the savepath have the default value' replace the existing image.  		ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  	else  		ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  	item.StatusText = "Done";  	item.Status = 100;  } catch (Exception ex) {  	if (ex is ImageMissingException) {  		item.StatusText = "Error: Image missing.";  		item.Status = 50;  	} else if (ex is ImageCorruptedException) {  		item.StatusText = "Error: Image corrupted";  		item.Status = 50;  	} else {  		item.StatusText = "Error: " + ex.Message;  		item.Status = 50;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	if (saveMode == SaveMode.ModifyExisting)  		// if the savepath have the default value' replace the existing image.  		ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  	else  		ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  	item.StatusText = "Done";  	item.Status = 100;  } catch (Exception ex) {  	if (ex is ImageMissingException) {  		item.StatusText = "Error: Image missing.";  		item.Status = 50;  	} else if (ex is ImageCorruptedException) {  		item.StatusText = "Error: Image corrupted";  		item.Status = 50;  	} else {  		item.StatusText = "Error: " + ex.Message;  		item.Status = 50;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: try {  	if (saveMode == SaveMode.ModifyExisting)  		// if the savepath have the default value' replace the existing image.  		ImageBuilder.Current.Build (item.FullPath' item.FullPath' rs);  	else  		ImageBuilder.Current.Build (item.FullPath' Properties.Settings.Default.saveFolderPath + "\\" + item.FileName' rs);  	item.StatusText = "Done";  	item.Status = 100;  } catch (Exception ex) {  	if (ex is ImageMissingException) {  		item.StatusText = "Error: Image missing.";  		item.Status = 50;  	} else if (ex is ImageCorruptedException) {  		item.StatusText = "Error: Image corrupted";  		item.Status = 50;  	} else {  		item.StatusText = "Error: " + ex.Message;  		item.Status = 50;  	}  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: item.Status = 100;  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (ex is ImageMissingException) {  	item.StatusText = "Error: Image missing.";  	item.Status = 50;  } else if (ex is ImageCorruptedException) {  	item.StatusText = "Error: Image corrupted";  	item.Status = 50;  } else {  	item.StatusText = "Error: " + ex.Message;  	item.Status = 50;  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (ex is ImageMissingException) {  	item.StatusText = "Error: Image missing.";  	item.Status = 50;  } else if (ex is ImageCorruptedException) {  	item.StatusText = "Error: Image corrupted";  	item.Status = 50;  } else {  	item.StatusText = "Error: " + ex.Message;  	item.Status = 50;  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (ex is ImageMissingException) {  	item.StatusText = "Error: Image missing.";  	item.Status = 50;  } else if (ex is ImageCorruptedException) {  	item.StatusText = "Error: Image corrupted";  	item.Status = 50;  } else {  	item.StatusText = "Error: " + ex.Message;  	item.Status = 50;  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: item.Status = 50;  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (ex is ImageCorruptedException) {  	item.StatusText = "Error: Image corrupted";  	item.Status = 50;  } else {  	item.StatusText = "Error: " + ex.Message;  	item.Status = 50;  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: if (ex is ImageCorruptedException) {  	item.StatusText = "Error: Image corrupted";  	item.Status = 50;  } else {  	item.StatusText = "Error: " + ex.Message;  	item.Status = 50;  }  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: item.Status = 50;  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: item.Status = 50;  
Magic Number,ImageResizerGUI.Code,BatchBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\BatchBackgroundWorking.cs,bwResizeBatch_DoWork,The following statement contains a magic number: bwResizeBatch.ReportProgress ((count * 100) / batchItems.Count' item);  
Magic Number,ImageResizerGUI.Code,ZipBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\ZipBackgroundWorking.cs,bwResizeBatch_ProgressChanged,The following statement contains a magic number: if (ProgressChangedEvent != null)  	ProgressChangedEvent (this' new ProgressChangedEventArgs ((count * 100) / total' items [count - 1]));  
Magic Number,ImageResizerGUI.Code,ZipBackgroundWorking,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\Code\ZipBackgroundWorking.cs,bwResizeBatch_ProgressChanged,The following statement contains a magic number: ProgressChangedEvent (this' new ProgressChangedEventArgs ((count * 100) / total' items [count - 1]));  
Magic Number,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,zipBackgroundWorking_ProgressChangedEvent,The following statement contains a magic number: ((BatchInfo)query.First ()).Status = 100;  
Magic Number,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,LoadSettings,The following statement contains a magic number: if (Properties.Settings.Default.querystring.Contains ("maxheight"))  	aOptions.cbox_resizeMode.SelectedIndex = 0;  else if (Properties.Settings.Default.querystring.Contains ("crop=auto"))  	aOptions.cbox_resizeMode.SelectedIndex = 2;  else  	aOptions.cbox_resizeMode.SelectedIndex = 1;  
Magic Number,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,LoadSettings,The following statement contains a magic number: if (Properties.Settings.Default.querystring.Contains ("crop=auto"))  	aOptions.cbox_resizeMode.SelectedIndex = 2;  else  	aOptions.cbox_resizeMode.SelectedIndex = 1;  
Magic Number,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,LoadSettings,The following statement contains a magic number: aOptions.cbox_resizeMode.SelectedIndex = 2;  
Magic Number,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,comboBox_exportAction_SelectionChanged,The following statement contains a magic number: switch (comboBox_exportAction.SelectedIndex) {  case 0:  	saveMode = SaveMode.ModifyExisting;  	break;  case 1:  	btn_BrowseButton.Content = "Browse";  	saveMode = SaveMode.ExportResults;  	grid_exportResults.Visibility = Visibility.Visible;  	tbox_savePath.Text = Properties.Settings.Default.saveFolderPath;  	break;  case 2:  	btn_BrowseButton.Content = "Save as";  	saveMode = SaveMode.CreateZipFile;  	grid_exportResults.Visibility = Visibility.Visible;  	tbox_savePath.Text = Properties.Settings.Default.saveZipPath;  	break;  }  
Missing Default,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,comboBox_exportAction_SelectionChanged,The following switch statement is missing a default case: switch (comboBox_exportAction.SelectedIndex) {  case 0:  	saveMode = SaveMode.ModifyExisting;  	break;  case 1:  	btn_BrowseButton.Content = "Browse";  	saveMode = SaveMode.ExportResults;  	grid_exportResults.Visibility = Visibility.Visible;  	tbox_savePath.Text = Properties.Settings.Default.saveFolderPath;  	break;  case 2:  	btn_BrowseButton.Content = "Save as";  	saveMode = SaveMode.CreateZipFile;  	grid_exportResults.Visibility = Visibility.Visible;  	tbox_savePath.Text = Properties.Settings.Default.saveZipPath;  	break;  }  
Missing Default,ImageResizerGUI,MainWindow,F:\newReposMay17\imazen_resizer\Samples\ImageResizerGUI\MainWindow_BackgroundWorkers.cs,btn_resize_Click,The following switch statement is missing a default case: switch (saveMode) {  case SaveMode.ModifyExisting:  case SaveMode.ExportResults:  	lastUsedPath = Properties.Settings.Default.saveFolderPath;  	ResizeBatch ();  	break;  case SaveMode.CreateZipFile:  	if (File.Exists (Properties.Settings.Default.saveZipPath))  		File.Delete (Properties.Settings.Default.saveZipPath);  	ResizeBatchAndZip ();  	break;  }  
