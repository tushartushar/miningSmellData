Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Bench,Benchmark,C:\repos\imazen_resizer\Tests\Benchmarking\Benchmarking.cs,BenchmarkInMemory,The method has 5 parameters. Parameters: c' source' instructions' excludeDecoding' excludeEncoding
Long Identifier,Bench,JobProfiler,C:\repos\imazen_resizer\Tests\Benchmarking\ImageResizer.Profiling\JobProfiler.cs,,The length of the parameter JoinThreadsBeforeSegmentsStart is 30.
Long Statement,Bench,Benchmark,C:\repos\imazen_resizer\Tests\Benchmarking\Benchmarking.cs,PrintConcurrencyResult,The length of the statement  "                    r.SequentialRuns.Count()' r.SequentialWallMs' s.SequentialMs.Sum' s.SequentialMs.Avg' s.SequentialMs.Min' s.SequentialMs.Max);" is 126.
Long Statement,Bench,ImageProvider,C:\repos\imazen_resizer\Tests\Benchmarking\ImageProvider.cs,CachedPathFor,The length of the statement  "            return Path.Combine(CacheFolder' string.Format("blank_{0}x{1}.{2}"'blankImage.Item1'blankImage.Item2'blankImage.Item3));" is 120.
Long Statement,Bench,ImageProvider,C:\repos\imazen_resizer\Tests\Benchmarking\ImageProvider.cs,ImageFormatFromExtension,The length of the statement  "            return ext == "png" ? ImageFormat.Png : ext == "gif" ? ImageFormat.Gif : ext == "tiff" ? ImageFormat.Tiff : ext == "bmp" ? ImageFormat.Bmp : ImageFormat.Jpeg;" is 158.
Long Statement,Bench,JobProfiler,C:\repos\imazen_resizer\Tests\Benchmarking\ImageResizer.Profiling\JobProfiler.cs,Start,The length of the statement  "            if (JoinThreadsBeforeSegmentsStart != null && JoinThreadsBeforeSegmentsStart.TryGetValue(segmentName' out threadsTotal)){" is 121.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EvaluateSpeedPlugin,The length of the statement  "            settings.Images = new ImageProvider().AddLocalImages(imageDir' "quality-original.jpg"' "fountain-small.jpg"' "sample.tif"' "private\\98613_17.tif");" is 148.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The length of the statement  "                        var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);" is 129.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The length of the statement  "                                r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));" is 129.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,PlotByThreads,The length of the statement  "            var combinations = settings.Images.GetImagesAndDescriptions().Combine(settings.SharedInstructions).Combine(configsAndLabels).Select(a => new Tuple<Tuple<string'string>' Instructions' Config' Instructions' string>(a.Item1.Item1' a.Item1.Item2' a.Item2.Item1' a.Item2.Item2' a.Item2.Item3));" is 289.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,PlotByThreads,The length of the statement  "                var runner = Benchmark.BenchmarkInMemory(c.Item3'c.Item1.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);" is 126.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Distribute,The length of the statement  "            if (colWidths.Count() != values.Count()) throw new ArgumentOutOfRangeException("values"' "values and colWidths must have the same number of elements");" is 151.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Distribute,The length of the statement  "            return string.Join(""' values.Select((s' ix) => colWidths[ix] > 0 ? s.PadRight(colWidths[ix]) : s.PadLeft(-colWidths[ix])));" is 124.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageToDefault,The length of the statement  "            settings.Images = new ImageProvider().AddLocalImages(imageDir' "quality-original.jpg"' "fountain-small.jpg"' "sample.tif"' "private\\98613_17.tif");" is 148.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageToDefault,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("FreeImageBuilder")'new Instructions("builder=freeimage")'"FreeImageBuilder")'" is 136.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageToDefault,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("FreeImageDecoder"'"FreeImageEncoder")'new Instructions("decoder=freeimage&encoder=freeimage")'"Hybrid (FreeImage encoder/decoder' GDI+ resizer)")};" is 206.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckGdMemoryUse,The length of the statement  "            var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });" is 132.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The length of the statement  "            Console.Write("Running {0} warmup (t={1})' {2} parallel (t={3})' {4} sequenetial\n"' runner.ThrowawayRuns * runner.ThrowawayThreads' runner.ThrowawayThreads'" is 157.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The length of the statement  "            Console.Write("Private bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.PrivateBytesBefore / 1000000.0' results.PrivateBytesWarm / 1000000.0' results.PrivateBytesAfter / 1000000.0);" is 197.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The length of the statement  "            Console.Write("Managed bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.ManagedBytesBefore / 1000000.0' results.ManagedBytesWarm / 1000000.0' results.ManagedBytesAfter / 1000000.0);" is 197.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,ScalingComparisonDefault,The length of the statement  "            settings.Images.AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(3264' 2448' "jpg")' new Tuple<int' int' string>(1200' 900' "png") });" is 160.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckFastScalingMemoryUse,The length of the statement  "            var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });" is 132.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckFastScalingMemoryUse,The length of the statement  "            var runner = Benchmark.BenchmarkInMemory(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")' imageSrc.GetImages().First()'" is 177.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The length of the statement  "                new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });" is 129.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true;&down.speed=5&f.ignorealpha=true")'"FastScaling speed prioritized")'" is 247.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true")'"FastScaling quality optimized")};" is 215.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true;&down.speed=5&f.ignorealpha=true")'"FastScaling speed prioritized")'" is 247.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true")'"FastScaling quality optimized")};" is 215.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The length of the statement  "                new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });" is 129.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true;&down.speed=5&f.ignorealpha=true")'"FastScaling speed prioritized")'" is 247.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.WicBuilder.WicBuilderPlugin' ImageResizer.Plugins.Wic")'new Instructions("builder=wic")'"WIC pipeline (speed prioritized)")};" is 205.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareDefaultToWic,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.WicBuilder.WicBuilderPlugin' ImageResizer.Plugins.Wic")'new Instructions("builder=wic")'"WIC pipeline (speed prioritized)")};" is 205.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The length of the statement  "                new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 2400' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });" is 129.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true&down.filter=fastcubic")'"FastCubic")'" is 216.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true&down.filter=robidoux")'"Robidoux")'" is 214.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The length of the statement  "                    new Tuple<Config' Instructions' string>(ConfigWithPlugins("ImageResizer.Plugins.FastScaling.FastScalingPlugin' ImageResizer.Plugins.FastScaling")'new Instructions("fastscale=true&down.filter=ginseng&down.speed=-2")'"Ginseng with no halving")};" is 243.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The length of the statement  "                new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 4800' "jpg")' new Tuple<int' int' string>(2400' 2400' "png") });" is 130.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The length of the statement  "                    new Tuple<Config' Instructions' string>(c'new Instructions("&fastscale=true&down.speed=4")'"FastScaling with speed= 4")' " is 120.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The length of the statement  "                    new Tuple<Config' Instructions' string>(c'new Instructions("&fastscale=true&down.speed=5")'"FastScaling with speed= 5")/*" is 121.
Long Statement,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageEncoderToDefault,The length of the statement  "            Instructions[] queries = new Instructions[] { new Instructions("format=jpg")' new Instructions("format=png")' new Instructions("format=gif") };" is 143.
Magic Number,Bench,Benchmark,C:\repos\imazen_resizer\Tests\Benchmarking\Benchmarking.cs,BenchmarkInMemory,The following statement contains a magic number: return BenchmarkJob(() => {                  var ms = new MemoryStream(data);                 var dest = excludeEncoding ?  typeof(Bitmap): (object)new MemoryStream(4096);                  var src = excludeDecoding ? (object)c.CurrentImageBuilder.LoadImage(ms' new ResizeSettings(instructions)) : (object)ms;                  var job = new ImageJob(src' dest' new Instructions(instructions));                 job.DisposeDestinationStream = true;                 job.DisposeSourceObject = true;                 return job;              }'c);
Magic Number,Bench,Benchmark,C:\repos\imazen_resizer\Tests\Benchmarking\Benchmarking.cs,BenchmarkEncoderInMemory,The following statement contains a magic number: b.Setup = () =>  new Tuple<Image'Stream>(Bitmap.FromStream(new MemoryStream(data))' new MemoryStream(4096 * 4));
Magic Number,Bench,Benchmark,C:\repos\imazen_resizer\Tests\Benchmarking\Benchmarking.cs,BenchmarkEncoderInMemory,The following statement contains a magic number: b.Setup = () =>  new Tuple<Image'Stream>(Bitmap.FromStream(new MemoryStream(data))' new MemoryStream(4096 * 4));
Magic Number,Bench,JobProfiler,C:\repos\imazen_resizer\Tests\Benchmarking\ImageResizer.Profiling\JobProfiler.cs,WaitStart,The following statement contains a magic number: if (threads < 2) return;
Magic Number,Bench,JobProfiler,C:\repos\imazen_resizer\Tests\Benchmarking\ImageResizer.Profiling\JobProfiler.cs,WaitStop,The following statement contains a magic number: if (threads < 2) return;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EstablishBaseline,The following statement contains a magic number: r.SequentialRuns = 4;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EstablishBaseline,The following statement contains a magic number: r.ParallelRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EvaluateSpeedPlugin,The following statement contains a magic number: for (int rez = 100; rez < 800; rez += 200){                 sizes.Add(new Instructions(){Width = rez});             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EvaluateSpeedPlugin,The following statement contains a magic number: for (int rez = 100; rez < 800; rez += 200){                 sizes.Add(new Instructions(){Width = rez});             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EvaluateSpeedPlugin,The following statement contains a magic number: for (int rez = 100; rez < 800; rez += 200){                 sizes.Add(new Instructions(){Width = rez});             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,EvaluateSpeedPlugin,The following statement contains a magic number: for (int i = 1; i < 4; i++)             {                 configs.Add(new Tuple<Config' Instructions' string>(ConfigWithPlugins("SpeedOrQuality")'                      new Instructions("speed=" + i.ToString())' "SpeedOrQuality plugin"));              }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,Compare,The following statement contains a magic number: foreach (var pair in settings.Images.GetImagesAndDescriptions())             {                 Console.WriteLine();                 String isolation = (settings.SegmentNameFilter != "op" && !settings.UseBarrierAroundSegment) ?                                  "Measuring '" + settings.SegmentNameFilter + "' without memory barrier; multi-threaded results invalid."                                  : (settings.UseBarrierAroundSegment ? "Segment '" +  settings.SegmentNameFilter + "' w/ mem barrier."                                  : "Segment '" + settings.SegmentNameFilter +"'.");                   Console.WriteLine("Using {0} seq. runs' {1} || on {2} threads({5}). {4} Input: {3}"'                      settings.SequentialRuns'settings.ParallelRuns'settings.ParallelThreads'pair.Item2' isolation'                     Environment.Is64BitProcess ? "64-bit" : "32-bit");                  var widths = CalcColumnWidths(ConsoleWidth' 4' -2' -2' -2' -4);                  Console.WriteLine(Distribute(widths' "Config"' "Sequential"' "Parallel"' "Percent concurrent"' "Instructions"));                 foreach (var instructions in settings.SharedInstructions)                 {                      var comparableResults = configsAndLabels.Select(triple =>                     {                         var combined = triple.Item2 == null ? instructions : new Instructions(triple.Item2.MergeDefaults(instructions));                         var runner = Benchmark.BenchmarkInMemory(triple.Item1' pair.Item1' combined' settings.ExcludeDecoding' settings.ExcludeEncoding);                         runner.ParallelRuns = settings.ParallelRuns;                         runner.ParallelThreads = settings.ParallelThreads;                         runner.SequentialRuns = settings.SequentialRuns;                         runner.Label = triple.Item3;                         runner.ThrowawayThreads = settings.ThrowawayThreads;                         runner.ThrowawayRuns = settings.ThrowawayRuns;                          if (settings.UseBarrierAroundSegment)                             runner.ProfilerProvider = (s't) => new JobProfiler(s).JoinThreadsAroundSegment(settings.SegmentNameFilter't);                         else                             runner.ProfilerProvider = (s' t) => new JobProfiler(s);                          var results = runner.Benchmark();                          Action<IConcurrencyResults> printStats = r =>                         {                             var statStrs = new List<string>(GetStats(triple.Item3' r.GetStats()));                             statStrs.Add(combined.ToString());                             Console.WriteLine(Distribute(widths' statStrs.ToArray()));                         };                         var set = results.FindSet(settings.SegmentNameFilter);                         printStats(set);                          if (settings.ShowProfileTree)                         {                             var f = new ConcurrencyResultFormatter();                             f.DeltaAbnormalRatio = 1000000;                             f.ExclusiveTimeSignificantMs = settings.ExclusiveTimeSignificantMs;                             Console.WriteLine(f.PrintCallTree(set));                         }                         return new Tuple<string' IConcurrencyResults>(triple.Item3' set);                     }).ToArray();                                           var seqList = comparableResults.OrderBy(r => r.Item2.FastestSequentialMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X slower {2}"'                                                         i + 1' r.Item1' r.Item2.GetStats().SequentialMs.ToString(0.05)'                                  r.Item2.FastestSequentialMs() / comparableResults.Min(c => c.Item2.FastestSequentialMs())));                       Console.WriteLine("Sequential: \n" + string.Join("\n"' seqList));                      var parList = comparableResults.OrderBy(r => r.Item2.ParallelRealMs()).                                                     Select((r' i) => string.Format("{0}. {1} {3:F2}X less throughput {2:F2}ms total. {4:F}% concurrent"'                                                         i + 1' r.Item1' r.Item2.GetStats().ParallelRealMs'                                  r.Item2.ParallelRealMs() / comparableResults.Min(c => c.Item2.ParallelRealMs())' r.Item2.GetStats().ParallelConcurrencyPercent));                      Console.WriteLine("Parallel: \n" + string.Join("\n"' parList));                     Console.WriteLine("\n");                  }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckGdMemoryUse,The following statement contains a magic number: var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckGdMemoryUse,The following statement contains a magic number: var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckGdMemoryUse,The following statement contains a magic number: CheckMemoryUse(runner' 2);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: runner.SequentialRuns = runMultiplier * 8;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: runner.ThrowawayRuns = runMultiplier * 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Private bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.PrivateBytesBefore / 1000000.0' results.PrivateBytesWarm / 1000000.0' results.PrivateBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Private bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.PrivateBytesBefore / 1000000.0' results.PrivateBytesWarm / 1000000.0' results.PrivateBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Private bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.PrivateBytesBefore / 1000000.0' results.PrivateBytesWarm / 1000000.0' results.PrivateBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Managed bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.ManagedBytesBefore / 1000000.0' results.ManagedBytesWarm / 1000000.0' results.ManagedBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Managed bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.ManagedBytesBefore / 1000000.0' results.ManagedBytesWarm / 1000000.0' results.ManagedBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckMemoryUse,The following statement contains a magic number: Console.Write("Managed bytes before: {0:F2}MB warm: {1:F2}MB after {2:F2}MB\n"' results.ManagedBytesBefore / 1000000.0' results.ManagedBytesWarm / 1000000.0' results.ManagedBytesAfter / 1000000.0);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareGdToDefault,The following statement contains a magic number: settings.ParallelRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareGdToDefault,The following statement contains a magic number: settings.SequentialRuns = 16;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareGdToDefault,The following statement contains a magic number: settings.ThrowawayRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingDefaults,The following statement contains a magic number: settings.ParallelRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingDefaults,The following statement contains a magic number: settings.SequentialRuns = 16;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingDefaults,The following statement contains a magic number: settings.ThrowawayRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,ScalingComparisonDefault,The following statement contains a magic number: settings.Images.AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(3264' 2448' "jpg")' new Tuple<int' int' string>(1200' 900' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,ScalingComparisonDefault,The following statement contains a magic number: settings.Images.AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(3264' 2448' "jpg")' new Tuple<int' int' string>(1200' 900' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,ScalingComparisonDefault,The following statement contains a magic number: settings.Images.AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(3264' 2448' "jpg")' new Tuple<int' int' string>(1200' 900' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,ScalingComparisonDefault,The following statement contains a magic number: settings.Images.AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(3264' 2448' "jpg")' new Tuple<int' int' string>(1200' 900' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckFastScalingMemoryUse,The following statement contains a magic number: var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckFastScalingMemoryUse,The following statement contains a magic number: var imageSrc = new ImageProvider().AddBlankImages(new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CheckFastScalingMemoryUse,The following statement contains a magic number: CheckMemoryUse(runner' 2);
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefault,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg")});
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 4000' "jpg")});
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The following statement contains a magic number: settings.ThrowawayRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The following statement contains a magic number: settings.SequentialRuns = 4;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingByThreading,The following statement contains a magic number: settings.ParallelRuns = 2;
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4000' 3000' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareDefaultToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareDefaultToWic,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 2400' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 2400' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 2400' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingToDefaultHQ,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 2400' "jpg")' new Tuple<int' int' string>(1600' 800' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 4800' "jpg")' new Tuple<int' int' string>(2400' 2400' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 4800' "jpg")' new Tuple<int' int' string>(2400' 2400' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 4800' "jpg")' new Tuple<int' int' string>(2400' 2400' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFastScalingSpeeds,The following statement contains a magic number: settings.Images.AddBlankImages(                 new Tuple<int' int' string>[] { new Tuple<int' int' string>(4800' 4800' "jpg")' new Tuple<int' int' string>(2400' 2400' "png") });
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageEncoderToDefault,The following statement contains a magic number: foreach (string s in images)             {                 foreach (var query in queries)                 {                     Console.WriteLine("Comparing FreeImage and standard encoders for " + s + query.ToString());                     Console.Write("Default: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(c' s' query);                     Console.Write("PrettyGifs: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(p' s' query);                     Console.Write("FreeImage: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(f' s' query);                 }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageEncoderToDefault,The following statement contains a magic number: foreach (string s in images)             {                 foreach (var query in queries)                 {                     Console.WriteLine("Comparing FreeImage and standard encoders for " + s + query.ToString());                     Console.Write("Default: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(c' s' query);                     Console.Write("PrettyGifs: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(p' s' query);                     Console.Write("FreeImage: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(f' s' query);                 }             }
Magic Number,Bench,Program,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,CompareFreeImageEncoderToDefault,The following statement contains a magic number: foreach (string s in images)             {                 foreach (var query in queries)                 {                     Console.WriteLine("Comparing FreeImage and standard encoders for " + s + query.ToString());                     Console.Write("Default: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(c' s' query);                     Console.Write("PrettyGifs: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(p' s' query);                     Console.Write("FreeImage: ".PadRight(25));                     Benchmark.BenchmarkEncoderInMemory(f' s' query);                 }             }
Magic Number,Bench,BenchmarkingSettings,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingSettings,The following statement contains a magic number: SequentialRuns = 8;
Magic Number,Bench,BenchmarkingSettings,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingSettings,The following statement contains a magic number: ParallelRuns = 2;
Magic Number,Bench,BenchmarkingSettings,C:\repos\imazen_resizer\Tests\Benchmarking\Program.cs,BenchmarkingSettings,The following statement contains a magic number: ExclusiveTimeSignificantMs = 5;
