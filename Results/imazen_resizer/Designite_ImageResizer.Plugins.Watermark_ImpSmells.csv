Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The method has 118 lines of code.
Complex Method,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,Cyclomatic complexity of the method is 25
Complex Method,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,Cyclomatic complexity of the method is 14
Complex Method,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,RenderLayersForLevel,Cyclomatic complexity of the method is 8
Complex Method,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,PreLoadImage,Cyclomatic complexity of the method is 9
Long Parameter List,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,Computation,The method has 6 parameters. Parameters: c' trustedKeys' permanentIssueSink' mgr' clock' enforcementEnabled
Long Parameter List,ImageResizer.Plugins.LicenseVerifier,LicenseFetcher,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseFetcher.cs,LicenseFetcher,The method has 9 parameters. Parameters: clock' getClient' licenseResult' getInfo' sink' licenseId' licenseSecret' baseUrls' licenseFetchIntervalSeconds
Long Parameter List,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The method has 5 parameters. Parameters: g' text' f' point' fmt
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,AreFeaturesLicensed,The length of the statement  "                    $"License {b.Fields.Id} needs to be upgraded; it does not cover in-use features {notCovered.SelectMany(v => v).Distinct().Delimited("' ")}"' b.ToRedactedString()'" is 162.
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,IsLicenseValid,The length of the statement  "                    $"License {details.Id} covers ImageResizer versions prior to {details.SubscriptionExpirationDate?.ToString("D")}' but you are using a build dated {GetBuildDate()?.ToString("D")}"'" is 179.
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,IsLicenseValid,The length of the statement  "                permanentIssues.AcceptIssue(new Issue($"License {details.Id}" + (message != null ? $": {message}" : " is no longer valid")'" is 123.
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,GetGracePeriodFor,The length of the statement  "                    $"License {chain.Id} was not found in the disk cache and could not be retrieved from the remote server within {graceMinutes} minutes."'" is 135.
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,SalesMessage,The length of the statement  "                return "Need to change domains? Get a discounted upgrade to a floating license: https://imageresizing.net/licenses/convert";" is 124.
Long Statement,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,SalesMessage,The length of the statement  "A universal license key would fix that. See if your purchase is eligible for a free key: https://imageresizing.net/licenses/convert";" is 133.
Long Statement,ImageResizer.Plugins.LicenseVerifier,DomainLookup,C:\repos\imazen_resizer\Plugins\LicenseVerifier\DomainLookup.cs,GetDomainMappings,The length of the statement  "                        $"You have mapped {from} to {to}. {to} is not one of the known domains: {string.Join(" "' knownDomains.OrderBy(s => s))}"'" is 122.
Long Statement,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,ToPublicString,The length of the statement  "                $"License {Id}{(IsRemote ? " (remote)" : "")}\n{string.Join("\n\n"' Licenses().Where(b => b.Fields.IsPublic()).Select(b => freshness(b) + b.ToRedactedString()))}\n");" is 166.
Long Statement,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,ToString,The length of the statement  "                $"License {Id} (remote={IsRemote})\n    {string.Join("\n\n"' Licenses().Select(b => freshness(b) + b.ToRedactedString())).Replace("\n"' "\n    ")}\n");" is 151.
Long Statement,ImageResizer.Plugins.LicenseVerifier,SignatureTestApp,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Test_Generic,The length of the statement  "                "28178177427582259905122756905913963624440517746414712044433894631438407111916149031583287058323879921298234454158166031934230083094710974550125942791690254427377300877691173542319534371793100994953897137837772694304619234054383162641475011138179669415510521009673718000682851222831185756777382795378538121010194881849505437499638792289283538921706236004391184253166867653735050981736002298838523242717690667046044130539971131293603078008447972889271580670305162199959939004819206804246872436611558871928921860176200657026263241409488257640191893499783065332541392967986495144643652353104461436623253327708136399114561");" is 621.
Long Statement,ImageResizer.Plugins.LicenseVerifier,SignatureTestApp,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Test_Generic,The length of the statement  "                "localhost:RG9tYWluOiBsb2NhbGhvc3QKT3duZXI6IEV2ZXJ5b25lCklzc3VlZDogMjAxNS0wMy0yOFQwOTozNjo1OVoKRmVhdHVyZXM6IFI0RWxpdGUgUjRDcmVhdGl2ZSBSNFBlcmZvcm1hbmNlCg==:h6D+kIXbF3qmvmW2gDpb+b4gdxBjnrkZLvSzXmEnqKAywNJNpTdFekpTOB4SwU14WbTeVyWwvFngHax7WuHBV+0WkQ5lDqKFaRW32vj8CJQeG8Wvnyj9PaNGaS/FpKhNjZbDEmh3qqirBp2NR0bpN4QbhP9NMy7+rOMo0nynAruwWvJKCnuf7mWWdb9a5uTZO9OUcSeS/tY8QaNeIhaCnhPe0Yx9qvOXe5nMnl10CR9ur+EtS54d1qzBGHqN/3oFhiB+xlqNELwz23qR4c8HxbTEyNarkG4CZx8CbbgJfHmPxAYGJTTBTPJ+cdah8MJR16Ta36cRZ2Buy8XYo/nf1g==";" is 502.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,GetMemCachedBitmap,The length of the statement  "            if (HttpContext.Current == null) return onlyLoadIfCacheExists ? null : c.CurrentImageBuilder.LoadImage(virtualPath' query);" is 123.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,GetMemCachedBitmap,The length of the statement  "                throw new ImageProcessingException(500' "Failed to located watermark " + virtualPath' "Failed to located a watermarking file"' fe);" is 131.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,GetMemCachedBitmap,The length of the statement  "            if (HostingEnvironment.VirtualPathProvider != null) cd = HostingEnvironment.VirtualPathProvider.GetCacheDependency(virtualPath' new string[] { }' DateTime.UtcNow);" is 163.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,RenderTo,The length of the statement  "                if (img == null) img = GetMemCachedBitmap(Path' opts); //Delayed creation allows the maxwidth/maxheight to be used in gradient plugin" is 133.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,RenderTo,The length of the statement  "                        s.destGraphics.DrawImage(final' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(final.Size'imgBounds.Size)' imgBounds)));" is 150.
Long Statement,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,RenderTo,The length of the statement  "                    s.destGraphics.DrawImage(img' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(img.Size'imgBounds.Size)' imgBounds)));" is 146.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "            SizeF normalSize = actualSizeCalculator((double.IsNaN(width) && Fill) ? cont.Width : width' (double.IsNaN(height) && Fill) ? cont.Height : height);" is 147.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "            if (double.IsNaN(left) && double.IsNaN(right)) { left = cont.X; right = cont.Right; }//Handle situations where neither left nor right is specified' pretend left=0" is 162.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "            if (double.IsNaN(top) && double.IsNaN(bottom)) { top = cont.X; bottom = cont.Bottom; } //Handle situations where neither top nor bottom is specified' pretend top=0" is 163.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "            //When all 3 values are specified in either direction' we must use the alignment setting to determine which direction to snap to." is 129.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "                    if (Align == ContentAlignment.BottomCenter || Align == ContentAlignment.MiddleCenter || Align == ContentAlignment.TopCenter){" is 125.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "                    if (Align == ContentAlignment.BottomRight || Align == ContentAlignment.MiddleRight || Align == ContentAlignment.TopRight)" is 121.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "            //When all 3 values are specified in either direction' we must use the alignment setting to determine which direction to snap to." is 129.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "                    if (Align == ContentAlignment.MiddleLeft || Align == ContentAlignment.MiddleCenter || Align == ContentAlignment.MiddleRight) {" is 126.
Long Statement,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The length of the statement  "                    if (Align == ContentAlignment.BottomLeft || Align == ContentAlignment.BottomCenter || Align == ContentAlignment.BottomRight)" is 124.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,GetMemCachedBitmap,The length of the statement  "            if (HttpContext.Current == null) return onlyLoadIfCacheExists ? null : c.CurrentImageBuilder.LoadImage(virtualPath' new ResizeSettings());" is 138.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,GetMemCachedBitmap,The length of the statement  "            if (HostingEnvironment.VirtualPathProvider != null) cd = HostingEnvironment.VirtualPathProvider.GetCacheDependency(virtualPath' new string[] { }' DateTime.UtcNow);" is 163.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));" is 122.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));" is 122.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                float innerWidth = (float)Math.Floor(imageBox.Width - Math.Abs(topLeftPadding.Width) - Math.Abs(bottomRightPadding.Width));" is 123.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                float innerHeight = (float)Math.Floor(imageBox.Height - Math.Abs(topLeftPadding.Height) - Math.Abs(bottomRightPadding.Height));" is 127.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                if (align == ContentAlignment.BottomCenter || align == ContentAlignment.BottomLeft || align == ContentAlignment.BottomRight)" is 124.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                if (align == ContentAlignment.MiddleCenter || align == ContentAlignment.MiddleLeft || align == ContentAlignment.MiddleRight)" is 124.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                if (align == ContentAlignment.BottomRight || align == ContentAlignment.MiddleRight || align == ContentAlignment.TopRight)" is 121.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                if (align == ContentAlignment.BottomCenter || align == ContentAlignment.MiddleCenter || align == ContentAlignment.TopCenter)" is 124.
Long Statement,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The length of the statement  "                g.DrawImage(wb' new Rectangle((int)(x + imageBox.X)' (int)(y + imageBox.Y)' (int)watermarkSize.Width' (int)watermarkSize.Height));" is 130.
Long Statement,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,GetHashBasis,The length of the statement  "            var b = new object[] {Text' Vertical' TextColor'OutlineColor'GlowColor'Font'Angle'FontSize'Style'OutlineWidth'GlowWidth'Rendering };" is 132.
Long Statement,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,RenderTo,The length of the statement  "                     if (Angle != 0) size = PolygonMath.GetBoundingBox(PolygonMath.RotatePoly(PolygonMath.ToPoly(new RectangleF(new PointF(0' 0)' size))' Angle)).Size;" is 146.
Long Statement,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,RenderTo,The length of the statement  "                 s.destGraphics.TextRenderingHint = Rendering; // Utils.parseEnum<TextRenderingHint>(s.settings["watermark.rendering"]' this.Rendering); ;" is 137.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,Install,The length of the statement  "            _namedWatermarks = ParseWatermarks(c.getConfigXml().queryFirst("watermarks")' ref _defaultImageQuery' ref _otherImages);" is 120.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,The length of the statement  "            Dictionary<string' IEnumerable<Layer>> dict = new Dictionary<string' IEnumerable<Layer>>(StringComparer.OrdinalIgnoreCase);" is 123.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,The length of the statement  "                        this.c.configurationSectionIssues.AcceptIssue(new Issue("WatermarkPlugin"' "The name attribute for each watermark or watermark group must be specified' and must be unique."'" is 173.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,The length of the statement  "                if (c.Name.Equals("otherimages"' StringComparison.OrdinalIgnoreCase)) otherImageDefaults = new ImageLayer(c.Attrs' defaultImageQuery' this.c);" is 142.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,The length of the statement  "                if (c.Name.Equals("image"' StringComparison.OrdinalIgnoreCase)) dict.Add(name' new Layer[] { new ImageLayer(c.Attrs' defaultImageQuery' this.c) });" is 147.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,ParseWatermarks,The length of the statement  "                            if (layer.Name.Equals("image"' StringComparison.OrdinalIgnoreCase)) layers.Add(new ImageLayer(layer.Attrs' defaultImageQuery' this.c));" is 135.
Long Statement,ImageResizer.Plugins.Watermark,WatermarkPlugin,C:\repos\imazen_resizer\Plugins\Watermark\Watermark.cs,Pipeline_PostRewrite,The length of the statement  "                        e.QueryString["watermark-cachebreak"] = (e.QueryString["watermark-cachebreak"] ?? "") + "_" + l.GetDataHash().ToString();" is 121.
Magic Number,ImageResizer.Plugins.LicenseVerifier,Computation,C:\repos\imazen_resizer\Plugins\LicenseVerifier\Computation.cs,GetGracePeriodFor,The following statement contains a magic number: var thirtySeconds = mgr.FirstHeartbeat.Value.AddSeconds(30);
Magic Number,ImageResizer.Plugins.LicenseVerifier,DomainLookup,C:\repos\imazen_resizer\Plugins\LicenseVerifier\DomainLookup.cs,DomainLookup,The following statement contains a magic number: suffixSearchList = knownDomains.Select(known =>                                            {                                                var d = known.TrimStart('.');                                                d = d.StartsWith("www.") ? d.Substring(4) : d;                                                return new KeyValuePair<string' string>("." + d' known);                                            })                                            .ToList();
Magic Number,ImageResizer.Plugins.LicenseVerifier,DomainLookup,C:\repos\imazen_resizer\Plugins\LicenseVerifier\DomainLookup.cs,ExplainNormalizations,The following statement contains a magic number: return LookupTableSize > 0                 ? $"The domain lookup table has {LookupTableSize} elements. Displaying {Math.Min(200' LookupTableSize)}:\n" +                    lookupTable.OrderByDescending(p => p.Value)                                                .Take(200)                                                .Select(pair => pair.Key == pair.Value ? pair.Key : $"{pair.Key} => {pair.Value}").Delimited("' ") +                   "\n"                 : "";
Magic Number,ImageResizer.Plugins.LicenseVerifier,DomainLookup,C:\repos\imazen_resizer\Plugins\LicenseVerifier\DomainLookup.cs,ExplainNormalizations,The following statement contains a magic number: return LookupTableSize > 0                 ? $"The domain lookup table has {LookupTableSize} elements. Displaying {Math.Min(200' LookupTableSize)}:\n" +                    lookupTable.OrderByDescending(p => p.Value)                                                .Take(200)                                                .Select(pair => pair.Key == pair.Value ? pair.Key : $"{pair.Key} => {pair.Value}").Delimited("' ") +                   "\n"                 : "";
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,OnFetchResult,The following statement contains a magic number: if (body != null) {                 Last200 = parent.Clock.GetUtcNow();                 var license = parent.TryDeserialize(body' "remote server"' false);                 if (license != null) {                     var newId = license.Fields.Id;                     if (newId == Id) {                         remoteLicense = license;                         // Victory! (we're ignoring failed writes/duplicates)                         parent.Cache.TryPut(fetcher.CacheKey' body);                          LastSuccess = parent.Clock.GetUtcNow();                          lastWorkingUri = results.Last().FullUrl;                     } else {                         parent.AcceptIssue(new Issue(                             "Remote license file does not match. Please contact support@imageresizing.net"'                             "Local: " + Id + "  Remote: " + newId' IssueSeverity.Error));                     }                 }                 // TODO: consider logging a failed deserialization remotely             } else {                 var licenseName = Id;                  if (results.All(r => r.HttpCode == 404 || r.HttpCode == 403)) {                     parent.AcceptIssue(new Issue("No such license (404/403): " + licenseName'                         string.Join("\n"' results.Select(r => "HTTP 404/403 fetching " + RedactSecret(r.ShortUrl)))'                         IssueSeverity.Error));                     // No such subscription key.. but don't downgrade it if exists.                     var cachedString = parent.Cache.Get(fetcher.CacheKey);                     int temp;                     if (cachedString == null || !int.TryParse(cachedString' out temp)) {                         parent.Cache.TryPut(fetcher.CacheKey' results.First().HttpCode.ToString());                     }                     Last404 = parent.Clock.GetUtcNow();                 } else if (results.All(r => r.LikelyNetworkFailure)) {                     // Network failure. Make sure the server can access the remote server                     parent.AcceptIssue(fetcher.FirewallIssue(licenseName));                     LastTimeout = parent.Clock.GetUtcNow();                 } else {                     parent.AcceptIssue(new Issue("Exception(s) occurred fetching license " + licenseName'                         RedactSecret(string.Join("\n"'                             results.Select(r =>                                 $"{r.HttpCode} {r.FullUrl}  LikelyTimeout: {r.LikelyNetworkFailure} Error: {r.FetchError?.ToString()}")))'                         IssueSeverity.Error));                     LastException = parent.Clock.GetUtcNow();                 }             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,OnFetchResult,The following statement contains a magic number: if (body != null) {                 Last200 = parent.Clock.GetUtcNow();                 var license = parent.TryDeserialize(body' "remote server"' false);                 if (license != null) {                     var newId = license.Fields.Id;                     if (newId == Id) {                         remoteLicense = license;                         // Victory! (we're ignoring failed writes/duplicates)                         parent.Cache.TryPut(fetcher.CacheKey' body);                          LastSuccess = parent.Clock.GetUtcNow();                          lastWorkingUri = results.Last().FullUrl;                     } else {                         parent.AcceptIssue(new Issue(                             "Remote license file does not match. Please contact support@imageresizing.net"'                             "Local: " + Id + "  Remote: " + newId' IssueSeverity.Error));                     }                 }                 // TODO: consider logging a failed deserialization remotely             } else {                 var licenseName = Id;                  if (results.All(r => r.HttpCode == 404 || r.HttpCode == 403)) {                     parent.AcceptIssue(new Issue("No such license (404/403): " + licenseName'                         string.Join("\n"' results.Select(r => "HTTP 404/403 fetching " + RedactSecret(r.ShortUrl)))'                         IssueSeverity.Error));                     // No such subscription key.. but don't downgrade it if exists.                     var cachedString = parent.Cache.Get(fetcher.CacheKey);                     int temp;                     if (cachedString == null || !int.TryParse(cachedString' out temp)) {                         parent.Cache.TryPut(fetcher.CacheKey' results.First().HttpCode.ToString());                     }                     Last404 = parent.Clock.GetUtcNow();                 } else if (results.All(r => r.LikelyNetworkFailure)) {                     // Network failure. Make sure the server can access the remote server                     parent.AcceptIssue(fetcher.FirewallIssue(licenseName));                     LastTimeout = parent.Clock.GetUtcNow();                 } else {                     parent.AcceptIssue(new Issue("Exception(s) occurred fetching license " + licenseName'                         RedactSecret(string.Join("\n"'                             results.Select(r =>                                 $"{r.HttpCode} {r.FullUrl}  LikelyTimeout: {r.LikelyNetworkFailure} Error: {r.FetchError?.ToString()}")))'                         IssueSeverity.Error));                     LastException = parent.Clock.GetUtcNow();                 }             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,GetLicenseServers,The following statement contains a magic number: return newList.Concat(oldStack.Except(newList)).Take(10).ToArray();
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseChain,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseChain.cs,GetReportPairs,The following statement contains a magic number: var firstHearbeat = (long) (parent.FirstHeartbeat.GetValueOrDefault() -                                         new DateTimeOffset(1970' 1' 1' 0' 0' 0' 0' TimeSpan.Zero)).TotalSeconds;
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseFetcher,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseFetcher.cs,AdjustErrorDebounce,The following statement contains a magic number: if (error.IntervalTicks > 0) {                 error.IntervalTicks *= ErrorMultiplier;                 error.IntervalTicks += (long) Math.Round(new Random().NextDouble() * clock.TicksPerSecond / 2.0);             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseFetcher,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseFetcher.cs,ConstructQuerystring,The following statement contains a magic number: try {                 var query = getInfo();                 query.WithPrepend(true).Add("license_id"' id);                 return query.ToQueryString(7000);             } catch (Exception ex) {                 sink.AcceptIssue(new Issue("LicenseManager"' "Failed to collect querystring for license request"'                     ex.ToString()' IssueSeverity.Warning));             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseBlob,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Deserialize,The following statement contains a magic number: if (parts.Count < 2) {                 throw new ArgumentException(                     "Not enough ':' delimited segments in license key; failed to deserialize: \"" + license + "\""'                     nameof(license));             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,LicenseBlob,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Deserialize,The following statement contains a magic number: var dataBytes = Convert.FromBase64String(parts[parts.Count - 2]);
Magic Number,ImageResizer.Plugins.LicenseVerifier,SignatureTestApp,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Main,The following statement contains a magic number: var debug = args.ElementAtOrDefault(2) == "-d";
Magic Number,ImageResizer.Plugins.LicenseVerifier,SignatureTestApp,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Main,The following statement contains a magic number: if (debug) {                 var log = new StringBuilder();                 exitCode = Test_Generic(log) ? 0 : 4;                  if (!Validate(licenseStr' mod' exp' log)) {                     exitCode = 2 ^ exitCode;                 }                 if (exitCode != 0) {                     Console.WriteLine(log.ToString());                 }             } else {                 exitCode = Validate(licenseStr' mod' exp' null) ? 0 : 1;             }
Magic Number,ImageResizer.Plugins.LicenseVerifier,SignatureTestApp,C:\repos\imazen_resizer\Plugins\LicenseVerifier\LicenseParsing.cs,Main,The following statement contains a magic number: if (debug) {                 var log = new StringBuilder();                 exitCode = Test_Generic(log) ? 0 : 4;                  if (!Validate(licenseStr' mod' exp' log)) {                     exitCode = 2 ^ exitCode;                 }                 if (exitCode != 0) {                     Console.WriteLine(log.ToString());                 }             } else {                 exitCode = Validate(licenseStr' mod' exp' null) ? 0 : 1;             }
Magic Number,ImageResizer.Plugins.Watermark,DistanceUnit,C:\repos\imazen_resizer\Plugins\Watermark\DistanceUnit.cs,TryParse,The following statement contains a magic number: if (value.EndsWith("px"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 2); type = Units.Pixels;             } else if (value.EndsWith("%")) {                 value = value.Substring(0' value.Length - 1); type = Units.Percentage;             } else if (value.EndsWith("percent"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 7); type = Units.Percentage;             } else if (value.EndsWith("pct"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 3); type = Units.Percentage;             }
Magic Number,ImageResizer.Plugins.Watermark,DistanceUnit,C:\repos\imazen_resizer\Plugins\Watermark\DistanceUnit.cs,TryParse,The following statement contains a magic number: if (value.EndsWith("px"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 2); type = Units.Pixels;             } else if (value.EndsWith("%")) {                 value = value.Substring(0' value.Length - 1); type = Units.Percentage;             } else if (value.EndsWith("percent"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 7); type = Units.Percentage;             } else if (value.EndsWith("pct"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 3); type = Units.Percentage;             }
Magic Number,ImageResizer.Plugins.Watermark,DistanceUnit,C:\repos\imazen_resizer\Plugins\Watermark\DistanceUnit.cs,TryParse,The following statement contains a magic number: if (value.EndsWith("px"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 2); type = Units.Pixels;             } else if (value.EndsWith("%")) {                 value = value.Substring(0' value.Length - 1); type = Units.Percentage;             } else if (value.EndsWith("percent"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 7); type = Units.Percentage;             } else if (value.EndsWith("pct"' StringComparison.OrdinalIgnoreCase)) {                 value = value.Substring(0' value.Length - 3); type = Units.Percentage;             }
Magic Number,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,GetMemCachedBitmap,The following statement contains a magic number: try             {                 b = c.CurrentImageBuilder.LoadImage(virtualPath' query);             }             catch (FileNotFoundException fe)             {                 throw new ImageProcessingException(500' "Failed to located watermark " + virtualPath' "Failed to located a watermarking file"' fe);             }
Magic Number,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,RenderTo,The following statement contains a magic number: lock (img) { //Only one reader from the cached bitmap at a time.                 //Skip rendering unless we have room to work with.                 if (imgBounds.Width <2 || imgBounds.Height < 2) return;                   if (ImageQuery.Keys.Count > 0 || Fill) {                     ResizeSettings settings = new ResizeSettings(ImageQuery);                     if (Fill && string.IsNullOrEmpty(settings["scale"])) settings.Scale = ScaleMode.Both;                      settings.MaxWidth = (int)Math.Floor(imgBounds.Width);                     settings.MaxHeight = (int)Math.Floor(imgBounds.Height);                      using (Bitmap final = c.CurrentImageBuilder.Build(img' settings'false)) {                         s.destGraphics.DrawImage(final' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(final.Size'imgBounds.Size)' imgBounds)));                     }                 } else {                      s.destGraphics.DrawImage(img' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(img.Size'imgBounds.Size)' imgBounds)));                 }              }
Magic Number,ImageResizer.Plugins.Watermark,ImageLayer,C:\repos\imazen_resizer\Plugins\Watermark\ImageLayer.cs,RenderTo,The following statement contains a magic number: lock (img) { //Only one reader from the cached bitmap at a time.                 //Skip rendering unless we have room to work with.                 if (imgBounds.Width <2 || imgBounds.Height < 2) return;                   if (ImageQuery.Keys.Count > 0 || Fill) {                     ResizeSettings settings = new ResizeSettings(ImageQuery);                     if (Fill && string.IsNullOrEmpty(settings["scale"])) settings.Scale = ScaleMode.Both;                      settings.MaxWidth = (int)Math.Floor(imgBounds.Width);                     settings.MaxHeight = (int)Math.Floor(imgBounds.Height);                      using (Bitmap final = c.CurrentImageBuilder.Build(img' settings'false)) {                         s.destGraphics.DrawImage(final' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(final.Size'imgBounds.Size)' imgBounds)));                     }                 } else {                      s.destGraphics.DrawImage(img' PolygonMath.ToRectangle(PolygonMath.CenterInside(PolygonMath.DownScaleInside(img.Size'imgBounds.Size)' imgBounds)));                 }              }
Magic Number,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The following statement contains a magic number: if (!double.IsNaN(left) && !double.IsNaN(right) && right < left) left = right = ((left + right) / 2);
Magic Number,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The following statement contains a magic number: if (!double.IsNaN(top) && !double.IsNaN(bottom) && bottom < top) bottom = top = ((bottom + top) / 2);
Magic Number,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The following statement contains a magic number: if (!double.IsNaN(left) && !double.IsNaN(right) && !double.IsNaN(width)) {                 if (width > right - left) width = right - left; //Use the smaller value in this case' no need to align.                 else {                     if (Align == ContentAlignment.BottomLeft || Align == ContentAlignment.MiddleLeft || Align == ContentAlignment.TopLeft)                         right = left + width;                     if (Align == ContentAlignment.BottomCenter || Align == ContentAlignment.MiddleCenter || Align == ContentAlignment.TopCenter){                         left += (right-left-width) /2;                         right = left + width;                     }                     if (Align == ContentAlignment.BottomRight || Align == ContentAlignment.MiddleRight || Align == ContentAlignment.TopRight)                         left = right - width;                 }             }
Magic Number,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,CalculateLayerCoordinates,The following statement contains a magic number: if (!double.IsNaN(top) && !double.IsNaN(bottom) && !double.IsNaN(height)) {                 if (height > bottom - top) height = bottom - top; //Use the smaller value in this case' no need to align.                 else {                     if (Align == ContentAlignment.TopLeft || Align == ContentAlignment.TopCenter || Align == ContentAlignment.TopRight)                         bottom = top + height;                     if (Align == ContentAlignment.MiddleLeft || Align == ContentAlignment.MiddleCenter || Align == ContentAlignment.MiddleRight) {                         top += (bottom - top - height) / 2;                         bottom = top + height;                     }                     if (Align == ContentAlignment.BottomLeft || Align == ContentAlignment.BottomCenter || Align == ContentAlignment.BottomRight)                         top = bottom - height;                 }             }
Magic Number,ImageResizer.Plugins.Watermark,Layer,C:\repos\imazen_resizer\Plugins\Watermark\Layer.cs,Resolve,The following statement contains a magic number: if (value.Type == DistanceUnit.Units.Percentage) val *= percentRelativeTo / 100;
Magic Number,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The following statement contains a magic number: lock (wb) {                 //If percentages' resolve to pixels                 if (valuesPercentages) {                     //Force into 0..1 range' inclusive.                     watermarkSize.Height = Math.Max(0' Math.Min(1' watermarkSize.Height));                     watermarkSize.Width = Math.Max(0' Math.Min(1' watermarkSize.Width));                     topLeftPadding.Height = Math.Max(0' Math.Min(1' topLeftPadding.Height));                     topLeftPadding.Width = Math.Max(0' Math.Min(1' topLeftPadding.Width));                     bottomRightPadding.Height = Math.Max(0' Math.Min(1' bottomRightPadding.Height));                     bottomRightPadding.Width = Math.Max(0' Math.Min(1' bottomRightPadding.Width));                      //Make sure everything adds up to 1                     double totalWidth = watermarkSize.Width + topLeftPadding.Width + bottomRightPadding.Width;                     if (totalWidth > 1) {                         totalWidth = 1 / totalWidth; //Turn it into the factor we have to multiple by to make everything fit.                         watermarkSize.Width *= (float)totalWidth;                         topLeftPadding.Width *= (float)totalWidth;                         bottomRightPadding.Width *= (float)totalWidth;                     }                     double totalHeight = watermarkSize.Height + topLeftPadding.Height + bottomRightPadding.Height;                     if (totalHeight > 1) {                         totalHeight = 1 / totalHeight; //Turn it into the factor we have to multiply by to make everything fit.                         watermarkSize.Height *= (float)totalHeight;                         topLeftPadding.Height *= (float)totalHeight;                         bottomRightPadding.Height *= (float)totalHeight;                     }                      //Now' we can resolve the percentages to pixels.                     watermarkSize.Height *= imageBox.Height;                     watermarkSize.Width *= imageBox.Width;                     topLeftPadding.Height *= imageBox.Height;                     topLeftPadding.Width *= imageBox.Width;                     bottomRightPadding.Height *= imageBox.Height;                     bottomRightPadding.Width *= imageBox.Width;                 }                  //Keep aspect ratio' shrinking further if needed.                 if (keepAspectRatio) watermarkSize = PolygonMath.DownScaleInside(wb.Size' watermarkSize);                   //Floor all values to avoid rounding errors and blurry lines.                 watermarkSize = new SizeF((float)Math.Floor(watermarkSize.Width)' (float)Math.Floor(watermarkSize.Height));                 topLeftPadding = new SizeF((float)Math.Floor(topLeftPadding.Width)' (float)Math.Floor(topLeftPadding.Height));                 bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));                   //Check bounding box                 SizeF watermarkBoundingBox = new SizeF(watermarkSize.Width + topLeftPadding.Width + bottomRightPadding.Width'                     watermarkSize.Height + topLeftPadding.Height + bottomRightPadding.Height);                  //Don't draw the watermark if it is too small.                 if (!PolygonMath.FitsInside(watermarkBoundingBox' imageBox.Size)) {                     if (hideIfTooSmall) return true;                     else {                         SizeF oldSize = watermarkBoundingBox;                         watermarkBoundingBox = PolygonMath.DownScaleInside(watermarkBoundingBox' imageBox.Size);                         watermarkSize.Width -= (oldSize.Width - watermarkBoundingBox.Width);                         watermarkSize.Height -= (oldSize.Height - watermarkBoundingBox.Height);                     }                 }                 //Floor all values again                 watermarkSize = new SizeF((float)Math.Floor(watermarkSize.Width)' (float)Math.Floor(watermarkSize.Height));                 topLeftPadding = new SizeF((float)Math.Floor(topLeftPadding.Width)' (float)Math.Floor(topLeftPadding.Height));                 bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));                    float innerWidth = (float)Math.Floor(imageBox.Width - Math.Abs(topLeftPadding.Width) - Math.Abs(bottomRightPadding.Width));                 float innerHeight = (float)Math.Floor(imageBox.Height - Math.Abs(topLeftPadding.Height) - Math.Abs(bottomRightPadding.Height));                  float x = 0;                 float y = 0;                  if (align == ContentAlignment.BottomCenter || align == ContentAlignment.BottomLeft || align == ContentAlignment.BottomRight)                     y = (innerHeight - watermarkSize.Height) + topLeftPadding.Height;                  if (align == ContentAlignment.MiddleCenter || align == ContentAlignment.MiddleLeft || align == ContentAlignment.MiddleRight)                     y = (innerHeight - watermarkSize.Height) / 2 + topLeftPadding.Height;                  if (align == ContentAlignment.TopCenter || align == ContentAlignment.TopLeft || align == ContentAlignment.TopRight)                     y = topLeftPadding.Height;                   if (align == ContentAlignment.BottomRight || align == ContentAlignment.MiddleRight || align == ContentAlignment.TopRight)                     x = (innerWidth - watermarkSize.Width) + topLeftPadding.Width;                  if (align == ContentAlignment.BottomCenter || align == ContentAlignment.MiddleCenter || align == ContentAlignment.TopCenter)                     x = (innerWidth - watermarkSize.Width) / 2 + topLeftPadding.Width;                  if (align == ContentAlignment.BottomLeft || align == ContentAlignment.MiddleLeft || align == ContentAlignment.TopLeft)                     x = topLeftPadding.Width;                  //Draw watermark                 g.DrawImage(wb' new Rectangle((int)(x + imageBox.X)' (int)(y + imageBox.Y)' (int)watermarkSize.Width' (int)watermarkSize.Height));              }
Magic Number,ImageResizer.Plugins.Watermark,LegacyWatermarkFeatures,C:\repos\imazen_resizer\Plugins\Watermark\LegacyWatermarkFeatures.cs,LegacyDrawWatermark,The following statement contains a magic number: lock (wb) {                 //If percentages' resolve to pixels                 if (valuesPercentages) {                     //Force into 0..1 range' inclusive.                     watermarkSize.Height = Math.Max(0' Math.Min(1' watermarkSize.Height));                     watermarkSize.Width = Math.Max(0' Math.Min(1' watermarkSize.Width));                     topLeftPadding.Height = Math.Max(0' Math.Min(1' topLeftPadding.Height));                     topLeftPadding.Width = Math.Max(0' Math.Min(1' topLeftPadding.Width));                     bottomRightPadding.Height = Math.Max(0' Math.Min(1' bottomRightPadding.Height));                     bottomRightPadding.Width = Math.Max(0' Math.Min(1' bottomRightPadding.Width));                      //Make sure everything adds up to 1                     double totalWidth = watermarkSize.Width + topLeftPadding.Width + bottomRightPadding.Width;                     if (totalWidth > 1) {                         totalWidth = 1 / totalWidth; //Turn it into the factor we have to multiple by to make everything fit.                         watermarkSize.Width *= (float)totalWidth;                         topLeftPadding.Width *= (float)totalWidth;                         bottomRightPadding.Width *= (float)totalWidth;                     }                     double totalHeight = watermarkSize.Height + topLeftPadding.Height + bottomRightPadding.Height;                     if (totalHeight > 1) {                         totalHeight = 1 / totalHeight; //Turn it into the factor we have to multiply by to make everything fit.                         watermarkSize.Height *= (float)totalHeight;                         topLeftPadding.Height *= (float)totalHeight;                         bottomRightPadding.Height *= (float)totalHeight;                     }                      //Now' we can resolve the percentages to pixels.                     watermarkSize.Height *= imageBox.Height;                     watermarkSize.Width *= imageBox.Width;                     topLeftPadding.Height *= imageBox.Height;                     topLeftPadding.Width *= imageBox.Width;                     bottomRightPadding.Height *= imageBox.Height;                     bottomRightPadding.Width *= imageBox.Width;                 }                  //Keep aspect ratio' shrinking further if needed.                 if (keepAspectRatio) watermarkSize = PolygonMath.DownScaleInside(wb.Size' watermarkSize);                   //Floor all values to avoid rounding errors and blurry lines.                 watermarkSize = new SizeF((float)Math.Floor(watermarkSize.Width)' (float)Math.Floor(watermarkSize.Height));                 topLeftPadding = new SizeF((float)Math.Floor(topLeftPadding.Width)' (float)Math.Floor(topLeftPadding.Height));                 bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));                   //Check bounding box                 SizeF watermarkBoundingBox = new SizeF(watermarkSize.Width + topLeftPadding.Width + bottomRightPadding.Width'                     watermarkSize.Height + topLeftPadding.Height + bottomRightPadding.Height);                  //Don't draw the watermark if it is too small.                 if (!PolygonMath.FitsInside(watermarkBoundingBox' imageBox.Size)) {                     if (hideIfTooSmall) return true;                     else {                         SizeF oldSize = watermarkBoundingBox;                         watermarkBoundingBox = PolygonMath.DownScaleInside(watermarkBoundingBox' imageBox.Size);                         watermarkSize.Width -= (oldSize.Width - watermarkBoundingBox.Width);                         watermarkSize.Height -= (oldSize.Height - watermarkBoundingBox.Height);                     }                 }                 //Floor all values again                 watermarkSize = new SizeF((float)Math.Floor(watermarkSize.Width)' (float)Math.Floor(watermarkSize.Height));                 topLeftPadding = new SizeF((float)Math.Floor(topLeftPadding.Width)' (float)Math.Floor(topLeftPadding.Height));                 bottomRightPadding = new SizeF((float)Math.Floor(bottomRightPadding.Width)' (float)Math.Floor(bottomRightPadding.Height));                    float innerWidth = (float)Math.Floor(imageBox.Width - Math.Abs(topLeftPadding.Width) - Math.Abs(bottomRightPadding.Width));                 float innerHeight = (float)Math.Floor(imageBox.Height - Math.Abs(topLeftPadding.Height) - Math.Abs(bottomRightPadding.Height));                  float x = 0;                 float y = 0;                  if (align == ContentAlignment.BottomCenter || align == ContentAlignment.BottomLeft || align == ContentAlignment.BottomRight)                     y = (innerHeight - watermarkSize.Height) + topLeftPadding.Height;                  if (align == ContentAlignment.MiddleCenter || align == ContentAlignment.MiddleLeft || align == ContentAlignment.MiddleRight)                     y = (innerHeight - watermarkSize.Height) / 2 + topLeftPadding.Height;                  if (align == ContentAlignment.TopCenter || align == ContentAlignment.TopLeft || align == ContentAlignment.TopRight)                     y = topLeftPadding.Height;                   if (align == ContentAlignment.BottomRight || align == ContentAlignment.MiddleRight || align == ContentAlignment.TopRight)                     x = (innerWidth - watermarkSize.Width) + topLeftPadding.Width;                  if (align == ContentAlignment.BottomCenter || align == ContentAlignment.MiddleCenter || align == ContentAlignment.TopCenter)                     x = (innerWidth - watermarkSize.Width) / 2 + topLeftPadding.Width;                  if (align == ContentAlignment.BottomLeft || align == ContentAlignment.MiddleLeft || align == ContentAlignment.TopLeft)                     x = topLeftPadding.Width;                  //Draw watermark                 g.DrawImage(wb' new Rectangle((int)(x + imageBox.X)' (int)(y + imageBox.Y)' (int)watermarkSize.Width' (int)watermarkSize.Height));              }
Magic Number,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath()) {                 path.AddString(text' f.FontFamily' (int)f.Style' (float)(f.SizeInPoints / 72 * g.DpiY)' point' fmt);                  Color c = GlowColor;                 if (GlowWidth > 0 && c.A == 255) c = Color.FromArgb(Math.Max(64' Math.Min(24' 255 / GlowWidth))' c);                 //Draw glow                 for (int i = 1; i <= GlowWidth; ++i) {                     using (Pen pen = new Pen(c' i + OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw outline                 if (OutlineWidth > 0) {                     using (Pen pen = new Pen(OutlineColor' OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw inner text                 using (Brush b = GetBrush()) {                     g.FillPath(b' path);                 }              }
Magic Number,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath()) {                 path.AddString(text' f.FontFamily' (int)f.Style' (float)(f.SizeInPoints / 72 * g.DpiY)' point' fmt);                  Color c = GlowColor;                 if (GlowWidth > 0 && c.A == 255) c = Color.FromArgb(Math.Max(64' Math.Min(24' 255 / GlowWidth))' c);                 //Draw glow                 for (int i = 1; i <= GlowWidth; ++i) {                     using (Pen pen = new Pen(c' i + OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw outline                 if (OutlineWidth > 0) {                     using (Pen pen = new Pen(OutlineColor' OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw inner text                 using (Brush b = GetBrush()) {                     g.FillPath(b' path);                 }              }
Magic Number,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath()) {                 path.AddString(text' f.FontFamily' (int)f.Style' (float)(f.SizeInPoints / 72 * g.DpiY)' point' fmt);                  Color c = GlowColor;                 if (GlowWidth > 0 && c.A == 255) c = Color.FromArgb(Math.Max(64' Math.Min(24' 255 / GlowWidth))' c);                 //Draw glow                 for (int i = 1; i <= GlowWidth; ++i) {                     using (Pen pen = new Pen(c' i + OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw outline                 if (OutlineWidth > 0) {                     using (Pen pen = new Pen(OutlineColor' OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw inner text                 using (Brush b = GetBrush()) {                     g.FillPath(b' path);                 }              }
Magic Number,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath()) {                 path.AddString(text' f.FontFamily' (int)f.Style' (float)(f.SizeInPoints / 72 * g.DpiY)' point' fmt);                  Color c = GlowColor;                 if (GlowWidth > 0 && c.A == 255) c = Color.FromArgb(Math.Max(64' Math.Min(24' 255 / GlowWidth))' c);                 //Draw glow                 for (int i = 1; i <= GlowWidth; ++i) {                     using (Pen pen = new Pen(c' i + OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw outline                 if (OutlineWidth > 0) {                     using (Pen pen = new Pen(OutlineColor' OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw inner text                 using (Brush b = GetBrush()) {                     g.FillPath(b' path);                 }              }
Magic Number,ImageResizer.Plugins.Watermark,TextLayer,C:\repos\imazen_resizer\Plugins\Watermark\TextLayer.cs,DrawString,The following statement contains a magic number: using (GraphicsPath path = new GraphicsPath()) {                 path.AddString(text' f.FontFamily' (int)f.Style' (float)(f.SizeInPoints / 72 * g.DpiY)' point' fmt);                  Color c = GlowColor;                 if (GlowWidth > 0 && c.A == 255) c = Color.FromArgb(Math.Max(64' Math.Min(24' 255 / GlowWidth))' c);                 //Draw glow                 for (int i = 1; i <= GlowWidth; ++i) {                     using (Pen pen = new Pen(c' i + OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw outline                 if (OutlineWidth > 0) {                     using (Pen pen = new Pen(OutlineColor' OutlineWidth)) {                         pen.LineJoin = LineJoin.Round;                         g.DrawPath(pen' path);                     }                 }                 //Draw inner text                 using (Brush b = GetBrush()) {                     g.FillPath(b' path);                 }              }
