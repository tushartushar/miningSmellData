Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,Cyclomatic complexity of the method is 9
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: flipRotate % 2 == 1
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: flipRotate / 4 == 1
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following statement contains a magic number: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
Magic Number,ImageResizer.Plugins.DiagnosticJson,PolyRect,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\PolyRect.cs,PolyRect,The following statement contains a magic number: this.rect = points.Length == 4 &&                         points[0].X == this.x && points[0].Y == this.y &&                         points[1].X == right && points[1].Y == this.y &&                         points[2].X == right && points[2].Y == bottom &&                         points[3].X == this.x && points[3].Y == bottom;
Magic Number,ImageResizer.Plugins.DiagnosticJson,PolyRect,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\PolyRect.cs,PolyRect,The following statement contains a magic number: this.rect = points.Length == 4 &&                         points[0].X == this.x && points[0].Y == this.y &&                         points[1].X == right && points[1].Y == this.y &&                         points[2].X == right && points[2].Y == bottom &&                         points[3].X == this.x && points[3].Y == bottom;
Magic Number,ImageResizer.Plugins.DiagnosticJson,PolyRect,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\PolyRect.cs,PolyRect,The following statement contains a magic number: this.rect = points.Length == 4 &&                         points[0].X == this.x && points[0].Y == this.y &&                         points[1].X == right && points[1].Y == this.y &&                         points[2].X == right && points[2].Y == bottom &&                         points[3].X == this.x && points[3].Y == bottom;
Magic Number,ImageResizer.Plugins.DiagnosticJson,PolyRect,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\PolyRect.cs,PolyRect,The following statement contains a magic number: this.rect = points.Length == 4 &&                         points[0].X == this.x && points[0].Y == this.y &&                         points[1].X == right && points[1].Y == this.y &&                         points[2].X == right && points[2].Y == bottom &&                         points[3].X == this.x && points[3].Y == bottom;
Magic Number,ImageResizer.Plugins.DiagnosticJson,PolyRect,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\PolyRect.cs,PolyRect,The following statement contains a magic number: this.rect = points.Length == 4 &&                         points[0].X == this.x && points[0].Y == this.y &&                         points[1].X == right && points[1].Y == this.y &&                         points[2].X == right && points[2].Y == bottom &&                         points[3].X == this.x && points[3].Y == bottom;
Missing Default,ImageResizer.Plugins.DiagnosticJson,LayoutInformation,D:\research\architectureSmells\repos\imazen_resizer\Plugins\DiagnosticJson\LayoutInformation.cs,LayoutInformation,The following switch statement is missing a default case: switch (flipRotate % 4)                 {                     case 0: // no rotation                         // no-op!                         break;                      case 1: // 90 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -90);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(0' trueOriginalSize.Height));                         break;                      case 2: // 180 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -180);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' trueOriginalSize.Height));                         break;                      case 3: // 270 degrees' clockwise                         copyPoly = PolygonMath.RotatePoly(copyPoly' -270);                         copyPoly = PolygonMath.MovePoly(copyPoly' new PointF(trueOriginalSize.Width' 0));                         break;                 }
