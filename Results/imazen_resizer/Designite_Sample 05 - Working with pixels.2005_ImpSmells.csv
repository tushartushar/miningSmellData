Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example03,Cyclomatic complexity of the method is 8
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example01,The following statement contains a magic number: if (FreeImage.GetBPP(dib) != 24)             {                 Console.WriteLine("Sample.jpg is no 24 bpp bitmap. Aborting.");                 FreeImage.UnloadEx(ref dib);                 return;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example01,The following statement contains a magic number: for (int i = 0; i < (height / 2); i++)             {                 // Get scanline from the bottom part of the bitmap                 Scanline<RGBTRIPLE> scanlineBottom = new Scanline<RGBTRIPLE>(dib' i);                  // Get scanline from the top part of the bitmap                 Scanline<RGBTRIPLE> scanlineTop = new Scanline<RGBTRIPLE>(dib' height - 1 - i);                  // Get arrays of RGBTRIPPLEs that contain the bitmaps real pixel data                 // of the two scanlines.                 RGBTRIPLE[] rgbtBottom = scanlineBottom.Data;                 RGBTRIPLE[] rgbtTop = scanlineTop.Data;                  // Restore the scanline across to switch the bitmaps lines.                 scanlineBottom.Data = rgbtTop;                 scanlineTop.Data = rgbtBottom;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: if (FreeImage.GetBPP(dib) != 24)             {                 Console.WriteLine("Sample.jpg is no 24 bpp bitmap. Aborting.");                 FreeImage.UnloadEx(ref dib);                 return;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example02,The following statement contains a magic number: for (int i = 0; i < FreeImage.GetHeight(dib); i++)             {                 // Get scanline                 Scanline<RGBTRIPLE> scanline = new Scanline<RGBTRIPLE>(dib' i);                  // Get pixeldata from scanline                 RGBTRIPLE[] rgbt = scanline.Data;                  // Iterate over each pixel reducing the colors intensity to 3/4 which                 // will darken the bitmap.                 for (int j = 0; j < rgbt.Length; j++)                 {                     rgbt[j].rgbtBlue = (byte)((int)rgbt[j].rgbtBlue * 3 / 4);                     rgbt[j].rgbtGreen = (byte)((int)rgbt[j].rgbtGreen * 3 / 4);                     rgbt[j].rgbtRed = (byte)((int)rgbt[j].rgbtRed * 3 / 4);                      // In case no direct access to the data is implemented                     // the following way is equivalent:                     //                     // Color color = rgbt[j].color;                     // rgbt[j].color = Color.FromArgb(color.R * 3 / 4' color.G * 3 / 4' color.B * 3 / 4);                 }                  // Write the darkened scanline back to memory                 scanline.Data = rgbt;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example03,The following statement contains a magic number: if (FreeImage.GetBPP(dib) != 4)             {                 Console.WriteLine("Sample.tif is no 4 bpp bitmap. Aborting.");                 FreeImage.UnloadEx(ref dib);                 return;             }
Magic Number,Sample05,Sample,C:\repos\imazen_resizer\Plugins\Libs\FreeImage\Wrapper\FreeImage.NET\cs\Samples\Sample 05 - Working with pixels\Program.cs,Example03,The following statement contains a magic number: for (int i = 0; i < size / 2; i++)             {                 RGBQUAD temp = palette[i];                 palette[i] = palette[size - 1 - i];                 palette[size - 1 - i] = temp;             }
