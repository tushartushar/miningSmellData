Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,Cyclomatic complexity of the method is 17
Complex Method,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,Cyclomatic complexity of the method is 10
Long Parameter List,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,AdjustContrastBrightnessSaturation,The method has 5 parameters.
Long Parameter List,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,SimpleThreshold,The method has 6 parameters.
Long Parameter List,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,AreaThreshold,The method has 6 parameters.
Long Parameter List,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,GIMPThreshold,The method has 6 parameters.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyPreFiltersTo,The length of the statement  "	i = GetRadius (s' "a.featheredges"' null' units * (Util.PolygonMath.GetShortestPair (s.layout ["image"]) / Math.Min (b.Width' b.Height))); " is 138.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The length of the statement  "	var areaOfEffect = imageRectF == null ? new Rectangle (0' 0' b.Width' b.Height) : PolygonMath.ToRectangleShrinkRound (imageRectF.Value); " is 136.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The length of the statement  "		if (!string.IsNullOrEmpty (str) && int.TryParse (str' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out i) && i > 0) " is 124.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The length of the statement  "	if (!string.IsNullOrEmpty (str) && int.TryParse (str' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out i) && i > 0) { " is 126.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The length of the statement  "		AdjustContrastBrightnessSaturation (adjust' contrast' brightness' saturation' "true".Equals (s.settings ["a.truncate"])); " is 121.
Long Statement,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,The length of the statement  "	int pixelSize = (image.PixelFormat == PixelFormat.Format8bppIndexed) ? 1 : (image.PixelFormat == PixelFormat.Format24bppRgb) ? 3 : 4; " is 133.
Long Statement,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The length of the statement  "	int pixelSize = (image.PixelFormat == PixelFormat.Format8bppIndexed) ? 1 : (image.PixelFormat == PixelFormat.Format24bppRgb) ? 3 : 4; " is 133.
Long Statement,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The length of the statement  "			double dist = xdist > 0 && ydist > 0 ? Math.Round (Math.Sqrt (xdist * xdist + ydist * ydist)) : Math.Max (xdist' ydist); " is 120.
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (i > 0)  	new GaussianBlur (1.4' i).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: new GaussianBlur (1.4' i).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (i > 0)  	new GaussianSharpen (1.4' Math.Min (11' i)).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (i > 0)  	new GaussianSharpen (1.4' Math.Min (11' i)).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: new GaussianSharpen (1.4' Math.Min (11' i)).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: new GaussianSharpen (1.4' Math.Min (11' i)).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if ("true".Equals (s.settings ["a.removenoise"]' StringComparison.OrdinalIgnoreCase)) {  	new ConservativeSmoothing (3).ApplyInPlace (b' areaOfEffect);  } else {  	i = GetRadius (s' "a.removenoise"' null' units);  	if (i > 0)  		new ConservativeSmoothing (i).ApplyInPlace (b' areaOfEffect);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: new ConservativeSmoothing (3).ApplyInPlace (b' areaOfEffect);  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (whiteAlg != null || whiteVal != null) {  	var bal = new AutoWhiteBalance (whiteAlg ?? HistogramThresholdAlgorithm.Area);  	if (whiteVal != null)  		bal.LowThreshold = bal.HighThreshold = whiteVal.Value / 100;  	bal.ApplyInPlace (b' areaOfEffect);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (whiteVal != null)  	bal.LowThreshold = bal.HighThreshold = whiteVal.Value / 100;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: bal.LowThreshold = bal.HighThreshold = whiteVal.Value / 100;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (!string.IsNullOrEmpty (str) && int.TryParse (str' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out i) && i > 0) {  	SimplePosterization sp = new SimplePosterization ();  	if (i < 1)  		i = 1;  	if (i > 255)  		i = 255;  	sp.PosterizationInterval = (byte)i;  	sp.ApplyInPlace (b' areaOfEffect);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (!string.IsNullOrEmpty (str) && int.TryParse (str' NumberStyles.Integer' NumberFormatInfo.InvariantInfo' out i) && i > 0) {  	SimplePosterization sp = new SimplePosterization ();  	if (i < 1)  		i = 1;  	if (i > 255)  		i = 255;  	sp.PosterizationInterval = (byte)i;  	sp.ApplyInPlace (b' areaOfEffect);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (i > 255)  	i = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: if (i > 255)  	i = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,ApplyFiltersTo,The following statement contains a magic number: i = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,AdjustContrastBrightnessSaturation,The following statement contains a magic number: if (contrast > 0) {  	float adjustment = contrast * (f.InLuminance.Max - f.InLuminance.Min) / 2;  	f.InLuminance = new Range (f.InLuminance.Min + adjustment' f.InLuminance.Max - adjustment);  } else if (contrast < 0) {  	float adjustment = -contrast * (f.OutLuminance.Max - f.OutLuminance.Min) / 2;  	f.OutLuminance = new Range (f.OutLuminance.Min + adjustment' f.OutLuminance.Max - adjustment);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,AdjustContrastBrightnessSaturation,The following statement contains a magic number: if (contrast > 0) {  	float adjustment = contrast * (f.InLuminance.Max - f.InLuminance.Min) / 2;  	f.InLuminance = new Range (f.InLuminance.Min + adjustment' f.InLuminance.Max - adjustment);  } else if (contrast < 0) {  	float adjustment = -contrast * (f.OutLuminance.Max - f.OutLuminance.Min) / 2;  	f.OutLuminance = new Range (f.OutLuminance.Min + adjustment' f.OutLuminance.Max - adjustment);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AdvancedFilters,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AdvancedFilters.cs,AdjustContrastBrightnessSaturation,The following statement contains a magic number: if (contrast < 0) {  	float adjustment = -contrast * (f.OutLuminance.Max - f.OutLuminance.Min) / 2;  	f.OutLuminance = new Range (f.OutLuminance.Min + adjustment' f.OutLuminance.Max - adjustment);  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,The following statement contains a magic number: if (image.PixelFormat == PixelFormat.Format8bppIndexed) {  	// grayscale image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	// calculate histogram  	int[] histogram = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			histogram [*ptr]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogram = Equalize (histogram' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			*ptr = equalizedHistogram [*ptr];  		}  		ptr += offset;  	}  } else {  	// color image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	// calculate histogram  	int[] histogramR = new int[256];  	int[] histogramG = new int[256];  	int[] histogramB = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			histogramR [ptr [RGB.R]]++;  			histogramG [ptr [RGB.G]]++;  			histogramB [ptr [RGB.B]]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogramR = Equalize (histogramR' numberOfPixels);  	byte[] equalizedHistogramG = Equalize (histogramG' numberOfPixels);  	byte[] equalizedHistogramB = Equalize (histogramB' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			ptr [RGB.R] = equalizedHistogramR [ptr [RGB.R]];  			ptr [RGB.G] = equalizedHistogramG [ptr [RGB.G]];  			ptr [RGB.B] = equalizedHistogramB [ptr [RGB.B]];  		}  		ptr += offset;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,The following statement contains a magic number: if (image.PixelFormat == PixelFormat.Format8bppIndexed) {  	// grayscale image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	// calculate histogram  	int[] histogram = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			histogram [*ptr]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogram = Equalize (histogram' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			*ptr = equalizedHistogram [*ptr];  		}  		ptr += offset;  	}  } else {  	// color image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	// calculate histogram  	int[] histogramR = new int[256];  	int[] histogramG = new int[256];  	int[] histogramB = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			histogramR [ptr [RGB.R]]++;  			histogramG [ptr [RGB.G]]++;  			histogramB [ptr [RGB.B]]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogramR = Equalize (histogramR' numberOfPixels);  	byte[] equalizedHistogramG = Equalize (histogramG' numberOfPixels);  	byte[] equalizedHistogramB = Equalize (histogramB' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			ptr [RGB.R] = equalizedHistogramR [ptr [RGB.R]];  			ptr [RGB.G] = equalizedHistogramG [ptr [RGB.G]];  			ptr [RGB.B] = equalizedHistogramB [ptr [RGB.B]];  		}  		ptr += offset;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,The following statement contains a magic number: if (image.PixelFormat == PixelFormat.Format8bppIndexed) {  	// grayscale image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	// calculate histogram  	int[] histogram = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			histogram [*ptr]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogram = Equalize (histogram' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			*ptr = equalizedHistogram [*ptr];  		}  		ptr += offset;  	}  } else {  	// color image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	// calculate histogram  	int[] histogramR = new int[256];  	int[] histogramG = new int[256];  	int[] histogramB = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			histogramR [ptr [RGB.R]]++;  			histogramG [ptr [RGB.G]]++;  			histogramB [ptr [RGB.B]]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogramR = Equalize (histogramR' numberOfPixels);  	byte[] equalizedHistogramG = Equalize (histogramG' numberOfPixels);  	byte[] equalizedHistogramB = Equalize (histogramB' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			ptr [RGB.R] = equalizedHistogramR [ptr [RGB.R]];  			ptr [RGB.G] = equalizedHistogramG [ptr [RGB.G]];  			ptr [RGB.B] = equalizedHistogramB [ptr [RGB.B]];  		}  		ptr += offset;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,ProcessFilter,The following statement contains a magic number: if (image.PixelFormat == PixelFormat.Format8bppIndexed) {  	// grayscale image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	// calculate histogram  	int[] histogram = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			histogram [*ptr]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogram = Equalize (histogram' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr++) {  			*ptr = equalizedHistogram [*ptr];  		}  		ptr += offset;  	}  } else {  	// color image  	byte* ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	// calculate histogram  	int[] histogramR = new int[256];  	int[] histogramG = new int[256];  	int[] histogramB = new int[256];  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			histogramR [ptr [RGB.R]]++;  			histogramG [ptr [RGB.G]]++;  			histogramB [ptr [RGB.B]]++;  		}  		ptr += offset;  	}  	// calculate new intensity levels  	byte[] equalizedHistogramR = Equalize (histogramR' numberOfPixels);  	byte[] equalizedHistogramG = Equalize (histogramG' numberOfPixels);  	byte[] equalizedHistogramB = Equalize (histogramB' numberOfPixels);  	// update pixels' intensities  	ptr = (byte*)image.ImageData.ToPointer ();  	// align pointer to the first pixel to process  	ptr += (startY * stride + startX * pixelSize);  	for (int y = startY; y < stopY; y++) {  		for (int x = startX; x < stopX; x++' ptr += pixelSize) {  			ptr [RGB.R] = equalizedHistogramR [ptr [RGB.R]];  			ptr [RGB.G] = equalizedHistogramG [ptr [RGB.G]];  			ptr [RGB.B] = equalizedHistogramB [ptr [RGB.B]];  		}  		ptr += offset;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,Equalize,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	equalizedHistogram [i] = (byte)Math.Max (0' Math.Min (255' Math.Round (((double)i - low) * scale)));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,Equalize,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	equalizedHistogram [i] = (byte)Math.Max (0' Math.Min (255' Math.Round (((double)i - low) * scale)));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,Equalize,The following statement contains a magic number: equalizedHistogram [i] = (byte)Math.Max (0' Math.Min (255' Math.Round (((double)i - low) * scale)));  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,SimpleThreshold,The following statement contains a magic number: high = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,SimpleThreshold,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	if ((double)histogram [i] / totalPixels >= lowThreshold) {  		low = i;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,SimpleThreshold,The following statement contains a magic number: for (int i = 255; i >= 0; i--) {  	if ((double)histogram [i] / totalPixels >= highThreshold) {  		high = i;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,AreaThreshold,The following statement contains a magic number: high = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,AreaThreshold,The following statement contains a magic number: for (int i = 0; i < 256; i++) {  	area += histogram [i];  	if (area / totalPixels > lowThreshold) {  		low = i;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,AreaThreshold,The following statement contains a magic number: for (int i = 255; i >= 0; i--) {  	area += histogram [i];  	if (area / totalPixels > highThreshold) {  		high = i;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,GIMPThreshold,The following statement contains a magic number: high = 255;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,GIMPThreshold,The following statement contains a magic number: for (int i = 0; i < 255; i++) {  	area += histogram [i];  	pct = area / totalPixels;  	next_pct = (area + histogram [i + 1]) / totalPixels;  	if (Math.Abs (pct - lowThreshold) < Math.Abs (next_pct - lowThreshold)) {  		low = i + 1;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,AutoWhiteBalance,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\AutoWhiteBalance.cs,GIMPThreshold,The following statement contains a magic number: for (int i = 255; i > 0; i--) {  	area += histogram [i];  	pct = area / totalPixels;  	next_pct = (area + histogram [i - 1]) / totalPixels;  	if (Math.Abs (pct - highThreshold) < Math.Abs (next_pct - highThreshold)) {  		high = i - 1;  		break;  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: if (pixelSize != 4)  	throw new InvalidImagePropertiesException ();  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: for (int y = startY; y < stopY; y++) {  	int ydist = Math.Max (0' Math.Max (startY + w - y' y - (stopY - 1 - w)));  	for (int x = startX; x < stopX; x++' ptr += pixelSize) {  		int xdist = Math.Max (0' Math.Max (startX + w - x' x - (stopX - 1 - w)));  		double dist = xdist > 0 && ydist > 0 ? Math.Round (Math.Sqrt (xdist * xdist + ydist * ydist)) : Math.Max (xdist' ydist);  		if (dist <= 0 || w == 0) {  			ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  		} else if (dist > w) {  			ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  		} else {  			double t = dist / width;  			//t = Math.Sin(Math.PI * t / 2);  			t = 3 * t * t - 2 * t * t * t;  			//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  			ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  		}  	}  	ptr += offset;  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: for (int y = startY; y < stopY; y++) {  	int ydist = Math.Max (0' Math.Max (startY + w - y' y - (stopY - 1 - w)));  	for (int x = startX; x < stopX; x++' ptr += pixelSize) {  		int xdist = Math.Max (0' Math.Max (startX + w - x' x - (stopX - 1 - w)));  		double dist = xdist > 0 && ydist > 0 ? Math.Round (Math.Sqrt (xdist * xdist + ydist * ydist)) : Math.Max (xdist' ydist);  		if (dist <= 0 || w == 0) {  			ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  		} else if (dist > w) {  			ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  		} else {  			double t = dist / width;  			//t = Math.Sin(Math.PI * t / 2);  			t = 3 * t * t - 2 * t * t * t;  			//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  			ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  		}  	}  	ptr += offset;  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: for (int x = startX; x < stopX; x++' ptr += pixelSize) {  	int xdist = Math.Max (0' Math.Max (startX + w - x' x - (stopX - 1 - w)));  	double dist = xdist > 0 && ydist > 0 ? Math.Round (Math.Sqrt (xdist * xdist + ydist * ydist)) : Math.Max (xdist' ydist);  	if (dist <= 0 || w == 0) {  		ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  	} else if (dist > w) {  		ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  	} else {  		double t = dist / width;  		//t = Math.Sin(Math.PI * t / 2);  		t = 3 * t * t - 2 * t * t * t;  		//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  		ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: for (int x = startX; x < stopX; x++' ptr += pixelSize) {  	int xdist = Math.Max (0' Math.Max (startX + w - x' x - (stopX - 1 - w)));  	double dist = xdist > 0 && ydist > 0 ? Math.Round (Math.Sqrt (xdist * xdist + ydist * ydist)) : Math.Max (xdist' ydist);  	if (dist <= 0 || w == 0) {  		ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  	} else if (dist > w) {  		ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  	} else {  		double t = dist / width;  		//t = Math.Sin(Math.PI * t / 2);  		t = 3 * t * t - 2 * t * t * t;  		//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  		ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  	}  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: if (dist <= 0 || w == 0) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  } else if (dist > w) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  } else {  	double t = dist / width;  	//t = Math.Sin(Math.PI * t / 2);  	t = 3 * t * t - 2 * t * t * t;  	//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  	ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: if (dist <= 0 || w == 0) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * inner);  } else if (dist > w) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  } else {  	double t = dist / width;  	//t = Math.Sin(Math.PI * t / 2);  	t = 3 * t * t - 2 * t * t * t;  	//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  	ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: if (dist > w) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  } else {  	double t = dist / width;  	//t = Math.Sin(Math.PI * t / 2);  	t = 3 * t * t - 2 * t * t * t;  	//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  	ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: if (dist > w) {  	ptr [a] = (byte)Math.Round ((double)ptr [a] * outer);  } else {  	double t = dist / width;  	//t = Math.Sin(Math.PI * t / 2);  	t = 3 * t * t - 2 * t * t * t;  	//t = 6 * Math.Pow(t' 5) - 15 * Math.Pow(t' 4) + 10 * Math.Pow(t' 3);  	ptr [a] = (byte)Math.Round ((double)ptr [a] * (inner + diff * t));  }  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: t = 3 * t * t - 2 * t * t * t;  
Magic Number,ImageResizer.Plugins.AdvancedFilters,FeatherEdge,F:\newReposMay17\imazen_resizer\Plugins\AdvancedFilters\FeatherEdge.cs,ProcessFilter,The following statement contains a magic number: t = 3 * t * t - 2 * t * t * t;  
