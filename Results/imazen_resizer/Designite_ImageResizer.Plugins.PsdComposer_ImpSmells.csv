Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ImageResizer.Plugins.PsdComposer,IPsdRenderer,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\IPsdRenderer.cs,Render,The method has 5 parameters.
Long Parameter List,ImageResizer.Plugins.PsdComposer,PsdPluginRenderer,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdPluginRenderer.cs,Render,The method has 5 parameters.
Long Statement,ImageResizer.Plugins.PsdComposer,MemCachedFile,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\MemCachedFile.cs,GetCachedVirtualFile,The length of the statement  "				throw new FileNotFoundException ("The specified virtual file could not be found: \"" + path + "\" Associated querystring: \"" + PathUtils.BuildQueryString (queryString) + "\"."); " is 178.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseColorDict,The length of the statement  "		dict.Add (Base64UrlDecode (parts [i])' System.Drawing.Color.FromArgb (int.Parse (parts [i + 1]' System.Globalization.NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo))); " is 175.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,FileExists,The length of the statement  "	return IsPathPSDToCompose (virtualPath' queryString) && c.Pipeline.FileExists (StripFakeExtension (virtualPath)' new NameValueCollection ()); " is 141.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,GetFile,The length of the statement  "	if (IsPathPSDToCompose (virtualPath' queryString) && c.Pipeline.FileExists (StripFakeExtension (virtualPath)' new NameValueCollection ())) " is 138.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ComposeBitmap,The length of the statement  "	MemCachedFile file = MemCachedFile.GetCachedVirtualFile (StripFakeExtension (virtualPath)' c.Pipeline' new NameValueCollection ()); " is 131.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ComposeBitmap,The length of the statement  "		//Use the selected renderer to parse the file and compose the layers' using this delegate callback to determine which layers to show. " is 133.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ComposeBitmap,The length of the statement  "		b = renderer.Render (s' out layers' out size' BuildLayerCallback (queryString)' BuildModifyLayerCallback (queryString)); " is 120.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ComposeBitmap,The length of the statement  "		trace ("Using encoder " + renderer.ToString () + "' rendering stream to a composed Bitmap instance took " + swRender.ElapsedMilliseconds.ToString () + "ms"); " is 157.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,GetFileMetadata,The length of the statement  "	MemCachedFile file = MemCachedFile.GetCachedVirtualFile (StripFakeExtension (virtualPath)' c.Pipeline' new NameValueCollection ()); " is 131.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,GetFileMetadata,The length of the statement  "		trace ("Using decoder " + renderer.ToString () + "'parsing file and enumerating layers took " + swRender.ElapsedMilliseconds.ToString () + "ms"); " is 145.
Long Statement,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,GetFileMetadata,The length of the statement  "	trace ("Total time for enumerating' including file reading: " + sw.ElapsedMilliseconds.ToString (NumberFormatInfo.InvariantInfo) + "ms"); " is 137.
Complex Conditional,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,BuildModifyLayerCallback,The conditional expression  "b == null && l.Rect.X == 0 && l.Rect.Y == 0 && l.Rect.Width == 0 && l.Rect.Height == 0"  is complex.
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseColorDict,The following statement contains a magic number: if (parts.Length % 2 != 0)  	throw new ArgumentException ("Invalid string! Must have an even number of parts.");  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseColorDict,The following statement contains a magic number: for (int i = 0; i < parts.Length - 1; i += 2) {  	dict.Add (Base64UrlDecode (parts [i])' System.Drawing.Color.FromArgb (int.Parse (parts [i + 1]' System.Globalization.NumberStyles.HexNumber' NumberFormatInfo.InvariantInfo)));  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseColorDict,The following statement contains a magic number: i += 2
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseStringDict,The following statement contains a magic number: if (parts.Length % 2 != 0)  	throw new ArgumentException ("Invalid string! Must have an even number of parts.");  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseStringDict,The following statement contains a magic number: for (int i = 0; i < parts.Length - 1; i += 2) {  	dict.Add (Base64UrlDecode (parts [i])' Base64UrlDecode (parts [i + 1]));  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseStringDict,The following statement contains a magic number: i += 2
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseBooleanDict,The following statement contains a magic number: if (parts.Length % 2 != 0)  	throw new ArgumentException ("Invalid string! Must have an even number of parts.");  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseBooleanDict,The following statement contains a magic number: for (int i = 0; i < parts.Length - 1; i += 2) {  	if (!(parts [i + 1].Equals ("1") || parts [i + 1].Equals ("0")))  		throw new ArgumentException ("Invalid bool value " + parts [i + 1] + ". Should be 0 or 1.");  	dict.Add (Base64UrlDecode (parts [i])' parts [i + 1].Equals ("1"));  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdCommandBuilder,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdCommandBuilder.cs,parseBooleanDict,The following statement contains a magic number: i += 2
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: unsafe {  	byte* pCurrRowPixel = (byte*)bd.Scan0.ToPointer ();  	for (int y = 0; y < height; y++) {  		int rowIndex = y * width;  		PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  		for (int x = 0; x < width; x++) {  			pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  			pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  			pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  			pCurrPixel += 1;  		}  		pCurrRowPixel += bd.Stride;  	}  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: unsafe {  	byte* pCurrRowPixel = (byte*)bd.Scan0.ToPointer ();  	for (int y = 0; y < height; y++) {  		int rowIndex = y * width;  		PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  		for (int x = 0; x < width; x++) {  			pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  			pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  			pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  			pCurrPixel += 1;  		}  		pCurrRowPixel += bd.Stride;  	}  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: unsafe {  	byte* pCurrRowPixel = (byte*)bd.Scan0.ToPointer ();  	for (int y = 0; y < height; y++) {  		int rowIndex = y * width;  		PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  		for (int x = 0; x < width; x++) {  			pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  			pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  			pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  			pCurrPixel += 1;  		}  		pCurrRowPixel += bd.Stride;  	}  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	int rowIndex = y * width;  	PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  	for (int x = 0; x < width; x++) {  		pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  		pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  		pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  		pCurrPixel += 1;  	}  	pCurrRowPixel += bd.Stride;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	int rowIndex = y * width;  	PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  	for (int x = 0; x < width; x++) {  		pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  		pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  		pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  		pCurrPixel += 1;  	}  	pCurrRowPixel += bd.Stride;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int y = 0; y < height; y++) {  	int rowIndex = y * width;  	PhotoshopFile.ImageDecoder.PixelData* pCurrPixel = (PhotoshopFile.ImageDecoder.PixelData*)pCurrRowPixel;  	for (int x = 0; x < width; x++) {  		pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  		pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  		pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  		pCurrPixel += 1;  	}  	pCurrRowPixel += bd.Stride;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  	pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  	pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  	pCurrPixel += 1;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  	pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  	pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  	pCurrPixel += 1;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: for (int x = 0; x < width; x++) {  	pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  	pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  	pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  	pCurrPixel += 1;  }  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: pCurrPixel->Red = (byte)(((double)pCurrPixel->Red * originalWeight + weightedR) / 255);  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: pCurrPixel->Green = (byte)(((double)pCurrPixel->Green * originalWeight + weightedG) / 255);  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,ColorBitmap,The following statement contains a magic number: pCurrPixel->Blue = (byte)(((double)pCurrPixel->Blue * originalWeight + weightedB) / 255);  
Magic Number,ImageResizer.Plugins.PsdComposer,PsdComposerPlugin,F:\newReposMay17\imazen_resizer\Plugins\PsdComposer\PsdComposerPlugin.cs,StripFakeExtension,The following statement contains a magic number: return virtualPath.Substring (0' ix + 4);  
