Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SampleProject,HandlerTest,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Misc\HandlerTest.ashx.cs,ProcessRequest,The length of the statement  "             * Should be implemented as an HttpModule' not an IHttpHandler' and let the static file handler serve the resulting image from disk." is 131.
Long Statement,SampleProject,HandlerTest,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Misc\HandlerTest.ashx.cs,ProcessRequest,The length of the statement  "             * Read "Image Resizing Pitfalls" on nathanaeljones.com for more reasons why a handler is not a good solution (such as memory saturation)" is 136.
Long Statement,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The length of the statement  "            //This is a URL rewrite rule. It sets the default value of '404' to '~/Sun_256.png' for all requests containing '/propertyimages/'" is 130.
Long Statement,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The length of the statement  "            Config.Current.Pipeline.RewriteDefaults += delegate(IHttpModule m' HttpContext c' ImageResizer.Configuration.IUrlEventArgs args) {" is 130.
Long Statement,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The length of the statement  "                    //Estimate final image size' based on the original image being 600x600. Only useful for rough checking' as aspect ratio differences will affect results" is 151.
Long Statement,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The length of the statement  "                    Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600'600)'new ResizeSettings(ev.QueryString));" is 124.
Long Statement,ComplexWebApplication,UploadSample,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\UploadSample.aspx.cs,btnUpload_Click,The length of the statement  "                ImageJob i = new ImageJob(file' "~/uploads/<guid>_<filename:A-Za-z0-9>.<ext>"' new ResizeSettings("width=200&height=200&format=jpg&crop=auto"));" is 144.
Long Statement,ComplexWebApplication,UploadSample,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\UploadSample.aspx.cs,GenerateVersions,The length of the statement  "                generatedFiles.Add(new ImageJob(original' "<path>" + suffix + ".<ext>"' new ResizeSettings(versions[suffix])).Build().FinalPath);" is 129.
Long Statement,ComplexWebApplication,WhitespaceTrimmerTest,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Misc\WhitespaceTrimmerTest.aspx.cs,Page_Load,The length of the statement  "            string dir = Path.Combine(Path.Combine(Path.GetDirectoryName(HostingEnvironment.ApplicationPhysicalPath.TrimEnd('/'''\\'))'  "Images")' "private");" is 147.
Long Statement,ComplexWebApplication,WhitespaceTrimmerTest,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Misc\WhitespaceTrimmerTest.aspx.cs,Page_Load,The length of the statement  "                    "?width=200' /><img src='/private/" + Path.GetFileName(s) + "?width=200&trim.threshold=80&trim.percentpadding=1'/><br/>");" is 122.
Magic Number,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The following statement contains a magic number: Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender2' HttpContext context' IUrlEventArgs ev) {                 //Check folder                 string folder = VirtualPathUtility.ToAbsolute("~/folder");                 if (ev.VirtualPath.StartsWith(folder' StringComparison.OrdinalIgnoreCase)) {                     //Estimate final image size' based on the original image being 600x600. Only useful for rough checking' as aspect ratio differences will affect results                     Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600'600)'new ResizeSettings(ev.QueryString));                     if (estimatedSize.Width > 100 || estimatedSize.Height > 100){                         //It's over 100px' apply watermark                         ev.QueryString["watermark"] = "Sun_256.png";                     }                 }             };
Magic Number,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The following statement contains a magic number: Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender2' HttpContext context' IUrlEventArgs ev) {                 //Check folder                 string folder = VirtualPathUtility.ToAbsolute("~/folder");                 if (ev.VirtualPath.StartsWith(folder' StringComparison.OrdinalIgnoreCase)) {                     //Estimate final image size' based on the original image being 600x600. Only useful for rough checking' as aspect ratio differences will affect results                     Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600'600)'new ResizeSettings(ev.QueryString));                     if (estimatedSize.Width > 100 || estimatedSize.Height > 100){                         //It's over 100px' apply watermark                         ev.QueryString["watermark"] = "Sun_256.png";                     }                 }             };
Magic Number,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The following statement contains a magic number: Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender2' HttpContext context' IUrlEventArgs ev) {                 //Check folder                 string folder = VirtualPathUtility.ToAbsolute("~/folder");                 if (ev.VirtualPath.StartsWith(folder' StringComparison.OrdinalIgnoreCase)) {                     //Estimate final image size' based on the original image being 600x600. Only useful for rough checking' as aspect ratio differences will affect results                     Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600'600)'new ResizeSettings(ev.QueryString));                     if (estimatedSize.Width > 100 || estimatedSize.Height > 100){                         //It's over 100px' apply watermark                         ev.QueryString["watermark"] = "Sun_256.png";                     }                 }             };
Magic Number,ComplexWebApplication,Global,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\Global.asax.cs,Application_Start,The following statement contains a magic number: Config.Current.Pipeline.PostRewrite += delegate(IHttpModule sender2' HttpContext context' IUrlEventArgs ev) {                 //Check folder                 string folder = VirtualPathUtility.ToAbsolute("~/folder");                 if (ev.VirtualPath.StartsWith(folder' StringComparison.OrdinalIgnoreCase)) {                     //Estimate final image size' based on the original image being 600x600. Only useful for rough checking' as aspect ratio differences will affect results                     Size estimatedSize = ImageBuilder.Current.GetFinalSize(new System.Drawing.Size(600'600)'new ResizeSettings(ev.QueryString));                     if (estimatedSize.Width > 100 || estimatedSize.Height > 100){                         //It's over 100px' apply watermark                         ev.QueryString["watermark"] = "Sun_256.png";                     }                 }             };
Magic Number,MyCode.MyPlugins,SamplePlugin,D:\research\architectureSmells\repos\imazen_resizer\Samples\PluginTestingApp\SamplePlugin.cs,RenderOverlays,The following statement contains a magic number: System.Drawing.Font font = new System.Drawing.Font("Arial"'                  (float)(s.destBitmap.Width / (sample.Length * 1.5f))' System.Drawing.GraphicsUnit.Pixel);
