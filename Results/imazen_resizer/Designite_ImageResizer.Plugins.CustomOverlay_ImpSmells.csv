Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,Cyclomatic complexity of the method is 19
Complex Method,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,RenderOverlays,Cyclomatic complexity of the method is 8
Complex Method,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,Cyclomatic complexity of the method is 12
Long Parameter List,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The method has 5 parameters.
Long Identifier,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the parameter translateToFinalCoordinateSpace is 31.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetConnection,The length of the statement  "		throw new ArgumentException ("The specified connection string " + ConnectionStringName + " does not exist in Web.config"); " is 122.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "                    · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position." is 142.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "                    · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question)." is 229.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "                    · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only." is 199.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "                     * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png' " is 148.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "                     * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest" is 269.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "			//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/')); " is 163.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The length of the statement  "			p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/')); " is 182.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlays,The length of the statement  "	if (string.IsNullOrEmpty (sDesign) || string.IsNullOrEmpty (sMaster) || string.IsNullOrEmpty (sColor) || string.IsNullOrEmpty (sOrgId) || string.IsNullOrEmpty (sLogoUsageId)) " is 174.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlays,The length of the statement  "	if (!int.TryParse (sDesign' out designId) || !(int.TryParse (sMaster' out masterId)) || !int.TryParse (sColor' out colorId) || !int.TryParse (sOrgId' out orgId) || !int.TryParse (sLogoUsageId' out logoUsageId)) " is 210.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlays,The length of the statement  "				HttpRuntime.Cache.Add (cachedDataKey' cachedData2' GetDependencies ()' Cache.NoAbsoluteExpiration' Cache.NoSlidingExpiration' CacheItemPriority.Normal' null); " is 158.
Long Statement,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The length of the statement  "		//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result. " is 141.
Long Statement,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,RenderOverlays,The length of the statement  "					g.DrawImage (b' PolygonMath.getParallelogram (new LayoutEngine ().GetOverlayParalellogram (o' b.Size' s))' new Rectangle (0' 0' b.Width' b.Height)' GraphicsUnit.Pixel' ia); " is 172.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.BottomLeft || o.Align == ContentAlignment.MiddleLeft || o.Align == ContentAlignment.TopLeft) " is 124.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.BottomCenter || o.Align == ContentAlignment.MiddleCenter || o.Align == ContentAlignment.TopCenter) " is 130.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.BottomRight || o.Align == ContentAlignment.MiddleRight || o.Align == ContentAlignment.TopRight) " is 127.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.TopLeft || o.Align == ContentAlignment.TopCenter || o.Align == ContentAlignment.TopRight) " is 121.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.MiddleLeft || o.Align == ContentAlignment.MiddleCenter || o.Align == ContentAlignment.MiddleRight) " is 130.
Long Statement,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The length of the statement  "	if (o.Align == ContentAlignment.BottomLeft || o.Align == ContentAlignment.BottomCenter || o.Align == ContentAlignment.BottomRight) " is 130.
Long Statement,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The length of the statement  "			o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3])); " is 127.
Long Statement,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The length of the statement  "	o.Align = string.IsNullOrEmpty (align) ? ContentAlignment.MiddleCenter : (ContentAlignment)Enum.Parse (typeof(ContentAlignment)' align' true); " is 142.
Complex Conditional,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlays,The conditional expression  "string.IsNullOrEmpty (sDesign) || string.IsNullOrEmpty (sMaster) || string.IsNullOrEmpty (sColor) || string.IsNullOrEmpty (sOrgId) || string.IsNullOrEmpty (sLogoUsageId)"  is complex.
Complex Conditional,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlays,The conditional expression  "!int.TryParse (sDesign' out designId) || !(int.TryParse (sMaster' out masterId)) || !int.TryParse (sColor' out colorId) || !int.TryParse (sOrgId' out orgId) || !int.TryParse (sLogoUsageId' out logoUsageId)"  is complex.
Empty Catch Block,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The method has an empty catch block.
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var conn = GetConnection ()) {  	conn.Open ();  	var c = new SqlCommand (SqlQuery' conn);  	c.Parameters.AddWithValue ("designid"' designId);  	c.Parameters.AddWithValue ("masterid"' masterId);  	c.Parameters.AddWithValue ("colorid"' colorId);  	c.Parameters.AddWithValue ("orgid"' orgId);  	c.Parameters.AddWithValue ("logousageid"' logoUsageId);  	using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  		if (!r.HasRows)  			return null;  		//No results?  		r.Read ();  		/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  		Overlay o = new Overlay ();  		StringBuilder p = new StringBuilder ();  		//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  		p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  		p.Replace (" "' "");  		o.OverlayPath = p.ToString ();  		//Parse logo position and use it to fill in magic values  		string logoPosition = r.GetString (3).Replace (" "' "");  		LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  		this.ApplyLogoPositionMagicValues (o' type);  		o.Align = (ContentAlignment)r.GetInt32 (12);  		//LogoAlignment  		//Store coordinates  		o.Poly = new PointF[4];  		for (int i = 0; i < 4; i++) {  			int x = r.GetInt32 (4 + (i * 2));  			int y = r.GetInt32 (5 + (i * 2));  			o.Poly [i] = new PointF (x' y);  		}  		return o;  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: using (var r = c.ExecuteReader (System.Data.CommandBehavior.SingleRow)) {  	if (!r.HasRows)  		return null;  	//No results?  	r.Read ();  	/*NickName	Description	IsDarkColor	Description X1	Y1	X2	Y2	X3	Y3	X4	Y4                     CampusCloz	Alumni 1	1	Full Chest 309	289	705	289	309	384	705	384	*//*                     So working through this example which has real values from the NEW sample db I provided:                     · designid=3233 locates for us LogoDesignMap.ID=3233 which represents a 'Alumni 1' logo design for Org=Campus Cloz in the Full Chest position.                     · mastid=9464' colorid=1577' and Logo Position=Full Chest are used to locate LogoImage2.ID=63392. Now we know the source product image (1020_99_z.jpg)' coordinates for the logo' and the logo position (this answers your question).                     · colorid=1577 tells us the color is a dark color (Color.IsDarkColor=1). We need to know if color is light or dark because we put white logos on dark colors only' and dark logos on light colors only.                      * Now we know enough to build the logo filename. This was described in earlier email' but I'll repeat:                       * Our logo image file names will use a strict naming convention i.e. [Organization.NickName]_[Logo Design Name]_[Light or Dark]_[Logo Position].png'                       * i.e. CampusCloz_athletics9_light_leftsleeve.png. So' the logo image name should be: CampusCloz_athletics1_dark_FullChest.png. Note we collapse spaces in these file names' i.e. 'Campus Cloz' becomes 'CampusCloz'' 'Athletics 1' -> 'Athletics1' 'Full Chest' -> FullChest                       * *///Build overlay path  	Overlay o = new Overlay ();  	StringBuilder p = new StringBuilder ();  	//p.AppendFormat("{4}/{0}_{1}_{2}_{3}.png"' r.GetString(0)' r.GetString(1)' r.GetBoolean(2) ? "dark" : "light"' r.GetString(3)' this.OverlayBasePath.TrimEnd('/'));  	p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  	p.Replace (" "' "");  	o.OverlayPath = p.ToString ();  	//Parse logo position and use it to fill in magic values  	string logoPosition = r.GetString (3).Replace (" "' "");  	LogoPosition type = (LogoPosition)Enum.Parse (typeof(LogoPosition)' logoPosition' true);  	this.ApplyLogoPositionMagicValues (o' type);  	o.Align = (ContentAlignment)r.GetInt32 (12);  	//LogoAlignment  	//Store coordinates  	o.Poly = new PointF[4];  	for (int i = 0; i < 4; i++) {  		int x = r.GetInt32 (4 + (i * 2));  		int y = r.GetInt32 (5 + (i * 2));  		o.Poly [i] = new PointF (x' y);  	}  	return o;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: p.AppendFormat ("{4}/{0}/LogoImages/{0}_{1}_{2}_{3}.png"' r.GetString (0)' r.GetString (1)' r.GetBoolean (2) ? "dark" : "light"' r.GetString (3)' this.OverlayBasePath.TrimEnd ('/'));  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: o.Align = (ContentAlignment)r.GetInt32 (12);  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: o.Poly = new PointF[4];  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int x = r.GetInt32 (4 + (i * 2));  	int y = r.GetInt32 (5 + (i * 2));  	o.Poly [i] = new PointF (x' y);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int x = r.GetInt32 (4 + (i * 2));  	int y = r.GetInt32 (5 + (i * 2));  	o.Poly [i] = new PointF (x' y);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int x = r.GetInt32 (4 + (i * 2));  	int y = r.GetInt32 (5 + (i * 2));  	o.Poly [i] = new PointF (x' y);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int x = r.GetInt32 (4 + (i * 2));  	int y = r.GetInt32 (5 + (i * 2));  	o.Poly [i] = new PointF (x' y);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,GetOverlayFromDb,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	int x = r.GetInt32 (4 + (i * 2));  	int y = r.GetInt32 (5 + (i * 2));  	o.Poly [i] = new PointF (x' y);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyWidthInLogoPixels = 218;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyWidthInLogoPixels = 402;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyWidthInLogoPixels = 197;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyWidthInLogoPixels = 151;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyHeightInLogoPixels = 469;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following statement contains a magic number: o.PolyWidthInLogoPixels = 118;  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: foreach (Overlay o in os) {  	int ohash = o.GetDataHashCode ();  	string physicalPath = HostingEnvironment.MapPath (o.OverlayPath);  	try {  		ohash ^= (int)(File.GetLastWriteTimeUtc (physicalPath).Ticks / (TimeSpan.TicksPerMillisecond * 5));  	} catch {  	}  	hash ^= ohash << (offset % 50);  	offset += 31;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: foreach (Overlay o in os) {  	int ohash = o.GetDataHashCode ();  	string physicalPath = HostingEnvironment.MapPath (o.OverlayPath);  	try {  		ohash ^= (int)(File.GetLastWriteTimeUtc (physicalPath).Ticks / (TimeSpan.TicksPerMillisecond * 5));  	} catch {  	}  	hash ^= ohash << (offset % 50);  	offset += 31;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: foreach (Overlay o in os) {  	int ohash = o.GetDataHashCode ();  	string physicalPath = HostingEnvironment.MapPath (o.OverlayPath);  	try {  		ohash ^= (int)(File.GetLastWriteTimeUtc (physicalPath).Ticks / (TimeSpan.TicksPerMillisecond * 5));  	} catch {  	}  	hash ^= ohash << (offset % 50);  	offset += 31;  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: try {  	ohash ^= (int)(File.GetLastWriteTimeUtc (physicalPath).Ticks / (TimeSpan.TicksPerMillisecond * 5));  } catch {  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: ohash ^= (int)(File.GetLastWriteTimeUtc (physicalPath).Ticks / (TimeSpan.TicksPerMillisecond * 5));  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: hash ^= ohash << (offset % 50);  
Magic Number,ImageResizer.Plugins.CustomOverlay,CustomOverlayPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CustomOverlayPlugin.cs,Pipeline_Rewrite,The following statement contains a magic number: offset += 31;  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: if (o.Align == ContentAlignment.BottomCenter || o.Align == ContentAlignment.MiddleCenter || o.Align == ContentAlignment.TopCenter)  	ox = (cw - w) / 2;  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: ox = (cw - w) / 2;  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: if (o.Align == ContentAlignment.MiddleLeft || o.Align == ContentAlignment.MiddleCenter || o.Align == ContentAlignment.MiddleRight)  	oy = (ch - h) / 2;  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: oy = (ch - h) / 2;  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: t [0] = CreateVector (CreateVector (o.Poly [0]' angle' ox)' angle + Math.PI / 2' oy);  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: t [2] = CreateVector (t [1]' angle + Math.PI / 2' h);  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: t [2] = CreateVector (t [1]' angle + Math.PI / 2' h);  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: t [3] = CreateVector (t [0]' angle + Math.PI / 2' h);  
Magic Number,ImageResizer.Plugins.CustomOverlay,LayoutEngine,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\LayoutEngine.cs,GetOverlayParalellogram,The following statement contains a magic number: t [3] = CreateVector (t [0]' angle + Math.PI / 2' h);  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: hash ^= (int)(PolyWidthInLogoPixels * 10) << 5;  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: hash ^= (int)(PolyWidthInLogoPixels * 10) << 5;  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: hash ^= (int)(PolyHeightInLogoPixels * 10) << 5;  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: hash ^= (int)(PolyHeightInLogoPixels * 10) << 5;  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: foreach (PointF p in Poly) {  	poly ^= (int)(p.X * 10) << (offset % 24);  	offset += 11;  	poly ^= (int)(p.Y * 10) << (offset % 24);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: foreach (PointF p in Poly) {  	poly ^= (int)(p.X * 10) << (offset % 24);  	offset += 11;  	poly ^= (int)(p.Y * 10) << (offset % 24);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: foreach (PointF p in Poly) {  	poly ^= (int)(p.X * 10) << (offset % 24);  	offset += 11;  	poly ^= (int)(p.Y * 10) << (offset % 24);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: foreach (PointF p in Poly) {  	poly ^= (int)(p.X * 10) << (offset % 24);  	offset += 11;  	poly ^= (int)(p.Y * 10) << (offset % 24);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: foreach (PointF p in Poly) {  	poly ^= (int)(p.X * 10) << (offset % 24);  	offset += 11;  	poly ^= (int)(p.Y * 10) << (offset % 24);  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: poly ^= (int)(p.X * 10) << (offset % 24);  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: poly ^= (int)(p.X * 10) << (offset % 24);  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: offset += 11;  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: poly ^= (int)(p.Y * 10) << (offset % 24);  
Magic Number,ImageResizer.Plugins.CustomOverlay,Overlay,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\Overlay.cs,GetDataHashCode,The following statement contains a magic number: poly ^= (int)(p.Y * 10) << (offset % 24);  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length != 8 && coords.Length != 4)  	return null;  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length != 8 && coords.Length != 4)  	return null;  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly = new PointF[4];  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (coords.Length == 8) {  		o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  	} else {  		o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  	}  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: if (coords.Length == 8) {  	o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  } else {  	o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  }  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly [i] = new PointF (float.Parse (coords [i * 2])' float.Parse (coords [i * 2 + 1]));  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  
Magic Number,ImageResizer.Plugins.CustomOverlay,QuerystringOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\QuerystringOverlayProvider.cs,GetOverlays,The following statement contains a magic number: o.Poly [i] = new PointF (float.Parse (coords [(i == 3 || i == 0) ? 0 : 2])' float.Parse (coords [(i == 0 || i == 1) ? 1 : 3]));  
Magic Number,ImageResizer.Plugins.Etags,EtagsPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\EtagsPlugin.cs,GetUnquotedEtag,The following statement contains a magic number: if (ifNoneMatch.StartsWith ("W/"))  	ifNoneMatch = ifNoneMatch.Substring (2);  
Magic Number,ImageResizer.Plugins.Etags,EtagsPlugin,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\EtagsPlugin.cs,GetUnquotedEtag,The following statement contains a magic number: ifNoneMatch = ifNoneMatch.Substring (2);  
Magic Number,ImageResizer.Plugins.Etags,Return304Handler,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\EtagsPlugin.cs,ProcessRequest,The following statement contains a magic number: context.Response.StatusCode = 304;  
Missing Default,ImageResizer.Plugins.CustomOverlay,CachedOverlayProvider,F:\newReposMay17\imazen_resizer\Samples\CustomOverlayPlugin\CachedOverlayProvider.cs,ApplyLogoPositionMagicValues,The following switch statement is missing a default case: switch (lp) {  case LogoPosition.CenterChest:  	//6.5" max logo width   	o.PolyWidthInLogoPixels = 218;  	break;  case LogoPosition.FullChest:  	//12" max logo width   	o.PolyWidthInLogoPixels = 402;  	break;  case LogoPosition.LeftChest:  	//5.88" max logo width   	o.PolyWidthInLogoPixels = 197;  	break;  case LogoPosition.LeftThigh:  	//4.5" max logo width   	o.PolyWidthInLogoPixels = 151;  	break;  case LogoPosition.VerticalLeg:  case LogoPosition.LeftSleeve:  	//3" max logo width - width of logo is left to right with logo hanging vertically   	//o.PolyWidthInLogoPixels = 101; - In fact' the previous algorithm NEVER applied this value' so specifying it will cause an undesired result.  	o.PolyHeightInLogoPixels = 469;  	//14" logo   	break;  case LogoPosition.General:  	//3.5"   	o.PolyWidthInLogoPixels = 118;  	break;  }  
