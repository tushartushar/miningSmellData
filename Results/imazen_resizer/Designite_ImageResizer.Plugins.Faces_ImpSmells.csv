Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "            CvAvgComp[] faces = BorrowCascade("FaceCascadeAlt"' c => Cv.HaarDetectObjects(img' c' storage' 1.0850' MinConfidenceLevel' HaarDetectionType.DoCannyPruning' new CvSize(minSize' minSize)' new CvSize(0'0)).ToArrayAndDispose());" is 225.
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "            foreach (CvAvgComp face in faces) features.Add(new Face(PolygonMath.ScaleRect(face.Rect.ToRectangleF()'ExpandX'ExpandY)' face.Neighbors));" is 138.
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "            //CvAvgComp[] profiles = BorrowCascade("FaceProfile"' c => Cv.HaarDetectObjects(img' c' storage' 1.2' MinConfidenceLevel + 2' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch | HaarDetectionType.DoCannyPruning' new CvSize(img.Width / 8' img.Height / 8)' new CvSize(0' 0)).ToArrayAndDispose());" is 314.
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "            //foreach (CvAvgComp face in profiles) features.Add(new Face(PolygonMath.ScaleRect(face.Rect.ToRectangleF()' ExpandX' ExpandY)' face.Neighbors));" is 145.
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "                        c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'" is 124.
Long Statement,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The length of the statement  "            while (features.Count > MinFaces && features[features.Count - 1].Accuracy < ConfidenceLevelThreshold) features.RemoveAt(features.Count - 1);" is 140.
Long Statement,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,PostPrepareSourceBitmap,The length of the statement  "                foreach (var r in faces) {focusPoints.Add(r.X); focusPoints.Add(r.Y); focusPoints.Add(r.X2); focusPoints.Add(r.Y2); focusPoints.Add(r.Accuracy); }" is 146.
Long Statement,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,PostRenderImage,The length of the statement  "                g.DrawString((newPoints.Length / 2).ToString()' new Font(FontFamily.GenericSansSerif' 24.0f' FontStyle.Bold)' new SolidBrush(Color.Green)'0.0f'24.0f);" is 150.
Long Statement,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The length of the statement  "                        "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");" is 143.
Long Statement,ImageResizer.Plugins.CropAround,Aligner,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,GetCrop,The length of the statement  "            // If there's no need to crop out a salient region' then center on the salient bounding box and align within the image bounds." is 126.
Long Statement,ImageResizer.Plugins.CropAround,Aligner,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,GetCrop,The length of the statement  "            var searchArea = new RectangleF(vertical ? 0 : salientBounds.X' vertical ? salientBounds.Y : 0' vertical ? idealCropSize.Width : salientBounds.Width' vertical ? salientBounds.Height : idealCropSize.Height);" is 206.
Magic Number,ImageResizer.Plugins.Faces,DetectionResponse<T>,C:\repos\imazen_resizer\Plugins\Faces\DetectionResponse.cs,GetResponseException,The following statement contains a magic number: ex.StatusCode = 200;
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,FaceDetection,The following statement contains a magic number: MaxFaces = 10;
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,FaceDetection,The following statement contains a magic number: MinSizePercent = 4;
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,FaceDetection,The following statement contains a magic number: ConfidenceLevelThreshold = 5;
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,FaceDetection,The following statement contains a magic number: MinConfidenceLevel = 3;
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: var minSize = Math.Max(12' (int)Math.Round((double)MinSizePercent / 100.0 * Math.Min(img.Width' img.Height)));
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: var minSize = Math.Max(12' (int)Math.Round((double)MinSizePercent / 100.0 * Math.Min(img.Width' img.Height)));
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: CvAvgComp[] faces = BorrowCascade("FaceCascadeAlt"' c => Cv.HaarDetectObjects(img' c' storage' 1.0850' MinConfidenceLevel' HaarDetectionType.DoCannyPruning' new CvSize(minSize' minSize)' new CvSize(0'0)).ToArrayAndDispose());
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FaceDetection,C:\repos\imazen_resizer\Plugins\Faces\FaceDetection.cs,DetectFeatures,The following statement contains a magic number: foreach (var face in features) {                 var w = (int) (face.X2 - face.X);                 var h = (int) ((face.Y2 - face.Y) * 0.6);                 if (w > 20) {                     img.SetROI((int) face.X' (int) face.Y' w' h);                     storage.Clear();                      CvAvgComp[] eyes = BorrowCascade("Eye"'                         c => Cv.HaarDetectObjects(img' c' storage' 1.0850' 4' HaarDetectionType.FindBiggestObject | HaarDetectionType.DoRoughSearch'                                    new CvSize(4' 4)' new CvSize(img.Width / 2' img.Height / 2))                                .ToArrayAndDispose());                     if (eyes.Length == 0) {                         // Halve the estimated accuracy if there are no eyes detected                         face.Accuracy = face.Accuracy / 2;                         // We never want to boost accuracy' because the walls have eyes                     }                 }             }
Magic Number,ImageResizer.Plugins.Faces,FeatureDetectionBase<T>,C:\repos\imazen_resizer\Plugins\Faces\FeatureDetectionBase.cs,BorrowCascade,The following statement contains a magic number: if (fileNames != null && fileNames.TryGetValue(fileNameKey' out name) == true) {                 if (name != null) {                     return CascadePool.Shared.Borrow(name' operation' 10000);                 }             }
Magic Number,ImageResizer.Plugins.Faces,FeatureDetectionBase<T>,C:\repos\imazen_resizer\Plugins\Faces\FeatureDetectionBase.cs,DetectFeatures,The following statement contains a magic number: try {                                  orig = OpenCvSharp.Extensions.BitmapConverter.ToIplImage(b);                                                   gray = new IplImage(orig.Size' BitDepth.U8' 1);                 //gray2 = new IplImage(orig.Size' BitDepth.U8' 1);                  //Make grayscale version                 Cv.CvtColor(orig' gray' ColorConversion.BgrToGray); //TODO' try a different color space                 //Cv.EqualizeHist(gray' gray2);                  var w = orig.Width;                 var h = orig.Height;                 Cv.ReleaseImage(orig);                 orig = null;                   var ratio =  w /  h;                 double scale = 1;                 if (ratio > 1) scale = w / (double) scaledBounds;                 if (ratio <= 1) scale =  h / (double) scaledBounds;                 scale = Math.Min(1' 1 / scale);                   small = new IplImage(new CvSize(Cv.Round(w * scale)' Cv.Round(h * scale))' BitDepth.U8' 1);                                  //Resize to smaller version                 Cv.Resize(gray' small' Interpolation.Area); //TODO: try a better algorithm                 Cv.ReleaseImage(gray);                 gray = null;                  features = StoragePool.Shared.Borrow("features"' s =>                 {                     s.Clear();                     watch.Stop();                     var f =  DetectFeatures(small' s);                     watch.Start();                     return f;                 }' 3000);                  //Scale all rectangles by factor to restore to original resolution                 foreach (IFeature e in features) {                     e.Y = (float) Math.Min(h' e.Y / scale);                     e.X = (float) Math.Min(w' e.X / scale);                     e.Y2 = (float) Math.Min(h' e.Y2 / scale);                     e.X2 = (float) Math.Min(w' e.X2 / scale);                 }             } finally {                 if (gray != null) Cv.ReleaseImage(gray);                 if (gray2 != null) Cv.ReleaseImage(gray2);                 if (orig != null) Cv.ReleaseImage(orig);                 if (small != null) Cv.ReleaseImage(small);             }
Magic Number,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,PostRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(s.destBitmap)) {                  for (var i = 0; i < newPoints.Length - 1; i += 2) {                     float x1 = newPoints[i].X;                     float y1 = newPoints[i].Y;                     float x2 = newPoints[i + 1].X;                     float y2 = newPoints[i + 1].Y;                     float t;                     if (x1 > x2) { t = x2; x2 = x1; x1 = t; }                     if (y1 > y2) { t = y1; y1 = y2; y2 = t; }                      g.DrawRectangle(Pens.Green' new Rectangle((int)x1' (int)y1' (int)(x2 - x1)' (int)(y2 - y1)));                 }                  g.DrawString((newPoints.Length / 2).ToString()' new Font(FontFamily.GenericSansSerif' 24.0f' FontStyle.Bold)' new SolidBrush(Color.Green)'0.0f'24.0f);             }
Magic Number,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,PostRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(s.destBitmap)) {                  for (var i = 0; i < newPoints.Length - 1; i += 2) {                     float x1 = newPoints[i].X;                     float y1 = newPoints[i].Y;                     float x2 = newPoints[i + 1].X;                     float y2 = newPoints[i + 1].Y;                     float t;                     if (x1 > x2) { t = x2; x2 = x1; x1 = t; }                     if (y1 > y2) { t = y1; y1 = y2; y2 = t; }                      g.DrawRectangle(Pens.Green' new Rectangle((int)x1' (int)y1' (int)(x2 - x1)' (int)(y2 - y1)));                 }                  g.DrawString((newPoints.Length / 2).ToString()' new Font(FontFamily.GenericSansSerif' 24.0f' FontStyle.Bold)' new SolidBrush(Color.Green)'0.0f'24.0f);             }
Magic Number,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,ConfigureDetection,The following statement contains a magic number: int[] count = s.GetList<int>("f.faces"'null'1'2);
Magic Number,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,ConfigureDetection,The following statement contains a magic number: int[] threshold = s.GetList<int>("f.threshold"'null'1'2);
Magic Number,ImageResizer.Plugins.Faces,FacesPlugin,C:\repos\imazen_resizer\Plugins\Faces\FacesPlugin.cs,ConfigureDetection,The following statement contains a magic number: double[] expand = s.GetList<double>("f.expand"' null' 1' 2);
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (salientareas != null) {                 if (salientareas.Length % 5 != 0) {                     throw new ImageProcessingException(400'                         "Incorrent number of values provided in c.salientareas (must be multiple of 5). Usage: &c.salientareas=x1'y1'x2'y2'weight'x1'y1'x2'y2'weight");                 }                  return salientareas.ToList()                                    .SplitList(5)                                    .Select(v => new SalientArea {                                        Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                        Weight = v[4]                                    })                                    .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length == 2) {                 return new[] {new SalientArea {Area = new RectangleF(focus[0]' focus[1]' 0' 0)' Weight = 1}};             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length > 2 && focus.Length % 4 == 0) {                 return focus.ToList()                             .SplitList(4)                             .Select(v => new SalientArea {                                 Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                 Weight = 1                             })                             .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length > 2 && focus.Length % 4 == 0) {                 return focus.ToList()                             .SplitList(4)                             .Select(v => new SalientArea {                                 Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                 Weight = 1                             })                             .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length > 2 && focus.Length % 4 == 0) {                 return focus.ToList()                             .SplitList(4)                             .Select(v => new SalientArea {                                 Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                 Weight = 1                             })                             .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length > 2 && focus.Length % 4 == 0) {                 return focus.ToList()                             .SplitList(4)                             .Select(v => new SalientArea {                                 Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                 Weight = 1                             })                             .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,SalientArea,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,FromQuery,The following statement contains a magic number: if (focus != null && focus.Length > 2 && focus.Length % 4 == 0) {                 return focus.ToList()                             .SplitList(4)                             .Select(v => new SalientArea {                                 Area = new RectangleF(v[0]' v[1]' v[2] - v[0]' v[3] - v[1])'                                 Weight = 1                             })                             .ToArray();             }
Magic Number,ImageResizer.Plugins.CropAround,Aligner,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,GetCrop,The following statement contains a magic number: if (NeverCropSalientArea) {                 var compromiseCrop = new SizeF(Math.Max(salientBounds.Width' idealCropSize.Width)'                     Math.Max(salientBounds.Height' idealCropSize.Height));                  // Don't worry about 3 pixels or less' that's just annoying.                 if (compromiseCrop.Width - idealCropSize.Width <= 3 &&                     compromiseCrop.Height - idealCropSize.Height <= 3) {                     compromiseCrop = idealCropSize;                 }                  return PolygonMath.AlignWithin(new RectangleF(PointF.Empty' compromiseCrop)'                     new RectangleF(PointF.Empty' ImageSize)' PolygonMath.Midpoint(salientBounds));              }
Magic Number,ImageResizer.Plugins.CropAround,Aligner,C:\repos\imazen_resizer\Plugins\Faces\CropAroundPlugin.cs,GetCrop,The following statement contains a magic number: if (NeverCropSalientArea) {                 var compromiseCrop = new SizeF(Math.Max(salientBounds.Width' idealCropSize.Width)'                     Math.Max(salientBounds.Height' idealCropSize.Height));                  // Don't worry about 3 pixels or less' that's just annoying.                 if (compromiseCrop.Width - idealCropSize.Width <= 3 &&                     compromiseCrop.Height - idealCropSize.Height <= 3) {                     compromiseCrop = idealCropSize;                 }                  return PolygonMath.AlignWithin(new RectangleF(PointF.Empty' compromiseCrop)'                     new RectangleF(PointF.Empty' ImageSize)' PolygonMath.Midpoint(salientBounds));              }
