Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ImageResizer.Plugins.WhitespaceTrimmer,BoundingBoxFinder,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\BoundingBoxFinder.cs,FindBoxSobel,The length of the statement  "                BitmapData data = gray.LockBits(new Rectangle(0' 0' gray.Width' gray.Height)' ImageLockMode.ReadOnly' gray.PixelFormat);" is 120.
Long Statement,ImageResizer.Plugins.WhitespaceTrimmer,BoundingBoxFinder,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\BoundingBoxFinder.cs,FindBoxExactGrayscale,The length of the statement  "            if (sourceData.PixelFormat != PixelFormat.Format8bppIndexed) throw new ArgumentOutOfRangeException("FindBoxExact only operates on 8-bit grayscale images");" is 155.
Long Statement,ImageResizer.Plugins.WhitespaceTrimmer,WhitespaceTrimmerPlugin,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\WhitespaceTrimmerPlugin.cs,LayoutImage,The length of the statement  "                Rectangle box = new BoundingBoxFinder().FindBoxSobel(s.sourceBitmap' new Rectangle(0' 0' s.sourceBitmap.Width' s.sourceBitmap.Height)' (byte)threshold);" is 152.
Complex Conditional,ImageResizer.Plugins.WhitespaceTrimmer,BoundingBoxFinder,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\BoundingBoxFinder.cs,FindBoxExactGrayscale,The conditional expression  "(minX == width) && (minY == height) && (maxX == 0) && (maxY == 0)"  is complex.
Magic Number,ImageResizer.Plugins.WhitespaceTrimmer,WhitespaceTrimmerPlugin,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\WhitespaceTrimmerPlugin.cs,LayoutImage,The following statement contains a magic number: double percentpadding = s.settings.Get<double>("trim.percentpadding"' 0) / 100;
Magic Number,ImageResizer.Plugins.WhitespaceTrimmer,WhitespaceTrimmerPlugin,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\WhitespaceTrimmerPlugin.cs,LayoutImage,The following statement contains a magic number: if (threshold != null) {                 if (threshold < 0) threshold = 0; if (threshold > 255) threshold = 255;                                  Rectangle box = new BoundingBoxFinder().FindBoxSobel(s.sourceBitmap' new Rectangle(0' 0' s.sourceBitmap.Width' s.sourceBitmap.Height)' (byte)threshold);                 //Add padding                 int paddingPixels = (int)Math.Ceiling(percentpadding * (box.Width + box.Height) / 2);                  int leftPadding = Math.Min(paddingPixels' box.X);                 int topPadding = Math.Min(paddingPixels' box.Y);                 box.X = box.X - leftPadding;                 box.Y = box.Y - topPadding;                 box.Width = Math.Min(s.sourceBitmap.Width - box.X' box.Width + paddingPixels + leftPadding);                 box.Height = Math.Min(s.sourceBitmap.Height - box.Y' box.Height + paddingPixels + topPadding);                  //Adjust s.originalSize so the layout occurs properly.                 s.originalSize = box.Size;                 s.Data[RectDataKey] = box;             }
Magic Number,ImageResizer.Plugins.WhitespaceTrimmer,WhitespaceTrimmerPlugin,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\WhitespaceTrimmerPlugin.cs,LayoutImage,The following statement contains a magic number: if (threshold != null) {                 if (threshold < 0) threshold = 0; if (threshold > 255) threshold = 255;                                  Rectangle box = new BoundingBoxFinder().FindBoxSobel(s.sourceBitmap' new Rectangle(0' 0' s.sourceBitmap.Width' s.sourceBitmap.Height)' (byte)threshold);                 //Add padding                 int paddingPixels = (int)Math.Ceiling(percentpadding * (box.Width + box.Height) / 2);                  int leftPadding = Math.Min(paddingPixels' box.X);                 int topPadding = Math.Min(paddingPixels' box.Y);                 box.X = box.X - leftPadding;                 box.Y = box.Y - topPadding;                 box.Width = Math.Min(s.sourceBitmap.Width - box.X' box.Width + paddingPixels + leftPadding);                 box.Height = Math.Min(s.sourceBitmap.Height - box.Y' box.Height + paddingPixels + topPadding);                  //Adjust s.originalSize so the layout occurs properly.                 s.originalSize = box.Size;                 s.Data[RectDataKey] = box;             }
Magic Number,ImageResizer.Plugins.WhitespaceTrimmer,WhitespaceTrimmerPlugin,C:\repos\imazen_resizer\Plugins\WhitespaceTrimmer\WhitespaceTrimmerPlugin.cs,LayoutImage,The following statement contains a magic number: if (threshold != null) {                 if (threshold < 0) threshold = 0; if (threshold > 255) threshold = 255;                                  Rectangle box = new BoundingBoxFinder().FindBoxSobel(s.sourceBitmap' new Rectangle(0' 0' s.sourceBitmap.Width' s.sourceBitmap.Height)' (byte)threshold);                 //Add padding                 int paddingPixels = (int)Math.Ceiling(percentpadding * (box.Width + box.Height) / 2);                  int leftPadding = Math.Min(paddingPixels' box.X);                 int topPadding = Math.Min(paddingPixels' box.Y);                 box.X = box.X - leftPadding;                 box.Y = box.Y - topPadding;                 box.Width = Math.Min(s.sourceBitmap.Width - box.X' box.Width + paddingPixels + leftPadding);                 box.Height = Math.Min(s.sourceBitmap.Height - box.Y' box.Height + paddingPixels + topPadding);                  //Adjust s.originalSize so the layout occurs properly.                 s.originalSize = box.Size;                 s.Data[RectDataKey] = box;             }
