Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,IsWhitelisted,Cyclomatic complexity of the method is 10
Long Parameter List,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetStream,The method has 5 parameters. Parameters: source' settings' disposeStream' path' restoreStreamPosition
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,SignData,The length of the statement  "            if (string.IsNullOrEmpty(key)) throw new ImageResizer.ImageProcessingException("You are required to set a passphrase for securing remote URLs. <resizer><remotereader signingKey=\"put a long and randam passphrase here\" /> </resizer>");" is 235.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,ParseRequest,The length of the statement  "                    throw new ImageProcessingException("Invalid request! This request was not properly signed' or has been tampered with since transmission.");" is 139.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,ParseRequest,The length of the statement  "                args.RemoteUrl = "http://" + ReplaceInLeadingSegment(virtualPath.Substring(remotePrefix.Length).TrimStart('/'' '\\')' "_"' ".");" is 128.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,IsWhitelisted,The length of the statement  "                    var r = new Regex("^" + regex + "$"' RegexOptions.CultureInvariant | RegexOptions.IgnoreCase | RegexOptions.Singleline);" is 120.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetIssues,The length of the statement  "                issues.Add(new Issue("You are required to set a passphrase for securing remote URLs. Example: <resizer><remotereader signingKey=\"put a long and randam passphrase here\" /> </resizer>"));" is 187.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The length of the statement  "                    if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);" is 135.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The length of the statement  "                    if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);" is 158.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The length of the statement  "                            if (maxRedirects < 1) throw new HttpException(500' "Too many redirects' stopped while looking for \"" + uri.ToString() + "\".");" is 128.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStreamAsync,The length of the statement  "                    if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);" is 135.
Long Statement,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStreamAsync,The length of the statement  "                    if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);" is 158.
Empty Catch Block,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,RemoteReaderPlugin,The method has an empty catch block.
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,RemoteReaderPlugin,The following statement contains a magic number: AllowedRedirects = 5;
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,SignDataWithKey,The following statement contains a magic number: byte[] shorterHash = new byte[8];
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,SignDataWithKey,The following statement contains a magic number: Array.Copy(hash' shorterHash' 8);
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetFile,The following statement contains a magic number: if (request.DenyRequest) throw new ImageProcessingException(403' "The specified remote URL is not permitted.");
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The following statement contains a magic number: try {                 HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                 request.Timeout = 15000; //Default to 15 seconds. Browser timeout is usually 30.                 request.UserAgent = "ImageResizer";                                  //This is IDisposable' but only disposes the stream we are returning. So we can't dispose it' and don't need to                 response = request.GetResponse() as HttpWebResponse;                 return response.GetResponseStream();             } catch (WebException e) {                 var resp = e.Response as HttpWebResponse;                  if (e.Status == WebExceptionStatus.ProtocolError && resp != null) {                     if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);                      if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);                     if (resp.StatusCode == HttpStatusCode.Moved ||                         resp.StatusCode == HttpStatusCode.Redirect) {                             if (maxRedirects < 1) throw new HttpException(500' "Too many redirects' stopped while looking for \"" + uri.ToString() + "\".");                             string loc = resp.GetResponseHeader("Location");                             if (!string.IsNullOrEmpty(loc) && Uri.IsWellFormedUriString(loc' UriKind.RelativeOrAbsolute)) {                                 Uri newLoc = Uri.IsWellFormedUriString(loc' UriKind.Absolute) ? new Uri(loc) : new Uri(uri' new Uri(loc));                                 response.Close(); response = null;                                  return GetUriStream(newLoc' maxRedirects - 1);                             }                     }                 }                 //if (resp != null)resp.Close();                 if (response != null) response.Close();                 throw e;             }
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The following statement contains a magic number: try {                 HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                 request.Timeout = 15000; //Default to 15 seconds. Browser timeout is usually 30.                 request.UserAgent = "ImageResizer";                                  //This is IDisposable' but only disposes the stream we are returning. So we can't dispose it' and don't need to                 response = request.GetResponse() as HttpWebResponse;                 return response.GetResponseStream();             } catch (WebException e) {                 var resp = e.Response as HttpWebResponse;                  if (e.Status == WebExceptionStatus.ProtocolError && resp != null) {                     if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);                      if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);                     if (resp.StatusCode == HttpStatusCode.Moved ||                         resp.StatusCode == HttpStatusCode.Redirect) {                             if (maxRedirects < 1) throw new HttpException(500' "Too many redirects' stopped while looking for \"" + uri.ToString() + "\".");                             string loc = resp.GetResponseHeader("Location");                             if (!string.IsNullOrEmpty(loc) && Uri.IsWellFormedUriString(loc' UriKind.RelativeOrAbsolute)) {                                 Uri newLoc = Uri.IsWellFormedUriString(loc' UriKind.Absolute) ? new Uri(loc) : new Uri(uri' new Uri(loc));                                 response.Close(); response = null;                                  return GetUriStream(newLoc' maxRedirects - 1);                             }                     }                 }                 //if (resp != null)resp.Close();                 if (response != null) response.Close();                 throw e;             }
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStream,The following statement contains a magic number: try {                 HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                 request.Timeout = 15000; //Default to 15 seconds. Browser timeout is usually 30.                 request.UserAgent = "ImageResizer";                                  //This is IDisposable' but only disposes the stream we are returning. So we can't dispose it' and don't need to                 response = request.GetResponse() as HttpWebResponse;                 return response.GetResponseStream();             } catch (WebException e) {                 var resp = e.Response as HttpWebResponse;                  if (e.Status == WebExceptionStatus.ProtocolError && resp != null) {                     if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);                      if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);                     if (resp.StatusCode == HttpStatusCode.Moved ||                         resp.StatusCode == HttpStatusCode.Redirect) {                             if (maxRedirects < 1) throw new HttpException(500' "Too many redirects' stopped while looking for \"" + uri.ToString() + "\".");                             string loc = resp.GetResponseHeader("Location");                             if (!string.IsNullOrEmpty(loc) && Uri.IsWellFormedUriString(loc' UriKind.RelativeOrAbsolute)) {                                 Uri newLoc = Uri.IsWellFormedUriString(loc' UriKind.Absolute) ? new Uri(loc) : new Uri(uri' new Uri(loc));                                 response.Close(); response = null;                                  return GetUriStream(newLoc' maxRedirects - 1);                             }                     }                 }                 //if (resp != null)resp.Close();                 if (response != null) response.Close();                 throw e;             }
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStreamAsync,The following statement contains a magic number: try             {                 HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                 request.Timeout = 15000; //Default to 15 seconds. Browser timeout is usually 30.                 request.AllowAutoRedirect = maxRedirects != 0;                 request.MaximumAutomaticRedirections = maxRedirects > 0 ? maxRedirects : 0;                 //This is IDisposable' but only disposes the stream we are returning. So we can't dispose it' and don't need to                 response = await request.GetResponseAsync() as HttpWebResponse;                 return response.GetResponseStream();             }             catch (WebException e)             {                 var resp = e.Response as HttpWebResponse;                  if (e.Status == WebExceptionStatus.ProtocolError && resp != null)                 {                     if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);                      if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);                 }                 //if (resp != null)resp.Close();                 if (response != null) response.Close();                 throw e;             }
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetUriStreamAsync,The following statement contains a magic number: try             {                 HttpWebRequest request = (HttpWebRequest)WebRequest.Create(uri);                 request.Timeout = 15000; //Default to 15 seconds. Browser timeout is usually 30.                 request.AllowAutoRedirect = maxRedirects != 0;                 request.MaximumAutomaticRedirections = maxRedirects > 0 ? maxRedirects : 0;                 //This is IDisposable' but only disposes the stream we are returning. So we can't dispose it' and don't need to                 response = await request.GetResponseAsync() as HttpWebResponse;                 return response.GetResponseStream();             }             catch (WebException e)             {                 var resp = e.Response as HttpWebResponse;                  if (e.Status == WebExceptionStatus.ProtocolError && resp != null)                 {                     if (resp.StatusCode == HttpStatusCode.NotFound) throw new FileNotFoundException("404 error: \"" + uri.ToString() + "\" not found."' e);                      if (resp.StatusCode == HttpStatusCode.Forbidden) throw new HttpException(403' "403 Not Authorized (from remote server) for : \"" + uri.ToString() + "\"."' e);                 }                 //if (resp != null)resp.Close();                 if (response != null) response.Close();                 throw e;             }
Magic Number,ImageResizer.Plugins.RemoteReader,RemoteReaderPlugin,C:\repos\imazen_resizer\Plugins\RemoteReader\RemoteReaderPlugin.cs,GetFileAsync,The following statement contains a magic number: if (request.DenyRequest) throw new ImageProcessingException(403' "The specified remote URL is not permitted.");
