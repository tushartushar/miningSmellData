Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,Cyclomatic complexity of the method is 14
Complex Method,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PostCreateImageAttributes,Cyclomatic complexity of the method is 23
Long Statement,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The length of the statement  "			radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100)); " is 152.
Long Statement,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PostCreateImageAttributes,The length of the statement  "	if (!string.IsNullOrEmpty (alpha) && double.TryParse (alpha' ParseUtils.FloatingPointStyle' NumberFormatInfo.InvariantInfo' out temp)) " is 134.
Long Statement,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PostCreateImageAttributes,The length of the statement  "	if (!string.IsNullOrEmpty (brightness) && double.TryParse (brightness' ParseUtils.FloatingPointStyle' NumberFormatInfo.InvariantInfo' out temp)) " is 144.
Long Statement,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PostCreateImageAttributes,The length of the statement  "	if (!string.IsNullOrEmpty (contrast) && double.TryParse (contrast' ParseUtils.FloatingPointStyle' NumberFormatInfo.InvariantInfo' out temp)) " is 140.
Long Statement,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PostCreateImageAttributes,The length of the statement  "	if (!string.IsNullOrEmpty (saturation) && double.TryParse (saturation' ParseUtils.FloatingPointStyle' NumberFormatInfo.InvariantInfo' out temp)) " is 144.
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: try {  	//Make sure cropping is applied' and use existing prerendered bitmap if present.  	s.ApplyCropping ();  	cropped = s.preRenderBitmap ?? s.sourceBitmap;  	s.preRenderBitmap = new Bitmap (cropped.Width' cropped.Height' PixelFormat.Format32bppArgb);  	int[] radius = new int[4];  	//Radius percentages are 0-100' a percentage of the smaller of the width and height.  	for (int i = 0; i < vals.Length; i++)  		radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  	s.preRenderBitmap.MakeTransparent ();  	using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  		g.SmoothingMode = SmoothingMode.AntiAlias;  		g.CompositingMode = CompositingMode.SourceOver;  		g.CompositingQuality = CompositingQuality.HighQuality;  		g.PixelOffsetMode = PixelOffsetMode.HighQuality;  		using (TextureBrush tb = new TextureBrush (cropped))  			using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  				Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  				int[] angles = new int[] {  					180'  					270'  					0'  					90  				};  				int[] xs = new int[] {  					bounds.X'  					bounds.Right - radius [1]'  					bounds.Right - radius [2]'  					bounds.X  				};  				int[] ys = new int[] {  					bounds.Y'  					bounds.Y'  					bounds.Bottom - radius [2]'  					bounds.Bottom - radius [3]  				};  				for (int i = 0; i < 4; i++) {  					if (radius [i] > 0) {  						gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  					} else {  						gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  					}  				}  				g.FillPath (tb' gp);  			}  	}  } finally {  	if (cropped != null & cropped != s.sourceBitmap)  		cropped.Dispose ();  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: for (int i = 0; i < vals.Length; i++)  	radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: for (int i = 0; i < vals.Length; i++)  	radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: radius [i] = (int)Math.Round (Math.Max (0' Math.Min (99.999' vals [i])) * ((double)Math.Min (s.preRenderBitmap.Width' s.preRenderBitmap.Height) / 100));  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (s.preRenderBitmap)) {  	g.SmoothingMode = SmoothingMode.AntiAlias;  	g.CompositingMode = CompositingMode.SourceOver;  	g.CompositingQuality = CompositingQuality.HighQuality;  	g.PixelOffsetMode = PixelOffsetMode.HighQuality;  	using (TextureBrush tb = new TextureBrush (cropped))  		using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  			Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  			int[] angles = new int[] {  				180'  				270'  				0'  				90  			};  			int[] xs = new int[] {  				bounds.X'  				bounds.Right - radius [1]'  				bounds.Right - radius [2]'  				bounds.X  			};  			int[] ys = new int[] {  				bounds.Y'  				bounds.Y'  				bounds.Bottom - radius [2]'  				bounds.Bottom - radius [3]  			};  			for (int i = 0; i < 4; i++) {  				if (radius [i] > 0) {  					gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  				} else {  					gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  				}  			}  			g.FillPath (tb' gp);  		}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (TextureBrush tb = new TextureBrush (cropped))  	using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  		Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  		int[] angles = new int[] {  			180'  			270'  			0'  			90  		};  		int[] xs = new int[] {  			bounds.X'  			bounds.Right - radius [1]'  			bounds.Right - radius [2]'  			bounds.X  		};  		int[] ys = new int[] {  			bounds.Y'  			bounds.Y'  			bounds.Bottom - radius [2]'  			bounds.Bottom - radius [3]  		};  		for (int i = 0; i < 4; i++) {  			if (radius [i] > 0) {  				gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  			} else {  				gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  			}  		}  		g.FillPath (tb' gp);  	}  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: using (GraphicsPath gp = new GraphicsPath (FillMode.Winding)) {  	Rectangle bounds = new Rectangle (0' 0' s.preRenderBitmap.Width' s.preRenderBitmap.Height);  	int[] angles = new int[] {  		180'  		270'  		0'  		90  	};  	int[] xs = new int[] {  		bounds.X'  		bounds.Right - radius [1]'  		bounds.Right - radius [2]'  		bounds.X  	};  	int[] ys = new int[] {  		bounds.Y'  		bounds.Y'  		bounds.Bottom - radius [2]'  		bounds.Bottom - radius [3]  	};  	for (int i = 0; i < 4; i++) {  		if (radius [i] > 0) {  			gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  		} else {  			gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  		}  	}  	g.FillPath (tb' gp);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (radius [i] > 0) {  		gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  	} else {  		gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  	}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (radius [i] > 0) {  		gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  	} else {  		gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  	}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: if (radius [i] > 0) {  	gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  } else {  	gp.AddLine (xs [i]' ys [i]' xs [i]' ys [i]);  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,PreRenderImage,The following statement contains a magic number: gp.AddArc (xs [i]' ys [i]' radius [i]' radius [i]' angles [i]' 90);  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int d = 0; d < 5; d++)  	X [d] = new float[5];  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int d = 0; d < 5; d++)  	X [d] = new float[5];  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: X [d] = new float[5];  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int j = 0; j < 5; j++) {  	for (int k = 0; k < 5; k++) {  		column [k] = f1 [k] [j];  	}  	for (int i = 0; i < 5; i++) {  		float[] row = f2 [i];  		float s = 0;  		for (int k = 0; k < size; k++) {  			s += row [k] * column [k];  		}  		X [i] [j] = s;  	}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int j = 0; j < 5; j++) {  	for (int k = 0; k < 5; k++) {  		column [k] = f1 [k] [j];  	}  	for (int i = 0; i < 5; i++) {  		float[] row = f2 [i];  		float s = 0;  		for (int k = 0; k < size; k++) {  			s += row [k] * column [k];  		}  		X [i] [j] = s;  	}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int j = 0; j < 5; j++) {  	for (int k = 0; k < 5; k++) {  		column [k] = f1 [k] [j];  	}  	for (int i = 0; i < 5; i++) {  		float[] row = f2 [i];  		float s = 0;  		for (int k = 0; k < size; k++) {  			s += row [k] * column [k];  		}  		X [i] [j] = s;  	}  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int k = 0; k < 5; k++) {  	column [k] = f1 [k] [j];  }  
Magic Number,ImageResizer.Plugins.SimpleFilters,SimpleFilters,F:\newReposMay17\imazen_resizer\Plugins\SimpleFilters\SimpleFilters.cs,Multiply,The following statement contains a magic number: for (int i = 0; i < 5; i++) {  	float[] row = f2 [i];  	float s = 0;  	for (int k = 0; k < size; k++) {  		s += row [k] * column [k];  	}  	X [i] [j] = s;  }  
