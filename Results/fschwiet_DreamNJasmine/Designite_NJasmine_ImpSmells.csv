Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NJasmine.Extras,ZipDeployTools,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\ZipDeployTools.cs,UnzipFileToTempDirectory,Cyclomatic complexity of the method is 8
Long Parameter List,NJasmine.Core,SpecificationBuilder,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\SpecificationBuilder.cs,BuildSuiteForTextContext,The method has 5 parameters. Parameters: fixtureContext' testContext1' invoke' isRootSuite' explicitReason
Long Parameter List,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,Error,The method has 5 parameters. Parameters: testResult' multilineName' exception' traceMessages' failureSite
Long Parameter List,NJasmine.Core,UsingAppDomain,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\UsingAppDomain.cs,RunTests,The method has 5 parameters. Parameters: dllPath' appDomainWrapper' testNames' explictlyIncluding' sink
Long Statement,NJasmine.Core.Discovery,NameReservations,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\Discovery\NameReservations.cs,GetReservedNameLike,The length of the statement  "            IncrementTestNameUntilItsNot(result' name => _globallyAccumulatedTestNames.ContainsKey(name) && _globallyAccumulatedTestNames[name] == NameIs.Reserved); " is 152.
Long Statement,NJasmine.Core,SpecificationBuilder,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\SpecificationBuilder.cs,BuildTestFixture,The length of the statement  "            FixtureContext fixtureContext = new FixtureContext(nativeTestFactory' fixtureFactory' new NameReservations()' setupManager); " is 124.
Long Statement,NJasmine.Core,SpecificationBuilder,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\SpecificationBuilder.cs,BuildTestFixture,The length of the statement  "            var result = BuildSuiteForTextContext(fixtureContext' testContext' fixtureContext.GetSpecificationRootAction()' true' explicitReason); " is 134.
Long Statement,NJasmine.Core,SpecificationRunner,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\SpecificationRunner.cs,RunTest,The length of the statement  "                    var executionContext = new NJasmineTestRunContext(testContext.Position' testContext.FixtureContext.GlobalSetupManager' traceMessages1); " is 135.
Long Statement,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,BuildStackTrace,The length of the statement  "            for (Exception innerException = exception.InnerException; innerException != null; innerException = innerException.InnerException) " is 129.
Long Statement,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,BuildMessage,The length of the statement  "            for (Exception innerException = exception.InnerException; innerException != null; innerException = innerException.InnerException) " is 129.
Long Statement,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The length of the statement  "                string[] stackTrace = exception.StackTrace.Split(new string[] {Environment.NewLine}' StringSplitOptions.RemoveEmptyEntries).Select(l => l.Trim()).ToArray(); " is 156.
Long Statement,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The length of the statement  "                bool filterNJasmineInternals = !stackTrace.Any(l => l.StartsWith("at NJasmineTests"));  // don't filter for NJasmine's tests " is 124.
Long Statement,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The length of the statement  "                        sb.AppendLine(match.Groups[1].Value + match.Groups[3].Value.Replace(":line "' ":") + "  " + match.Groups[2].Value + match.Groups[3].Value); " is 139.
Long Statement,NJasmine.Extras,ZipDeployTools,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\ZipDeployTools.cs,UnzipFileToTempDirectory,The length of the statement  "            //        throw new Exception("7Zip extraction apparently failed- success message not found.  Actual 7Zip results written to console."); " is 136.
Long Statement,NJasmine,GivenWhenThenFixture,C:\repos\fschwiet_DreamNJasmine\NJasmine\GivenWhenThenFixture.cs,expectEventually,The length of the statement  "            RunSpecificationElement(new WaitUntilElement(ActualKeyword.expectEventually' expectation' msWaitMax ?? _msWaitMax' msWaitIncrement ?? _msWaitIncrement)); " is 153.
Long Statement,NJasmine,GivenWhenThenFixture,C:\repos\fschwiet_DreamNJasmine\NJasmine\GivenWhenThenFixture.cs,waitUntil,The length of the statement  "            RunSpecificationElement(new WaitUntilElement(ActualKeyword.waitUntil' expectation' msWaitMax ?? _msWaitMax' msWaitIncrement ?? _msWaitIncrement)); " is 146.
Empty Catch Block,NJasmine.Extras,DirectoryUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\DirectoryUtil.cs,DeleteDirectory,The method has an empty catch block.
Magic Number,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The following statement contains a magic number: try              {                  string[] stackTrace = exception.StackTrace.Split(new string[] {Environment.NewLine}' StringSplitOptions.RemoveEmptyEntries).Select(l => l.Trim()).ToArray();                    bool filterNJasmineInternals = !stackTrace.Any(l => l.StartsWith("at NJasmineTests"));  // don't filter for NJasmine's tests                    foreach(var line in stackTrace)                  {                      if (filterNJasmineInternals)                      {                          if (line.Trim().StartsWith("at NJasmine.Core"))                              continue;                            if (line.Trim().StartsWith("at NJasmine.NUnit"))                              continue;                      }                        var match = Regex.Match(line' @"^(\s*at )(.*\\)([^\\]*\.cs:line \d+)$");                        if (match.Success)                      {                          sb.AppendLine(match.Groups[1].Value + match.Groups[3].Value.Replace(":line "' ":") + "  " + match.Groups[2].Value + match.Groups[3].Value);                      }                      else                      {                          sb.AppendLine(line);                      }                  }              }              catch (Exception)              {                  sb.Append("No stack trace available");              }
Magic Number,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The following statement contains a magic number: try              {                  string[] stackTrace = exception.StackTrace.Split(new string[] {Environment.NewLine}' StringSplitOptions.RemoveEmptyEntries).Select(l => l.Trim()).ToArray();                    bool filterNJasmineInternals = !stackTrace.Any(l => l.StartsWith("at NJasmineTests"));  // don't filter for NJasmine's tests                    foreach(var line in stackTrace)                  {                      if (filterNJasmineInternals)                      {                          if (line.Trim().StartsWith("at NJasmine.Core"))                              continue;                            if (line.Trim().StartsWith("at NJasmine.NUnit"))                              continue;                      }                        var match = Regex.Match(line' @"^(\s*at )(.*\\)([^\\]*\.cs:line \d+)$");                        if (match.Success)                      {                          sb.AppendLine(match.Groups[1].Value + match.Groups[3].Value.Replace(":line "' ":") + "  " + match.Groups[2].Value + match.Groups[3].Value);                      }                      else                      {                          sb.AppendLine(line);                      }                  }              }              catch (Exception)              {                  sb.Append("No stack trace available");              }
Magic Number,NJasmine.Core,TestResultUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Core\TestResultUtil.cs,GetStackTrace,The following statement contains a magic number: try              {                  string[] stackTrace = exception.StackTrace.Split(new string[] {Environment.NewLine}' StringSplitOptions.RemoveEmptyEntries).Select(l => l.Trim()).ToArray();                    bool filterNJasmineInternals = !stackTrace.Any(l => l.StartsWith("at NJasmineTests"));  // don't filter for NJasmine's tests                    foreach(var line in stackTrace)                  {                      if (filterNJasmineInternals)                      {                          if (line.Trim().StartsWith("at NJasmine.Core"))                              continue;                            if (line.Trim().StartsWith("at NJasmine.NUnit"))                              continue;                      }                        var match = Regex.Match(line' @"^(\s*at )(.*\\)([^\\]*\.cs:line \d+)$");                        if (match.Success)                      {                          sb.AppendLine(match.Groups[1].Value + match.Groups[3].Value.Replace(":line "' ":") + "  " + match.Groups[2].Value + match.Groups[3].Value);                      }                      else                      {                          sb.AppendLine(line);                      }                  }              }              catch (Exception)              {                  sb.Append("No stack trace available");              }
Magic Number,NJasmine.Extras,DirectoryUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\DirectoryUtil.cs,DeleteDirectory,The following statement contains a magic number: const int retries = 15;
Magic Number,NJasmine.Extras,DirectoryUtil,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\DirectoryUtil.cs,DeleteDirectory,The following statement contains a magic number: for (int i = 0; i < retries; i++)              {                  try                  {                      if (Directory.Exists(directory) == false)                          return;                        File.SetAttributes(directory' FileAttributes.Normal);                      Directory.Delete(directory' true);                      return;                  }                  catch (IOException)                  {                      foreach (var childDir in Directory.GetDirectories(directory))                      {                          try                          {                              File.SetAttributes(childDir' FileAttributes.Normal);                          }                          catch(IOException)                          {                          }                      }                        Thread.Sleep(100);                  }              }
Magic Number,NJasmine.Extras,ZipDeployTools,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\ZipDeployTools.cs,UnzipFileToTempDirectory,The following statement contains a magic number: while ((theEntry = s.GetNextEntry()) != null)              {                  string directoryName = tempPath;                  // create directory                   if (directoryName != "")                  {                      Directory.CreateDirectory(directoryName);                  }                  string fileName = Path.GetFileName(theEntry.Name);                  if (fileName != String.Empty)                  {                      if (theEntry.Name.IndexOf(".ini") < 0)                      {                          string fullPath = directoryName + "\\" + theEntry.Name;                          fullPath = fullPath.Replace("\\ "' "\\");                          string fullDirPath = Path.GetDirectoryName(fullPath);                          if (!Directory.Exists(fullDirPath)) Directory.CreateDirectory(fullDirPath);                          FileStream streamWriter = File.Create(fullPath);                          int size = 2048;                          byte[] data = new byte[2048];                          while (true)                          {                              size = s.Read(data' 0' data.Length);                              if (size > 0)                              {                                  streamWriter.Write(data' 0' size);                              }                              else                              {                                  break;                              }                          }                          streamWriter.Close();                      }                  }                  else if (theEntry.Name.EndsWith("/"))                  {                      Directory.CreateDirectory(Path.Combine(directoryName' theEntry.Name.TrimEnd(new char[] {'/'})));                  }              }
Magic Number,NJasmine.Extras,ZipDeployTools,C:\repos\fschwiet_DreamNJasmine\NJasmine\Extras\ZipDeployTools.cs,UnzipFileToTempDirectory,The following statement contains a magic number: while ((theEntry = s.GetNextEntry()) != null)              {                  string directoryName = tempPath;                  // create directory                   if (directoryName != "")                  {                      Directory.CreateDirectory(directoryName);                  }                  string fileName = Path.GetFileName(theEntry.Name);                  if (fileName != String.Empty)                  {                      if (theEntry.Name.IndexOf(".ini") < 0)                      {                          string fullPath = directoryName + "\\" + theEntry.Name;                          fullPath = fullPath.Replace("\\ "' "\\");                          string fullDirPath = Path.GetDirectoryName(fullPath);                          if (!Directory.Exists(fullDirPath)) Directory.CreateDirectory(fullDirPath);                          FileStream streamWriter = File.Create(fullPath);                          int size = 2048;                          byte[] data = new byte[2048];                          while (true)                          {                              size = s.Read(data' 0' data.Length);                              if (size > 0)                              {                                  streamWriter.Write(data' 0' size);                              }                              else                              {                                  break;                              }                          }                          streamWriter.Close();                      }                  }                  else if (theEntry.Name.EndsWith("/"))                  {                      Directory.CreateDirectory(Path.Combine(directoryName' theEntry.Name.TrimEnd(new char[] {'/'})));                  }              }
