Implementation smell,Namespace,Class,File,Method,Description
Long Method,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The method has 133 lines of code.
Long Method,NJasmineTests.Export,NUnitFixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitFixtureResultTest.cs,Specify,The method has 162 lines of code.
Long Parameter List,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The method has 7 parameters. Parameters: totalCount' errorCount' failureCount' aSuiteName' aSuiteResult' aTestName' aStackTrace
Long Identifier,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The length of the parameter delayedAssertionImplementation is 30.
Long Statement,NJasmineTests.Core,can_detect_ExplicitAttribute_reason,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\can_detect_ExplicitAttribute_reason.cs,Specify,The length of the statement  "                expect(() => ExplicitAttributeReader.GetFor(typeof(ClassWithExplicitAttribute)) == "ClassWithExplicitAttribute has attribute ExplicitAttribute."); " is 146.
Long Statement,NJasmineTests.Export,NUnitBaseResult,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitBaseResult.cs,thatHasResult,The length of the statement  "            Assert.AreEqual(inconclusive' result' String.Format("Expected {0} named {1} to be {2}."' _descriptiveNameOfResultType' _name' inconclusive)); " is 141.
Long Statement,NJasmineTests.Export,NUnitFixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitFixtureResultTest.cs,CheckScenario,The length of the statement  "            CheckScenariosCauseErrorWithMessageContaining(new [] {new KeyValuePair<string' TestDelegate>(scenarioName' scenarioAction)}' expectedMessage); " is 142.
Long Statement,NJasmineTests.Export,NUnitFixtureResult,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitFixtureResult.cs,hasTestWithFullName,The length of the statement  "            var tests = _doc.Descendants("test-case").Where(e => e.Attribute("name") != null && e.Attribute("name").Value.Equals(name' StringComparison.InvariantCultureIgnoreCase)); " is 169.
Long Statement,NJasmineTests.Export,NUnitFixtureResult,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitFixtureResult.cs,FindSuite,The length of the statement  "            var suites = allSuites.Where(e => e.Attribute("name") != null && e.Attribute("name").Value.Equals(expectedSuiteName' StringComparison.InvariantCultureIgnoreCase)); " is 163.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "<test-results name=""C:\src\NJasmine\build\NJasmine.tests.dll"" total=""$totalCount"" errors=""$errorCount"" failures=""$failureCount"" not-run=""2"" inconclusive=""0"" ignored=""0"" skipped=""0"" invalid=""2"" date=""2011-07-13"" time=""21:33:22""> " is 249.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "  <environment nunit-version=""2.5.9.10348"" clr-version=""2.0.50727.5446"" os-version=""Microsoft Windows NT 6.1.7601 Service Pack 1"" platform=""Win32NT"" cwd=""C:\src\NJasmine"" machine-name=""NZNZNZ6"" user=""user"" user-domain=""nznznz6"" /> " is 244.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "  <test-suite type=""Assembly"" name=""C:\src\NJasmine\build\NJasmine.tests.dll"" executed=""True"" result=""Success"" success=""True"" time=""0.805"" asserts=""0""> " is 163.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "      <test-suite type=""Namespace"" name=""$aSuiteName"" executed=""True"" result=""$aSuiteResult"" success=""True"" time=""0.783"" asserts=""0""> " is 141.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "          <test-suite type=""Namespace"" name=""Core"" executed=""True"" result=""Success"" success=""True"" time=""0.491"" asserts=""0""> " is 128.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "              <test-suite type=""TestFixture"" name=""build_and_run_suite_with_loops"" executed=""True"" result=""Success"" success=""True"" time=""0.271"" asserts=""0""> " is 156.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "                  <test-case name=""NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_a1"" executed=""True"" result=""Success"" success=""True"" time=""0.019"" asserts=""1"" /> " is 172.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "                  <test-case name=""NJasmineTests.Core.build_and_run_suite_with_loops.can_run_tests_a3"" executed=""True"" result=""Success"" success=""True"" time=""0.001"" asserts=""1"" /> " is 172.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "        <test-case name=""NJasmineTests.Specs.beforeAll.beforeAll_can_use_expectations' when using expect within beforeAll' fails"" executed=""True"" result=""Error"" success=""False"" time=""0.060"" asserts=""0""> " is 206.
Long Statement,NJasmineTests.Export,NUnitSampleData,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSampleData.cs,GetSampleXmlResult,The length of the statement  "          <property name=""MultilineName"" value=""NJasmineTests.Specs.beforeAll.beforeAll_can_use_expectations'&#xA;when using expect within beforeAll'&#xA;fails"" /> " is 157.
Long Statement,NJasmineTests.Export,NUnitSuiteResult,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\NUnitSuiteResult.cs,doesNotHaveTestContaining,The length of the statement  "            Assert.IsEmpty(matchingTests' String.Format("Expected not to have tests containing {0}' found: {1}"' skipped' string.Join("' "' matchingTests.Select(t => t.Attribute("name").Value)))); " is 184.
Long Statement,NJasmineTests.Export,VS2012FixtureResult,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResult.cs,GetResultSummaryCounts,The length of the statement  "            var resultSummary = _trxXDocument.Descendants(_namespace + "ResultSummary").Single().Descendants(_namespace + "Counters").Single(); " is 131.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "    <Counters total='1' executed='1' passed='0' failed='1' error='0' timeout='0' aborted='0' inconclusive='0' passedButRunAborted='0' notRunnable='0' notExecuted='0' disconnected='0' warning='0' completed='0' inProgress='0' pending='0' /> " is 234.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "    <Counters total='1' executed='0' passed='0' failed='0' error='0' timeout='0' aborted='0' inconclusive='0' passedButRunAborted='0' notRunnable='0' notExecuted='0' disconnected='0' warning='0' completed='0' inProgress='0' pending='0' /> " is 234.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "                var result = @"<?xml version='1.0' encoding='UTF-8'?><TestRun xmlns='http://microsoft.com/schemas/VisualStudio/TeamTest/2010'></TestRun>"; " is 138.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "                then("succeed when checking for existing trace statements"' () => results.hasTrace("test started' before include of a\nafter include of a")); " is 141.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "                then("fail when checking for non-existing trace statements"' () => Assert.Throws<AssertionException>(() => results.hasTrace("zippity bop"))); " is 141.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at Expect.cs:11  NJasmine.Extras.Expect.That(Expression`1 expectation) in c:\src\NJasmine\NJasmine\Extras\Expect.cs:line 11 " is 123.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at GivenWhenThenFixture.cs:186  NJasmine.GivenWhenThenFixture.expect(Expression`1 expectation) in c:\src\NJasmine\NJasmine\GivenWhenThenFixture.cs:line 186 " is 155.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at stacktrace_has_NJasmine_internal_calls_removed.cs:24  NamespaceIsntNJasmineTests.stacktrace_has_NJasmine_internal_calls_removed.&lt;Specify&gt;b__2() in c:\src\NJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs:line 24 " is 280.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at GivenWhenThenFixture.cs:50  NJasmine.GivenWhenThenFixture.then(String description' Action test) in c:\src\NJasmine\NJasmine\GivenWhenThenFixture.cs:line 50 " is 158.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at stacktrace_has_NJasmine_internal_calls_removed.cs:22  NamespaceIsntNJasmineTests.stacktrace_has_NJasmine_internal_calls_removed.&lt;Specify&gt;b__1() in c:\src\NJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs:line 22 " is 280.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at GivenWhenThenFixture.cs:40  NJasmine.GivenWhenThenFixture.when(String description' Action specification) in c:\src\NJasmine\NJasmine\GivenWhenThenFixture.cs:line 40 " is 167.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at stacktrace_has_NJasmine_internal_calls_removed.cs:20  NamespaceIsntNJasmineTests.stacktrace_has_NJasmine_internal_calls_removed.&lt;Specify&gt;b__0() in c:\src\NJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs:line 20 " is 280.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at GivenWhenThenFixture.cs:30  NJasmine.GivenWhenThenFixture.given(String description' Action specification) in c:\src\NJasmine\NJasmine\GivenWhenThenFixture.cs:line 30 " is 168.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "at stacktrace_has_NJasmine_internal_calls_removed.cs:18  NamespaceIsntNJasmineTests.stacktrace_has_NJasmine_internal_calls_removed.Specify() in c:\src\NJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs:line 18 " is 268.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "<TestRun id='e26bf0df-66b5-41f8-929c-39ae8e54e752' name='user@NZNZNZ7 2012-09-02 14:09:18' runUser='NZNZNZ7\user' xmlns='http://microsoft.com/schemas/VisualStudio/TeamTest/2010'> " is 178.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,Specify,The length of the statement  "    <UnitTestResult executionId='7efd3326-9935-4570-873c-6727d8000433' testId='9265fd75-d9d2-45d6-8565-fb155797df38' testName='NamespaceIsntNJasmineTests.stacktrace_has_NJasmine_internal_calls_removed' given some context' when some action' then it fails' computerName='NZNZNZ7' startTime='2012-09-02T14:09:18.6021888-07:00' endTime='2012-09-02T14:09:18.6021888-07:00' testType='13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b' outcome='Failed' testListId='8c84fa94-04c1-424b-9868-57a2d4851a1d' relativeResultsDirectory='7efd3326-9935-4570-873c-6727d8000433'> " is 543.
Long Statement,NJasmineTests.Export,VS2012FixtureResultTest,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Export\VS2012FixtureResultTest.cs,a_fixture_result_with_1_success,The length of the statement  "    <Counters total='1' executed='1' passed='1' failed='0' error='0' timeout='0' aborted='0' inconclusive='0' passedButRunAborted='0' notRunnable='0' notExecuted='0' disconnected='0' warning='0' completed='0' inProgress='0' pending='0' /> " is 234.
Long Statement,NJasmineTests.Specs.cleanup_any_IDisposable,ObservableDisposable,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\cleanup_any_IDisposable\setup_results_are_disposed_automatically.cs,Dispose,The length of the statement  "                GivenWhenThenFixtureTracingToConsole.Trace("disposing " + GivenWhenThenFixtureTracingToConsole.GetTypeShortName(this.GetType())); " is 129.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' given a condition that eventually evaluates to true' a normal expect works when no waits are left") " is 216.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' given a condition that eventually evaluates to true' a normal expect fails when waits are left") " is 213.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' given a condition that eventually evaluates to true' waitUntil will try multiple times") " is 205.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' given a condition that eventually evaluates to true' expectEventually will try multiple times") " is 212.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' waitUntil can be called during discovery' doesnt prevent discovery") " is 185.
Long Statement,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("waitUntil() or expectEventually() can be used to have the test wait until a condition passes' expectEventually can be called during discovery' doesnt prevent discovery") " is 192.
Long Statement,NJasmineTests.Specs.report_test_failures_usefully,reports_exception_at_outermost_scope,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\reports_exception_at_outermost_scope.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTestWithFullName("NJasmineTests.Specs.report_test_failures_usefully.reports_exception_at_outermost_scope").thatFails() " is 135.
Long Statement,NJasmineTests.Specs,can_trace_help_message_for_failure_case,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\can_trace_help_message_for_failure_case.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("globally tracked trace information only applies to the correct scope' scope with trace' test with trace") " is 128.
Long Statement,NJasmineTests.Specs,can_nest_contexts,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\can_nest_contexts.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("given the environment is in a particular state' when the system under test is used in a particular manner' then a particular result is expected"); " is 169.
Long Statement,NJasmineTests.Specs,can_nest_contexts,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\can_nest_contexts.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("given the environment is in a particular state' given the environment is in an even more particular state' when the system is used in another manner' then another result is expected"); " is 207.
Long Statement,NJasmineTests.Specs,can_nest_contexts,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\can_nest_contexts.cs,Verify_NJasmine_implementation,The length of the statement  "            fixtureResult.hasTest("given the environment is in a particular state' given the environment is in an even more particular state' when the system is used in another manner' then yet another result is expected"); " is 211.
Long Statement,NJasmineTests.Specs,some_Nunit_fixture_a,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\imports_NUnit_fixture.cs,FixtureTearDown,The length of the statement  "            imports_NUnit_fixture.Trace("FixtureTearDown " + GivenWhenThenFixtureTracingToConsole.GetTypeShortName(this.GetType())); " is 120.
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(2)] == "a3");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(3)] == "nested");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(3' 0)] == "b1");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(3' 1)] == "b2");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(3' 2)] == "b3");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_load_tests,The following statement contains a magic number: expect(() => nativeTestFactory.Results[TestPosition.At(3' 2)] == "b3");
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_run_tests_a3,The following statement contains a magic number: expect_test_to_observe(TestPosition.At(2)' new List<string>()              {                  "1"'                  "a1"'                  "a2"'                  "a3"'                  "ai3"'                  "2"'                  "5"              });
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_run_tests_b1,The following statement contains a magic number: expect_test_to_observe(TestPosition.At(3' 0)' new List<string>()              {                  "1"'                  "a1"'                  "a2"'                  "a3"'                  "2"'                  "3"'                  "b1"'                  "bi1"'                  "b2"'                  "b3"'                  "4"'                  "5"              });
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_run_tests_b3,The following statement contains a magic number: expect_test_to_observe(TestPosition.At(3' 2)' new List<string>()              {                  "1"'                  "a1"'                  "a2"'                  "a3"'                  "2"'                  "3"'                  "b1"'                  "b2"'                  "b3"'                  "bi3"'                  "4"'                  "5"              });
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_run_tests_b3,The following statement contains a magic number: expect_test_to_observe(TestPosition.At(3' 2)' new List<string>()              {                  "1"'                  "a1"'                  "a2"'                  "a3"'                  "2"'                  "3"'                  "b1"'                  "b2"'                  "b3"'                  "bi3"'                  "4"'                  "5"              });
Magic Number,NJasmineTests.Core,build_and_run_suite_with_loops,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,can_run_tests_c,The following statement contains a magic number: expect_test_to_observe(TestPosition.At(4)' new List<string>()              {                  "1"'                  "a1"'                  "a2"'                  "a3"'                  "2"'                  "5"'                  "c"              });
Magic Number,NJasmineTests.Core,has_test_in_loop,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,Specify,The following statement contains a magic number: Enumerable.Range(1'3)
Magic Number,NJasmineTests.Core,has_test_in_loop,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\build_and_run_suite_with_loops.cs,Specify,The following statement contains a magic number: describe("nested"' () =>                  {                      Observe("3");                        foreach(var i in Enumerable.Range(1'3))                      {                          Observe("b" + i);                            it("b" + i' () =>                          {                              Observe("bi" + i);                          });                      }                        Observe("4");                  });
Magic Number,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The following statement contains a magic number: given("a fixture with global setup"' delegate              {                  var fixture = new LambdaFixture()                  {                      LambdaSpecify = f =>                      {                          var firstSetup = f.beforeAll(delegate                          {                              recording.Add("beforeAll " + tracer++);                              return "beforeAll result " + tracer++;                          });                            f.afterAll(delegate                          {                              recording.Add("first setup was: " + firstSetup);                          });                            f.it("tests something"' delegate                          {                          });                            f.describe("some nested tests"' delegate                          {                              f.beforeAll(() => recording.Add("nested beforeAll " + tracer++));                              f.afterAll(delegate                              {                                  recording.Add("nested afterAll " + tracer++);                              });                                f.it("a nested test"' delegate                              {                                  int i = 0;                              });                          });                            f.describe("more nested tests"' delegate                          {                              f.it("has a test"' delegate                              {                                });                          });                      }                  };                    var sut = arrange(() => new GlobalSetupManager(() => fixture));                  cleanup(() => sut.Close());                    when("a test is going to be run"' delegate                  {                      beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(2)));                        then("the global setup has ran"' delegate                      {                          Assert.That(recording' Is.EquivalentTo(new[] {"beforeAll 0"}));                      });                        then("the global setup result is available"' delegate                      {                          expect(() => "beforeAll result 1" == sut.GetSetupResultAt<string>(TestPosition.At(0)));                      });                        when("a later nested test is going to be ran"' delegate                      {                            beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(3' 2)));                            then("the global setup has ran"' delegate                          {                              Assert.That(recording' Is.EquivalentTo(new[]                              {                                  "beforeAll 0"'                                  "nested beforeAll 2"'                              }));                          });                            when("a later test nested in another block is going to be ran"' delegate                          {                              beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(4' 0)));                                then("the global setup has ran"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"                                  }));                              });                          });                            when("we're done running tests"' delegate                          {                              beforeEach(() => sut.Cleanup(TestPosition.At()));                                then("expected cleanup runs"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"'                                      "first setup was: beforeAll result 1"                                  }));                              });                                then("the setup thread finishes"' delegate                              {                                  expect(() => !sut.HasThread());                              });                          });                      });                  });              });
Magic Number,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The following statement contains a magic number: given("a fixture with global setup"' delegate              {                  var fixture = new LambdaFixture()                  {                      LambdaSpecify = f =>                      {                          var firstSetup = f.beforeAll(delegate                          {                              recording.Add("beforeAll " + tracer++);                              return "beforeAll result " + tracer++;                          });                            f.afterAll(delegate                          {                              recording.Add("first setup was: " + firstSetup);                          });                            f.it("tests something"' delegate                          {                          });                            f.describe("some nested tests"' delegate                          {                              f.beforeAll(() => recording.Add("nested beforeAll " + tracer++));                              f.afterAll(delegate                              {                                  recording.Add("nested afterAll " + tracer++);                              });                                f.it("a nested test"' delegate                              {                                  int i = 0;                              });                          });                            f.describe("more nested tests"' delegate                          {                              f.it("has a test"' delegate                              {                                });                          });                      }                  };                    var sut = arrange(() => new GlobalSetupManager(() => fixture));                  cleanup(() => sut.Close());                    when("a test is going to be run"' delegate                  {                      beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(2)));                        then("the global setup has ran"' delegate                      {                          Assert.That(recording' Is.EquivalentTo(new[] {"beforeAll 0"}));                      });                        then("the global setup result is available"' delegate                      {                          expect(() => "beforeAll result 1" == sut.GetSetupResultAt<string>(TestPosition.At(0)));                      });                        when("a later nested test is going to be ran"' delegate                      {                            beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(3' 2)));                            then("the global setup has ran"' delegate                          {                              Assert.That(recording' Is.EquivalentTo(new[]                              {                                  "beforeAll 0"'                                  "nested beforeAll 2"'                              }));                          });                            when("a later test nested in another block is going to be ran"' delegate                          {                              beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(4' 0)));                                then("the global setup has ran"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"                                  }));                              });                          });                            when("we're done running tests"' delegate                          {                              beforeEach(() => sut.Cleanup(TestPosition.At()));                                then("expected cleanup runs"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"'                                      "first setup was: beforeAll result 1"                                  }));                              });                                then("the setup thread finishes"' delegate                              {                                  expect(() => !sut.HasThread());                              });                          });                      });                  });              });
Magic Number,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The following statement contains a magic number: given("a fixture with global setup"' delegate              {                  var fixture = new LambdaFixture()                  {                      LambdaSpecify = f =>                      {                          var firstSetup = f.beforeAll(delegate                          {                              recording.Add("beforeAll " + tracer++);                              return "beforeAll result " + tracer++;                          });                            f.afterAll(delegate                          {                              recording.Add("first setup was: " + firstSetup);                          });                            f.it("tests something"' delegate                          {                          });                            f.describe("some nested tests"' delegate                          {                              f.beforeAll(() => recording.Add("nested beforeAll " + tracer++));                              f.afterAll(delegate                              {                                  recording.Add("nested afterAll " + tracer++);                              });                                f.it("a nested test"' delegate                              {                                  int i = 0;                              });                          });                            f.describe("more nested tests"' delegate                          {                              f.it("has a test"' delegate                              {                                });                          });                      }                  };                    var sut = arrange(() => new GlobalSetupManager(() => fixture));                  cleanup(() => sut.Close());                    when("a test is going to be run"' delegate                  {                      beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(2)));                        then("the global setup has ran"' delegate                      {                          Assert.That(recording' Is.EquivalentTo(new[] {"beforeAll 0"}));                      });                        then("the global setup result is available"' delegate                      {                          expect(() => "beforeAll result 1" == sut.GetSetupResultAt<string>(TestPosition.At(0)));                      });                        when("a later nested test is going to be ran"' delegate                      {                            beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(3' 2)));                            then("the global setup has ran"' delegate                          {                              Assert.That(recording' Is.EquivalentTo(new[]                              {                                  "beforeAll 0"'                                  "nested beforeAll 2"'                              }));                          });                            when("a later test nested in another block is going to be ran"' delegate                          {                              beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(4' 0)));                                then("the global setup has ran"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"                                  }));                              });                          });                            when("we're done running tests"' delegate                          {                              beforeEach(() => sut.Cleanup(TestPosition.At()));                                then("expected cleanup runs"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"'                                      "first setup was: beforeAll result 1"                                  }));                              });                                then("the setup thread finishes"' delegate                              {                                  expect(() => !sut.HasThread());                              });                          });                      });                  });              });
Magic Number,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The following statement contains a magic number: given("a fixture with global setup"' delegate              {                  var fixture = new LambdaFixture()                  {                      LambdaSpecify = f =>                      {                          var firstSetup = f.beforeAll(delegate                          {                              recording.Add("beforeAll " + tracer++);                              return "beforeAll result " + tracer++;                          });                            f.afterAll(delegate                          {                              recording.Add("first setup was: " + firstSetup);                          });                            f.it("tests something"' delegate                          {                          });                            f.describe("some nested tests"' delegate                          {                              f.beforeAll(() => recording.Add("nested beforeAll " + tracer++));                              f.afterAll(delegate                              {                                  recording.Add("nested afterAll " + tracer++);                              });                                f.it("a nested test"' delegate                              {                                  int i = 0;                              });                          });                            f.describe("more nested tests"' delegate                          {                              f.it("has a test"' delegate                              {                                });                          });                      }                  };                    var sut = arrange(() => new GlobalSetupManager(() => fixture));                  cleanup(() => sut.Close());                    when("a test is going to be run"' delegate                  {                      beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(2)));                        then("the global setup has ran"' delegate                      {                          Assert.That(recording' Is.EquivalentTo(new[] {"beforeAll 0"}));                      });                        then("the global setup result is available"' delegate                      {                          expect(() => "beforeAll result 1" == sut.GetSetupResultAt<string>(TestPosition.At(0)));                      });                        when("a later nested test is going to be ran"' delegate                      {                            beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(3' 2)));                            then("the global setup has ran"' delegate                          {                              Assert.That(recording' Is.EquivalentTo(new[]                              {                                  "beforeAll 0"'                                  "nested beforeAll 2"'                              }));                          });                            when("a later test nested in another block is going to be ran"' delegate                          {                              beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(4' 0)));                                then("the global setup has ran"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"                                  }));                              });                          });                            when("we're done running tests"' delegate                          {                              beforeEach(() => sut.Cleanup(TestPosition.At()));                                then("expected cleanup runs"' delegate                              {                                  Assert.That(recording' Is.EquivalentTo(new[]                                  {                                      "beforeAll 0"'                                      "nested beforeAll 2"'                                      "nested afterAll 3"'                                      "first setup was: beforeAll result 1"                                  }));                              });                                then("the setup thread finishes"' delegate                              {                                  expect(() => !sut.HasThread());                              });                          });                      });                  });              });
Magic Number,NJasmineTests.Core,GlobalSetupManagerTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\GlobalSetupManagerTests.cs,Specify,The following statement contains a magic number: given("a fixture with an error at its outer scope"' delegate              {                  var fixture = new LambdaFixture()                  {                      LambdaSpecify = f =>                      {                          int i = 0;                          int j = 100 / i;                            it("has a test"' delegate                          {                            });                      }                  };                    var sut = arrange(() => new GlobalSetupManager(() => fixture));                  cleanup(() => sut.Close());                    when("a test is to be ran"' delegate                  {                      Exception exception = beforeEach(() => sut.PrepareForTestPosition(TestPosition.At(0)));                        then("the exception is reported"' delegate                      {                          expect(() => exception != null);                      });                        when("we're done running tests"' delegate                      {                          expect(() => sut.HasThread());                          beforeEach(() => sut.Cleanup(TestPosition.At()));                            then("the setup thread finishes"' delegate                          {                              expect(() => !sut.HasThread());                          });                      });                  });              });
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: SpecificationRunner.RunTest(new TestContext()              {                  FixtureContext = new FixtureContext(null' () => fixture' null' fakeGlobalSetupManager)'                  Name = new TestName()'                  Position = TestPosition.At(1' 3' 2)              }' traceMessages);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: SpecificationRunner.RunTest(new TestContext()              {                  FixtureContext = new FixtureContext(null' () => fixture' null' fakeGlobalSetupManager)'                  Name = new TestName()'                  Position = TestPosition.At(1' 3' 2)              }' traceMessages);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,can_be_ran,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' 7' -2' -3' -4' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: TestPosition testPosition = TestPosition.At(1' 3' 2);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: TestPosition testPosition = TestPosition.At(1' 3' 2);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,run_a_test_with_setup,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\run_a_test_with_setup.cs,duplicated_runs_dont_accidentally_accumulate_afterEach_calls,The following statement contains a magic number: expect_observation_matches(fixture.Observations' 1' 2' 3' 4' 5' 6' -2' -3' -4' 7' 8);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position1 = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position1 = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position2 = TestPosition.At(4' 5' 6);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position2 = TestPosition.At(4' 5' 6);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position2 = TestPosition.At(4' 5' 6);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position3 = TestPosition.At(7' 8' 9);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position3 = TestPosition.At(7' 8' 9);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: var position3 = TestPosition.At(7' 8' 9);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => position1.Equals(TestPosition.At(1' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => position1.Equals(TestPosition.At(1' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: dictionary[position2] = 2;
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: dictionary[position3] = 3;
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(1'2'3)] == 1);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(1'2'3)] == 1);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(4'5'6)] == 2);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(4'5'6)] == 2);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(4'5'6)] == 2);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(4'5'6)] == 2);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(7' 8' 9)] == 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(7' 8' 9)] == 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(7' 8' 9)] == 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,can_be_used_with_dictionaries,The following statement contains a magic number: expect(() => dictionary[TestPosition.At(7' 8' 9)] == 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_Parent,The following statement contains a magic number: var position = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_Parent,The following statement contains a magic number: var position = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_Parent,The following statement contains a magic number: expect(() => position.Parent.Equals(TestPosition.At(1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: var position = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: var position = TestPosition.At(1' 2' 3);
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4' 0' 1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4' 0' 1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4' 0' 1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => position.IsAncestorOf(TestPosition.At(1' 2' 3' 4' 0' 1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => !position.IsAncestorOf(TestPosition.At(1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => !position.IsAncestorOf(TestPosition.At(3' 2' 1' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => !position.IsAncestorOf(TestPosition.At(3' 2' 1' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,test_IsAncestorOf,The following statement contains a magic number: expect(() => !position.IsAncestorOf(TestPosition.At(3' 2' 1' 4)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetFirstChildPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetFirstChildPosition().Equals(TestPosition.At(3' 1' 0' 10' 93' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,GetNextSiblingPosition,The following statement contains a magic number: expect(() => TestPosition.At(3' 1' 0' 10' 93).GetNextSiblingPosition().Equals(TestPosition.At(3' 1' 0' 10' 94)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0).IsOnPathTo(TestPosition.At(1' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0).IsOnPathTo(TestPosition.At(5)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0).IsOnPathTo(TestPosition.At(5' 123)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0).IsOnPathTo(TestPosition.At(5' 123)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 2)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 5' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7' 0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => TestPosition.At(0' 5).IsOnPathTo(TestPosition.At(0' 7' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(0' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 0' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 0' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 0' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 3' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 3' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 3' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(1' 3' 3)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Core,TestPositionTests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Core\TestPositionTests.cs,IsInScopeFor,The following statement contains a magic number: expect(() => !TestPosition.At(1' 2' 3).IsOnPathTo(TestPosition.At(2' 2' 2' 10)));
Magic Number,NJasmineTests.Specs.cleanup_any_IDisposable,setup_results_dont_have_to_be_disposable,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\cleanup_any_IDisposable\setup_results_dont_have_to_be_disposable.cs,Specify,The following statement contains a magic number: var i = arrange(() => 123);
Magic Number,NJasmineTests.Specs.cleanup_any_IDisposable,setup_results_dont_have_to_be_disposable,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\cleanup_any_IDisposable\setup_results_dont_have_to_be_disposable.cs,Specify,The following statement contains a magic number: describe("first describe block"' delegate              {                  var c = arrange(() => new some_observable_C());                                    it("a test"' delegate                  {                      expect(() => i == 123);                      expect(() => a != null);                      expect(() => b != null);                      expect(() => c != null);                  });              });
Magic Number,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The following statement contains a magic number: describe("waitUntil() or expectEventually() can be used to have the test wait until a condition passes"' delegate              {                  foreach(var kvp in new Tuple<Action<Expression<Func<bool>>' int?' int?>' string>[]                  {                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( waitUntil' "waitUntil")'                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( expectEventually' "expectEventually")                  })                  {                      var delayedAssertionImplementation = kvp.Item1;                      var delayedAssertionName = kvp.Item2;                        given("a condition that eventually evaluates to true"' delegate                      {                          it("a normal expect works when no waits are left"' delegate                          {                              WaitsLeft = 0;                              expect(() => Ready());                          });                            it("a normal expect fails when waits are left"' delegate                          {                              WaitsLeft = 1;                              expect(() => Ready());                          });                            it(delayedAssertionName + " will try multiple times"' delegate                          {                              setWaitTimeout(100);                              setWaitIncrement(5);                                WaitsLeft = 1;                                delayedAssertionImplementation(() => Ready()' null' null);                                delayedAssertionImplementation(() => Ready()' 2000' null);                          });                      });                        describe(delayedAssertionName + " can be called during discovery"' delegate                      {                          setWaitTimeout(5);                          setWaitIncrement(3);                            delayedAssertionImplementation(() => true' null' null);                          delayedAssertionImplementation(() => false' null' null);                            it("doesnt prevent discovery"' delegate                          {                            });                      });                  }              });
Magic Number,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The following statement contains a magic number: describe("waitUntil() or expectEventually() can be used to have the test wait until a condition passes"' delegate              {                  foreach(var kvp in new Tuple<Action<Expression<Func<bool>>' int?' int?>' string>[]                  {                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( waitUntil' "waitUntil")'                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( expectEventually' "expectEventually")                  })                  {                      var delayedAssertionImplementation = kvp.Item1;                      var delayedAssertionName = kvp.Item2;                        given("a condition that eventually evaluates to true"' delegate                      {                          it("a normal expect works when no waits are left"' delegate                          {                              WaitsLeft = 0;                              expect(() => Ready());                          });                            it("a normal expect fails when waits are left"' delegate                          {                              WaitsLeft = 1;                              expect(() => Ready());                          });                            it(delayedAssertionName + " will try multiple times"' delegate                          {                              setWaitTimeout(100);                              setWaitIncrement(5);                                WaitsLeft = 1;                                delayedAssertionImplementation(() => Ready()' null' null);                                delayedAssertionImplementation(() => Ready()' 2000' null);                          });                      });                        describe(delayedAssertionName + " can be called during discovery"' delegate                      {                          setWaitTimeout(5);                          setWaitIncrement(3);                            delayedAssertionImplementation(() => true' null' null);                          delayedAssertionImplementation(() => false' null' null);                            it("doesnt prevent discovery"' delegate                          {                            });                      });                  }              });
Magic Number,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The following statement contains a magic number: describe("waitUntil() or expectEventually() can be used to have the test wait until a condition passes"' delegate              {                  foreach(var kvp in new Tuple<Action<Expression<Func<bool>>' int?' int?>' string>[]                  {                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( waitUntil' "waitUntil")'                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( expectEventually' "expectEventually")                  })                  {                      var delayedAssertionImplementation = kvp.Item1;                      var delayedAssertionName = kvp.Item2;                        given("a condition that eventually evaluates to true"' delegate                      {                          it("a normal expect works when no waits are left"' delegate                          {                              WaitsLeft = 0;                              expect(() => Ready());                          });                            it("a normal expect fails when waits are left"' delegate                          {                              WaitsLeft = 1;                              expect(() => Ready());                          });                            it(delayedAssertionName + " will try multiple times"' delegate                          {                              setWaitTimeout(100);                              setWaitIncrement(5);                                WaitsLeft = 1;                                delayedAssertionImplementation(() => Ready()' null' null);                                delayedAssertionImplementation(() => Ready()' 2000' null);                          });                      });                        describe(delayedAssertionName + " can be called during discovery"' delegate                      {                          setWaitTimeout(5);                          setWaitIncrement(3);                            delayedAssertionImplementation(() => true' null' null);                          delayedAssertionImplementation(() => false' null' null);                            it("doesnt prevent discovery"' delegate                          {                            });                      });                  }              });
Magic Number,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The following statement contains a magic number: describe("waitUntil() or expectEventually() can be used to have the test wait until a condition passes"' delegate              {                  foreach(var kvp in new Tuple<Action<Expression<Func<bool>>' int?' int?>' string>[]                  {                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( waitUntil' "waitUntil")'                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( expectEventually' "expectEventually")                  })                  {                      var delayedAssertionImplementation = kvp.Item1;                      var delayedAssertionName = kvp.Item2;                        given("a condition that eventually evaluates to true"' delegate                      {                          it("a normal expect works when no waits are left"' delegate                          {                              WaitsLeft = 0;                              expect(() => Ready());                          });                            it("a normal expect fails when waits are left"' delegate                          {                              WaitsLeft = 1;                              expect(() => Ready());                          });                            it(delayedAssertionName + " will try multiple times"' delegate                          {                              setWaitTimeout(100);                              setWaitIncrement(5);                                WaitsLeft = 1;                                delayedAssertionImplementation(() => Ready()' null' null);                                delayedAssertionImplementation(() => Ready()' 2000' null);                          });                      });                        describe(delayedAssertionName + " can be called during discovery"' delegate                      {                          setWaitTimeout(5);                          setWaitIncrement(3);                            delayedAssertionImplementation(() => true' null' null);                          delayedAssertionImplementation(() => false' null' null);                            it("doesnt prevent discovery"' delegate                          {                            });                      });                  }              });
Magic Number,NJasmineTests.Specs.expectations,can_wait_for_a_condition_to_be_true,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\expectations\can_wait_for_a_condition_to_be_true.cs,Specify,The following statement contains a magic number: describe("waitUntil() or expectEventually() can be used to have the test wait until a condition passes"' delegate              {                  foreach(var kvp in new Tuple<Action<Expression<Func<bool>>' int?' int?>' string>[]                  {                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( waitUntil' "waitUntil")'                      new Tuple<Action<Expression<Func<bool>>' int?'int?>' string> ( expectEventually' "expectEventually")                  })                  {                      var delayedAssertionImplementation = kvp.Item1;                      var delayedAssertionName = kvp.Item2;                        given("a condition that eventually evaluates to true"' delegate                      {                          it("a normal expect works when no waits are left"' delegate                          {                              WaitsLeft = 0;                              expect(() => Ready());                          });                            it("a normal expect fails when waits are left"' delegate                          {                              WaitsLeft = 1;                              expect(() => Ready());                          });                            it(delayedAssertionName + " will try multiple times"' delegate                          {                              setWaitTimeout(100);                              setWaitIncrement(5);                                WaitsLeft = 1;                                delayedAssertionImplementation(() => Ready()' null' null);                                delayedAssertionImplementation(() => Ready()' 2000' null);                          });                      });                        describe(delayedAssertionName + " can be called during discovery"' delegate                      {                          setWaitTimeout(5);                          setWaitIncrement(3);                            delayedAssertionImplementation(() => true' null' null);                          delayedAssertionImplementation(() => false' null' null);                            it("doesnt prevent discovery"' delegate                          {                            });                      });                  }              });
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,reports_exception_at_outermost_scope,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\reports_exception_at_outermost_scope.cs,Specify,The following statement contains a magic number: int j = 5;
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,reports_exception_at_outermost_scope,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\reports_exception_at_outermost_scope.cs,Specify,The following statement contains a magic number: int i = 1 / (j - 5);
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,reports_exception_within_describe,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\reports_exception_within_describe.cs,Specify,The following statement contains a magic number: describe("broken describe"' delegate()              {                  it("inner test"' delegate()                  {                  });                    int j = 5;                  int i = 1 / (j - 5);              });
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,reports_exception_within_describe,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\reports_exception_within_describe.cs,Specify,The following statement contains a magic number: describe("broken describe"' delegate()              {                  it("inner test"' delegate()                  {                  });                    int j = 5;                  int i = 1 / (j - 5);              });
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,stacktrace_keeps_internal_calls_for_NJasmine_tests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_keeps_internal_calls_for_NJasmine_tests.cs,Specify,The following statement contains a magic number: given("some context"' delegate              {                  when("some action"' delegate                  {                      then("it fails"' delegate()                      {                          expect(() => 1 + 2 == 4);                      });                  });              });
Magic Number,NJasmineTests.Specs.report_test_failures_usefully,stacktrace_keeps_internal_calls_for_NJasmine_tests,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_keeps_internal_calls_for_NJasmine_tests.cs,Specify,The following statement contains a magic number: given("some context"' delegate              {                  when("some action"' delegate                  {                      then("it fails"' delegate()                      {                          expect(() => 1 + 2 == 4);                      });                  });              });
Magic Number,NamespaceIsntNJasmineTests,stacktrace_has_NJasmine_internal_calls_removed,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs,Specify,The following statement contains a magic number: given("some context"' delegate              {                  when("some action"' delegate                  {                      then("it fails"' delegate()                      {                          expect(() => 1 + 2 == 4);                      });                  });              });
Magic Number,NamespaceIsntNJasmineTests,stacktrace_has_NJasmine_internal_calls_removed,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\report_test_failures_usefully\stacktrace_has_NJasmine_internal_calls_removed.cs,Specify,The following statement contains a magic number: given("some context"' delegate              {                  when("some action"' delegate                  {                      then("it fails"' delegate()                      {                          expect(() => 1 + 2 == 4);                      });                  });              });
Magic Number,NJasmineTests.Specs.setup_shared_across_tests,afterAll_failures_only_fail_the_fixture,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\setup_shared_across_tests\afterAll_failures_only_fail_the_fixture.cs,Specify,The following statement contains a magic number: afterAll(delegate              {                  expect(() => 123 > 456);                              });
Magic Number,NJasmineTests.Specs.setup_shared_across_tests,afterAll_failures_only_fail_the_fixture,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\setup_shared_across_tests\afterAll_failures_only_fail_the_fixture.cs,Specify,The following statement contains a magic number: afterAll(delegate              {                  expect(() => 123 > 456);                              });
Magic Number,NJasmineTests.Specs.setup_shared_across_tests,beforeAll_can_return_a_value,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\setup_shared_across_tests\beforeAll_can_return_a_value.cs,Specify,The following statement contains a magic number: then("the value is reused for the third test"' delegate              {                  expect(() => perRunFixture.Value == 2);                    expect(() => perTestFixture.Value == 0);              });
Magic Number,NJasmineTests.Specs,duplicate_test_names_are_fine,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\duplicate_test_names_are_fine.cs,Specify,The following statement contains a magic number: describe("repeated describe"' delegate                  {                      it("repeated inner it"' delegate                      {                          Trace("repeated inner it " + i);                      });                        describe("repeated inner describe"' delegate                      {                          var numerator = 10;                          var denominator = 0;                          var result = numerator/denominator;                      });                  });
Magic Number,NJasmineTests.Specs,duplicate_test_names_are_fine,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\duplicate_test_names_are_fine.cs,Specify,The following statement contains a magic number: Enumerable.Range(1' 3)
Magic Number,NJasmineTests.Specs,constructor_is_run_once_per_test,D:\research\architectureSmells\repos\fschwiet_DreamNJasmine\NJasmine.Tests\Specs\constructor_is_run_once_per_test.cs,Specify,The following statement contains a magic number: i < 10
