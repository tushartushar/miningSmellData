Implementation smell,Namespace,Class,File,Method,Description
Long Method,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The method has 326 lines of code.
Long Method,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The method has 245 lines of code.
Long Method,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The method has 108 lines of code.
Complex Method,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,Cyclomatic complexity of the method is 10
Complex Method,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,Cyclomatic complexity of the method is 14
Long Statement,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,FrmMainFormClosing,The length of the statement  "                        @"Closing this form when you stopped streaming video to applications' will close this program completely. Are you sure?!"' " is 122.
Long Statement,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frm_Main)); " is 128.
Long Statement,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The length of the statement  "            this.lbl_wait.Font = new System.Drawing.Font("Microsoft YaHei UI"' 11.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Complex Conditional,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The conditional expression  "!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um)"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "!isSameDevice                          || (this.uTracker == null || this.hTracker == null || !this.uTracker.IsValid                              || !this.hTracker.IsValid)"  is complex.
Complex Conditional,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The conditional expression  "Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid"  is complex.
Empty Catch Block,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,RegisterFilter,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The method has an empty catch block.
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,ClearScreen,The following statement contains a magic number: Bitmap bi = new Bitmap(640' 480' PixelFormat.Format24bppRgb);
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,ClearScreen,The following statement contains a magic number: Bitmap bi = new Bitmap(640' 480' PixelFormat.Format24bppRgb);
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: lock (image)              {                  bool hd54 = image.Width == 1280 && image.Height == 1024;                  bool hd43 = image.Width == 1280 && image.Height == 960;                  int size = 640 * 480 * 3;                  if (hd54)                  {                      size = 1280 * 1024 * 3;                  }                  else if (hd43)                  {                      size = 1280 * 960 * 3;                  }                  if (!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43)                  {                      throw new ArgumentException("Bad image size");                  }                  if (image.PixelFormat != PixelFormat.Format24bppRgb)                  {                      throw new ArgumentException("Bad image format");                  }                  BitmapData bitData = image.LockBits(                      new Rectangle(new Point(0' 0)' image.Size)'                      ImageLockMode.ReadOnly'                      PixelFormat.Format24bppRgb);                  this.memoryAccessor.Write(FileSize - 1' (byte)1);                  if (hd54)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)1);                  }                  else if (hd43)                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)2);                  }                  else                  {                      this.memoryAccessor.Write(FileSize - 3' (byte)0);                  }                  byte* memAddress = (byte*)0;                  this.memoryAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref memAddress);                  memcpy(new IntPtr(memAddress)' bitData.Scan0' (uint)size);                  this.memoryAccessor.SafeMemoryMappedViewHandle.ReleasePointer();                  image.UnlockBits(bitData);              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,HasServer,The following statement contains a magic number: if (this.file != null && this.memoryAccessor != null)              {                  this.memoryAccessor.Write(FileSize - 1' (byte)0);                  int tried = 0;                  while (tried < 10)                  {                      if (this.memoryAccessor.ReadByte(FileSize - 1) != 0)                      {                          return true;                      }                      Thread.Sleep(100);                      tried++;                  }              }
Magic Number,NiUI,BitmapBroadcaster,C:\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,HasServer,The following statement contains a magic number: if (this.file != null && this.memoryAccessor != null)              {                  this.memoryAccessor.Write(FileSize - 1' (byte)0);                  int tried = 0;                  while (tried < 10)                  {                      if (this.memoryAccessor.ReadByte(FileSize - 1) != 0)                      {                          return true;                      }                      Thread.Sleep(100);                      tried++;                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 16);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 16);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(44' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(44' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Location = new System.Drawing.Point(91' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Location = new System.Drawing.Point(91' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Location = new System.Drawing.Point(91' 40);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Location = new System.Drawing.Point(91' 40);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.TabIndex = 3;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 43);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 43);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(73' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(73' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Location = new System.Drawing.Point(622' 385);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Location = new System.Drawing.Point(622' 385);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.TabIndex = 10;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Size = new System.Drawing.Size(80' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Size = new System.Drawing.Size(80' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Size = new System.Drawing.Size(116' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Size = new System.Drawing.Size(116' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Size = new System.Drawing.Size(53' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Size = new System.Drawing.Size(53' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.TabIndex = 2;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Location = new System.Drawing.Point(11' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Location = new System.Drawing.Point(11' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Size = new System.Drawing.Size(450' 337);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Size = new System.Drawing.Size(450' 337);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.TabIndex = 15;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.halt_timer.Interval = 1000;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Location = new System.Drawing.Point(12' 67);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Location = new System.Drawing.Point(12' 67);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Size = new System.Drawing.Size(230' 89);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Size = new System.Drawing.Size(230' 89);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.TabIndex = 4;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Location = new System.Drawing.Point(12' 162);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Location = new System.Drawing.Point(12' 162);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Size = new System.Drawing.Size(230' 47);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Size = new System.Drawing.Size(230' 47);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.TabIndex = 5;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Size = new System.Drawing.Size(209' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Size = new System.Drawing.Size(209' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Location = new System.Drawing.Point(12' 215);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Location = new System.Drawing.Point(12' 215);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Size = new System.Drawing.Size(230' 45);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Size = new System.Drawing.Size(230' 45);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.TabIndex = 6;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(93' 20);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(93' 20);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(33' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(33' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Location = new System.Drawing.Point(12' 266);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Location = new System.Drawing.Point(12' 266);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Size = new System.Drawing.Size(230' 113);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Size = new System.Drawing.Size(230' 113);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.TabIndex = 7;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Size = new System.Drawing.Size(98' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Size = new System.Drawing.Size(98' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Location = new System.Drawing.Point(6' 88);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Location = new System.Drawing.Point(6' 88);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Size = new System.Drawing.Size(221' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Size = new System.Drawing.Size(221' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.TabIndex = 3;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Size = new System.Drawing.Size(147' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Size = new System.Drawing.Size(147' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.TabIndex = 2;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Size = new System.Drawing.Size(99' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Size = new System.Drawing.Size(99' 17);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Location = new System.Drawing.Point(248' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Location = new System.Drawing.Point(248' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Size = new System.Drawing.Size(471' 366);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Size = new System.Drawing.Size(471' 366);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.TabIndex = 11;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Location = new System.Drawing.Point(529' 385);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Location = new System.Drawing.Point(529' 385);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.TabIndex = 9;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Location = new System.Drawing.Point(15' 390);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Location = new System.Drawing.Point(15' 390);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Size = new System.Drawing.Size(165' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Size = new System.Drawing.Size(165' 13);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.TabIndex = 8;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Location = new System.Drawing.Point(404' 157);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Location = new System.Drawing.Point(404' 157);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Size = new System.Drawing.Size(164' 86);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Size = new System.Drawing.Size(164' 86);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.TabIndex = 13;
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(732' 417);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(732' 417);
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,IsNeedHalt,The following statement contains a magic number: if (this.broadcaster != null)              {                  if (this.broadcaster.HasClient || this.Visible)                  {                      this.iNoClient = 0;                      if (this.isIdle)                      {                          this.broadcaster.SendBitmap(Resources.PleaseWait);                          if (this.Start())                          {                              this.isIdle = false;                          }                          else                          {                              this.broadcaster.ClearScreen();                          }                      }                  }                  else                  {                      this.iNoClient++;                      if (this.iNoClient > 60 && !this.isIdle) // 1min of no data                      {                          this.isIdle = true;                          this.Stop(false);                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The following statement contains a magic number: if (!Settings.Default.DeviceURI.Equals(string.Empty))              {                  foreach (object item in this.cb_device.Items)                  {                      if (item is DeviceInfo                          && (item as DeviceInfo).Uri.Equals(                              Settings.Default.DeviceURI'                              StringComparison.CurrentCultureIgnoreCase))                      {                          this.cb_device.SelectedItem = item;                      }                  }                  this.DeviceChanged();                  this.cb_type.SelectedIndex = -1;                  if (Settings.Default.CameraType != -1)                  {                      foreach (object item in this.cb_type.Items)                      {                          if (Settings.Default.CameraType == 1 && item is string                              && (item as string).Equals("IR"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                          if (Settings.Default.CameraType == 2 && item is string                              && (item as string).Equals("Color"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                          if (Settings.Default.CameraType == 3 && item is string                              && (item as string).Equals("Depth"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The following statement contains a magic number: if (!Settings.Default.DeviceURI.Equals(string.Empty))              {                  foreach (object item in this.cb_device.Items)                  {                      if (item is DeviceInfo                          && (item as DeviceInfo).Uri.Equals(                              Settings.Default.DeviceURI'                              StringComparison.CurrentCultureIgnoreCase))                      {                          this.cb_device.SelectedItem = item;                      }                  }                  this.DeviceChanged();                  this.cb_type.SelectedIndex = -1;                  if (Settings.Default.CameraType != -1)                  {                      foreach (object item in this.cb_type.Items)                      {                          if (Settings.Default.CameraType == 1 && item is string                              && (item as string).Equals("IR"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                          if (Settings.Default.CameraType == 2 && item is string                              && (item as string).Equals("Color"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                          if (Settings.Default.CameraType == 3 && item is string                              && (item as string).Equals("Depth"' StringComparison.CurrentCultureIgnoreCase))                          {                              this.cb_type.SelectedItem = item;                          }                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following statement contains a magic number: if (selectedType != null)              {                  switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                          break;                      case "Depth":                          Settings.Default.CameraType = 3;                          break;                      case "IR":                          Settings.Default.CameraType = 1;                          break;                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following statement contains a magic number: if (selectedType != null)              {                  switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                          break;                      case "Depth":                          Settings.Default.CameraType = 3;                          break;                      case "IR":                          Settings.Default.CameraType = 1;                          break;                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: try              {                  if (Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid)                  {                      using (UserTrackerFrameRef userframe = this.uTracker.ReadFrame())                      {                          using (HandTrackerFrameRef handframe = this.hTracker.ReadFrame())                          {                              foreach (GestureData gesture in handframe.Gestures)                              {                                  if (!gesture.IsComplete)                                  {                                      continue;                                  }                                  PointF handPos = this.hTracker.ConvertHandCoordinatesToDepth(gesture.CurrentPosition);                                  short userId =                                      Marshal.ReadByte(                                          userframe.UserMap.Pixels + (int)(handPos.Y * userframe.UserMap.DataStrideBytes)                                          + (int)(handPos.X * 2));                                  if (userId > 0)                                  {                                      this.activeUserId = userId;                                  }                              }                              handframe.Release();                          }                          if (this.activeUserId > 0)                          {                              UserData user = userframe.GetUserById(this.activeUserId);                              if (user.IsValid && user.IsVisible && user.CenterOfMass.Z > 0)                              {                                  RectangleF position = new RectangleF(0' 0' 0' 0);                                  PointF botlocation = this.uTracker.ConvertJointCoordinatesToDepth(user.CenterOfMass);                                  int pSize =                                      (int)                                      (Math.Max((int)((4700 - user.CenterOfMass.Z) * 0.08)' 50)                                       * ((float)userframe.UserMap.FrameSize.Height / 480));                                  position.Y = (int)botlocation.Y - pSize;                                  position.Height = pSize;                                  position.X = (int)botlocation.X;                                  this.activePosition.X = position.X / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Width = position.Width / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Y = position.Y / userframe.UserMap.FrameSize.Height;                                  this.activePosition.Height = position.Height / userframe.UserMap.FrameSize.Height;                                  userframe.Release();                                  return;                              }                          }                          userframe.Release();                      }                  }              }              catch (Exception)              {              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: try              {                  if (Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid)                  {                      using (UserTrackerFrameRef userframe = this.uTracker.ReadFrame())                      {                          using (HandTrackerFrameRef handframe = this.hTracker.ReadFrame())                          {                              foreach (GestureData gesture in handframe.Gestures)                              {                                  if (!gesture.IsComplete)                                  {                                      continue;                                  }                                  PointF handPos = this.hTracker.ConvertHandCoordinatesToDepth(gesture.CurrentPosition);                                  short userId =                                      Marshal.ReadByte(                                          userframe.UserMap.Pixels + (int)(handPos.Y * userframe.UserMap.DataStrideBytes)                                          + (int)(handPos.X * 2));                                  if (userId > 0)                                  {                                      this.activeUserId = userId;                                  }                              }                              handframe.Release();                          }                          if (this.activeUserId > 0)                          {                              UserData user = userframe.GetUserById(this.activeUserId);                              if (user.IsValid && user.IsVisible && user.CenterOfMass.Z > 0)                              {                                  RectangleF position = new RectangleF(0' 0' 0' 0);                                  PointF botlocation = this.uTracker.ConvertJointCoordinatesToDepth(user.CenterOfMass);                                  int pSize =                                      (int)                                      (Math.Max((int)((4700 - user.CenterOfMass.Z) * 0.08)' 50)                                       * ((float)userframe.UserMap.FrameSize.Height / 480));                                  position.Y = (int)botlocation.Y - pSize;                                  position.Height = pSize;                                  position.X = (int)botlocation.X;                                  this.activePosition.X = position.X / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Width = position.Width / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Y = position.Y / userframe.UserMap.FrameSize.Height;                                  this.activePosition.Height = position.Height / userframe.UserMap.FrameSize.Height;                                  userframe.Release();                                  return;                              }                          }                          userframe.Release();                      }                  }              }              catch (Exception)              {              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: try              {                  if (Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid)                  {                      using (UserTrackerFrameRef userframe = this.uTracker.ReadFrame())                      {                          using (HandTrackerFrameRef handframe = this.hTracker.ReadFrame())                          {                              foreach (GestureData gesture in handframe.Gestures)                              {                                  if (!gesture.IsComplete)                                  {                                      continue;                                  }                                  PointF handPos = this.hTracker.ConvertHandCoordinatesToDepth(gesture.CurrentPosition);                                  short userId =                                      Marshal.ReadByte(                                          userframe.UserMap.Pixels + (int)(handPos.Y * userframe.UserMap.DataStrideBytes)                                          + (int)(handPos.X * 2));                                  if (userId > 0)                                  {                                      this.activeUserId = userId;                                  }                              }                              handframe.Release();                          }                          if (this.activeUserId > 0)                          {                              UserData user = userframe.GetUserById(this.activeUserId);                              if (user.IsValid && user.IsVisible && user.CenterOfMass.Z > 0)                              {                                  RectangleF position = new RectangleF(0' 0' 0' 0);                                  PointF botlocation = this.uTracker.ConvertJointCoordinatesToDepth(user.CenterOfMass);                                  int pSize =                                      (int)                                      (Math.Max((int)((4700 - user.CenterOfMass.Z) * 0.08)' 50)                                       * ((float)userframe.UserMap.FrameSize.Height / 480));                                  position.Y = (int)botlocation.Y - pSize;                                  position.Height = pSize;                                  position.X = (int)botlocation.X;                                  this.activePosition.X = position.X / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Width = position.Width / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Y = position.Y / userframe.UserMap.FrameSize.Height;                                  this.activePosition.Height = position.Height / userframe.UserMap.FrameSize.Height;                                  userframe.Release();                                  return;                              }                          }                          userframe.Release();                      }                  }              }              catch (Exception)              {              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: try              {                  if (Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid)                  {                      using (UserTrackerFrameRef userframe = this.uTracker.ReadFrame())                      {                          using (HandTrackerFrameRef handframe = this.hTracker.ReadFrame())                          {                              foreach (GestureData gesture in handframe.Gestures)                              {                                  if (!gesture.IsComplete)                                  {                                      continue;                                  }                                  PointF handPos = this.hTracker.ConvertHandCoordinatesToDepth(gesture.CurrentPosition);                                  short userId =                                      Marshal.ReadByte(                                          userframe.UserMap.Pixels + (int)(handPos.Y * userframe.UserMap.DataStrideBytes)                                          + (int)(handPos.X * 2));                                  if (userId > 0)                                  {                                      this.activeUserId = userId;                                  }                              }                              handframe.Release();                          }                          if (this.activeUserId > 0)                          {                              UserData user = userframe.GetUserById(this.activeUserId);                              if (user.IsValid && user.IsVisible && user.CenterOfMass.Z > 0)                              {                                  RectangleF position = new RectangleF(0' 0' 0' 0);                                  PointF botlocation = this.uTracker.ConvertJointCoordinatesToDepth(user.CenterOfMass);                                  int pSize =                                      (int)                                      (Math.Max((int)((4700 - user.CenterOfMass.Z) * 0.08)' 50)                                       * ((float)userframe.UserMap.FrameSize.Height / 480));                                  position.Y = (int)botlocation.Y - pSize;                                  position.Height = pSize;                                  position.X = (int)botlocation.X;                                  this.activePosition.X = position.X / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Width = position.Width / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Y = position.Y / userframe.UserMap.FrameSize.Height;                                  this.activePosition.Height = position.Height / userframe.UserMap.FrameSize.Height;                                  userframe.Release();                                  return;                              }                          }                          userframe.Release();                      }                  }              }              catch (Exception)              {              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: try              {                  if (Settings.Default.SmartCam && this.uTracker != null && this.uTracker.IsValid && this.hTracker != null                      && this.hTracker.IsValid)                  {                      using (UserTrackerFrameRef userframe = this.uTracker.ReadFrame())                      {                          using (HandTrackerFrameRef handframe = this.hTracker.ReadFrame())                          {                              foreach (GestureData gesture in handframe.Gestures)                              {                                  if (!gesture.IsComplete)                                  {                                      continue;                                  }                                  PointF handPos = this.hTracker.ConvertHandCoordinatesToDepth(gesture.CurrentPosition);                                  short userId =                                      Marshal.ReadByte(                                          userframe.UserMap.Pixels + (int)(handPos.Y * userframe.UserMap.DataStrideBytes)                                          + (int)(handPos.X * 2));                                  if (userId > 0)                                  {                                      this.activeUserId = userId;                                  }                              }                              handframe.Release();                          }                          if (this.activeUserId > 0)                          {                              UserData user = userframe.GetUserById(this.activeUserId);                              if (user.IsValid && user.IsVisible && user.CenterOfMass.Z > 0)                              {                                  RectangleF position = new RectangleF(0' 0' 0' 0);                                  PointF botlocation = this.uTracker.ConvertJointCoordinatesToDepth(user.CenterOfMass);                                  int pSize =                                      (int)                                      (Math.Max((int)((4700 - user.CenterOfMass.Z) * 0.08)' 50)                                       * ((float)userframe.UserMap.FrameSize.Height / 480));                                  position.Y = (int)botlocation.Y - pSize;                                  position.Height = pSize;                                  position.X = (int)botlocation.X;                                  this.activePosition.X = position.X / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Width = position.Width / userframe.UserMap.FrameSize.Width;                                  this.activePosition.Y = position.Y / userframe.UserMap.FrameSize.Height;                                  this.activePosition.Height = position.Height / userframe.UserMap.FrameSize.Height;                                  userframe.Release();                                  return;                              }                          }                          userframe.Release();                      }                  }              }              catch (Exception)              {              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Magic Number,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: if (vStream.IsValid && vStream.IsFrameAvailable() && !this.isIdle)              {                  using (VideoFrameRef frame = vStream.ReadFrame())                  {                      if (frame.IsValid)                      {                          lock (this.bitmap)                          {                              try                              {                                  frame.UpdateBitmap(this.bitmap' this.renderOptions);                              }                              catch (Exception)                              {                                  this.bitmap = frame.ToBitmap(this.renderOptions);                              }                                Rectangle position = new Rectangle(new Point(0' 0)' this.bitmap.Size);                              if (this.currentCropping == Rectangle.Empty)                              {                                  this.currentCropping = position;                              }                              if (Settings.Default.SmartCam)                              {                                  if (this.activeUserId > 0)                                  {                                      position.X = (int)(this.activePosition.X * this.bitmap.Size.Width);                                      position.Width = (int)(this.activePosition.Width * this.bitmap.Size.Width);                                      position.Y = (int)(this.activePosition.Y * this.bitmap.Size.Height);                                      position.Height = (int)(this.activePosition.Height * this.bitmap.Size.Height);                                        position.Width =                                          (int)                                          (((Decimal)this.bitmap.Size.Width / this.bitmap.Size.Height) * position.Height);                                      position.X -= (position.Width / 2);                                        position.X = Math.Max(position.X' 0);                                      position.X = Math.Min(position.X' this.bitmap.Size.Width - position.Width);                                      position.Y = Math.Max(position.Y' 0);                                      position.Y = Math.Min(position.Y' this.bitmap.Size.Height - position.Height);                                  }                              }                              if (this.currentCropping != position)                              {                                  if (Math.Abs(position.X - this.currentCropping.X) > 8                                      || Math.Abs(position.Width - this.currentCropping.Width) > 5)                                  {                                      this.currentCropping.X += Math.Min(                                          position.X - this.currentCropping.X'                                          this.bitmap.Size.Width / 50);                                      this.currentCropping.Width += Math.Min(                                          position.Width - this.currentCropping.Width'                                          this.bitmap.Size.Width / 25);                                  }                                  if (Math.Abs(position.Y - this.currentCropping.Y) > 8                                      || Math.Abs(position.Height - this.currentCropping.Height) > 5)                                  {                                      this.currentCropping.Y += Math.Min(                                          position.Y - this.currentCropping.Y'                                          this.bitmap.Size.Height / 50);                                      this.currentCropping.Height +=                                          Math.Min(                                              position.Height - this.currentCropping.Height'                                              this.bitmap.Size.Height / 25);                                  }                              }                              if (this.currentCropping.Size != this.bitmap.Size)                              {                                  using (Graphics g = Graphics.FromImage(this.bitmap))                                  {                                      if (this.currentCropping != Rectangle.Empty)                                      {                                          g.DrawImage(                                              this.bitmap'                                              new Rectangle(new Point(0' 0)' this.bitmap.Size)'                                              this.currentCropping'                                              GraphicsUnit.Pixel);                                      }                                      g.Save();                                  }                              }                              if (this.softMirror)                              {                                  this.bitmap.RotateFlip(RotateFlipType.RotateNoneFlipX);                              }                          }                            if (!this.isIdle)                          {                              this.broadcaster.SendBitmap(this.bitmap);                          }                          this.BeginInvoke(                              (Action)delegate                                  {                                      if (!this.isIdle)                                      {                                          lock (this.bitmap)                                          {                                              if (this.pb_image.Image != null)                                              {                                                  this.pb_image.Image.Dispose();                                              }                                              this.pb_image.Image = new Bitmap(this.bitmap' this.pb_image.Size);                                              this.pb_image.Refresh();                                          }                                      }                                  });                      }                  }              }
Missing Default,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following switch statement is missing a default case: switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                          break;                      case "Depth":                          Settings.Default.CameraType = 3;                          break;                      case "IR":                          Settings.Default.CameraType = 1;                          break;                  }
Missing Default,NiUI,frm_Main,C:\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following switch statement is missing a default case: switch (this.currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      if (Settings.Default.Color_HD)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution.Width == 1280                                  && (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                          this.isHd = selectedVideoMode != null;                          if (!this.isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                      if (selectedVideoMode == null)                      {                          foreach (VideoMode vm in vmodes)                          {                              if (vm.Resolution == new Size(640' 480))                              {                                  if ((selectedVideoMode == null                                       || (selectedVideoMode.Fps < vm.Fps                                           && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                      && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                      break;                  case Device.SensorType.Depth:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb                                           | VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                      if (Settings.Default.Depth_Fill)                      {                          if (this.cb_mirror.Enabled && this.cb_mirror.Checked)                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                      if (Settings.Default.Depth_Invert)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                      if (Settings.Default.Depth_Histogram)                      {                          this.renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps)                                  && (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm                                      || vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;                  case Device.SensorType.Ir:                      this.renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                      foreach (VideoMode vm in vmodes)                      {                          if (vm.Resolution == new Size(640' 480))                          {                              if ((selectedVideoMode == null                                   || (selectedVideoMode.Fps < vm.Fps                                       && vm.DataPixelFormat < selectedVideoMode.DataPixelFormat))                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg                                  && vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                      break;              }
