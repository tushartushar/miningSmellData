Implementation smell,Namespace,Class,File,Method,Description
Long Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The method has 326 lines of code.
Long Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The method has 129 lines of code.
Long Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The method has 248 lines of code.
Complex Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,Cyclomatic complexity of the method is 13
Complex Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,Cyclomatic complexity of the method is 10
Complex Method,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,Cyclomatic complexity of the method is 34
Long Statement,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,FrmMainFormClosing,The length of the statement  "                        @"Closing this form when you stopped streaming video to applications' will close this program completely. Are you sure?!"' " is 122.
Long Statement,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frm_Main)); " is 128.
Long Statement,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The length of the statement  "            this.lbl_wait.Font = new System.Drawing.Font("Microsoft YaHei UI"' 11.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 154.
Complex Conditional,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The conditional expression  "!(image.Width == 640 && image.Height == 480) && !hd54 && !hd43"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The conditional expression  "Settings.Default.SmartCam &&                      _userTracker != null &&                      _userTracker.IsValid &&                      _handTracker != null &&                      _handTracker.IsValid"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um)"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "(selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "_currentSensor.VideoMode.Fps != selectedVideoMode.Fps ||                          _currentSensor.VideoMode.DataPixelFormat != selectedVideoMode.DataPixelFormat ||                          _currentSensor.VideoMode.Resolution.Width != selectedVideoMode.Resolution.Width ||                          _currentSensor.VideoMode.Resolution.Height != selectedVideoMode.Resolution.Height"  is complex.
Complex Conditional,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The conditional expression  "!isSameDevice || _userTracker == null || _handTracker == null || !_userTracker.IsValid || !_handTracker.IsValid"  is complex.
Empty Catch Block,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,RegisterFilter,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The method has an empty catch block.
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,ClearScreen,The following statement contains a magic number: var bi = new Bitmap(640' 480' PixelFormat.Format24bppRgb);
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,ClearScreen,The following statement contains a magic number: var bi = new Bitmap(640' 480' PixelFormat.Format24bppRgb);
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,HasServer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,HasServer,The following statement contains a magic number: tried < 10
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var hd54 = image.Width == 1280 && image.Height == 1024;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var hd54 = image.Width == 1280 && image.Height == 1024;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var hd43 = image.Width == 1280 && image.Height == 960;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var hd43 = image.Width == 1280 && image.Height == 960;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var size = 640 * 480 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var size = 640 * 480 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: var size = 640 * 480 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: size = 1280 * 1024 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: size = 1280 * 1024 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: size = 1280 * 1024 * 3;
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: !(image.Width == 640 && image.Height == 480) && !hd54 && !hd43
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: !(image.Width == 640 && image.Height == 480) && !hd54 && !hd43
Magic Number,NiUI,BitmapBroadcaster,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\BitmapBroadcaster.cs,SendBitmap,The following statement contains a magic number: _memoryAccessor.Write(FileSize - 3' (byte) 1);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 16);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 16);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(44' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(44' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Location = new System.Drawing.Point(91' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Location = new System.Drawing.Point(91' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_device.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Location = new System.Drawing.Point(91' 40);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Location = new System.Drawing.Point(91' 40);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.Size = new System.Drawing.Size(151' 21);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_type.TabIndex = 3;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 43);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(12' 43);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(73' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(73' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 2;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Location = new System.Drawing.Point(622' 385);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Location = new System.Drawing.Point(622' 385);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_apply.TabIndex = 10;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Size = new System.Drawing.Size(80' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_fill.Size = new System.Drawing.Size(80' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Size = new System.Drawing.Size(116' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_equal.Size = new System.Drawing.Size(116' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Size = new System.Drawing.Size(53' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.Size = new System.Drawing.Size(53' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_invert.TabIndex = 2;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Location = new System.Drawing.Point(11' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Location = new System.Drawing.Point(11' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Size = new System.Drawing.Size(450' 337);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.Size = new System.Drawing.Size(450' 337);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.pb_image.TabIndex = 15;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.halt_timer.Interval = 1000;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Location = new System.Drawing.Point(12' 67);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Location = new System.Drawing.Point(12' 67);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Size = new System.Drawing.Size(230' 89);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.Size = new System.Drawing.Size(230' 89);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_depth.TabIndex = 4;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Location = new System.Drawing.Point(12' 162);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Location = new System.Drawing.Point(12' 162);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Size = new System.Drawing.Size(230' 47);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.Size = new System.Drawing.Size(230' 47);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_color.TabIndex = 5;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Size = new System.Drawing.Size(209' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_hd.Size = new System.Drawing.Size(209' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Location = new System.Drawing.Point(12' 215);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Location = new System.Drawing.Point(12' 215);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Size = new System.Drawing.Size(230' 45);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.Size = new System.Drawing.Size(230' 45);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_ir.TabIndex = 6;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(93' 20);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(93' 20);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(33' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(33' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Location = new System.Drawing.Point(12' 266);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Location = new System.Drawing.Point(12' 266);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Size = new System.Drawing.Size(230' 113);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.Size = new System.Drawing.Size(230' 113);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_general.TabIndex = 7;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Location = new System.Drawing.Point(6' 19);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Size = new System.Drawing.Size(98' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_smart.Size = new System.Drawing.Size(98' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Location = new System.Drawing.Point(6' 88);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Location = new System.Drawing.Point(6' 88);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Size = new System.Drawing.Size(221' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.Size = new System.Drawing.Size(221' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_notification.TabIndex = 3;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Location = new System.Drawing.Point(6' 65);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Size = new System.Drawing.Size(147' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.Size = new System.Drawing.Size(147' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_startup.TabIndex = 2;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Location = new System.Drawing.Point(6' 42);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Size = new System.Drawing.Size(99' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.cb_mirror.Size = new System.Drawing.Size(99' 17);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Location = new System.Drawing.Point(248' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Location = new System.Drawing.Point(248' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Size = new System.Drawing.Size(471' 366);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.Size = new System.Drawing.Size(471' 366);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.gb_preview.TabIndex = 11;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Location = new System.Drawing.Point(529' 385);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Location = new System.Drawing.Point(529' 385);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.Size = new System.Drawing.Size(87' 23);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.btn_stopstart.TabIndex = 9;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Location = new System.Drawing.Point(15' 390);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Location = new System.Drawing.Point(15' 390);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Size = new System.Drawing.Size(165' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.Size = new System.Drawing.Size(165' 13);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.l_copyright.TabIndex = 8;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Font = new System.Drawing.Font("Microsoft YaHei UI"' 11.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Location = new System.Drawing.Point(404' 157);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Location = new System.Drawing.Point(404' 157);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Size = new System.Drawing.Size(164' 86);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.Size = new System.Drawing.Size(164' 86);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.lbl_wait.TabIndex = 13;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(732' 417);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(732' 417);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: position.X -= position.Width / 2;
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: _currentCropping.X += Math.Min(                                              position.X - _currentCropping.X'                                              _bitmap.Size.Width / 50);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: _currentCropping.Width += Math.Min(                                              position.Width - _currentCropping.Width'                                              _bitmap.Size.Width / 25);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: Math.Abs(position.X - _currentCropping.X) > 8 ||                                          Math.Abs(position.Width - _currentCropping.Width) > 5
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: Math.Abs(position.X - _currentCropping.X) > 8 ||                                          Math.Abs(position.Width - _currentCropping.Width) > 5
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: _currentCropping.Y += Math.Min(                                              position.Y - _currentCropping.Y'                                              _bitmap.Size.Height / 50);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: _currentCropping.Height +=                                              Math.Min(                                                  position.Height - _currentCropping.Height'                                                  _bitmap.Size.Height / 25);
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: Math.Abs(position.Y - _currentCropping.Y) > 8 ||                                          Math.Abs(position.Height - _currentCropping.Height) > 5
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,CurrentSensorOnNewFrame,The following statement contains a magic number: Math.Abs(position.Y - _currentCropping.Y) > 8 ||                                          Math.Abs(position.Height - _currentCropping.Height) > 5
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: short userId =                                      Marshal.ReadByte(                                          userFrame.UserMap.Pixels +                                          (int) (handPos.Y * userFrame.UserMap.DataStrideBytes) +                                          (int) (handPos.X * 2));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: var pSize =                                      (int)                                      (Math.Max((int) ((4700 - user.CenterOfMass.Z) * 0.08)' 50) *                                       ((float) userFrame.UserMap.FrameSize.Height / 480));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: var pSize =                                      (int)                                      (Math.Max((int) ((4700 - user.CenterOfMass.Z) * 0.08)' 50) *                                       ((float) userFrame.UserMap.FrameSize.Height / 480));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: var pSize =                                      (int)                                      (Math.Max((int) ((4700 - user.CenterOfMass.Z) * 0.08)' 50) *                                       ((float) userFrame.UserMap.FrameSize.Height / 480));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,NiTeOnNewData,The following statement contains a magic number: var pSize =                                      (int)                                      (Math.Max((int) ((4700 - user.CenterOfMass.Z) * 0.08)' 50) *                                       ((float) userFrame.UserMap.FrameSize.Height / 480));
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The following statement contains a magic number: Settings.Default.CameraType == 2 &&                              item is string &&                              (item as string).Equals("Color"' StringComparison.CurrentCultureIgnoreCase)
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,ReadSettings,The following statement contains a magic number: Settings.Default.CameraType == 3 &&                              item is string &&                              (item as string).Equals("Depth"' StringComparison.CurrentCultureIgnoreCase)
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following statement contains a magic number: switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                            break;                      case "Depth":                          Settings.Default.CameraType = 3;                            break;                      case "IR":                          Settings.Default.CameraType = 1;                            break;                  }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following statement contains a magic number: switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                            break;                      case "Depth":                          Settings.Default.CameraType = 3;                            break;                      case "IR":                          Settings.Default.CameraType = 1;                            break;                  }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Magic Number,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following statement contains a magic number: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
Missing Default,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,SaveSettings,The following switch statement is missing a default case: switch (selectedType)                  {                      case "Color":                          Settings.Default.CameraType = 2;                            break;                      case "Depth":                          Settings.Default.CameraType = 3;                            break;                      case "IR":                          Settings.Default.CameraType = 1;                            break;                  }
Missing Default,NiUI,frm_Main,D:\research\architectureSmells\repos\falahati_NiVirtualCam\NiUI\frm_Main.cs,Start,The following switch statement is missing a default case: switch (_currentSensor.SensorInfo.GetSensorType())              {                  case Device.SensorType.Color:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        if (Settings.Default.Color_HD)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 1280 &&                                  (vm.Resolution.Height == 960 || vm.Resolution.Height == 1024))                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                            _isHd = selectedVideoMode != null;                            if (!_isHd)                          {                              MessageBox.Show(                                  @"This device doesn't support ~1.3MP resolution."'                                  @"HD Resolution"'                                  MessageBoxButtons.OK'                                  MessageBoxIcon.Warning);                          }                      }                        if (selectedVideoMode == null)                      {                          foreach (var vm in videoModes)                          {                              if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                              {                                  if ((selectedVideoMode == null ||                                       selectedVideoMode.Fps < vm.Fps &&                                       vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                      vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                                  {                                      selectedVideoMode = vm;                                  }                              }                          }                      }                        break;                  case Device.SensorType.Depth:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb |                                      VideoFrameRef.CopyBitmapOptions.DepthFillShadow;                        if (Settings.Default.Depth_Fill)                      {                          if (cb_mirror.Enabled && cb_mirror.Checked)                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillRigthBlack;                          }                          else                          {                              _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthFillLeftBlack;                          }                      }                        if (Settings.Default.Depth_Invert)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthInvert;                      }                        if (Settings.Default.Depth_Histogram)                      {                          _renderOptions |= VideoFrameRef.CopyBitmapOptions.DepthHistogramEqualize;                      }                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null || selectedVideoMode.Fps < vm.Fps) &&                                  (vm.DataPixelFormat == VideoMode.PixelFormat.Depth1Mm ||                                   vm.DataPixelFormat == VideoMode.PixelFormat.Depth100Um))                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;                  case Device.SensorType.Ir:                      _renderOptions = VideoFrameRef.CopyBitmapOptions.Force24BitRgb;                        foreach (var vm in videoModes)                      {                          if (vm.Resolution.Width == 640 && vm.Resolution.Height == 480)                          {                              if ((selectedVideoMode == null ||                                   selectedVideoMode.Fps < vm.Fps &&                                   vm.DataPixelFormat < selectedVideoMode.DataPixelFormat) &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Jpeg &&                                  vm.DataPixelFormat != VideoMode.PixelFormat.Yuv422)                              {                                  selectedVideoMode = vm;                              }                          }                      }                        break;              }
