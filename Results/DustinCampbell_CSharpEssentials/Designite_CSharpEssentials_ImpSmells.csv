Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,Cyclomatic complexity of the method is 9
Complex Method,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,GetArgumentInfo,Cyclomatic complexity of the method is 15
Complex Method,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,Cyclomatic complexity of the method is 25
Complex Method,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,OnType,Cyclomatic complexity of the method is 10
Complex Method,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,UpdatingExpression,Cyclomatic complexity of the method is 19
Complex Method,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,Cyclomatic complexity of the method is 9
Complex Method,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,TryHandleAccessorList,Cyclomatic complexity of the method is 8
Complex Method,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,Cyclomatic complexity of the method is 15
Long Parameter List,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The method has 5 parameters.
Long Statement,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "	var invocation = root.FindNode (context.Span' getInnermostNodeForTie: true).FirstAncestorOrSelf<InvocationExpressionSyntax> (); " is 127.
Long Statement,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "		context.RegisterRefactoring (CodeAction.Create ("Convert to interpolated string"' c => CreateInterpolatedString (invocation' context.Document' c))); " is 148.
Long Statement,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,Parenthesize,The length of the statement  "	return expression.IsKind (SyntaxKind.ParenthesizedExpression) ? expression : ParenthesizedExpression (openParenToken: Token (SyntaxTriviaList.Empty' SyntaxKind.OpenParenToken' SyntaxTriviaList.Empty)' expression: expression' closeParenToken: Token (SyntaxTriviaList.Empty' SyntaxKind.CloseParenToken' SyntaxTriviaList.Empty)).WithAdditionalAnnotations (Simplifier.Annotation); " is 376.
Long Statement,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,IsGeneratedCodeFile,The length of the statement  "	if (fileNameWithoutExtension.EndsWith ("AssemblyInfo"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".designer"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".g"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".g.i"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".AssemblyAttributes"' StringComparison.OrdinalIgnoreCase)) { " is 439.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "			context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleMethodDeclaration (methodDeclaration' context.Document' c))); " is 155.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "			context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleOperatorDeclaration (operatorDeclaration' context.Document' c))); " is 159.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "			context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleConversionOperatorDeclaration (conversionOperatorDeclaration' context.Document' c))); " is 179.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "			context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandlePropertyDeclaration (propertyDeclaration' context.Document' c))); " is 159.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "			context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleIndexerDeclaration (indexerDeclaration' context.Document' c))); " is 157.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleMethodDeclaration,The length of the statement  "	var returnStatement = SyntaxFactory.ReturnStatement (returnKeyword: SyntaxFactory.Token (SyntaxKind.ReturnKeyword)' expression: declaration.ExpressionBody.Expression' semicolonToken: declaration.SemicolonToken); " is 211.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleMethodDeclaration,The length of the statement  "	var newDeclaration = declaration.WithBody (SyntaxFactory.Block (returnStatement)).WithExpressionBody (null).WithSemicolonToken (default(SyntaxToken)).WithAdditionalAnnotations (Formatter.Annotation); " is 199.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleOperatorDeclaration,The length of the statement  "	var returnStatement = SyntaxFactory.ReturnStatement (returnKeyword: SyntaxFactory.Token (SyntaxKind.ReturnKeyword)' expression: declaration.ExpressionBody.Expression' semicolonToken: declaration.SemicolonToken); " is 211.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleOperatorDeclaration,The length of the statement  "	var newDeclaration = declaration.WithBody (SyntaxFactory.Block (returnStatement)).WithExpressionBody (null).WithSemicolonToken (default(SyntaxToken)).WithAdditionalAnnotations (Formatter.Annotation); " is 199.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleConversionOperatorDeclaration,The length of the statement  "	var returnStatement = SyntaxFactory.ReturnStatement (returnKeyword: SyntaxFactory.Token (SyntaxKind.ReturnKeyword)' expression: declaration.ExpressionBody.Expression' semicolonToken: declaration.SemicolonToken); " is 211.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleConversionOperatorDeclaration,The length of the statement  "	var newDeclaration = declaration.WithBody (SyntaxFactory.Block (returnStatement)).WithExpressionBody (null).WithSemicolonToken (default(SyntaxToken)).WithAdditionalAnnotations (Formatter.Annotation); " is 199.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandlePropertyDeclaration,The length of the statement  "	var returnStatement = SyntaxFactory.ReturnStatement (returnKeyword: SyntaxFactory.Token (SyntaxKind.ReturnKeyword)' expression: declaration.ExpressionBody.Expression' semicolonToken: declaration.SemicolonToken); " is 211.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandlePropertyDeclaration,The length of the statement  "	var accessorDeclaration = SyntaxFactory.AccessorDeclaration (kind: SyntaxKind.GetAccessorDeclaration' body: SyntaxFactory.Block (returnStatement)); " is 147.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandlePropertyDeclaration,The length of the statement  "	var newDeclaration = declaration.WithAccessorList (SyntaxFactory.AccessorList (SyntaxFactory.SingletonList (accessorDeclaration))).WithExpressionBody (null).WithSemicolonToken (default(SyntaxToken)).WithAdditionalAnnotations (Formatter.Annotation); " is 248.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleIndexerDeclaration,The length of the statement  "	var returnStatement = SyntaxFactory.ReturnStatement (returnKeyword: SyntaxFactory.Token (SyntaxKind.ReturnKeyword)' expression: declaration.ExpressionBody.Expression' semicolonToken: declaration.SemicolonToken); " is 211.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleIndexerDeclaration,The length of the statement  "	var accessorDeclaration = SyntaxFactory.AccessorDeclaration (kind: SyntaxKind.GetAccessorDeclaration' body: SyntaxFactory.Block (returnStatement)); " is 147.
Long Statement,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,HandleIndexerDeclaration,The length of the statement  "	var newDeclaration = declaration.WithAccessorList (SyntaxFactory.AccessorList (SyntaxFactory.SingletonList (accessorDeclaration))).WithExpressionBody (null).WithSemicolonToken (default(SyntaxToken)).WithAdditionalAnnotations (Formatter.Annotation); " is 248.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,OnType,The length of the statement  "				if (property.Kind == SymbolKind.Property && candidates.Contains (property) && IsIdentifierWithinAnAssignmentButNotInAConstructor (node' property' model' context.CancellationToken)) { " is 182.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsIdentifierWithinAnAssignmentButNotInAConstructor,The length of the statement  "	return updatedSymbol == identifierSymbol && !IsWithinConstructorOf (updatingExpression.Parent' identifierSymbol.ContainingType' identifierSymbol.IsStatic' semanticModel' cancellationToken); " is 189.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The length of the statement  "			return constructorSymbol != null && (object)constructorSymbol.ContainingType == type && identifierIsStatic == constructorSymbol.IsStatic; " is 137.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "	context.RegisterCodeFix (CodeAction.Create ("Use getter-only auto property"' c => RemoveAccessor (context))' context.Diagnostics); " is 130.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyCodeFix.cs,RemoveAccessor,The length of the statement  "	var newAccessorList = accessorList.RemoveNode (accessorDeclaration' SyntaxRemoveOptions.KeepExteriorTrivia).WithAdditionalAnnotations (Formatter.Annotation); " is 157.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleMethodDeclaration,The length of the statement  "	context.ReportDiagnostic (Diagnostic.Create (DiagnosticDescriptors.UseExpressionBodiedMember' methodDecl.GetLocation ())); " is 122.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleOperatorDeclaration,The length of the statement  "	context.ReportDiagnostic (Diagnostic.Create (DiagnosticDescriptors.UseExpressionBodiedMember' operatorDecl.GetLocation ())); " is 124.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleConversionOperatorDeclaration,The length of the statement  "	context.ReportDiagnostic (Diagnostic.Create (DiagnosticDescriptors.UseExpressionBodiedMember' conversionOperatorDecl.GetLocation ())); " is 134.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandlePropertyDeclaration,The length of the statement  "	context.ReportDiagnostic (Diagnostic.Create (DiagnosticDescriptors.UseExpressionBodiedMember' propertyDecl.GetLocation ())); " is 124.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleIndexerDeclaration,The length of the statement  "	context.ReportDiagnostic (Diagnostic.Create (DiagnosticDescriptors.UseExpressionBodiedMember' indexerDecl.GetLocation ())); " is 123.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (MethodDeclarationSyntax)declaration' c))' context.Diagnostics); " is 198.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (OperatorDeclarationSyntax)declaration' c))' context.Diagnostics); " is 200.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (ConversionOperatorDeclarationSyntax)declaration' c))' context.Diagnostics); " is 210.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (PropertyDeclarationSyntax)declaration' c))' context.Diagnostics); " is 200.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (IndexerDeclarationSyntax)declaration' c))' context.Diagnostics); " is 199.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,ReplaceWithExpressionBodiedMember,The length of the statement  "	var newDeclaration = declaration.WithLeadingTrivia (declarationTrivia).WithExpressionBody (SyntaxFactory.ArrowExpressionClause (expression)).WithBody (null).WithSemicolonToken (GetSemicolon (declaration.Body)).WithAdditionalAnnotations (Formatter.Annotation); " is 259.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,ReplaceWithExpressionBodiedMember,The length of the statement  "	var newDeclaration = declaration.WithLeadingTrivia (declarationTrivia).WithExpressionBody (SyntaxFactory.ArrowExpressionClause (expression)).WithBody (null).WithSemicolonToken (GetSemicolon (declaration.Body)).WithAdditionalAnnotations (Formatter.Annotation); " is 259.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,ReplaceWithExpressionBodiedMember,The length of the statement  "	var newDeclaration = declaration.WithLeadingTrivia (declarationTrivia).WithExpressionBody (SyntaxFactory.ArrowExpressionClause (expression)).WithBody (null).WithSemicolonToken (GetSemicolon (declaration.Body)).WithAdditionalAnnotations (Formatter.Annotation); " is 259.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,ReplaceWithExpressionBodiedMember,The length of the statement  "	var newDeclaration = declaration.WithLeadingTrivia (declarationTrivia).WithExpressionBody (SyntaxFactory.ArrowExpressionClause (expression)).WithAccessorList (null).WithSemicolonToken (GetSemicolon (declaration.AccessorList)).WithAdditionalAnnotations (Formatter.Annotation); " is 275.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,ReplaceWithExpressionBodiedMember,The length of the statement  "	var newDeclaration = declaration.WithLeadingTrivia (declarationTrivia).WithExpressionBody (SyntaxFactory.ArrowExpressionClause (expression)).WithAccessorList (null).WithSemicolonToken (GetSemicolon (declaration.AccessorList)).WithAdditionalAnnotations (Formatter.Annotation); " is 275.
Long Statement,CSharpEssentials.UseNameOf,UseNameOfCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseNameOf\UseNameOfCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "		context.RegisterCodeFix (CodeAction.Create ("Use NameOf"' c => ReplaceWithNameOf (context.Document' literalExpression' c))' context.Diagnostics); " is 145.
Long Statement,CSharpEssentials.UseNameOf,UseNameOfCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseNameOf\UseNameOfCodeFix.cs,ReplaceWithNameOf,The length of the statement  "	var nameOfExpression = InvocationExpression (expression: IdentifierName ("nameof")' argumentList: ArgumentList (arguments: SingletonSeparatedList (Argument (IdentifierName (stringText))))); " is 189.
Complex Conditional,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,IsGeneratedCodeFile,The conditional expression  "fileNameWithoutExtension.EndsWith ("AssemblyInfo"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".designer"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".g"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".g.i"' StringComparison.OrdinalIgnoreCase) || fileNameWithoutExtension.EndsWith (".AssemblyAttributes"' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The following statement contains a magic number: while (invocation != null) {  	if (invocation.ArgumentList != null) {  		var arguments = invocation.ArgumentList.Arguments;  		if (arguments.Count >= 2) {  			var firstArgument = arguments [0].Expression as LiteralExpressionSyntax;  			if (firstArgument.Token.IsKind (SyntaxKind.StringLiteralToken) == true) {  				var invocationSymbol = semanticModel.GetSymbolInfo (invocation' context.CancellationToken).Symbol;  				if (formatMethods.Contains (invocationSymbol)) {  					break;  				}  			}  		}  	}  	invocation = invocation.Parent.FirstAncestorOrSelf<InvocationExpressionSyntax> ();  }  
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The following statement contains a magic number: if (invocation.ArgumentList != null) {  	var arguments = invocation.ArgumentList.Arguments;  	if (arguments.Count >= 2) {  		var firstArgument = arguments [0].Expression as LiteralExpressionSyntax;  		if (firstArgument.Token.IsKind (SyntaxKind.StringLiteralToken) == true) {  			var invocationSymbol = semanticModel.GetSymbolInfo (invocation' context.CancellationToken).Symbol;  			if (formatMethods.Contains (invocationSymbol)) {  				break;  			}  		}  	}  }  
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The following statement contains a magic number: if (arguments.Count >= 2) {  	var firstArgument = arguments [0].Expression as LiteralExpressionSyntax;  	if (firstArgument.Token.IsKind (SyntaxKind.StringLiteralToken) == true) {  		var invocationSymbol = semanticModel.GetSymbolInfo (invocation' context.CancellationToken).Symbol;  		if (formatMethods.Contains (invocationSymbol)) {  			break;  		}  	}  }  
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,CreateInterpolatedString,The following statement contains a magic number: Assert (invocation.ArgumentList.Arguments.Count >= 2);  
Magic Number,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: if (root.Kind () == SyntaxKind.CompilationUnit && root.HasLeadingTrivia) {  	var leadingTrivia = root.GetLeadingTrivia ();  	foreach (var trivia in leadingTrivia) {  		if (trivia.Kind () != SyntaxKind.SingleLineCommentTrivia) {  			continue;  		}  		var text = trivia.ToString ();  		// Should start with single-line comment slashes. If not' move along.  		if (text.Length < 2 || text [0] != '/' || text [1] != '/') {  			continue;  		}  		// Scan past whitespace.  		int index = 2;  		while (index < text.Length && char.IsWhiteSpace (text [index])) {  			index++;  		}  		// Check to see if the text of the comment starts with "<auto-generated>".  		const string AutoGenerated = "<auto-generated>";  		if (string.Compare (text' index' AutoGenerated' 0' AutoGenerated.Length' StringComparison.OrdinalIgnoreCase) == 0) {  			return true;  		}  	}  }  
Magic Number,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: if (root.Kind () == SyntaxKind.CompilationUnit && root.HasLeadingTrivia) {  	var leadingTrivia = root.GetLeadingTrivia ();  	foreach (var trivia in leadingTrivia) {  		if (trivia.Kind () != SyntaxKind.SingleLineCommentTrivia) {  			continue;  		}  		var text = trivia.ToString ();  		// Should start with single-line comment slashes. If not' move along.  		if (text.Length < 2 || text [0] != '/' || text [1] != '/') {  			continue;  		}  		// Scan past whitespace.  		int index = 2;  		while (index < text.Length && char.IsWhiteSpace (text [index])) {  			index++;  		}  		// Check to see if the text of the comment starts with "<auto-generated>".  		const string AutoGenerated = "<auto-generated>";  		if (string.Compare (text' index' AutoGenerated' 0' AutoGenerated.Length' StringComparison.OrdinalIgnoreCase) == 0) {  			return true;  		}  	}  }  
Magic Number,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: foreach (var trivia in leadingTrivia) {  	if (trivia.Kind () != SyntaxKind.SingleLineCommentTrivia) {  		continue;  	}  	var text = trivia.ToString ();  	// Should start with single-line comment slashes. If not' move along.  	if (text.Length < 2 || text [0] != '/' || text [1] != '/') {  		continue;  	}  	// Scan past whitespace.  	int index = 2;  	while (index < text.Length && char.IsWhiteSpace (text [index])) {  		index++;  	}  	// Check to see if the text of the comment starts with "<auto-generated>".  	const string AutoGenerated = "<auto-generated>";  	if (string.Compare (text' index' AutoGenerated' 0' AutoGenerated.Length' StringComparison.OrdinalIgnoreCase) == 0) {  		return true;  	}  }  
Magic Number,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: foreach (var trivia in leadingTrivia) {  	if (trivia.Kind () != SyntaxKind.SingleLineCommentTrivia) {  		continue;  	}  	var text = trivia.ToString ();  	// Should start with single-line comment slashes. If not' move along.  	if (text.Length < 2 || text [0] != '/' || text [1] != '/') {  		continue;  	}  	// Scan past whitespace.  	int index = 2;  	while (index < text.Length && char.IsWhiteSpace (text [index])) {  		index++;  	}  	// Check to see if the text of the comment starts with "<auto-generated>".  	const string AutoGenerated = "<auto-generated>";  	if (string.Compare (text' index' AutoGenerated' 0' AutoGenerated.Length' StringComparison.OrdinalIgnoreCase) == 0) {  		return true;  	}  }  
Magic Number,CSharpEssentials,Extensions,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: if (text.Length < 2 || text [0] != '/' || text [1] != '/') {  	continue;  }  
Missing Default,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The following switch statement is missing a default case: switch (declaration.Kind ()) {  case SyntaxKind.MethodDeclaration:  	var methodDeclaration = (MethodDeclarationSyntax)declaration;  	if (methodDeclaration.ExpressionBody != null) {  		context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleMethodDeclaration (methodDeclaration' context.Document' c)));  	}  	break;  case SyntaxKind.OperatorDeclaration:  	var operatorDeclaration = (OperatorDeclarationSyntax)declaration;  	if (operatorDeclaration.ExpressionBody != null) {  		context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleOperatorDeclaration (operatorDeclaration' context.Document' c)));  	}  	break;  case SyntaxKind.ConversionOperatorDeclaration:  	var conversionOperatorDeclaration = (ConversionOperatorDeclarationSyntax)declaration;  	if (conversionOperatorDeclaration.ExpressionBody != null) {  		context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleConversionOperatorDeclaration (conversionOperatorDeclaration' context.Document' c)));  	}  	break;  case SyntaxKind.PropertyDeclaration:  	var propertyDeclaration = (PropertyDeclarationSyntax)declaration;  	if (propertyDeclaration.ExpressionBody != null) {  		context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandlePropertyDeclaration (propertyDeclaration' context.Document' c)));  	}  	break;  case SyntaxKind.IndexerDeclaration:  	var indexerDeclaration = (IndexerDeclarationSyntax)declaration;  	if (indexerDeclaration.ExpressionBody != null) {  		context.RegisterRefactoring (CodeAction.Create ("Expand expression-bodied member"' c => HandleIndexerDeclaration (indexerDeclaration' context.Document' c)));  	}  	break;  }  
Missing Default,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,UpdatingExpression,The following switch statement is missing a default case: switch (node.Kind ()) {  case SyntaxKind.SimpleAssignmentExpression:  case SyntaxKind.OrAssignmentExpression:  case SyntaxKind.AndAssignmentExpression:  case SyntaxKind.ExclusiveOrAssignmentExpression:  case SyntaxKind.AddAssignmentExpression:  case SyntaxKind.SubtractAssignmentExpression:  case SyntaxKind.MultiplyAssignmentExpression:  case SyntaxKind.DivideAssignmentExpression:  case SyntaxKind.ModuloAssignmentExpression:  case SyntaxKind.LeftShiftAssignmentExpression:  case SyntaxKind.RightShiftAssignmentExpression:  	var assignment = (AssignmentExpressionSyntax)node;  	return assignment.Left;  case SyntaxKind.PreIncrementExpression:  case SyntaxKind.PreDecrementExpression:  	return ((PrefixUnaryExpressionSyntax)node).Operand;  case SyntaxKind.PostIncrementExpression:  case SyntaxKind.PostDecrementExpression:  	return ((PostfixUnaryExpressionSyntax)node).Operand;  case SyntaxKind.Block:  case SyntaxKind.ExpressionStatement:  	return null;  }  
Missing Default,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The following switch statement is missing a default case: switch (node.Kind ()) {  case SyntaxKind.ConstructorDeclaration:  	var constructorSymbol = semanticModel.GetDeclaredSymbol (node' cancellationToken);  	return constructorSymbol != null && (object)constructorSymbol.ContainingType == type && identifierIsStatic == constructorSymbol.IsStatic;  case SyntaxKind.SimpleLambdaExpression:  case SyntaxKind.ParenthesizedLambdaExpression:  	return false;  case SyntaxKind.ClassDeclaration:  case SyntaxKind.StructDeclaration:  case SyntaxKind.MethodDeclaration:  case SyntaxKind.PropertyDeclaration:  	return false;  }  
Missing Default,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,F:\newReposMay17\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The following switch statement is missing a default case: switch (declaration.Kind ()) {  case SyntaxKind.MethodDeclaration:  	context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (MethodDeclarationSyntax)declaration' c))' context.Diagnostics);  	break;  case SyntaxKind.OperatorDeclaration:  	context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (OperatorDeclarationSyntax)declaration' c))' context.Diagnostics);  	break;  case SyntaxKind.ConversionOperatorDeclaration:  	context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (ConversionOperatorDeclarationSyntax)declaration' c))' context.Diagnostics);  	break;  case SyntaxKind.PropertyDeclaration:  	context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (PropertyDeclarationSyntax)declaration' c))' context.Diagnostics);  	break;  case SyntaxKind.IndexerDeclaration:  	context.RegisterCodeFix (CodeAction.Create ("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember (context.Document' (IndexerDeclarationSyntax)declaration' c))' context.Diagnostics);  	break;  }  
