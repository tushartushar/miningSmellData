Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,Cyclomatic complexity of the method is 9
Complex Method,CSharpEssentials,Extensions,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,GetArgumentInfo,Cyclomatic complexity of the method is 15
Complex Method,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,Cyclomatic complexity of the method is 10
Complex Method,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,OnType,Cyclomatic complexity of the method is 10
Complex Method,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,TryHandleAccessorList,Cyclomatic complexity of the method is 8
Long Parameter List,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The method has 5 parameters. Parameters: node' type' identifierIsStatic' semanticModel' cancellationToken
Long Statement,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The length of the statement  "            var invocation = root.FindNode(context.Span' getInnermostNodeForTie: true)?.FirstAncestorOrSelf<InvocationExpressionSyntax>(); " is 126.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsIdentifierWithinAnAssignmentButNotInAConstructor,The length of the statement  "            return updatedSymbol == identifierSymbol && !IsWithinConstructorOf(updatingExpression.Parent' identifierSymbol.ContainingType' identifierSymbol.IsStatic' semanticModel' cancellationToken); " is 188.
Long Statement,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The length of the statement  "                        return constructorSymbol != null && (object)constructorSymbol.ContainingType == type && identifierIsStatic == constructorSymbol.IsStatic; " is 137.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleOperatorDeclaration,The length of the statement  "            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.UseExpressionBodiedMember' operatorDecl.GetLocation())); " is 121.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleConversionOperatorDeclaration,The length of the statement  "            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.UseExpressionBodiedMember' conversionOperatorDecl.GetLocation())); " is 131.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandlePropertyDeclaration,The length of the statement  "            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.UseExpressionBodiedMember' propertyDecl.GetLocation())); " is 121.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberAnalyzer.cs,HandleIndexerDeclaration,The length of the statement  "            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.UseExpressionBodiedMember' indexerDecl.GetLocation())); " is 120.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "                        CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (MethodDeclarationSyntax)declaration' c))' " is 149.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "                        CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (OperatorDeclarationSyntax)declaration' c))' " is 151.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "                        CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (ConversionOperatorDeclarationSyntax)declaration' c))' " is 161.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "                        CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (PropertyDeclarationSyntax)declaration' c))' " is 151.
Long Statement,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The length of the statement  "                        CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (IndexerDeclarationSyntax)declaration' c))' " is 150.
Complex Conditional,CSharpEssentials,Extensions,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,IsGeneratedCodeFile,The conditional expression  "fileNameWithoutExtension.EndsWith("AssemblyInfo"' StringComparison.OrdinalIgnoreCase) ||                  fileNameWithoutExtension.EndsWith(".designer"' StringComparison.OrdinalIgnoreCase) ||                  fileNameWithoutExtension.EndsWith(".g"' StringComparison.OrdinalIgnoreCase) ||                  fileNameWithoutExtension.EndsWith(".g.i"' StringComparison.OrdinalIgnoreCase) ||                  fileNameWithoutExtension.EndsWith(".AssemblyAttributes"' StringComparison.OrdinalIgnoreCase)"  is complex.
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,ComputeRefactoringsAsync,The following statement contains a magic number: arguments.Count >= 2
Magic Number,CSharpEssentials.ConvertToInterpolatedString,ConvertToInterpolatedStringRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ConvertToInterpolatedString\ConvertToInterpolatedStringRefactoring.cs,CreateInterpolatedString,The following statement contains a magic number: Assert(invocation.ArgumentList.Arguments.Count >= 2);
Magic Number,CSharpEssentials,Extensions,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: text.Length < 2 || text[0] != '/' || text[1] != '/'
Magic Number,CSharpEssentials,Extensions,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\Extensions.cs,BeginsWithAutoGeneratedComment,The following statement contains a magic number: int index = 2;
Missing Default,CSharpEssentials.ExpandExpressionBodiedMember,ExpandExpressionBodiedMemberRefactoring,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\ExpandExpressionBodiedMember\ExpandExpressionBodiedMemberRefactoring.cs,ComputeRefactoringsAsync,The following switch statement is missing a default case: switch (declaration?.Kind())              {                  case SyntaxKind.MethodDeclaration:                      var methodDeclaration = (MethodDeclarationSyntax)declaration;                      if (methodDeclaration.ExpressionBody != null)                      {                          context.RegisterRefactoring(                              CodeAction.Create(                                  "Expand expression-bodied member"'                                  c => HandleMethodDeclaration(methodDeclaration' context.Document' c)));                      }                        break;                    case SyntaxKind.OperatorDeclaration:                      var operatorDeclaration = (OperatorDeclarationSyntax)declaration;                      if (operatorDeclaration.ExpressionBody != null)                      {                          context.RegisterRefactoring(                              CodeAction.Create(                                  "Expand expression-bodied member"'                                  c => HandleOperatorDeclaration(operatorDeclaration' context.Document' c)));                      }                        break;                    case SyntaxKind.ConversionOperatorDeclaration:                      var conversionOperatorDeclaration = (ConversionOperatorDeclarationSyntax)declaration;                      if (conversionOperatorDeclaration.ExpressionBody != null)                      {                          context.RegisterRefactoring(                              CodeAction.Create(                                  "Expand expression-bodied member"'                                  c => HandleConversionOperatorDeclaration(conversionOperatorDeclaration' context.Document' c)));                      }                        break;                    case SyntaxKind.PropertyDeclaration:                      var propertyDeclaration = (PropertyDeclarationSyntax)declaration;                      if (propertyDeclaration.ExpressionBody != null)                      {                          context.RegisterRefactoring(                              CodeAction.Create(                                  "Expand expression-bodied member"'                                  c => HandlePropertyDeclaration(propertyDeclaration' context.Document' c)));                      }                        break;                    case SyntaxKind.IndexerDeclaration:                      var indexerDeclaration = (IndexerDeclarationSyntax)declaration;                      if (indexerDeclaration.ExpressionBody != null)                      {                          context.RegisterRefactoring(                              CodeAction.Create(                                  "Expand expression-bodied member"'                                  c => HandleIndexerDeclaration(indexerDeclaration' context.Document' c)));                      }                        break;              }
Missing Default,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,UpdatingExpression,The following switch statement is missing a default case: switch (node.Kind())                  {                      // Simple or compound assignment                      case SyntaxKind.SimpleAssignmentExpression:                      case SyntaxKind.OrAssignmentExpression:                      case SyntaxKind.AndAssignmentExpression:                      case SyntaxKind.ExclusiveOrAssignmentExpression:                      case SyntaxKind.AddAssignmentExpression:                      case SyntaxKind.SubtractAssignmentExpression:                      case SyntaxKind.MultiplyAssignmentExpression:                      case SyntaxKind.DivideAssignmentExpression:                      case SyntaxKind.ModuloAssignmentExpression:                      case SyntaxKind.LeftShiftAssignmentExpression:                      case SyntaxKind.RightShiftAssignmentExpression:                          var assignment = (AssignmentExpressionSyntax)node;                          return assignment.Left;                        // Prefix unary expression                      case SyntaxKind.PreIncrementExpression:                      case SyntaxKind.PreDecrementExpression:                          return ((PrefixUnaryExpressionSyntax)node).Operand;                        // Postfix unary expression                      case SyntaxKind.PostIncrementExpression:                      case SyntaxKind.PostDecrementExpression:                          return ((PostfixUnaryExpressionSyntax)node).Operand;                        // Early loop termination                      case SyntaxKind.Block:                      case SyntaxKind.ExpressionStatement:                          return null;                  }
Missing Default,CSharpEssentials.GetterOnlyAutoProperty,UseGetterOnlyAutoPropertyAnalyzer,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\GetterOnlyAutoProperty\UseGetterOnlyAutoPropertyAnalyzer.cs,IsWithinConstructorOf,The following switch statement is missing a default case: switch (node.Kind())                  {                      case SyntaxKind.ConstructorDeclaration:                          // In a constructor. Is it the constructor for the type that contains the property?                          var constructorSymbol = semanticModel.GetDeclaredSymbol(node' cancellationToken);                          return constructorSymbol != null && (object)constructorSymbol.ContainingType == type && identifierIsStatic == constructorSymbol.IsStatic;                        // If it's in a lambda expression' even if in a constructor' then it counts as a                      // non-constructor case.                      case SyntaxKind.SimpleLambdaExpression:                      case SyntaxKind.ParenthesizedLambdaExpression:                          return false;                        // Early out cases. There are many others' but these are the common ones.                      case SyntaxKind.ClassDeclaration:                      case SyntaxKind.StructDeclaration:                      case SyntaxKind.MethodDeclaration:                      case SyntaxKind.PropertyDeclaration:                          return false;                  }
Missing Default,CSharpEssentials.UseExpressionBodiedMember,UseExpressionBodiedMemberCodeFix,D:\research\architectureSmells\repos\DustinCampbell_CSharpEssentials\Source\CSharpEssentials\UseExpressionBodiedMember\UseExpressionBodiedMemberCodeFix.cs,RegisterCodeFixesAsync,The following switch statement is missing a default case: switch (declaration?.Kind())              {                  case SyntaxKind.MethodDeclaration:                      context.RegisterCodeFix(                          CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (MethodDeclarationSyntax)declaration' c))'                          context.Diagnostics);                      break;                    case SyntaxKind.OperatorDeclaration:                      context.RegisterCodeFix(                          CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (OperatorDeclarationSyntax)declaration' c))'                          context.Diagnostics);                      break;                    case SyntaxKind.ConversionOperatorDeclaration:                      context.RegisterCodeFix(                          CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (ConversionOperatorDeclarationSyntax)declaration' c))'                          context.Diagnostics);                      break;                    case SyntaxKind.PropertyDeclaration:                      context.RegisterCodeFix(                          CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (PropertyDeclarationSyntax)declaration' c))'                          context.Diagnostics);                      break;                    case SyntaxKind.IndexerDeclaration:                      context.RegisterCodeFix(                          CodeAction.Create("Use expression-bodied member"' c => ReplaceWithExpressionBodiedMember(context.Document' (IndexerDeclarationSyntax)declaration' c))'                          context.Diagnostics);                      break;              }
