Implementation smell,Namespace,Class,File,Method,Description
Long Method,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,DoLogin,The method has 120 lines of code.
Complex Method,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,HandleTradeOngoing,Cyclomatic complexity of the method is 8
Long Parameter List,SteamTrade,Item,C:\repos\Jessecar96_SteamBot\SteamTrade\GenericInventory.cs,Item,The method has 5 parameters. Parameters: appid' contextid' assetid' descriptionid' amount
Long Parameter List,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,Trade,The method has 5 parameters. Parameters: me' other' steamWeb' myInventoryTask' otherInventoryTask
Long Parameter List,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Fetch,The method has 6 parameters. Parameters: url' method' data' ajax' referer' fetchError
Long Parameter List,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Request,The method has 6 parameters. Parameters: url' method' data' ajax' referer' fetchError
Long Parameter List,SteamTrade.TradeOffer,OfferSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\OfferSession.cs,CounterOffer,The method has 5 parameters. Parameters: message' otherSteamId' status' newTradeOfferId' tradeOfferId
Long Parameter List,SteamTrade.TradeOffer,OfferSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\OfferSession.cs,SendTradeOfferWithToken,The method has 5 parameters. Parameters: message' otherSteamId' status' token' newTradeOfferId
Long Parameter List,SteamTrade.TradeOffer,OfferSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\OfferSession.cs,Request,The method has 5 parameters. Parameters: url' data' referer' tradeOfferId' newTradeOfferId
Long Parameter List,SteamTrade.TradeOffer,TradeStatus,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,TryGetMyItem,The method has 5 parameters. Parameters: appId' contextId' assetId' amount' asset
Long Parameter List,SteamTrade.TradeOffer,TradeStatus,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,TryGetTheirItem,The method has 5 parameters. Parameters: appId' contextId' assetId' amount' asset
Long Parameter List,SteamTrade.TradeOffer,TradeStatus,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,TryGetMyCurrencyItem,The method has 5 parameters. Parameters: appId' contextId' currencyId' amount' asset
Long Parameter List,SteamTrade.TradeOffer,TradeStatus,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,TryGetTheirCurrencyItem,The method has 5 parameters. Parameters: appId' contextId' currencyId' amount' asset
Long Parameter List,SteamTrade.TradeOffer,TradeOfferWebAPI,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferWebAPI.cs,GetTradeOffers,The method has 7 parameters. Parameters: getSentOffers' getReceivedOffers' getDescriptions' activeOnly' historicalOnly' timeHistoricalCutoff' language
Long Identifier,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,,The length of the parameter WEB_REQUEST_TIME_BETWEEN_RETRIES_MS is 35.
Long Statement,SteamTrade,GenericInventory,C:\repos\Jessecar96_SteamBot\SteamTrade\GenericInventory.cs,loadImplementation,The length of the statement  "                            String.Format("http://steamcommunity.com/profiles/{0}/inventory/json/{1}/{2}/"' steamid.ConvertToUInt64()' appid' contextId)' " is 125.
Long Statement,SteamTrade,GenericInventory,C:\repos\Jessecar96_SteamBot\SteamTrade\GenericInventory.cs,loadImplementation,The length of the statement  "                                            url = (class_instance.actions != null && class_instance.actions.First["link"] != null ? class_instance.actions.First["link"] : "")' " is 131.
Long Statement,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Request,The length of the statement  "            // string dataString = (data == null ? null : String.Join("&"' Array.ConvertAll(data.AllKeys' key => $"{HttpUtility.UrlEncode(key)}={HttpUtility.UrlEncode(data[key])}" ))); " is 172.
Long Statement,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Request,The length of the statement  "            request.UserAgent = "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML' like Gecko) Chrome/31.0.1650.57 Safari/537.36"; " is 131.
Long Statement,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Request,The length of the statement  "            // If the request is a GET request return now the response. If not go on. Because then we need to apply data to the request. " is 124.
Long Statement,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,DoLogin,The length of the statement  "            // Do this while we need a captcha or need email authentification. Probably you have misstyped the captcha or the SteamGaurd code if this comes multiple times. " is 159.
Long Statement,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,DoLogin,The length of the statement  "                // For further information about SteamGuard see: https://support.steampowered.com/kb_article.php?ref=4020-ALZM-5519&l=english. " is 126.
Long Statement,SteamTrade,TradeManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeManager.cs,CheckTradeTimeout,The length of the statement  "                    trade.SendMessage("Are You AFK? The trade will be canceled in " + untilActionTimeout + " seconds if you don't do something."); " is 126.
Long Statement,SteamTrade.TradeOffer,TradeOffer,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,CounterOffer,The length of the statement  "            if (!String.IsNullOrEmpty(TradeOfferId) && !IsOurOffer && OfferState == TradeOfferState.TradeOfferStateActive && Items.NewVersion) " is 130.
Long Statement,SteamTrade.TradeOffer,TradeAssetsConverter,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,WriteJson,The length of the statement  "                List<TradeStatusUser.TradeAsset> assetList = ((Dictionary<TradeStatusUser.TradeAsset' TradeStatusUser.TradeAsset>)value).Select(x => x.Value).ToList(); " is 151.
Long Statement,SteamTrade.TradeOffer,TradeAssetsConverter,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,CanConvert,The length of the statement  "                return (objectType == typeof(Dictionary<TradeStatusUser.TradeAsset' TradeStatusUser.TradeAsset>) || objectType == typeof(List<TradeStatusUser.TradeAsset>)); " is 156.
Long Statement,SteamTrade.TradeOffer,TradeOfferManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferManager.cs,EnqueueUpdatedOffers,The length of the statement  "            LastTimeCheckedOffers = startTime - TimeSpan.FromMinutes(5); //Lazy way to make sure we don't miss any trade offers due to slightly differing clocks " is 148.
Long Statement,SteamTrade.TradeOffer,TradeOfferWebAPI,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferWebAPI.cs,GetTradeOffers,The length of the statement  "            string options = string.Format("?key={0}&get_sent_offers={1}&get_received_offers={2}&get_descriptions={3}&language={4}&active_only={5}&historical_only={6}&time_historical_cutoff={7}"' " is 183.
Long Statement,SteamTrade.TradeOffer,TradeOfferWebAPI,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferWebAPI.cs,GetTradeOffers,The length of the statement  "                apiKey' BoolConverter(getSentOffers)' BoolConverter(getReceivedOffers)' BoolConverter(getDescriptions)' language' BoolConverter(activeOnly)' BoolConverter(historicalOnly)' timeHistoricalCutoff); " is 194.
Long Statement,SteamTrade.TradeWebAPI,TradeUserObj,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeWebAPI\TradeStatus.cs,GetAssets,The length of the statement  "                    tradeUserAssetses.Add(new TradeUserAssets((int)asset.appid' (long)asset.contextid' (ulong)asset.assetid' (int)asset.amount)); " is 125.
Long Statement,SteamTrade.TradeWebAPI,TradeUserObj,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeWebAPI\TradeStatus.cs,GetAssets,The length of the statement  "                    tradeUserAssetses.Add(new TradeUserAssets((int)value.appid' (long)value.contextid' (ulong)value.assetid' (int)value.amount)); " is 125.
Long Statement,SteamTrade.TradeWebAPI,TradeSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeWebAPI\TradeSession.cs,IsSuccess,The length of the statement  "                //I believe this is Steam's way of asking the trade window (which is actually a webpage) to refresh' following a large successful update " is 136.
Complex Conditional,SteamTrade.TradeOffer,TradeOffer,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,CounterOffer,The conditional expression  "!String.IsNullOrEmpty(TradeOfferId) && !IsOurOffer && OfferState == TradeOfferState.TradeOfferStateActive && Items.NewVersion"  is complex.
Complex Conditional,SteamTrade.TradeOffer,TradeAsset,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOffer.cs,Equals,The conditional expression  "this.AppId == other.AppId && this.ContextId == other.ContextId &&                          this.CurrencyId == other.CurrencyId && this.AssetId == other.AssetId &&                          this.Amount == other.Amount"  is complex.
Empty Catch Block,SteamTrade,TradeManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeManager.cs,CheckTradeTimeout,The method has an empty catch block.
Magic Number,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,AddItem,The following statement contains a magic number: if(MyInventory.GetItem(itemid) == null)              {                  return false;              }              else              {                  return AddItem(new TradeUserAssets(440' 2' itemid));              }
Magic Number,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,AddItem,The following statement contains a magic number: if(MyInventory.GetItem(itemid) == null)              {                  return false;              }              else              {                  return AddItem(new TradeUserAssets(440' 2' itemid));              }
Magic Number,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,Poll,The following statement contains a magic number: switch (tradeStatusType)              {                  // Nothing happened. i.e. trade hasn't closed yet.                  case TradeStatusType.OnGoing:                      return HandleTradeOngoing(status);                    // Successful trade                  case TradeStatusType.CompletedSuccessfully:                      HasTradeCompletedOk = true;                      return false;                    // Email/mobile confirmation                  case TradeStatusType.PendingConfirmation:                      IsTradeAwaitingConfirmation = true;                      tradeOfferID = long.Parse(status.tradeid);                      return false;                    //On a status of 2' the Steam web code attempts the request two more times                  case TradeStatusType.Empty:                      numUnknownStatusUpdates++;                      if(numUnknownStatusUpdates < 3)                      {                          return false;                      }                      break;              }
Magic Number,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,HandleTradeOngoing,The following statement contains a magic number: if(status.them != null)              {                  OtherIsReady = status.them.ready == 1;                  MeIsReady = status.me.ready == 1;                  OtherUserAccepted = status.them.confirmed == 1;                    //Similar to the logic Steam uses to determine whether or not to show the "waiting" spinner in the trade window                  otherUserTimingOut = (status.them.connection_pending || status.them.sec_since_touch >= 5);              }
Magic Number,SteamTrade,Schema,C:\repos\Jessecar96_SteamBot\SteamTrade\Schema.cs,FetchSchema,The following statement contains a magic number: if (!wasCreated)              {                  bool signaled = mre.WaitOne(10000);                    if (!signaled)                  {                      return null;                  }              }
Magic Number,SteamTrade,Inventory,C:\repos\Jessecar96_SteamBot\SteamTrade\Inventory.cs,FetchInventory,The following statement contains a magic number: while ((result == null || result.result.items == null) && attempts <= 3)              {                  var url = "http://api.steampowered.com/IEconItems_440/GetPlayerItems/v0001/?key=" + apiKey + "&steamid=" + steamId;                  string response = steamWeb.Fetch(url' "GET"' null' false);                  result = JsonConvert.DeserializeObject<InventoryResponse>(response);                  attempts++;              }
Magic Number,SteamTrade,Inventory,C:\repos\Jessecar96_SteamBot\SteamTrade\Inventory.cs,IsFreeToPlay,The following statement contains a magic number: return this.NumSlots % 100 == 50;
Magic Number,SteamTrade,Inventory,C:\repos\Jessecar96_SteamBot\SteamTrade\Inventory.cs,IsFreeToPlay,The following statement contains a magic number: return this.NumSlots % 100 == 50;
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Request,The following statement contains a magic number: request.Timeout = 50000;
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,DoLogin,The following statement contains a magic number: do              {                  Console.WriteLine("SteamWeb: Logging In...");                    bool captcha = loginJson != null && loginJson.captcha_needed;                  bool steamGuard = loginJson != null && loginJson.emailauth_needed;                    string time = Uri.EscapeDataString(rsaJson.timestamp);                    string capGid = string.Empty;                  // Response does not need to send if captcha is needed or not.                  // ReSharper disable once MergeSequentialChecks                  if (loginJson != null && loginJson.captcha_gid != null)                  {                      capGid = Uri.EscapeDataString(loginJson.captcha_gid);                  }                    data = new NameValueCollection {{"password"' encryptedBase64Password}' {"username"' username}};                    // Captcha Check.                  string capText = "";                  if (captcha)                  {                      Console.WriteLine("SteamWeb: Captcha is needed.");                      System.Diagnostics.Process.Start("https://steamcommunity.com/public/captcha.php?gid=" + loginJson.captcha_gid);                      Console.WriteLine("SteamWeb: Type the captcha:");                      string consoleText = Console.ReadLine();                      if (!string.IsNullOrEmpty(consoleText))                      {                          capText = Uri.EscapeDataString(consoleText);                  }                  }                    data.Add("captchagid"' captcha ? capGid : "");                  data.Add("captcha_text"' captcha ? capText : "");                  // Captcha end.                  // Added Header for two factor code.                  data.Add("twofactorcode"' "");                    // Added Header for remember login. It can also set to true.                  data.Add("remember_login"' "false");                    // SteamGuard check. If SteamGuard is enabled you need to enter it. Care probably you need to wait 7 days to trade.                  // For further information about SteamGuard see: https://support.steampowered.com/kb_article.php?ref=4020-ALZM-5519&l=english.                  if (steamGuard)                  {                      Console.WriteLine("SteamWeb: SteamGuard is needed.");                      Console.WriteLine("SteamWeb: Type the code:");                      string consoleText = Console.ReadLine();                      if (!string.IsNullOrEmpty(consoleText))                      {                          steamGuardText = Uri.EscapeDataString(consoleText);                      }                      steamGuardId = loginJson.emailsteamid;                        // Adding the machine name to the NameValueCollection' because it is requested by steam.                      Console.WriteLine("SteamWeb: Type your machine name:");                      consoleText = Console.ReadLine();                      var machineName = string.IsNullOrEmpty(consoleText) ? "" : Uri.EscapeDataString(consoleText);                      data.Add("loginfriendlyname"' machineName != "" ? machineName : "defaultSteamBotMachine");                  }                    data.Add("emailauth"' steamGuardText);                  data.Add("emailsteamid"' steamGuardId);                  // SteamGuard end.                    // Added unixTimestamp. It is included in the request normally.                  var unixTimestamp = (int)(DateTime.UtcNow.Subtract(new DateTime(1970' 1' 1))).TotalSeconds;                  // Added three "0"'s because Steam has a weird unix timestamp interpretation.                  data.Add("donotcache"' unixTimestamp + "000");                    data.Add("rsatimestamp"' time);                    // Sending the actual login.                  using(HttpWebResponse webResponse = Request("https://steamcommunity.com/login/dologin/"' "POST"' data' false))                  {                      var stream = webResponse.GetResponseStream();                      if (stream == null)                      {                          return false;                      }                      using (StreamReader reader = new StreamReader(stream))                      {                          string json = reader.ReadToEnd();                          loginJson = JsonConvert.DeserializeObject<SteamResult>(json);                          cookieCollection = webResponse.Cookies;                      }                  }              } while (loginJson.captcha_needed || loginJson.emailauth_needed);
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Authenticate,The following statement contains a magic number: using (dynamic userAuth = WebAPI.GetInterface("ISteamUserAuth"))              {                  // Generate an AES session key.                  var sessionKey = CryptoHelper.GenerateRandomBlock(32);                    // rsa encrypt it with the public key for the universe we're on                  byte[] cryptedSessionKey;                  using (RSACrypto rsa = new RSACrypto(KeyDictionary.GetPublicKey(client.ConnectedUniverse)))                  {                      cryptedSessionKey = rsa.Encrypt(sessionKey);                  }                    byte[] loginKey = new byte[20];                  Array.Copy(Encoding.ASCII.GetBytes(myLoginKey)' loginKey' myLoginKey.Length);                    // AES encrypt the loginkey with our session key.                  byte[] cryptedLoginKey = CryptoHelper.SymmetricEncrypt(loginKey' sessionKey);                    KeyValue authResult;                    // Get the Authentification Result.                  try                  {                      authResult = userAuth.AuthenticateUser(                          steamid: client.SteamID.ConvertToUInt64()'                          sessionkey: HttpUtility.UrlEncode(cryptedSessionKey)'                          encrypted_loginkey: HttpUtility.UrlEncode(cryptedLoginKey)'                          method: "POST"'                          secure: true                          );                  }                  catch (Exception)                  {                      Token = TokenSecure = null;                      return false;                  }                    Token = authResult["token"].AsString();                  TokenSecure = authResult["tokensecure"].AsString();                    // Adding cookies to the cookie container.                  _cookies.Add(new Cookie("sessionid"' SessionId' string.Empty' SteamCommunityDomain));                  _cookies.Add(new Cookie("steamLogin"' Token' string.Empty' SteamCommunityDomain));                  _cookies.Add(new Cookie("steamLoginSecure"' TokenSecure' string.Empty' SteamCommunityDomain));                    return true;              }
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,Authenticate,The following statement contains a magic number: using (dynamic userAuth = WebAPI.GetInterface("ISteamUserAuth"))              {                  // Generate an AES session key.                  var sessionKey = CryptoHelper.GenerateRandomBlock(32);                    // rsa encrypt it with the public key for the universe we're on                  byte[] cryptedSessionKey;                  using (RSACrypto rsa = new RSACrypto(KeyDictionary.GetPublicKey(client.ConnectedUniverse)))                  {                      cryptedSessionKey = rsa.Encrypt(sessionKey);                  }                    byte[] loginKey = new byte[20];                  Array.Copy(Encoding.ASCII.GetBytes(myLoginKey)' loginKey' myLoginKey.Length);                    // AES encrypt the loginkey with our session key.                  byte[] cryptedLoginKey = CryptoHelper.SymmetricEncrypt(loginKey' sessionKey);                    KeyValue authResult;                    // Get the Authentification Result.                  try                  {                      authResult = userAuth.AuthenticateUser(                          steamid: client.SteamID.ConvertToUInt64()'                          sessionkey: HttpUtility.UrlEncode(cryptedSessionKey)'                          encrypted_loginkey: HttpUtility.UrlEncode(cryptedLoginKey)'                          method: "POST"'                          secure: true                          );                  }                  catch (Exception)                  {                      Token = TokenSecure = null;                      return false;                  }                    Token = authResult["token"].AsString();                  TokenSecure = authResult["tokensecure"].AsString();                    // Adding cookies to the cookie container.                  _cookies.Add(new Cookie("sessionid"' SessionId' string.Empty' SteamCommunityDomain));                  _cookies.Add(new Cookie("steamLogin"' Token' string.Empty' SteamCommunityDomain));                  _cookies.Add(new Cookie("steamLoginSecure"' TokenSecure' string.Empty' SteamCommunityDomain));                    return true;              }
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,HexToByte,The following statement contains a magic number: if (hex.Length % 2 == 1)              {                  throw new Exception("The binary key cannot have an odd number of digits");              }
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,HexToByte,The following statement contains a magic number: for (int i = 0; i < (l >> 1); ++i)              {                  arr[i] = (byte)((GetHexVal(hex[i << 1]) << 4) + (GetHexVal(hex[(i << 1) + 1])));              }
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,SteamWeb,C:\repos\Jessecar96_SteamBot\SteamTrade\SteamWeb.cs,GetHexVal,The following statement contains a magic number: return val - (val < 58 ? 48 : 55);
Magic Number,SteamTrade,TradeManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeManager.cs,StartTradeThread,The following statement contains a magic number: lastTimeoutMessage = DateTime.Now.AddSeconds(-1000);
Magic Number,SteamTrade,TradeManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeManager.cs,CheckTradeTimeout,The following statement contains a magic number: if (untilActionTimeout <= 0 || untilTradeTimeout <= 0)              {                  DebugPrint ("timed out...");                    if (OnTimeout != null)                  {                      OnTimeout (this' null);                  }                    trade.CancelTrade ();                    return true;              }              else if (untilActionTimeout <= 20 && secsSinceLastTimeoutMessage >= 10)              {                  try                  {                      trade.SendMessage("Are You AFK? The trade will be canceled in " + untilActionTimeout + " seconds if you don't do something.");                  }                  catch { }                  lastTimeoutMessage = now;              }
Magic Number,SteamTrade,TradeManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeManager.cs,CheckTradeTimeout,The following statement contains a magic number: if (untilActionTimeout <= 0 || untilTradeTimeout <= 0)              {                  DebugPrint ("timed out...");                    if (OnTimeout != null)                  {                      OnTimeout (this' null);                  }                    trade.CancelTrade ();                    return true;              }              else if (untilActionTimeout <= 20 && secsSinceLastTimeoutMessage >= 10)              {                  try                  {                      trade.SendMessage("Are You AFK? The trade will be canceled in " + untilActionTimeout + " seconds if you don't do something.");                  }                  catch { }                  lastTimeoutMessage = now;              }
Magic Number,SteamTrade.TradeOffer,TradeOfferManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferManager.cs,EnqueueUpdatedOffers,The following statement contains a magic number: LastTimeCheckedOffers = startTime - TimeSpan.FromMinutes(5);
Magic Number,SteamTrade.TradeOffer,TradeOfferManager,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeOffer\TradeOfferManager.cs,GetUnixTimeStamp,The following statement contains a magic number: var epoch = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,SteamTrade.TradeWebAPI,TradeSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeWebAPI\TradeSession.cs,GetForeignInventory,The following statement contains a magic number: return GetForeignInventory(otherId' 440' 2);
Magic Number,SteamTrade.TradeWebAPI,TradeSession,C:\repos\Jessecar96_SteamBot\SteamTrade\TradeWebAPI\TradeSession.cs,GetForeignInventory,The following statement contains a magic number: return GetForeignInventory(otherId' 440' 2);
Missing Default,SteamTrade,Trade,C:\repos\Jessecar96_SteamBot\SteamTrade\Trade.cs,Poll,The following switch statement is missing a default case: switch (tradeStatusType)              {                  // Nothing happened. i.e. trade hasn't closed yet.                  case TradeStatusType.OnGoing:                      return HandleTradeOngoing(status);                    // Successful trade                  case TradeStatusType.CompletedSuccessfully:                      HasTradeCompletedOk = true;                      return false;                    // Email/mobile confirmation                  case TradeStatusType.PendingConfirmation:                      IsTradeAwaitingConfirmation = true;                      tradeOfferID = long.Parse(status.tradeid);                      return false;                    //On a status of 2' the Steam web code attempts the request two more times                  case TradeStatusType.Empty:                      numUnknownStatusUpdates++;                      if(numUnknownStatusUpdates < 3)                      {                          return false;                      }                      break;              }
