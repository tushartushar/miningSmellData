Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawCharacter,The method has 9 parameters. Parameters: ch' typeFace' fontSize' color' bgColor' drawOutline' outlineThickness' reverse' mode
Long Parameter List,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,NormalizeDrawing,The method has 6 parameters. Parameters: drawing' location' size' angle' bgTransparent' opacity
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,Main,The following statement contains a magic number: if (args.Length != 2)  			{  				Console.WriteLine("Bad args");  				return 1;  			}
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: int[] tileSizes = new int[] {  				8' 10' 12'  				16' 20' 24'  				32' 40' 48'  				64' 80' 96  			};
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: WriteableBitmap target = new WriteableBitmap(tileSizes.Sum()' maxTileSize * numSymbols' 96' 96'  				PixelFormats.Bgra32' null);
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: WriteableBitmap target = new WriteableBitmap(tileSizes.Sum()' maxTileSize * numSymbols' 96' 96'  				PixelFormats.Bgra32' null);
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreatePng,The following statement contains a magic number: for (int i = 1; i < numSymbols; ++i)  			{  				int xOffset = 0;    				foreach (int tileSize in tileSizes)  				{  					var source = loader.GetTileBitmap((SymbolID)i' tileSize);    					int stride = source.PixelWidth * (source.Format.BitsPerPixel / 8);  					byte[] data = new byte[stride * source.PixelHeight];    					source.CopyPixels(data' stride' 0);    					target.WritePixels(new Int32Rect(xOffset' i * maxTileSize' tileSize' tileSize)' data' stride' 0);    					xOffset += tileSize;  				}  			}
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreateDds,The following statement contains a magic number: const int bytesPerPixel = 4;
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreateDds,The following statement contains a magic number: int maxTileSize = 64;
Magic Number,Dwarrowdelf.Client,Program,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Program.cs,CreateDds,The following statement contains a magic number: int mipLevels = 6;
Magic Number,Dwarrowdelf.Client,VectorGfxBase,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Symbols.cs,VectorGfxBase,The following statement contains a magic number: this.W = 100;
Magic Number,Dwarrowdelf.Client,VectorGfxBase,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\Symbols.cs,VectorGfxBase,The following statement contains a magic number: this.H = 100;
Magic Number,Dwarrowdelf.Client,TileSetLoader,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoader.cs,GetBitmapGfx,The following statement contains a magic number: for (int i = 0; i < m_bitmapSizes.Length; ++i)  			{  				if (tileSize == m_bitmapSizes[i])  					break;    				xoff += m_bitmapSizes[i] + 3;  			}
Magic Number,Dwarrowdelf.Client,TileSetLoader,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoader.cs,GetBitmapGfx,The following statement contains a magic number: BitmapSource bmp = new CroppedBitmap(m_bitmap' new Int32Rect(xoff' 1 + 35 * gfx.BitmapIndex' tileSize' tileSize));
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawCharacter,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				var formattedText = new FormattedText(  						ch.ToString()'  						System.Globalization.CultureInfo.InvariantCulture'  						FlowDirection.LeftToRight'  						typeFace'  						fontSize' Brushes.Black);    				var geometry = formattedText.BuildGeometry(new System.Windows.Point(0' 0));  				var pen = drawOutline ? new Pen(Brushes.Black' outlineThickness) : null;  				var bounds = pen != null ? geometry.GetRenderBounds(pen) : geometry.Bounds;    				Rect bb;    				switch (mode)  				{  					case CharRenderMode.Full:  						{  							double size = formattedText.Height;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' 0' size' size);  						}  						break;    					case CharRenderMode.Caps:  						{  							double size = typeFace.CapsHeight * fontSize;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' formattedText.Baseline - size'  								size' size);  						}  						break;    					case CharRenderMode.Free:  						bb = bounds;  						break;    					default:  						throw new Exception();  				}    				if (reverse)  					geometry = new CombinedGeometry(GeometryCombineMode.Exclude' new RectangleGeometry(bb)' geometry);    				//dc.DrawRectangle(bgBrush' new Pen(Brushes.Red' 1)' bb);  				dc.DrawRectangle(bgBrush' null' bb);    				dc.DrawGeometry(brush' pen' geometry);    				/*  				var dl = new Action<double>((y) =>  					dc.DrawLine(new Pen(Brushes.Red' 1)' new Point(bb.Left' y)' new Point(bb.Right' y)));    				dl(0);  				dl(formattedText.Baseline);  				dl(fontSize);  				dl(formattedText.Height);  				dl(formattedText.Baseline - typeFace.CapsHeight * fontSize);  				*/  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawCharacter,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				var formattedText = new FormattedText(  						ch.ToString()'  						System.Globalization.CultureInfo.InvariantCulture'  						FlowDirection.LeftToRight'  						typeFace'  						fontSize' Brushes.Black);    				var geometry = formattedText.BuildGeometry(new System.Windows.Point(0' 0));  				var pen = drawOutline ? new Pen(Brushes.Black' outlineThickness) : null;  				var bounds = pen != null ? geometry.GetRenderBounds(pen) : geometry.Bounds;    				Rect bb;    				switch (mode)  				{  					case CharRenderMode.Full:  						{  							double size = formattedText.Height;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' 0' size' size);  						}  						break;    					case CharRenderMode.Caps:  						{  							double size = typeFace.CapsHeight * fontSize;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' formattedText.Baseline - size'  								size' size);  						}  						break;    					case CharRenderMode.Free:  						bb = bounds;  						break;    					default:  						throw new Exception();  				}    				if (reverse)  					geometry = new CombinedGeometry(GeometryCombineMode.Exclude' new RectangleGeometry(bb)' geometry);    				//dc.DrawRectangle(bgBrush' new Pen(Brushes.Red' 1)' bb);  				dc.DrawRectangle(bgBrush' null' bb);    				dc.DrawGeometry(brush' pen' geometry);    				/*  				var dl = new Action<double>((y) =>  					dc.DrawLine(new Pen(Brushes.Red' 1)' new Point(bb.Left' y)' new Point(bb.Right' y)));    				dl(0);  				dl(formattedText.Baseline);  				dl(fontSize);  				dl(formattedText.Height);  				dl(formattedText.Baseline - typeFace.CapsHeight * fontSize);  				*/  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawCharacter,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				var formattedText = new FormattedText(  						ch.ToString()'  						System.Globalization.CultureInfo.InvariantCulture'  						FlowDirection.LeftToRight'  						typeFace'  						fontSize' Brushes.Black);    				var geometry = formattedText.BuildGeometry(new System.Windows.Point(0' 0));  				var pen = drawOutline ? new Pen(Brushes.Black' outlineThickness) : null;  				var bounds = pen != null ? geometry.GetRenderBounds(pen) : geometry.Bounds;    				Rect bb;    				switch (mode)  				{  					case CharRenderMode.Full:  						{  							double size = formattedText.Height;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' 0' size' size);  						}  						break;    					case CharRenderMode.Caps:  						{  							double size = typeFace.CapsHeight * fontSize;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' formattedText.Baseline - size'  								size' size);  						}  						break;    					case CharRenderMode.Free:  						bb = bounds;  						break;    					default:  						throw new Exception();  				}    				if (reverse)  					geometry = new CombinedGeometry(GeometryCombineMode.Exclude' new RectangleGeometry(bb)' geometry);    				//dc.DrawRectangle(bgBrush' new Pen(Brushes.Red' 1)' bb);  				dc.DrawRectangle(bgBrush' null' bb);    				dc.DrawGeometry(brush' pen' geometry);    				/*  				var dl = new Action<double>((y) =>  					dc.DrawLine(new Pen(Brushes.Red' 1)' new Point(bb.Left' y)' new Point(bb.Right' y)));    				dl(0);  				dl(formattedText.Baseline);  				dl(fontSize);  				dl(formattedText.Height);  				dl(formattedText.Baseline - typeFace.CapsHeight * fontSize);  				*/  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawCharacter,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				var formattedText = new FormattedText(  						ch.ToString()'  						System.Globalization.CultureInfo.InvariantCulture'  						FlowDirection.LeftToRight'  						typeFace'  						fontSize' Brushes.Black);    				var geometry = formattedText.BuildGeometry(new System.Windows.Point(0' 0));  				var pen = drawOutline ? new Pen(Brushes.Black' outlineThickness) : null;  				var bounds = pen != null ? geometry.GetRenderBounds(pen) : geometry.Bounds;    				Rect bb;    				switch (mode)  				{  					case CharRenderMode.Full:  						{  							double size = formattedText.Height;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' 0' size' size);  						}  						break;    					case CharRenderMode.Caps:  						{  							double size = typeFace.CapsHeight * fontSize;  							bb = new Rect(bounds.X + bounds.Width / 2 - size / 2' formattedText.Baseline - size'  								size' size);  						}  						break;    					case CharRenderMode.Free:  						bb = bounds;  						break;    					default:  						throw new Exception();  				}    				if (reverse)  					geometry = new CombinedGeometry(GeometryCombineMode.Exclude' new RectangleGeometry(bb)' geometry);    				//dc.DrawRectangle(bgBrush' new Pen(Brushes.Red' 1)' bb);  				dc.DrawRectangle(bgBrush' null' bb);    				dc.DrawGeometry(brush' pen' geometry);    				/*  				var dl = new Action<double>((y) =>  					dc.DrawLine(new Pen(Brushes.Red' 1)' new Point(bb.Left' y)' new Point(bb.Right' y)));    				dl(0);  				dl(formattedText.Baseline);  				dl(fontSize);  				dl(formattedText.Height);  				dl(formattedText.Baseline - typeFace.CapsHeight * fontSize);  				*/  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,NormalizeDrawing,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				dc.DrawRectangle(bgTransparent ? Brushes.Transparent : Brushes.Black' null' new Rect(new Size(100' 100)));    				dc.PushTransform(transform);    				if (opacity.HasValue)  					dc.PushOpacity(opacity.Value);    				dc.DrawDrawing(drawing);    				if (opacity.HasValue)  					dc.Pop();    				dc.Pop();  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,NormalizeDrawing,The following statement contains a magic number: using (DrawingContext dc = dGroup.Open())  			{  				dc.DrawRectangle(bgTransparent ? Brushes.Transparent : Brushes.Black' null' new Rect(new Size(100' 100)));    				dc.PushTransform(transform);    				if (opacity.HasValue)  					dc.PushOpacity(opacity.Value);    				dc.DrawDrawing(drawing);    				if (opacity.HasValue)  					dc.Pop();    				dc.Pop();  			}
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: t.Children.Add(new TranslateTransform(-b.X - b.Width / 2' -b.Y - b.Height / 2));
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: t.Children.Add(new TranslateTransform(-b.X - b.Width / 2' -b.Y - b.Height / 2));
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: Debug.Assert(Math.Abs(b.X - location.X) < 0.0001);
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: Debug.Assert(Math.Abs(b.Y - location.Y) < 0.0001);
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: Debug.Assert(Math.Abs(b.Width - size.Width) < 0.0001);
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,CreateNormalizeTransform,The following statement contains a magic number: Debug.Assert(Math.Abs(b.Height - size.Height) < 0.0001);
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawingToBitmap,The following statement contains a magic number: drawingContext.PushTransform(new ScaleTransform((double)size / 100' (double)size / 100));
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawingToBitmap,The following statement contains a magic number: drawingContext.PushTransform(new ScaleTransform((double)size / 100' (double)size / 100));
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawingToBitmap,The following statement contains a magic number: RenderTargetBitmap bmp = new RenderTargetBitmap(size' size' 96' 96' PixelFormats.Default);
Magic Number,Dwarrowdelf.Client,TileSetLoaderHelpers,C:\repos\tomba_dwarrowdelf\Client\TileSetGen\TileSetLoaderHelpers.cs,DrawingToBitmap,The following statement contains a magic number: RenderTargetBitmap bmp = new RenderTargetBitmap(size' size' 96' 96' PixelFormats.Default);
