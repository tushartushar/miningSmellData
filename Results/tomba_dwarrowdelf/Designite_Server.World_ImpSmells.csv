Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The method has 114 lines of code.
Complex Method,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 10
Complex Method,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 10
Complex Method,Dwarrowdelf.Server,EnvironmentObject,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,SetTileData,Cyclomatic complexity of the method is 12
Complex Method,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,Work,Cyclomatic complexity of the method is 9
Long Parameter List,Dwarrowdelf.Server,ObjectMoveChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ObjectMoveChange,The method has 5 parameters. Parameters: mover' sourceEnv' sourceLocation' destinationEnv' destinationLocation
Long Statement,Dwarrowdelf.Server,MapChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new MapChangeData() { EnvironmentID = this.Environment.ObjectID' Location = this.Location' TileData = this.TileData }; " is 125.
Long Statement,Dwarrowdelf.Server,PropertyValueChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyValueChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 123.
Long Statement,Dwarrowdelf.Server,PropertyIntChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyIntChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 121.
Long Statement,Dwarrowdelf.Server,PropertyStringChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyStringChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 124.
Long Statement,Dwarrowdelf.Server,ActionProgressChange,C:\repos\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new ActionProgressChangeData() { ObjectID = this.Object.ObjectID' ActionProgressEvent = this.ActionProgressEvent }; " is 122.
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: for (int i = 0; i < amount; ++i)  			{  				var idx = m_currentIdx++;    				if (m_currentIdx == m_env.Width * m_env.Height)  					m_currentIdx = 0;    				var p = m_env.GetRandomSurfaceLocation(idx);    				var td = m_env.GetTileData(p);    				if (td.ID == TileID.Sapling)  				{  					if (r.Next(100) < 80)  					{  						// any object prevents sapling from growing to tree  						if (m_env.HasContents(p) == false)  						{  							// A sapling grows to a tree  							td.ID = TileID.Tree;  							m_env.SetTileData(p' td);  						}  					}  				}  				else if (td.ID == TileID.Tree)  				{  					if (r.Next(100) < 20)  					{  						// A tree dies  						td.ID = TileID.DeadTree;  						m_env.SetTileData(p' td);  					}  				}  				else if (td.ID == TileID.DeadTree)  				{  					if (r.Next(100) < 60)  					{  						// A dead tree disappears  						td.ID = TileID.Grass;  						td.MaterialID = grassMaterials[r.Next(grassMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  				else if (m_numTrees < m_targetNumTrees && td.WaterLevel == 0 && td.IsClearFloor)  				{  					if (r.Next(100) < 60)  					{  						// A new sapling is planted  						td.ID = TileID.Sapling;  						td.MaterialID = woodMaterials[r.Next(woodMaterials.Length)].ID;  						m_env.SetTileData(p' td);  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvWaterHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWaterHandler.cs,HandleWaterFlowPlanar,The following statement contains a magic number: foreach (var d in dirs)  			{  				var dst = src + d;    				if (!CanWaterFlow(src' dst))  					continue;    				int dstLevel = GetCurrentWaterLevel(dst);    				int flow;    				if (srcLevel <= dstLevel)  					continue;    				int diff = srcLevel - dstLevel;  				flow = (diff + 5) / 6;  				Debug.Assert(flow < srcLevel);  				//flow = Math.Min(flow' curLevel - 1);  				//flow = IntClamp(flow' curLevel > 1 ? curLevel - 1 : 0' neighLevel > 1 ? -neighLevel + 1 : 0);    				if (flow == 0)  					continue;    				srcLevel -= flow;  				dstLevel += flow;    				m_waterChangeMap[dst] = dstLevel;    				if (srcLevel <= 1)  					return;  			}
Magic Number,Dwarrowdelf.Server,EnvWaterHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWaterHandler.cs,HandleWaterFlowPlanar,The following statement contains a magic number: foreach (var d in dirs)  			{  				var dst = src + d;    				if (!CanWaterFlow(src' dst))  					continue;    				int dstLevel = GetCurrentWaterLevel(dst);    				int flow;    				if (srcLevel <= dstLevel)  					continue;    				int diff = srcLevel - dstLevel;  				flow = (diff + 5) / 6;  				Debug.Assert(flow < srcLevel);  				//flow = Math.Min(flow' curLevel - 1);  				//flow = IntClamp(flow' curLevel > 1 ? curLevel - 1 : 0' neighLevel > 1 ? -neighLevel + 1 : 0);    				if (flow == 0)  					continue;    				srcLevel -= flow;  				dstLevel += flow;    				m_waterChangeMap[dst] = dstLevel;    				if (srcLevel <= 1)  					return;  			}
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(5' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(3' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(4' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,CreateHerd,The following statement contains a magic number: using (var iter = IntVector2.SquareSpiral(center.ToIntVector2()' 20).GetEnumerator())  			{  				for (int i = 0; i < numAnimals; ++i)  				{  					bool ok = true;    					while (true)  					{  						if (iter.MoveNext() == false)  						{  							ok = false;  							break;  						}    						var p2 = iter.Current;    						if (m_env.Size.Plane.Contains(p2) == false)  							continue;    						var p = m_env.GetSurfaceLocation(p2);    						if (m_env.CanEnter(p) == false)  							continue;    						var livingBuilder = new LivingObjectBuilder(livingID);    						var living = livingBuilder.Create(world);  						var ai = new Dwarrowdelf.AI.HerbivoreAI(living' world.PlayerID);  						ai.Group = group;  						living.SetAI(ai);  						living.MoveToMustSucceed(m_env' p);    						break;  					}    					if (!ok)  						break;  				}  			}
Magic Number,Dwarrowdelf.Server,TileGridReaderWriter,C:\repos\tomba_dwarrowdelf\Server\World\Environment\TileGridReaderWriter.cs,Write,The following statement contains a magic number: int w = grid.GetLength(2);
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: const int exhaustion_per_tick = 10;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckEquipItem(item) == false)  					return ActionState.Fail;    				this.ActionTotalTicks = 10;    				return ActionState.Ok;  			}  			else if (this.ActionTicksUsed < this.ActionTotalTicks)  			{  				return ActionState.Ok;  			}  			else  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckEquipItem(item) == false)  					return ActionState.Fail;    				this.EquipItem(item);    				var report = new EquipItemActionReport(this' item);  				SendReport(report);    				return ActionState.Done;  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckUnequipItem(item) == false)  					return ActionState.Fail;    				this.ActionTotalTicks = 10;    				return ActionState.Ok;  			}  			else if (this.ActionTicksUsed < this.ActionTotalTicks)  			{  				return ActionState.Ok;  			}  			else  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckUnequipItem(item) == false)  					return ActionState.Fail;    				this.UnequipItem(item);    				var report = new UnequipItemActionReport(this' item);  				SendReport(report);    				return ActionState.Done;  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  				this.ActionTotalTicks = 6;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var roll = this.World.Random.Next(20) + 1;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: str = (int)((20.0 / 100) * str);
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: str = (int)((20.0 / 100) * str);
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var strBonus = (str / 2) - 5;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var strBonus = (str / 2) - 5;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (roll == 1)  			{  				hit = false;  			}  			else if (roll == 20)  			{  				hit = true;  			}  			else  			{  				var dex = target.Dexterity;  				dex = (int)((20.0 / 100) * dex);  				var dexBonus = (dex / 2) - 5;  				if (dexBonus < 0)  					dexBonus = 0;    				var ac = 10 + target.ArmorClass + dexBonus;    				hit = roll + strBonus >= ac;    				Trace.TraceInformation("{0} attacks {1}: {2} + {3} >= 10 + {4} + {5} == {6} >= {7}"'  					attacker' target'  					roll' strBonus'  					target.ArmorClass' dexBonus'  					roll + strBonus' ac);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (hit)  			{  				var weapon = attacker.Weapon;  				int dieSides;    				if (weapon == null)  					dieSides = 3;  				else  					dieSides = weapon.WeaponInfo.WC;    				damage = this.World.Random.Next(dieSides) + 1 + strBonus;  				damageCategory = DamageCategory.Melee;  				Trace.TraceInformation("{0} hits {1}' {2} damage"' attacker' target' damage);  			}  			else  			{  				damage = 0;  				damageCategory = DamageCategory.None;  				Trace.TraceInformation("{0} misses {1}"' attacker' target);  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckConsumeAction(item) == false)  					return ActionState.Fail;    				this.ActionTotalTicks = 6;    				return ActionState.Ok;  			}  			else if (this.ActionTicksUsed < this.ActionTotalTicks)  			{  				return ActionState.Ok;  			}  			else  			{  				var item = this.Inventory.FirstOrDefault(o => o.ObjectID == action.ItemID);    				if (CheckConsumeAction(item) == false)  					return ActionState.Fail;    				// Send report before destruct  				SendReport(new ConsumeActionReport(this' item));    				item.Destruct();    				this.Hunger = Math.Max(this.Hunger - item.NutritionalValue' 0);  				this.Thirst = Math.Max(this.Thirst - item.RefreshmentValue' 0);    				return ActionState.Done;  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  				this.ActionTotalTicks = 6;
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: if (this.ActionTicksUsed == 1)  			{  				var obs = this.Environment.GetContents(this.Location + dir);    				this.ActionTotalTicks = obs.OfType<LivingObject>().Count() + 2;  			}
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,GetTicks,The following statement contains a magic number: return 20 / (lvl / 26 + 1);
Magic Number,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,GetTicks,The following statement contains a magic number: return 20 / (lvl / 26 + 1);
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,C:\repos\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: this.HitPoints = li.Level * 10;
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,C:\repos\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: Str = Dex = Con = Int = Wis = Cha = li.Level * 10;
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,C:\repos\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: this.VisionRange = 10;
Magic Number,Dwarrowdelf.Server,EnvironmentObject,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,CommonInit,The following statement contains a magic number: for (int i = 0; i < m_randomXYArray.Length; ++i)  			{  				ushort x = (ushort)(i % this.Width);  				ushort y = (ushort)(i / this.Width);  				m_randomXYArray[i] = ((uint)x << 16) | y;  			}
Magic Number,Dwarrowdelf.Server,EnvironmentObject,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,GetRandomSurfaceLocation,The following statement contains a magic number: int x = (int)(raw >> 16);
Magic Number,Dwarrowdelf.Server,EnvironmentObject,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,SetTileData,The following statement contains a magic number: if (data.IsWall && oldSurfaceLevel <= p.Z)  			{  				// Surface level has risen  				Debug.Assert(p.Z >= 0 && p.Z < 256);  				newSurfaceLevel = p.Z + 1;  			}  			else if (data.IsWall == false && oldSurfaceLevel == p.Z + 1)  			{  				// Surface level has possibly lowered  				if (p.Z == 0)  					throw new Exception();    				for (int z = p.Z - 1; z >= 0; --z)  				{  					if (GetTileData(p.X' p.Y' z).IsWall)  					{  						Debug.Assert(z >= 0 && z < 256);  						newSurfaceLevel = z + 1;  						break;  					}  				}  			}
Magic Number,Dwarrowdelf.Server,EnvironmentObject,C:\repos\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,SetTileData,The following statement contains a magic number: if (data.IsWall && oldSurfaceLevel <= p.Z)  			{  				// Surface level has risen  				Debug.Assert(p.Z >= 0 && p.Z < 256);  				newSurfaceLevel = p.Z + 1;  			}  			else if (data.IsWall == false && oldSurfaceLevel == p.Z + 1)  			{  				// Surface level has possibly lowered  				if (p.Z == 0)  					throw new Exception();    				for (int z = p.Z - 1; z >= 0; --z)  				{  					if (GetTileData(p.X' p.Y' z).IsWall)  					{  						Debug.Assert(z >= 0 && z < 256);  						newSurfaceLevel = z + 1;  						break;  					}  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Magic Number,Dwarrowdelf.Server,World,C:\repos\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: if (this.TickNumber % (YEAR_LENGTH / 8) == 0)  			{  				this.YearOctant = (this.YearOctant + 1) % 8;    				if (this.YearOctant == 0)  				{  					this.Year++;    					trace.TraceInformation("Year {0}"' this.Year);    					AddChange(new GameDateChange(this.Year' this.Season));  				}    				if (this.YearOctant % 2 == 1)  				{  					this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);    					trace.TraceInformation("Season {0}"' this.Season);    					AddChange(new GameDateChange(this.Year' this.Season));  				}  			}
Missing Default,Dwarrowdelf.Server,LivingObject,C:\repos\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following switch statement is missing a default case: switch (status)  			{  				case ActionState.Ok:  					HandleActionProgress();  					break;    				case ActionState.Done:  					D("Action Done({0})"' action);  					HandleActionDone(ActionState.Done);  					break;    				case ActionState.Fail:  					D("Action Failed({0})"' action);  					HandleActionDone(ActionState.Fail);  					break;  			}
