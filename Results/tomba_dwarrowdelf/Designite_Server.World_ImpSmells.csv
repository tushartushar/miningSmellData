Implementation smell,Namespace,Class,File,Method,Description
Long Method,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The method has 114 lines of code.
Complex Method,Dwarrowdelf.Server,EnvTreeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,Cyclomatic complexity of the method is 12
Complex Method,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 18
Complex Method,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 19
Complex Method,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 12
Complex Method,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,Cyclomatic complexity of the method is 10
Complex Method,Dwarrowdelf.Server,EnvironmentObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,SetTileData,Cyclomatic complexity of the method is 18
Complex Method,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,Work,Cyclomatic complexity of the method is 10
Complex Method,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,Cyclomatic complexity of the method is 9
Long Parameter List,Dwarrowdelf.Server,ObjectMoveChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ObjectMoveChange,The method has 5 parameters. Parameters: mover' sourceEnv' sourceLocation' destinationEnv' destinationLocation
Long Statement,Dwarrowdelf.Server,MapChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new MapChangeData() { EnvironmentID = this.Environment.ObjectID' Location = this.Location' TileData = this.TileData }; " is 125.
Long Statement,Dwarrowdelf.Server,PropertyValueChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyValueChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 123.
Long Statement,Dwarrowdelf.Server,PropertyIntChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyIntChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 121.
Long Statement,Dwarrowdelf.Server,PropertyStringChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new PropertyStringChangeData() { ObjectID = this.Object.ObjectID' PropertyID = this.PropertyID' Value = this.Value }; " is 124.
Long Statement,Dwarrowdelf.Server,ActionProgressChange,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Changes.cs,ToChangeData,The length of the statement  "			return new ActionProgressChangeData() { ObjectID = this.Object.ObjectID' ActionProgressEvent = this.ActionProgressEvent }; " is 122.
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: r.Next(100) < 80
Magic Number,Dwarrowdelf.Server,EnvTreeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvTreeHandler.cs,OnTick,The following statement contains a magic number: r.Next(100) < 80
Magic Number,Dwarrowdelf.Server,EnvWaterHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvWaterHandler.cs,HandleWaterFlowPlanar,The following statement contains a magic number: flow = (diff + 5) / 6;
Magic Number,Dwarrowdelf.Server,EnvWaterHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvWaterHandler.cs,HandleWaterFlowPlanar,The following statement contains a magic number: flow = (diff + 5) / 6;
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(5' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(3' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,EnvWildlifeHandler,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvWildlifeHandler.cs,Init,The following statement contains a magic number: m_herds.Add(CreateHerd(4' LivingID.Sheep));
Magic Number,Dwarrowdelf.Server,TileGridReaderWriter,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\TileGridReaderWriter.cs,Write,The following statement contains a magic number: int w = grid.GetLength(2);
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: const int exhaustion_per_tick = 10;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = 10;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = 10;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: switch (action.MineActionType)  			{  				case MineActionType.Mine:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						var ds = env.GetPossibleMiningPositioning(p' MineActionType.Mine);    						if (ds.Contains(action.Direction) == false)  						{  							SendFailReport(report' "cannot mine to that direction");  							return ActionState.Fail;  						}    						env.SetTileData(p' TileData.EmptyTileData);    						if (td.ID == TileID.NaturalWall)  						{  							MaterialInfo material = Materials.GetMaterial(td.MaterialID);  							ItemID itemID = ItemID.Undefined;    							switch (material.Category)  							{  								case MaterialCategory.Rock:  									itemID = ItemID.Rock;  									break;    								case MaterialCategory.Mineral:  									itemID = ItemID.Ore;  									break;    								case MaterialCategory.Gem:  									itemID = ItemID.UncutGem;  									break;  								case MaterialCategory.Soil:  									break;    								default:  									throw new Exception();  							}    							if (itemID != ItemID.Undefined)  							{  								if (this.World.Random.Next(21) >= GetSkillLevel(SkillID.Mining) / 25 + 10)  								{  									var builder = new ItemObjectBuilder(itemID' material.ID);  									var item = builder.Create(this.World);  									item.MoveToMustSucceed(this.Environment' p);  								}  							}  						}  					}  					break;    				case MineActionType.Stairs:  					{  						if (!td.IsMinable)  						{  							SendFailReport(report' "not mineable");  							return ActionState.Fail;  						}    						if (!action.Direction.IsPlanarUpDown())  						{  							SendFailReport(report' "not PlanarUpDown direction");  							return ActionState.Fail;  						}    						if (td.ID != TileID.NaturalWall)  						{  							SendFailReport(report' "not natural wall");  							return ActionState.Fail;  						}    						// We can always create stairs down' but for other dirs we need access there  						// XXX ??? When we cannot move in planar dirs?  						if (action.Direction != Direction.Down && !env.CanMoveFrom(this.Location' action.Direction))  						{  							SendFailReport(report' "cannot reach");  							return ActionState.Fail;  						}    						td.ID = TileID.Stairs;  						env.SetTileData(p' td);  					}  					break;    				default:  					throw new Exception();  			}
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = 6;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var roll = this.World.Random.Next(20) + 1;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: str = (int)((20.0 / 100) * str);
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: str = (int)((20.0 / 100) * str);
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var strBonus = (str / 2) - 5;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: var strBonus = (str / 2) - 5;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: dieSides = 3;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = 6;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = 6;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following statement contains a magic number: this.ActionTotalTicks = obs.OfType<LivingObject>().Count() + 2;
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,GetTicks,The following statement contains a magic number: return 20 / (lvl / 26 + 1);
Magic Number,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,GetTicks,The following statement contains a magic number: return 20 / (lvl / 26 + 1);
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: this.HitPoints = li.Level * 10;
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: Str = Dex = Con = Int = Wis = Cha = li.Level * 10;
Magic Number,Dwarrowdelf.Server,LivingObjectBuilder,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\LivingObject.cs,LivingObjectBuilder,The following statement contains a magic number: this.VisionRange = 10;
Magic Number,Dwarrowdelf.Server,EnvironmentObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,CommonInit,The following statement contains a magic number: m_randomXYArray[i] = ((uint)x << 16) | y;
Magic Number,Dwarrowdelf.Server,EnvironmentObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,GetRandomSurfaceLocation,The following statement contains a magic number: int x = (int)(raw >> 16);
Magic Number,Dwarrowdelf.Server,EnvironmentObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Environment\EnvironmentObject.cs,SetTileData,The following statement contains a magic number: Debug.Assert(p.Z >= 0 && p.Z < 256);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,World,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.YearOctant = (this.YearOctant + 1) % 8;
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.Season = (GameSeason)((this.YearOctant + 7) / 2 % 4);
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.YearOctant % 2 == 1
Magic Number,Dwarrowdelf.Server,World,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\World\WorldObjects.cs,StartTick,The following statement contains a magic number: this.TickNumber % (YEAR_LENGTH / 8) == 0
Missing Default,Dwarrowdelf.Server,LivingObject,D:\research\architectureSmells\repos1\tomba_dwarrowdelf\Server\World\Living\Actions\Sleep.cs,ProcessAction,The following switch statement is missing a default case: switch (status)  			{  				case ActionState.Ok:  					HandleActionProgress();  					break;    				case ActionState.Done:  					D("Action Done({0})"' action);  					HandleActionDone(ActionState.Done);  					break;    				case ActionState.Fail:  					D("Action Failed({0})"' action);  					HandleActionDone(ActionState.Fail);  					break;  			}
