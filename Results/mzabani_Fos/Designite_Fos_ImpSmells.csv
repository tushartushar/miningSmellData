Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Fos.Listener,SocketListener,C:\repos\mzabani_Fos\Fos\Listener\SocketListener.cs,Work,Cyclomatic complexity of the method is 9
Long Statement,Fos.Owin,OwinMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\OwinMiddleware.cs,BuildHandler,The length of the statement  "					ctor = MiddlewareType.GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).Where(c => c.GetParameters().Length >= 1 && c.GetParameters().Length - 1 <= Args.Length).OrderByDescending(c => c.GetParameters().Length) " is 245.
Long Statement,Fos.Owin,OwinMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\OwinMiddleware.cs,BuildHandler,The length of the statement  "				var invokeMethod = MiddlewareType.GetMethods(BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public).FirstOrDefault(m => m.Name == "Invoke" && m.ReturnType == typeof(Task)); " is 187.
Long Statement,Fos.Owin,OwinMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\OwinMiddleware.cs,BuildHandler,The length of the statement  "				var typedHandler1 = UntypedHandler as Func<Func<IDictionary<string' object>' Task>' Func<IDictionary<string' object>' Task>>; " is 125.
Long Statement,Fos.Owin,PageNotFoundMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\PageNotFoundMiddleware.cs,Invoke,The length of the statement  "				throw new Exception("There is no next middleware in the pipeline. The PageNotFoundMiddleware can't work without a next middleware to invoke."); " is 143.
Long Statement,Fos.Owin,ExtensionMethods,C:\repos\mzabani_Fos\Fos\Owin\ExtensionMethods.cs,UseStatisticsLogging,The length of the statement  "                throw new ArgumentException("The IAppBuilder must be the Fos's Application Builder implementation. Don't use this extension method with a different Owin Server implementation"); " is 177.
Long Statement,Fos.Owin,ShuntMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\ShuntMiddleware.cs,Invoke,The length of the statement  "                    throw new EntryPointNotFoundException("No match found and no next handler defined"); //TODO: Is this exception appropriate? " is 123.
Long Statement,Fos.Listener,SocketListener,C:\repos\mzabani_Fos\Fos\Listener\SocketListener.cs,Work,The length of the statement  "						// An exception thrown here means an implementer did not catch the application's exception. It is indeed a server error. " is 120.
Long Statement,Fos.Listener,SocketListener,C:\repos\mzabani_Fos\Fos\Listener\SocketListener.cs,Work,The length of the statement  "						Logger.LogServerError(e' "Exception would end the data receiving loop. This is extremely bad. Please file a bug report."); " is 122.
Long Statement,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionEndedNormally,The length of the statement  "                        verbTimes.AverageTime = new TimeSpan((verbTimes.NumRequests * verbTimes.AverageTime.Ticks + requestTime.Ticks) / (verbTimes.NumRequests + 1)); " is 142.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Head,The length of the statement  "            return "<style type=\"text/css\">tr.even_row { background-color: #E3E3E3; } tr.row_data { display: none; } td.see_details { cursor: pointer; }</style>"; " is 152.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "            builder.AppendLine("<table id=\"request_times\"><tr><th>Path</th><th>Method</th><th>Number of requests</th><th></th></tr>"); " is 124.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td>{2}</td><td>{3}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(time.RelativePath)' HtmlEncode(time.HttpMethod)' time.NumRequests); " is 213.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">Minimum time: {0}ms<br />Maximum time: {1}ms<br/>Average time: {2}ms</div></td></tr>\n"' time.MinimumTime.TotalMilliseconds' time.MaximumTime.TotalMilliseconds' time.AverageTime.TotalMilliseconds); " is 295.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                    builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td>{2}</td><td>{3}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(error.RelativePath)' HtmlEncode(error.HttpMethod)' HtmlEncode(error.Error.Message)); " is 230.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                    builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">{0}</div></td></tr>\n"' error.Error.ToString()); " is 146.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                    builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(error.GetType().ToString())); " is 151.
Long Statement,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The length of the statement  "                    builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">{0}</div></td></tr>\n"' HtmlEncode(error.ToString())); " is 152.
Empty Catch Block,Fos.Listener,FosRequest,C:\repos\mzabani_Fos\Fos\Listener\FosRequest.cs,Send,The method has an empty catch block.
Empty Catch Block,Fos.Listener,FosRequest,C:\repos\mzabani_Fos\Fos\Listener\FosRequest.cs,CloseSocket,The method has an empty catch block.
Empty Catch Block,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionReceived,The method has an empty catch block.
Empty Catch Block,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionClosedAbruptly,The method has an empty catch block.
Empty Catch Block,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionEndedNormally,The method has an empty catch block.
Empty Catch Block,Fos.Streams,FosStdoutStream,C:\repos\mzabani_Fos\Fos\Streams\FosStdoutStream.cs,Close,The method has an empty catch block.
Empty Catch Block,Fos.Streams,FosStdoutStream,C:\repos\mzabani_Fos\Fos\Streams\FosStdoutStream.cs,Close,The method has an empty catch block.
Empty Catch Block,Fos.Streams,FosStdoutStream,C:\repos\mzabani_Fos\Fos\Streams\FosStdoutStream.cs,Flush,The method has an empty catch block.
Empty Catch Block,Fos.Streams,FosStdoutStream,C:\repos\mzabani_Fos\Fos\Streams\FosStdoutStream.cs,Flush,The method has an empty catch block.
Empty Catch Block,Fos.Streams,NonEndingStdoutSocketStream,C:\repos\mzabani_Fos\Fos\Streams\NonEndingStdoutSocketStream.cs,Close,The method has an empty catch block.
Empty Catch Block,Fos.Streams,NonEndingStdoutSocketStream,C:\repos\mzabani_Fos\Fos\Streams\NonEndingStdoutSocketStream.cs,Close,The method has an empty catch block.
Empty Catch Block,Fos.Streams,NonEndingStdoutSocketStream,C:\repos\mzabani_Fos\Fos\Streams\NonEndingStdoutSocketStream.cs,Flush,The method has an empty catch block.
Empty Catch Block,Fos.Streams,NonEndingStdoutSocketStream,C:\repos\mzabani_Fos\Fos\Streams\NonEndingStdoutSocketStream.cs,Flush,The method has an empty catch block.
Magic Number,Fos.Owin,PageNotFoundMiddleware,C:\repos\mzabani_Fos\Fos\Middleware\PageNotFoundMiddleware.cs,Invoke,The following statement contains a magic number: return completionTask.ContinueWith(t =>  			{  				var prms = (OwinContext) owinParameters;  				                  int httpStatusCode = prms.ResponseStatusCode;  				  				if (httpStatusCode == 404)  				{  					// Set the headers  					prms.SetResponseHeader("Content-Type"' "text/html");    					// Write our output.. what if the stream has already been written to?  					using (var writer = new StreamWriter(prms.ResponseBody))  					{  						writer.Write(string.Format(PageNotFoundHtmlFormat' prms.CompleteUri));  					}  				}  			});
Magic Number,Fos.Owin,OwinContext,C:\repos\mzabani_Fos\Fos\Owin\OwinContext.cs,SetOwinParametersFromFastCgiNvp,The following statement contains a magic number: if (nvpName == "SERVER_PROTOCOL")                  Set("owin.RequestProtocol"' nameValuePair.Value);              else if (nvpName == "REQUEST_METHOD")                  Set("owin.RequestMethod"' nameValuePair.Value.ToUpperInvariant());              else if (nvpName == "QUERY_STRING")                  Set("owin.RequestQueryString"' nameValuePair.Value);              else if (nvpName == "HTTPS" && nameValuePair.Value == "on")                  Set("owin.RequestScheme"' "https");              else if (nvpName == "DOCUMENT_URI")              {                  Set("owin.RequestPathBase"' string.Empty);                  Set("owin.RequestPath"' nameValuePair.Value);              }  			  			// HTTP_* parameters (these represent the http request header)' such as:  			// HTTP_CONNECTION: keep-alive  			// HTTP_ACCEPT: text/html... etc.  			// HTTP_USER_AGENT: Mozilla/5.0  			// HTTP_ACCEPT_ENCODING  			// HTTP_ACCEPT_LANGUAGE  			// HTTP_COOKIE  			// many others..              else if (nvpName.StartsWith("HTTP_"))              {                  //TODO: Avoid creating strings and create a decent algorithm for this conversion                  // Replace _ by - and pascal case single words to create pretty http headers                  string[] headerNameParts = nameValuePair.Name.Split('_');                  var builder = new System.Text.StringBuilder(nameValuePair.NameLength - 5);                    int i = 1;                  foreach (string part in headerNameParts.Skip(1))                  {                      builder.Append(part[0]);                      builder.Append(part.Substring(1' part.Length - 1).ToLowerInvariant());                        if (i < headerNameParts.Length - 1)                          builder.Append('-');                        ++i;                  }                    SetRequestHeader(builder.ToString()' nameValuePair.Value);              }
Magic Number,Fos.Listener,SocketListener,C:\repos\mzabani_Fos\Fos\Listener\SocketListener.cs,Work,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionEndedNormally,The following statement contains a magic number: try              {      			var now = Now;      			      			TimeSpan requestTime;      			lock (connectionReceivedLock)      			{      				ConcurrentConnectionsNow--;      				      				// Stop the watch      				requestTime = StopConnectionTimer(s);      			}      			      			if (req.ResponseStatusCode != 200 && req.ResponseStatusCode != 301)      				return;      			      			// Look for the times with our method                  // We could do with a global lock here' but that just sounds so bad.                  // Instead' we try to avoid a global lock as much as possible' and count on another method                  // to give us a finer grained lock.                  LinkedList<RequestTimes> timesForEndpoint;                  lock (CreateAndReturnRelativePathLock(req.RelativePath' out timesForEndpoint))                  {                      var verbTimes = timesForEndpoint.FirstOrDefault(t => t.HttpMethod == req.HttpMethod);                      if (verbTimes == null)                      {                          // First request to this endpoint with this method. Add it.                          verbTimes = new RequestTimes(req.HttpMethod' req.RelativePath' requestTime);                          timesForEndpoint.AddLast(verbTimes);                      }                      else                      {                          // Just update the times                          if (verbTimes.MinimumTime > requestTime)                              verbTimes.MinimumTime = requestTime;                          if (verbTimes.MaximumTime < requestTime)                              verbTimes.MaximumTime = requestTime;      				                              verbTimes.AverageTime = new TimeSpan((verbTimes.NumRequests * verbTimes.AverageTime.Ticks + requestTime.Ticks) / (verbTimes.NumRequests + 1));                          verbTimes.NumRequests++;                      }                  }              }              catch              {              }
Magic Number,Fos.Logging,StatsLogger,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsLogger.cs,LogConnectionEndedNormally,The following statement contains a magic number: try              {      			var now = Now;      			      			TimeSpan requestTime;      			lock (connectionReceivedLock)      			{      				ConcurrentConnectionsNow--;      				      				// Stop the watch      				requestTime = StopConnectionTimer(s);      			}      			      			if (req.ResponseStatusCode != 200 && req.ResponseStatusCode != 301)      				return;      			      			// Look for the times with our method                  // We could do with a global lock here' but that just sounds so bad.                  // Instead' we try to avoid a global lock as much as possible' and count on another method                  // to give us a finer grained lock.                  LinkedList<RequestTimes> timesForEndpoint;                  lock (CreateAndReturnRelativePathLock(req.RelativePath' out timesForEndpoint))                  {                      var verbTimes = timesForEndpoint.FirstOrDefault(t => t.HttpMethod == req.HttpMethod);                      if (verbTimes == null)                      {                          // First request to this endpoint with this method. Add it.                          verbTimes = new RequestTimes(req.HttpMethod' req.RelativePath' requestTime);                          timesForEndpoint.AddLast(verbTimes);                      }                      else                      {                          // Just update the times                          if (verbTimes.MinimumTime > requestTime)                              verbTimes.MinimumTime = requestTime;                          if (verbTimes.MaximumTime < requestTime)                              verbTimes.MaximumTime = requestTime;      				                              verbTimes.AverageTime = new TimeSpan((verbTimes.NumRequests * verbTimes.AverageTime.Ticks + requestTime.Ticks) / (verbTimes.NumRequests + 1));                          verbTimes.NumRequests++;                      }                  }              }              catch              {              }
Magic Number,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The following statement contains a magic number: foreach (var time in Logger.GetAllRequestTimes())              {                  string row_class = (i % 2 == 0) ? "even_row" : "odd_row";                  builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td>{2}</td><td>{3}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(time.RelativePath)' HtmlEncode(time.HttpMethod)' time.NumRequests);                    // Now the line with more data                  builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">Minimum time: {0}ms<br />Maximum time: {1}ms<br/>Average time: {2}ms</div></td></tr>\n"' time.MinimumTime.TotalMilliseconds' time.MaximumTime.TotalMilliseconds' time.AverageTime.TotalMilliseconds);                                    i++;              }
Magic Number,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The following statement contains a magic number: if (!applicationErrors.Any())              {                  builder.AppendLine("<p>No application errors<p>");              }              else              {                  builder.AppendLine("<table id=\"application_errors\"><tr><th>Path</th><th>Method</th><th>Error</th><th></th></tr>");                  i = 0;                  foreach (var error in applicationErrors)                  {                      string row_class = (i % 2 == 0) ? "even_row" : "odd_row";                      builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td>{2}</td><td>{3}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(error.RelativePath)' HtmlEncode(error.HttpMethod)' HtmlEncode(error.Error.Message));                                            // Now the line with more data                      builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">{0}</div></td></tr>\n"' error.Error.ToString());                                            i++;                  }                  builder.Append("</table>\n");              }
Magic Number,Fos.Logging,StatsPageMiddleware,C:\repos\mzabani_Fos\Fos\Logging\StatsLogging\StatsPageMiddleware.cs,Body,The following statement contains a magic number: if (!serverErrors.Any())              {                  builder.AppendLine("<p>No server errors</p>");              }              else              {                  builder.AppendLine("<table id=\"server_errors\"><tr><th>Type</th><th></th></tr>");                  i = 0;                  foreach (var error in serverErrors)                  {                      string row_class = (i % 2 == 0) ? "even_row" : "odd_row";                      builder.AppendFormat("<tr class=\"{0}\"><td>{1}</td><td class=\"see_details\">details</td></tr>\n"' row_class' HtmlEncode(error.GetType().ToString()));                                            // Now the line with more data                      builder.AppendFormat("<tr class=\"row_data\"><td colspan=\"4\"><div style=\"padding-left: 10px;\">{0}</div></td></tr>\n"' HtmlEncode(error.ToString()));                                            i++;                  }                  builder.Append("</table>\n");              }
Missing Default,Fos.Listener,FosRequest,C:\repos\mzabani_Fos\Fos\Listener\FosRequest.cs,AddReceivedRecord,The following switch statement is missing a default case: switch (rec.RecordType)              {                  case RecordType.FCGIParams:                      if (Params.IsComplete)                          OwinContext.AddParams(Params);                      break;                    case RecordType.FCGIStdin:                      // Only respond if the last empty stdin was received                      if (!Stdin.IsComplete)                          break;                        var onApplicationDone = ProcessRequest();                      onApplicationDone.ContinueWith(t => {                          // This task _CANNOT_ fail                          if (ApplicationMustCloseConnection)                          {                              this.Dispose();                          }                      });                      break;              }
